
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00023c18  900002a0  900002a0  000202a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000031cc  90023eb8  90023eb8  00043eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001b8  90027084  90027084  00047084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  9002723c  9002723c  000a1d98  2**0
                  CONTENTS
  6 .ARM          00000000  9002723c  9002723c  000a1d98  2**0
                  CONTENTS
  7 .preinit_array 00000000  9002723c  9002723c  000a1d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   0000001c  9002723c  9002723c  0004723c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  90027258  90027258  00047258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000148  24000000  90027260  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  24000148  900273a8  00050148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000209c8  24005b48  9002cda8  00055b48  2**3
                  ALLOC
 13 ._user_heap_stack 00002000  24026510  9002cda8  00056510  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000a1d98  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00002164  90200000  90200000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000034  90202164  90202164  00062164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 0003fc00  90202198  90202198  00062198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  000b0000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  000b0000  2**2
                  ALLOC
 20 .debug_line   00075726  00000000  00000000  000a1dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_info   000cdeb4  00000000  00000000  001174ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00015a2b  00000000  00000000  001e53a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 000031b8  00000000  00000000  001fadd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001af2d6  00000000  00000000  001fdf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 0000b220  00000000  00000000  003ad260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macro  0004b38f  00000000  00000000  003b8480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      000000cf  00000000  00000000  0040380f  2**0
                  CONTENTS, READONLY
 28 .debug_frame  0000a874  00000000  00000000  004038e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_loc    00057811  00000000  00000000  0040e154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005b48 	.word	0x24005b48
900002bc:	00000000 	.word	0x00000000
900002c0:	90023ea0 	.word	0x90023ea0

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005b4c 	.word	0x24005b4c
900002dc:	90023ea0 	.word	0x90023ea0

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90000380:	f8df d034 	ldr.w	sp, [pc, #52]	; 900003b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90000384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90000386:	e003      	b.n	90000390 <LoopCopyDataInit>

90000388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90000388:	4b0c      	ldr	r3, [pc, #48]	; (900003bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
9000038a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
9000038c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
9000038e:	3104      	adds	r1, #4

90000390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90000390:	480b      	ldr	r0, [pc, #44]	; (900003c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
90000392:	4b0c      	ldr	r3, [pc, #48]	; (900003c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
90000394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
90000396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
90000398:	d3f6      	bcc.n	90000388 <CopyDataInit>
  ldr  r2, =_sbss
9000039a:	4a0b      	ldr	r2, [pc, #44]	; (900003c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
9000039c:	e002      	b.n	900003a4 <LoopFillZerobss>

9000039e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
9000039e:	2300      	movs	r3, #0
  str  r3, [r2], #4
900003a0:	f842 3b04 	str.w	r3, [r2], #4

900003a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900003a4:	4b09      	ldr	r3, [pc, #36]	; (900003cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
900003a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
900003a8:	d3f9      	bcc.n	9000039e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900003aa:	f006 fbaf 	bl	90006b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900003ae:	f022 fcfd 	bl	90022dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003b2:	f003 fd8d 	bl	90003ed0 <main>
  bx  lr    
900003b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003b8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900003bc:	90027260 	.word	0x90027260
  ldr  r0, =_sdata
900003c0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900003c4:	24000148 	.word	0x24000148
  ldr  r2, =_sbss
900003c8:	24005b48 	.word	0x24005b48
  ldr  r3, = _ebss
900003cc:	24026510 	.word	0x24026510

900003d0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003d0:	e7fe      	b.n	900003d0 <ADC3_IRQHandler>
	...

900003d4 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900003d4:	4770      	bx	lr
900003d6:	bf00      	nop

900003d8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
900003d8:	4770      	bx	lr
900003da:	bf00      	nop

900003dc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900003dc:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900003de:	f001 fef3 	bl	900021c8 <touchgfx_components_init>
  touchgfx_init();
}
900003e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
900003e6:	f001 be77 	b.w	900020d8 <touchgfx_init>
900003ea:	bf00      	nop

900003ec <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
900003ec:	f001 beee 	b.w	900021cc <touchgfx_taskEntry>

900003f0 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
900003f0:	6840      	ldr	r0, [r0, #4]
    }
900003f2:	4770      	bx	lr

900003f4 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
900003f4:	6041      	str	r1, [r0, #4]
    }
900003f6:	4770      	bx	lr

900003f8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
900003f8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
900003fc:	4b08      	ldr	r3, [pc, #32]	; (90000420 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
900003fe:	4a09      	ldr	r2, [pc, #36]	; (90000424 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000400:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
90000404:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
90000408:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000040c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
90000410:	430a      	orrs	r2, r1
90000412:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
90000416:	681a      	ldr	r2, [r3, #0]
90000418:	f042 0201 	orr.w	r2, r2, #1
9000041c:	601a      	str	r2, [r3, #0]
}
9000041e:	4770      	bx	lr
90000420:	e0001000 	.word	0xe0001000
90000424:	c5acce55 	.word	0xc5acce55

90000428 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90000428:	1a51      	subs	r1, r2, r1
9000042a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
9000042e:	fbb1 f0f3 	udiv	r0, r1, r3
90000432:	4770      	bx	lr

90000434 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
90000434:	4b01      	ldr	r3, [pc, #4]	; (9000043c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
90000436:	6858      	ldr	r0, [r3, #4]
}
90000438:	4770      	bx	lr
9000043a:	bf00      	nop
9000043c:	e0001000 	.word	0xe0001000

90000440 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90000440:	4770      	bx	lr
90000442:	bf00      	nop

90000444 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
90000444:	b510      	push	{r4, lr}
90000446:	4604      	mov	r4, r0
90000448:	210c      	movs	r1, #12
9000044a:	f022 fc36 	bl	90022cba <_ZdlPvj>
9000044e:	4620      	mov	r0, r4
90000450:	bd10      	pop	{r4, pc}
90000452:	bf00      	nop

90000454 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000454:	6803      	ldr	r3, [r0, #0]
90000456:	4a0c      	ldr	r2, [pc, #48]	; (90000488 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90000458:	691b      	ldr	r3, [r3, #16]
{
9000045a:	b510      	push	{r4, lr}
9000045c:	4604      	mov	r4, r0
    if (active) //idle task sched out
9000045e:	b149      	cbz	r1, 90000474 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000460:	4293      	cmp	r3, r2
90000462:	d10d      	bne.n	90000480 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
90000464:	4b09      	ldr	r3, [pc, #36]	; (9000048c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90000466:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000468:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
9000046a:	6863      	ldr	r3, [r4, #4]
9000046c:	1a9b      	subs	r3, r3, r2
9000046e:	4418      	add	r0, r3
90000470:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
90000472:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
90000474:	4293      	cmp	r3, r2
90000476:	d105      	bne.n	90000484 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90000478:	4b04      	ldr	r3, [pc, #16]	; (9000048c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
9000047a:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
9000047c:	60a0      	str	r0, [r4, #8]
}
9000047e:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000480:	4798      	blx	r3
90000482:	e7f1      	b.n	90000468 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
90000484:	4798      	blx	r3
90000486:	e7f9      	b.n	9000047c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
90000488:	90000435 	.word	0x90000435
9000048c:	e0001000 	.word	0xe0001000

90000490 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
90000490:	4770      	bx	lr
90000492:	bf00      	nop
90000494:	0000      	movs	r0, r0
	...

90000498 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
90000498:	b500      	push	{lr}
9000049a:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
9000049c:	2208      	movs	r2, #8
9000049e:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
900004a0:	2000      	movs	r0, #0
900004a2:	4669      	mov	r1, sp
    hTS.Width = 480;
900004a4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 900004c0 <_ZN20STM32TouchController4initEv+0x28>
900004a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
900004ac:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900004b0:	f006 fa3c 	bl	9000692c <BSP_TS_Init>
}
900004b4:	b005      	add	sp, #20
900004b6:	f85d fb04 	ldr.w	pc, [sp], #4
900004ba:	bf00      	nop
900004bc:	f3af 8000 	nop.w
900004c0:	000001e0 	.word	0x000001e0
900004c4:	00000110 	.word	0x00000110

900004c8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900004c8:	b530      	push	{r4, r5, lr}
900004ca:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900004cc:	2000      	movs	r0, #0
{
900004ce:	460d      	mov	r5, r1
900004d0:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900004d2:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900004d4:	9001      	str	r0, [sp, #4]
900004d6:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900004da:	f006 fab5 	bl	90006a48 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900004de:	9801      	ldr	r0, [sp, #4]
900004e0:	b120      	cbz	r0, 900004ec <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
900004e2:	2001      	movs	r0, #1
        y = TS_State.TouchY;
900004e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
900004e8:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
900004ea:	6023      	str	r3, [r4, #0]
    }

    return false;
}
900004ec:	b005      	add	sp, #20
900004ee:	bd30      	pop	{r4, r5, pc}

900004f0 <_ZN20STM32TouchControllerD0Ev>:
900004f0:	b510      	push	{r4, lr}
900004f2:	4604      	mov	r4, r0
900004f4:	2104      	movs	r1, #4
900004f6:	f022 fbe0 	bl	90022cba <_ZdlPvj>
900004fa:	4620      	mov	r0, r4
900004fc:	bd10      	pop	{r4, pc}
900004fe:	bf00      	nop

90000500 <_ZN8touchgfx4GPIO4initEv>:
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000500:	2108      	movs	r1, #8
90000502:	4810      	ldr	r0, [pc, #64]	; (90000544 <_ZN8touchgfx4GPIO4initEv+0x44>)
{
90000504:	b508      	push	{r3, lr}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000506:	f007 feb1 	bl	9000826c <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000050a:	2801      	cmp	r0, #1
9000050c:	d101      	bne.n	90000512 <_ZN8touchgfx4GPIO4initEv+0x12>
            GPIO_InvertedLevels[id] = 1;
9000050e:	4b0e      	ldr	r3, [pc, #56]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000510:	6018      	str	r0, [r3, #0]
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000512:	2180      	movs	r1, #128	; 0x80
90000514:	480d      	ldr	r0, [pc, #52]	; (9000054c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000516:	f007 fea9 	bl	9000826c <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000051a:	2801      	cmp	r0, #1
9000051c:	d101      	bne.n	90000522 <_ZN8touchgfx4GPIO4initEv+0x22>
            GPIO_InvertedLevels[id] = 1;
9000051e:	4b0a      	ldr	r3, [pc, #40]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000520:	6058      	str	r0, [r3, #4]
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000522:	2140      	movs	r1, #64	; 0x40
90000524:	4809      	ldr	r0, [pc, #36]	; (9000054c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000526:	f007 fea1 	bl	9000826c <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000052a:	2801      	cmp	r0, #1
9000052c:	d101      	bne.n	90000532 <_ZN8touchgfx4GPIO4initEv+0x32>
            GPIO_InvertedLevels[id] = 1;
9000052e:	4b06      	ldr	r3, [pc, #24]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000530:	6098      	str	r0, [r3, #8]
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000532:	2140      	movs	r1, #64	; 0x40
90000534:	4806      	ldr	r0, [pc, #24]	; (90000550 <_ZN8touchgfx4GPIO4initEv+0x50>)
90000536:	f007 fe99 	bl	9000826c <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000053a:	2801      	cmp	r0, #1
9000053c:	d101      	bne.n	90000542 <_ZN8touchgfx4GPIO4initEv+0x42>
            GPIO_InvertedLevels[id] = 1;
9000053e:	4b02      	ldr	r3, [pc, #8]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000540:	60d8      	str	r0, [r3, #12]
}
90000542:	bd08      	pop	{r3, pc}
90000544:	58021800 	.word	0x58021800
90000548:	24005b64 	.word	0x24005b64
9000054c:	58020400 	.word	0x58020400
90000550:	58020000 	.word	0x58020000

90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
90000554:	2803      	cmp	r0, #3
90000556:	d827      	bhi.n	900005a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>
90000558:	e8df f000 	tbb	[pc, r0]
9000055c:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
90000560:	4b12      	ldr	r3, [pc, #72]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000562:	2140      	movs	r1, #64	; 0x40
90000564:	4812      	ldr	r0, [pc, #72]	; (900005b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
90000566:	68da      	ldr	r2, [r3, #12]
90000568:	fab2 f282 	clz	r2, r2
9000056c:	0952      	lsrs	r2, r2, #5
9000056e:	f007 be83 	b.w	90008278 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
90000572:	4b0e      	ldr	r3, [pc, #56]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000574:	2140      	movs	r1, #64	; 0x40
90000576:	480f      	ldr	r0, [pc, #60]	; (900005b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90000578:	689a      	ldr	r2, [r3, #8]
9000057a:	fab2 f282 	clz	r2, r2
9000057e:	0952      	lsrs	r2, r2, #5
90000580:	f007 be7a 	b.w	90008278 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
90000584:	4b09      	ldr	r3, [pc, #36]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000586:	2180      	movs	r1, #128	; 0x80
90000588:	480a      	ldr	r0, [pc, #40]	; (900005b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
9000058a:	685a      	ldr	r2, [r3, #4]
9000058c:	fab2 f282 	clz	r2, r2
90000590:	0952      	lsrs	r2, r2, #5
90000592:	f007 be71 	b.w	90008278 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
90000596:	4b05      	ldr	r3, [pc, #20]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000598:	2108      	movs	r1, #8
9000059a:	4807      	ldr	r0, [pc, #28]	; (900005b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
9000059c:	681a      	ldr	r2, [r3, #0]
9000059e:	fab2 f282 	clz	r2, r2
900005a2:	0952      	lsrs	r2, r2, #5
900005a4:	f007 be68 	b.w	90008278 <HAL_GPIO_WritePin>
}
900005a8:	4770      	bx	lr
900005aa:	bf00      	nop
900005ac:	24005b64 	.word	0x24005b64
900005b0:	58020000 	.word	0x58020000
900005b4:	58020400 	.word	0x58020400
900005b8:	58021800 	.word	0x58021800

900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900005bc:	2803      	cmp	r0, #3
900005be:	d827      	bhi.n	90000610 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
900005c0:	e8df f000 	tbb	[pc, r0]
900005c4:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900005c8:	4b12      	ldr	r3, [pc, #72]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ca:	2140      	movs	r1, #64	; 0x40
900005cc:	4812      	ldr	r0, [pc, #72]	; (90000618 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
900005ce:	68da      	ldr	r2, [r3, #12]
900005d0:	3a00      	subs	r2, #0
900005d2:	bf18      	it	ne
900005d4:	2201      	movne	r2, #1
900005d6:	f007 be4f 	b.w	90008278 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900005da:	4b0e      	ldr	r3, [pc, #56]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005dc:	2140      	movs	r1, #64	; 0x40
900005de:	480f      	ldr	r0, [pc, #60]	; (9000061c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900005e0:	689a      	ldr	r2, [r3, #8]
900005e2:	3a00      	subs	r2, #0
900005e4:	bf18      	it	ne
900005e6:	2201      	movne	r2, #1
900005e8:	f007 be46 	b.w	90008278 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
900005ec:	4b09      	ldr	r3, [pc, #36]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ee:	2180      	movs	r1, #128	; 0x80
900005f0:	480a      	ldr	r0, [pc, #40]	; (9000061c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900005f2:	685a      	ldr	r2, [r3, #4]
900005f4:	3a00      	subs	r2, #0
900005f6:	bf18      	it	ne
900005f8:	2201      	movne	r2, #1
900005fa:	f007 be3d 	b.w	90008278 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
900005fe:	4b05      	ldr	r3, [pc, #20]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90000600:	2108      	movs	r1, #8
90000602:	4807      	ldr	r0, [pc, #28]	; (90000620 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
90000604:	681a      	ldr	r2, [r3, #0]
90000606:	3a00      	subs	r2, #0
90000608:	bf18      	it	ne
9000060a:	2201      	movne	r2, #1
9000060c:	f007 be34 	b.w	90008278 <HAL_GPIO_WritePin>
}
90000610:	4770      	bx	lr
90000612:	bf00      	nop
90000614:	24005b64 	.word	0x24005b64
90000618:	58020000 	.word	0x58020000
9000061c:	58020400 	.word	0x58020400
90000620:	58021800 	.word	0x58021800

90000624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
90000624:	2803      	cmp	r0, #3
90000626:	d813      	bhi.n	90000650 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>
90000628:	e8df f000 	tbb	[pc, r0]
9000062c:	02060a0e 	.word	0x02060a0e
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000630:	2140      	movs	r1, #64	; 0x40
90000632:	4808      	ldr	r0, [pc, #32]	; (90000654 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
90000634:	f007 be24 	b.w	90008280 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000638:	2140      	movs	r1, #64	; 0x40
9000063a:	4807      	ldr	r0, [pc, #28]	; (90000658 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
9000063c:	f007 be20 	b.w	90008280 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000640:	2180      	movs	r1, #128	; 0x80
90000642:	4805      	ldr	r0, [pc, #20]	; (90000658 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
90000644:	f007 be1c 	b.w	90008280 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000648:	2108      	movs	r1, #8
9000064a:	4804      	ldr	r0, [pc, #16]	; (9000065c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x38>)
9000064c:	f007 be18 	b.w	90008280 <HAL_GPIO_TogglePin>
}
90000650:	4770      	bx	lr
90000652:	bf00      	nop
90000654:	58020000 	.word	0x58020000
90000658:	58020400 	.word	0x58020400
9000065c:	58021800 	.word	0x58021800

90000660 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90000660:	2000      	movs	r0, #0
90000662:	4770      	bx	lr

90000664 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
90000664:	2301      	movs	r3, #1
        requestedOrientation = orientation;
90000666:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
9000066a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
9000066e:	4770      	bx	lr

90000670 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90000670:	2000      	movs	r0, #0
90000672:	4770      	bx	lr

90000674 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000674:	1e0a      	subs	r2, r1, #0
90000676:	4b03      	ldr	r3, [pc, #12]	; (90000684 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000678:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000067a:	bf18      	it	ne
9000067c:	2201      	movne	r2, #1
9000067e:	701a      	strb	r2, [r3, #0]
    }
90000680:	4770      	bx	lr
90000682:	bf00      	nop
90000684:	2402626b 	.word	0x2402626b

90000688 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
90000688:	2000      	movs	r0, #0
9000068a:	4770      	bx	lr

9000068c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
9000068c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    virtual void taskDelay(uint16_t ms)
9000068e:	4608      	mov	r0, r1
        if (taskDelayFunc)
90000690:	b103      	cbz	r3, 90000694 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
90000692:	4718      	bx	r3
        }
    }
90000694:	4770      	bx	lr
90000696:	bf00      	nop

90000698 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
90000698:	f64f 70ff 	movw	r0, #65535	; 0xffff
9000069c:	4770      	bx	lr
9000069e:	bf00      	nop

900006a0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900006a0:	4770      	bx	lr
900006a2:	bf00      	nop

900006a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
900006a4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006a6:	4b09      	ldr	r3, [pc, #36]	; (900006cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
900006a8:	881b      	ldrh	r3, [r3, #0]
900006aa:	428b      	cmp	r3, r1
900006ac:	d808      	bhi.n	900006c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
900006ae:	4b08      	ldr	r3, [pc, #32]	; (900006d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
900006b0:	881b      	ldrh	r3, [r3, #0]
900006b2:	4293      	cmp	r3, r2
900006b4:	d804      	bhi.n	900006c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
900006b6:	4807      	ldr	r0, [pc, #28]	; (900006d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
900006b8:	4b07      	ldr	r3, [pc, #28]	; (900006d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
900006ba:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
900006bc:	801a      	strh	r2, [r3, #0]
    }
900006be:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006c0:	4b06      	ldr	r3, [pc, #24]	; (900006dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
900006c2:	219e      	movs	r1, #158	; 0x9e
900006c4:	4a06      	ldr	r2, [pc, #24]	; (900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
900006c6:	4807      	ldr	r0, [pc, #28]	; (900006e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
900006c8:	f022 fb26 	bl	90022d18 <__assert_func>
900006cc:	24026260 	.word	0x24026260
900006d0:	24026262 	.word	0x24026262
900006d4:	24026266 	.word	0x24026266
900006d8:	24026268 	.word	0x24026268
900006dc:	90023f38 	.word	0x90023f38
900006e0:	90023f9c 	.word	0x90023f9c
900006e4:	90023fe0 	.word	0x90023fe0

900006e8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
900006e8:	b510      	push	{r4, lr}
900006ea:	4604      	mov	r4, r0
        swapFrameBuffers();
900006ec:	f011 fc96 	bl	9001201c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900006f0:	6823      	ldr	r3, [r4, #0]
900006f2:	4620      	mov	r0, r4
900006f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
900006f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
900006fc:	4718      	bx	r3
900006fe:	bf00      	nop

90000700 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
90000700:	f001 be3e 	b.w	90002380 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

90000704 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
90000704:	f001 be42 	b.w	9000238c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

90000708 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
90000708:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
9000070a:	f001 ff01 	bl	90002510 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000070e:	4812      	ldr	r0, [pc, #72]	; (90000758 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
90000710:	2300      	movs	r3, #0
90000712:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000716:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
9000071a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000071e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000722:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000726:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000072a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000072e:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000732:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000734:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000738:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000073a:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
9000073e:	1c5a      	adds	r2, r3, #1
90000740:	d1f8      	bne.n	90000734 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
90000742:	f1ac 0c20 	sub.w	ip, ip, #32
90000746:	f11c 0f20 	cmn.w	ip, #32
9000074a:	d1f0      	bne.n	9000072e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
9000074c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000750:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
90000754:	bd10      	pop	{r4, pc}
90000756:	bf00      	nop
90000758:	e000ed00 	.word	0xe000ed00

9000075c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
9000075c:	f001 bdec 	b.w	90002338 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90000760 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90000760:	f001 bffc 	b.w	9000275c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

90000764 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
90000764:	f001 bfe6 	b.w	90002734 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90000768 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90000768:	f001 bdf0 	b.w	9000234c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

9000076c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
9000076c:	f010 beae 	b.w	900114cc <_ZN8touchgfx3HAL16flushFrameBufferEv>

90000770 <_ZN11TouchGFXHALD0Ev>:
90000770:	b510      	push	{r4, lr}
90000772:	4604      	mov	r4, r0
90000774:	2188      	movs	r1, #136	; 0x88
90000776:	f022 faa0 	bl	90022cba <_ZdlPvj>
9000077a:	4620      	mov	r0, r4
9000077c:	bd10      	pop	{r4, pc}
9000077e:	bf00      	nop

90000780 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
90000780:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
90000784:	b11b      	cbz	r3, 9000078e <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
90000786:	6840      	ldr	r0, [r0, #4]
90000788:	6803      	ldr	r3, [r0, #0]
9000078a:	681b      	ldr	r3, [r3, #0]
9000078c:	4718      	bx	r3
    }
9000078e:	4618      	mov	r0, r3
90000790:	4770      	bx	lr
90000792:	bf00      	nop

90000794 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
90000794:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
90000798:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
9000079c:	429a      	cmp	r2, r3
        {
            if (DISPLAY_ROTATION == rotate0)
9000079e:	4b0b      	ldr	r3, [pc, #44]	; (900007cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
900007a0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
900007a2:	d00b      	beq.n	900007bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
900007a4:	b94a      	cbnz	r2, 900007ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
900007a6:	4a0a      	ldr	r2, [pc, #40]	; (900007d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
900007a8:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007ac:	4909      	ldr	r1, [pc, #36]	; (900007d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
900007ae:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
900007b0:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007b4:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
900007b6:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007b8:	8013      	strh	r3, [r2, #0]
        }
    }
900007ba:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
900007bc:	2a00      	cmp	r2, #0
900007be:	d0fc      	beq.n	900007ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
900007c0:	4a03      	ldr	r2, [pc, #12]	; (900007d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
900007c2:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007c6:	4903      	ldr	r1, [pc, #12]	; (900007d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
900007c8:	e7f1      	b.n	900007ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
900007ca:	bf00      	nop
900007cc:	24026264 	.word	0x24026264
900007d0:	24026262 	.word	0x24026262
900007d4:	24026260 	.word	0x24026260

900007d8 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
900007d8:	6840      	ldr	r0, [r0, #4]
900007da:	4a04      	ldr	r2, [pc, #16]	; (900007ec <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
900007dc:	6803      	ldr	r3, [r0, #0]
900007de:	699b      	ldr	r3, [r3, #24]
900007e0:	4293      	cmp	r3, r2
900007e2:	d101      	bne.n	900007e8 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
900007e4:	2000      	movs	r0, #0
900007e6:	4770      	bx	lr
        return dma.getDMAType();
900007e8:	4718      	bx	r3
900007ea:	bf00      	nop
900007ec:	90000661 	.word	0x90000661

900007f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900007f0:	b1a9      	cbz	r1, 9000081e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
900007f2:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900007f4:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
900007f6:	63c1      	str	r1, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900007f8:	bf18      	it	ne
900007fa:	2201      	movne	r2, #1
900007fc:	490c      	ldr	r1, [pc, #48]	; (90000830 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
900007fe:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90000800:	6802      	ldr	r2, [r0, #0]
90000802:	490c      	ldr	r1, [pc, #48]	; (90000834 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
90000804:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
90000808:	428a      	cmp	r2, r1
9000080a:	d106      	bne.n	9000081a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000080c:	1e19      	subs	r1, r3, #0
9000080e:	4a0a      	ldr	r2, [pc, #40]	; (90000838 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000810:	6443      	str	r3, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000812:	bf18      	it	ne
90000814:	2101      	movne	r1, #1
90000816:	7011      	strb	r1, [r2, #0]
90000818:	4770      	bx	lr
        setAnimationStorage(animationStorage);
9000081a:	4619      	mov	r1, r3
9000081c:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000081e:	4b07      	ldr	r3, [pc, #28]	; (9000083c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90000820:	f240 21d2 	movw	r1, #722	; 0x2d2
90000824:	4a06      	ldr	r2, [pc, #24]	; (90000840 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
90000826:	4807      	ldr	r0, [pc, #28]	; (90000844 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90000828:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000082a:	f022 fa75 	bl	90022d18 <__assert_func>
9000082e:	bf00      	nop
90000830:	2402626a 	.word	0x2402626a
90000834:	90000675 	.word	0x90000675
90000838:	2402626b 	.word	0x2402626b
9000083c:	90024028 	.word	0x90024028
90000840:	90024060 	.word	0x90024060
90000844:	90023fe0 	.word	0x90023fe0

90000848 <_ZN11TouchGFXHAL9taskEntryEv>:
{
90000848:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
9000084a:	6803      	ldr	r3, [r0, #0]
{
9000084c:	4604      	mov	r4, r0
9000084e:	4d17      	ldr	r5, [pc, #92]	; (900008ac <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90000850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000854:	4798      	blx	r3
    enableInterrupts();
90000856:	6823      	ldr	r3, [r4, #0]
90000858:	4620      	mov	r0, r4
9000085a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000085c:	4798      	blx	r3
    OSWrappers::waitForVSync();
9000085e:	f001 f8c7 	bl	900019f0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90000862:	6823      	ldr	r3, [r4, #0]
90000864:	4620      	mov	r0, r4
90000866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000868:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
9000086a:	2201      	movs	r2, #1
9000086c:	2104      	movs	r1, #4
9000086e:	4810      	ldr	r0, [pc, #64]	; (900008b0 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90000870:	f007 fd02 	bl	90008278 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
90000874:	2201      	movs	r2, #1
90000876:	2180      	movs	r1, #128	; 0x80
90000878:	480e      	ldr	r0, [pc, #56]	; (900008b4 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
9000087a:	f007 fcfd 	bl	90008278 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
9000087e:	2201      	movs	r2, #1
90000880:	480d      	ldr	r0, [pc, #52]	; (900008b8 <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
90000882:	4611      	mov	r1, r2
90000884:	f007 fcf8 	bl	90008278 <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
90000888:	f001 f8b2 	bl	900019f0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
9000088c:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
9000088e:	4620      	mov	r0, r4
90000890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000892:	42ab      	cmp	r3, r5
90000894:	d107      	bne.n	900008a6 <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
90000896:	f011 fbc1 	bl	9001201c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
9000089a:	6823      	ldr	r3, [r4, #0]
9000089c:	4620      	mov	r0, r4
9000089e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900008a2:	4798      	blx	r3
    }
900008a4:	e7f0      	b.n	90000888 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008a6:	4798      	blx	r3
900008a8:	e7ee      	b.n	90000888 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008aa:	bf00      	nop
900008ac:	900006e9 	.word	0x900006e9
900008b0:	58020000 	.word	0x58020000
900008b4:	58020c00 	.word	0x58020c00
900008b8:	58022800 	.word	0x58022800

900008bc <_ZN11TouchGFXHAL10initializeEv>:
{
900008bc:	b538      	push	{r3, r4, r5, lr}
900008be:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
900008c0:	f001 ff56 	bl	90002770 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
900008c4:	4817      	ldr	r0, [pc, #92]	; (90000924 <_ZN11TouchGFXHAL10initializeEv+0x68>)
900008c6:	6823      	ldr	r3, [r4, #0]
900008c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
900008ca:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
900008ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
900008d0:	4285      	cmp	r5, r0
900008d2:	d119      	bne.n	90000908 <_ZN11TouchGFXHAL10initializeEv+0x4c>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900008d4:	b1f9      	cbz	r1, 90000916 <_ZN11TouchGFXHAL10initializeEv+0x5a>
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008d6:	3a00      	subs	r2, #0
900008d8:	4913      	ldr	r1, [pc, #76]	; (90000928 <_ZN11TouchGFXHAL10initializeEv+0x6c>)
        setAnimationStorage(animationStorage);
900008da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008de:	bf18      	it	ne
900008e0:	2201      	movne	r2, #1
900008e2:	4812      	ldr	r0, [pc, #72]	; (9000092c <_ZN11TouchGFXHAL10initializeEv+0x70>)
900008e4:	428b      	cmp	r3, r1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900008e6:	4912      	ldr	r1, [pc, #72]	; (90000930 <_ZN11TouchGFXHAL10initializeEv+0x74>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008e8:	7002      	strb	r2, [r0, #0]
        setAnimationStorage(animationStorage);
900008ea:	d111      	bne.n	90000910 <_ZN11TouchGFXHAL10initializeEv+0x54>
        USE_ANIMATION_STORAGE = animationStorage != 0;
900008ec:	4b11      	ldr	r3, [pc, #68]	; (90000934 <_ZN11TouchGFXHAL10initializeEv+0x78>)
900008ee:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900008f0:	6461      	str	r1, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
900008f2:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
900008f4:	f104 057c 	add.w	r5, r4, #124	; 0x7c
900008f8:	4628      	mov	r0, r5
900008fa:	f7ff fd7d 	bl	900003f8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
900008fe:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90000900:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
90000902:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
90000906:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90000908:	4b09      	ldr	r3, [pc, #36]	; (90000930 <_ZN11TouchGFXHAL10initializeEv+0x74>)
9000090a:	4620      	mov	r0, r4
9000090c:	47a8      	blx	r5
9000090e:	e7f1      	b.n	900008f4 <_ZN11TouchGFXHAL10initializeEv+0x38>
        setAnimationStorage(animationStorage);
90000910:	4620      	mov	r0, r4
90000912:	4798      	blx	r3
90000914:	e7ee      	b.n	900008f4 <_ZN11TouchGFXHAL10initializeEv+0x38>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000916:	4b08      	ldr	r3, [pc, #32]	; (90000938 <_ZN11TouchGFXHAL10initializeEv+0x7c>)
90000918:	f240 21d2 	movw	r1, #722	; 0x2d2
9000091c:	4a07      	ldr	r2, [pc, #28]	; (9000093c <_ZN11TouchGFXHAL10initializeEv+0x80>)
9000091e:	4808      	ldr	r0, [pc, #32]	; (90000940 <_ZN11TouchGFXHAL10initializeEv+0x84>)
90000920:	f022 f9fa 	bl	90022d18 <__assert_func>
90000924:	900007f1 	.word	0x900007f1
90000928:	90000675 	.word	0x90000675
9000092c:	2402626a 	.word	0x2402626a
90000930:	d0000000 	.word	0xd0000000
90000934:	2402626b 	.word	0x2402626b
90000938:	90024028 	.word	0x90024028
9000093c:	90024060 	.word	0x90024060
90000940:	90023fe0 	.word	0x90023fe0

90000944 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
90000944:	b508      	push	{r3, lr}
        return instance;
90000946:	4b07      	ldr	r3, [pc, #28]	; (90000964 <IdleTaskHook+0x20>)
        if ((int)p) //idle task sched out
90000948:	b128      	cbz	r0, 90000956 <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
9000094a:	6818      	ldr	r0, [r3, #0]
9000094c:	2101      	movs	r1, #1
9000094e:	f011 fb7f 	bl	90012050 <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
90000952:	2001      	movs	r0, #1
90000954:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90000956:	4601      	mov	r1, r0
90000958:	6818      	ldr	r0, [r3, #0]
9000095a:	f011 fb79 	bl	90012050 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
9000095e:	2001      	movs	r0, #1
90000960:	bd08      	pop	{r3, pc}
90000962:	bf00      	nop
90000964:	2402626c 	.word	0x2402626c

90000968 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90000968:	6940      	ldr	r0, [r0, #20]
9000096a:	4770      	bx	lr

9000096c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
9000096c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
90000970:	4770      	bx	lr
90000972:	bf00      	nop

90000974 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90000974:	6b03      	ldr	r3, [r0, #48]	; 0x30
90000976:	b10b      	cbz	r3, 9000097c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
90000978:	2001      	movs	r0, #1
}
9000097a:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
9000097c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9000097e:	3800      	subs	r0, #0
90000980:	bf18      	it	ne
90000982:	2001      	movne	r0, #1
90000984:	4770      	bx	lr
90000986:	bf00      	nop

90000988 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
90000988:	6880      	ldr	r0, [r0, #8]
9000098a:	4770      	bx	lr

9000098c <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
9000098c:	4770      	bx	lr
9000098e:	bf00      	nop

90000990 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
90000990:	3004      	adds	r0, #4
{
90000992:	468c      	mov	ip, r1
    *data = videoInfo;
90000994:	c80f      	ldmia	r0, {r0, r1, r2, r3}
90000996:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
9000099a:	4770      	bx	lr

9000099c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
9000099c:	4770      	bx	lr
9000099e:	bf00      	nop

900009a0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
900009a0:	b508      	push	{r3, lr}
    assert(0);
900009a2:	4a03      	ldr	r2, [pc, #12]	; (900009b0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
900009a4:	f240 11cf 	movw	r1, #463	; 0x1cf
900009a8:	4b02      	ldr	r3, [pc, #8]	; (900009b4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
900009aa:	4803      	ldr	r0, [pc, #12]	; (900009b8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
900009ac:	f022 f9b4 	bl	90022d18 <__assert_func>
900009b0:	9002418c 	.word	0x9002418c
900009b4:	90024188 	.word	0x90024188
900009b8:	900241e8 	.word	0x900241e8

900009bc <_ZN20HardwareMJPEGDecoderD0Ev>:
900009bc:	b510      	push	{r4, lr}
900009be:	4604      	mov	r4, r0
900009c0:	2148      	movs	r1, #72	; 0x48
900009c2:	f022 f97a 	bl	90022cba <_ZdlPvj>
900009c6:	4620      	mov	r0, r4
900009c8:	bd10      	pop	{r4, pc}
900009ca:	bf00      	nop

900009cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900009d0:	b085      	sub	sp, #20
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009d2:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d8>
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009d6:	4604      	mov	r4, r0
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
    FrameBufferAddress = output;
    Output_Is_Paused = 0;
900009d8:	4e65      	ldr	r6, [pc, #404]	; (90000b70 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a4>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009da:	9003      	str	r0, [sp, #12]
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009dc:	2002      	movs	r0, #2
    DMA2D_output_Is_Paused = 1;

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
900009de:	4d65      	ldr	r5, [pc, #404]	; (90000b74 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a8>)
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009e0:	f8cb 0010 	str.w	r0, [fp, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
900009e4:	68e0      	ldr	r0, [r4, #12]
    JPEG_OUT_Read_BufferIndex = 0;
900009e6:	4f64      	ldr	r7, [pc, #400]	; (90000b78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1ac>)
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
900009e8:	0704      	lsls	r4, r0, #28
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
900009ea:	f44f 7470 	mov.w	r4, #960	; 0x3c0
    DMA2D_output_Is_Paused = 1;
900009ee:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 90000ba8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1dc>
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
900009f2:	bf18      	it	ne
900009f4:	f020 000f 	bicne.w	r0, r0, #15
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
900009f8:	f8cb 4004 	str.w	r4, [fp, #4]
    FrameBufferAddress = output;
900009fc:	4c5f      	ldr	r4, [pc, #380]	; (90000b7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
900009fe:	bf18      	it	ne
90000a00:	3010      	addne	r0, #16
90000a02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 90000bac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e0>
90000a06:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 90000bb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e4>
90000a0a:	f8cb 0000 	str.w	r0, [fp]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90000a0e:	0900      	lsrs	r0, r0, #4
90000a10:	f8cb 000c 	str.w	r0, [fp, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90000a18:	01c0      	lsls	r0, r0, #7
90000a1a:	9000      	str	r0, [sp, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a1c:	9803      	ldr	r0, [sp, #12]
    FrameBufferAddress = output;
90000a1e:	6023      	str	r3, [r4, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a20:	6900      	ldr	r0, [r0, #16]
    JPEG_OUT_Write_BufferIndex = 0;
90000a22:	4b57      	ldr	r3, [pc, #348]	; (90000b80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a24:	f000 000f 	and.w	r0, r0, #15
90000a28:	4c56      	ldr	r4, [pc, #344]	; (90000b84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
90000a2a:	f1c0 0010 	rsb	r0, r0, #16
90000a2e:	f8cb 0008 	str.w	r0, [fp, #8]
    Output_Is_Paused = 0;
90000a32:	2000      	movs	r0, #0
    JPEG_OUT_Write_BufferIndex = 0;
90000a34:	6018      	str	r0, [r3, #0]
    JPEG_InputImageIndex = 0;
90000a36:	4b54      	ldr	r3, [pc, #336]	; (90000b88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1bc>)
    Output_Is_Paused = 0;
90000a38:	6030      	str	r0, [r6, #0]
    JPEG_InputImageIndex = 0;
90000a3a:	6018      	str	r0, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000a3c:	4b53      	ldr	r3, [pc, #332]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c0>)
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a3e:	7028      	strb	r0, [r5, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000a40:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000a42:	4b53      	ldr	r3, [pc, #332]	; (90000b90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a44:	60a8      	str	r0, [r5, #8]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000a46:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    MCU_BlockIndex = 0;
90000a4c:	4b51      	ldr	r3, [pc, #324]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a4e:	7328      	strb	r0, [r5, #12]
    MCU_BlockIndex = 0;
90000a50:	6018      	str	r0, [r3, #0]
    DMA2D_output_Is_Paused = 1;
90000a52:	2301      	movs	r3, #1
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a54:	6168      	str	r0, [r5, #20]
    JPEG_OUT_Read_BufferIndex = 0;
90000a56:	6038      	str	r0, [r7, #0]
    DMA2D_output_Is_Paused = 1;
90000a58:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a5c:	484e      	ldr	r0, [pc, #312]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000a5e:	686b      	ldr	r3, [r5, #4]
90000a60:	f008 fd20 	bl	900094a4 <HAL_JPEG_Decode_DMA>
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000a64:	f8d8 3000 	ldr.w	r3, [r8]
90000a68:	b11b      	cbz	r3, 90000a72 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa6>
90000a6a:	4b4c      	ldr	r3, [pc, #304]	; (90000b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000a6c:	681b      	ldr	r3, [r3, #0]
90000a6e:	2b00      	cmp	r3, #0
90000a70:	d17c      	bne.n	90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>
  {
      return 1;
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000a72:	683b      	ldr	r3, [r7, #0]
90000a74:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000a78:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000a7c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000a80:	2901      	cmp	r1, #1
90000a82:	d040      	beq.n	90000b06 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13a>
      // Try to start DMA2D
      dma.start();
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
90000a84:	6833      	ldr	r3, [r6, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000a86:	2b01      	cmp	r3, #1
90000a88:	d028      	beq.n	90000adc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x110>
  {
      Output_Is_Paused = 0;
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000a8a:	6833      	ldr	r3, [r6, #0]
90000a8c:	b9bb      	cbnz	r3, 90000abe <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf2>
90000a8e:	f8da 2000 	ldr.w	r2, [sl]
  {
      return 2;
90000a92:	2a00      	cmp	r2, #0
90000a94:	bf08      	it	eq
90000a96:	2302      	moveq	r3, #2
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000a98:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000a9a:	6823      	ldr	r3, [r4, #0]
90000a9c:	2b02      	cmp	r3, #2
90000a9e:	d013      	beq.n	90000ac8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xfc>
      while(JpegProcessing_End != 1);
90000aa0:	6823      	ldr	r3, [r4, #0]
90000aa2:	2b01      	cmp	r3, #1
90000aa4:	d1de      	bne.n	90000a64 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x98>
  {
      return count_ == max_size_;
  }
  void reset()
  {
      head_ = tail_ = count_ = 0;
90000aa6:	2300      	movs	r3, #0
      DMA2D_CopyBufferEnd = 0;
90000aa8:	4a3c      	ldr	r2, [pc, #240]	; (90000b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000aaa:	e9c9 3302 	strd	r3, r3, [r9, #8]
90000aae:	f8c9 3004 	str.w	r3, [r9, #4]
      Jpeg_HWDecodingEnd = 0;
90000ab2:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_CopyBufferEnd = 0;
90000ab6:	6013      	str	r3, [r2, #0]
}
90000ab8:	b005      	add	sp, #20
90000aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }

  return 0;
90000abe:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000ac0:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000ac2:	6823      	ldr	r3, [r4, #0]
90000ac4:	2b02      	cmp	r3, #2
90000ac6:	d1eb      	bne.n	90000aa0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd4>
          SEM_WAIT(semDecodingDone);
90000ac8:	4b35      	ldr	r3, [pc, #212]	; (90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d4>)
90000aca:	f04f 31ff 	mov.w	r1, #4294967295
90000ace:	6818      	ldr	r0, [r3, #0]
90000ad0:	f00c fdc2 	bl	9000d658 <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
90000ad4:	6823      	ldr	r3, [r4, #0]
90000ad6:	2b01      	cmp	r3, #1
90000ad8:	d1c4      	bne.n	90000a64 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x98>
90000ada:	e7e4      	b.n	90000aa6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xda>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000adc:	4b28      	ldr	r3, [pc, #160]	; (90000b80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
90000ade:	681b      	ldr	r3, [r3, #0]
90000ae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000ae4:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000ae8:	2b00      	cmp	r3, #0
90000aea:	d1ce      	bne.n	90000a8a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbe>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000aec:	683b      	ldr	r3, [r7, #0]
90000aee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000af2:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000af6:	2b00      	cmp	r3, #0
90000af8:	d1c7      	bne.n	90000a8a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbe>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000afa:	2102      	movs	r1, #2
90000afc:	4826      	ldr	r0, [pc, #152]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
      Output_Is_Paused = 0;
90000afe:	6033      	str	r3, [r6, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b00:	f008 fe1a 	bl	90009738 <HAL_JPEG_Resume>
90000b04:	e7c1      	b.n	90000a8a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbe>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000b06:	f8da 1000 	ldr.w	r1, [sl]
90000b0a:	2901      	cmp	r1, #1
90000b0c:	d1ba      	bne.n	90000a84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb8>
      buffer_[tail_] = job;
90000b0e:	f8d9 1008 	ldr.w	r1, [r9, #8]
      JPEG_OUT_Read_BufferIndex++;
90000b12:	3301      	adds	r3, #1
      };
90000b14:	481f      	ldr	r0, [pc, #124]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      tail_ = (tail_ + 1) % max_size_;
90000b16:	f8d9 c000 	ldr.w	ip, [r9]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000b1a:	2b01      	cmp	r3, #1
      };
90000b1c:	f8d0 e000 	ldr.w	lr, [r0]
90000b20:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
90000b24:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
90000b28:	bf88      	it	hi
90000b2a:	2300      	movhi	r3, #0
90000b2c:	f849 e031 	str.w	lr, [r9, r1, lsl #3]
90000b30:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
90000b34:	603b      	str	r3, [r7, #0]
      DMA2D_output_Is_Paused = 0;
90000b36:	2300      	movs	r3, #0
90000b38:	604a      	str	r2, [r1, #4]
      count_++;
90000b3a:	f8d9 100c 	ldr.w	r1, [r9, #12]
      tail_ = (tail_ + 1) % max_size_;
90000b3e:	fbb0 f2fc 	udiv	r2, r0, ip
90000b42:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
90000b46:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
90000b48:	f8c9 0008 	str.w	r0, [r9, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000b4c:	4811      	ldr	r0, [pc, #68]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      count_++;
90000b4e:	f8c9 100c 	str.w	r1, [r9, #12]
90000b52:	6802      	ldr	r2, [r0, #0]
90000b54:	f8db 100c 	ldr.w	r1, [fp, #12]
90000b58:	440a      	add	r2, r1
90000b5a:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000b5c:	9a03      	ldr	r2, [sp, #12]
      DMA2D_output_Is_Paused = 0;
90000b5e:	f8ca 3000 	str.w	r3, [sl]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000b62:	6c50      	ldr	r0, [r2, #68]	; 0x44
      dma.start();
90000b64:	6803      	ldr	r3, [r0, #0]
90000b66:	691b      	ldr	r3, [r3, #16]
90000b68:	4798      	blx	r3
90000b6a:	e78b      	b.n	90000a84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb8>
      return 1;
90000b6c:	2301      	movs	r3, #1
90000b6e:	e793      	b.n	90000a98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xcc>
90000b70:	24005ba4 	.word	0x24005ba4
90000b74:	24000004 	.word	0x24000004
90000b78:	24005b8c 	.word	0x24005b8c
90000b7c:	24005b7c 	.word	0x24005b7c
90000b80:	24005b90 	.word	0x24005b90
90000b84:	24005b94 	.word	0x24005b94
90000b88:	24005b84 	.word	0x24005b84
90000b8c:	24005b80 	.word	0x24005b80
90000b90:	24005b88 	.word	0x24005b88
90000b94:	24005b9c 	.word	0x24005b9c
90000b98:	2400af08 	.word	0x2400af08
90000b9c:	24005b74 	.word	0x24005b74
90000ba0:	24005be0 	.word	0x24005be0
90000ba4:	24005ba8 	.word	0x24005ba8
90000ba8:	24005b78 	.word	0x24005b78
90000bac:	24005b98 	.word	0x24005b98
90000bb0:	24005bbc 	.word	0x24005bbc

90000bb4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
90000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
90000bb6:	6803      	ldr	r3, [r0, #0]
90000bb8:	2901      	cmp	r1, #1
90000bba:	4e29      	ldr	r6, [pc, #164]	; (90000c60 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xac>)
{
90000bbc:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
90000bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000bc0:	bf38      	it	cc
90000bc2:	2101      	movcc	r1, #1
90000bc4:	42b3      	cmp	r3, r6
90000bc6:	460d      	mov	r5, r1
90000bc8:	d13a      	bne.n	90000c40 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x8c>
    return videoInfo.number_of_frames;
90000bca:	6880      	ldr	r0, [r0, #8]
    if (frameNumber > getNumberOfFrames())
90000bcc:	42a8      	cmp	r0, r5
90000bce:	d204      	bcs.n	90000bda <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x26>
        frameNumber = getNumberOfFrames();
90000bd0:	6823      	ldr	r3, [r4, #0]
90000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000bd4:	42b3      	cmp	r3, r6
90000bd6:	d135      	bne.n	90000c44 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x90>
    return videoInfo.number_of_frames;
90000bd8:	68a5      	ldr	r5, [r4, #8]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bda:	1e6b      	subs	r3, r5, #1
90000bdc:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
90000bde:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000be0:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
90000be4:	b338      	cbz	r0, 90000c36 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x82>
        if (length > aviBufferLength)
90000be6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000be8:	2b0f      	cmp	r3, #15
90000bea:	d92f      	bls.n	90000c4c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x98>
        reader->seek(offset);
90000bec:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000bee:	f107 0608 	add.w	r6, r7, #8
        reader->seek(offset);
90000bf2:	68db      	ldr	r3, [r3, #12]
90000bf4:	4631      	mov	r1, r6
90000bf6:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000bf8:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000bfa:	2210      	movs	r2, #16
90000bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000bfe:	6803      	ldr	r3, [r0, #0]
90000c00:	691b      	ldr	r3, [r3, #16]
90000c02:	4798      	blx	r3
90000c04:	b198      	cbz	r0, 90000c2e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7a>
    if (reader != 0)
90000c06:	6b23      	ldr	r3, [r4, #48]	; 0x30
        aviBufferStartOffset = offset;
90000c08:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000c0a:	b1a3      	cbz	r3, 90000c36 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x82>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000c0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
90000c0e:	7a93      	ldrb	r3, [r2, #10]
90000c10:	7a51      	ldrb	r1, [r2, #9]
90000c12:	041b      	lsls	r3, r3, #16
90000c14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90000c18:	7a11      	ldrb	r1, [r2, #8]
90000c1a:	7ad2      	ldrb	r2, [r2, #11]
90000c1c:	430b      	orrs	r3, r1
90000c1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c22:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90000c24:	6165      	str	r5, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c26:	3a04      	subs	r2, #4
90000c28:	4413      	add	r3, r2
90000c2a:	61a3      	str	r3, [r4, #24]
}
90000c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000c2e:	230d      	movs	r3, #13
90000c30:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000c34:	e7e7      	b.n	90000c06 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x52>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c36:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000c3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90000c3c:	58d3      	ldr	r3, [r2, r3]
90000c3e:	e7f0      	b.n	90000c22 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x6e>
    if (frameNumber > getNumberOfFrames())
90000c40:	4798      	blx	r3
90000c42:	e7c3      	b.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x18>
        frameNumber = getNumberOfFrames();
90000c44:	4620      	mov	r0, r4
90000c46:	4798      	blx	r3
90000c48:	4605      	mov	r5, r0
90000c4a:	e7c6      	b.n	90000bda <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x26>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c4c:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000c4e:	4b05      	ldr	r3, [pc, #20]	; (90000c64 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb0>)
90000c50:	4a05      	ldr	r2, [pc, #20]	; (90000c68 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
90000c52:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c54:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000c58:	4804      	ldr	r0, [pc, #16]	; (90000c6c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90000c5a:	f022 f85d 	bl	90022d18 <__assert_func>
90000c5e:	bf00      	nop
90000c60:	90000989 	.word	0x90000989
90000c64:	90024234 	.word	0x90024234
90000c68:	90024248 	.word	0x90024248
90000c6c:	900241e8 	.word	0x900241e8

90000c70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90000c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000c74:	4604      	mov	r4, r0
    if (reader != 0)
90000c76:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
90000c78:	b083      	sub	sp, #12
90000c7a:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90000c7c:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90000c7e:	2800      	cmp	r0, #0
90000c80:	f000 80e3 	beq.w	90000e4a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1da>
        if (length > aviBufferLength)
90000c84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000c86:	2b07      	cmp	r3, #7
90000c88:	f240 80e6 	bls.w	90000e58 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1e8>
        reader->seek(offset);
90000c8c:	6803      	ldr	r3, [r0, #0]
90000c8e:	4631      	mov	r1, r6
90000c90:	68db      	ldr	r3, [r3, #12]
90000c92:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000c94:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000c96:	2208      	movs	r2, #8
90000c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000c9a:	6803      	ldr	r3, [r0, #0]
90000c9c:	691b      	ldr	r3, [r3, #16]
90000c9e:	4798      	blx	r3
90000ca0:	2800      	cmp	r0, #0
90000ca2:	f000 80ce 	beq.w	90000e42 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d2>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000ca6:	69a7      	ldr	r7, [r4, #24]
    if (reader != 0)
90000ca8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90000caa:	1d3b      	adds	r3, r7, #4
        aviBufferStartOffset = offset;
90000cac:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000cae:	2800      	cmp	r0, #0
90000cb0:	f000 80db 	beq.w	90000e6a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fa>
        const uint32_t index = offset - aviBufferStartOffset;
90000cb4:	1b9e      	subs	r6, r3, r6
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000cb6:	3708      	adds	r7, #8
        if (length > aviBufferLength)
90000cb8:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000cbc:	1991      	adds	r1, r2, r6
90000cbe:	5d92      	ldrb	r2, [r2, r6]
90000cc0:	788e      	ldrb	r6, [r1, #2]
90000cc2:	f891 c001 	ldrb.w	ip, [r1, #1]
90000cc6:	0436      	lsls	r6, r6, #16
90000cc8:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90000ccc:	4316      	orrs	r6, r2
90000cce:	78ca      	ldrb	r2, [r1, #3]
90000cd0:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90000cd4:	42b3      	cmp	r3, r6
90000cd6:	f0c0 80bf 	bcc.w	90000e58 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1e8>
        reader->seek(offset);
90000cda:	6803      	ldr	r3, [r0, #0]
90000cdc:	4639      	mov	r1, r7
90000cde:	68db      	ldr	r3, [r3, #12]
90000ce0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ce2:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000ce4:	4632      	mov	r2, r6
90000ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000ce8:	6803      	ldr	r3, [r0, #0]
90000cea:	691b      	ldr	r3, [r3, #16]
90000cec:	4798      	blx	r3
90000cee:	b910      	cbnz	r0, 90000cf6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000cf0:	230d      	movs	r3, #13
90000cf2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90000cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90000cf8:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (frameBuffer) //only decode if buffers are assigned.
90000cfa:	2d00      	cmp	r5, #0
90000cfc:	d052      	beq.n	90000da4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000cfe:	4a5c      	ldr	r2, [pc, #368]	; (90000e70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
    FrameBufferAddress = output;
90000d00:	4b5c      	ldr	r3, [pc, #368]	; (90000e74 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x204>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d02:	68d2      	ldr	r2, [r2, #12]
    FrameBufferAddress = output;
90000d04:	601d      	str	r5, [r3, #0]
    Output_Is_Paused = 0;
90000d06:	2300      	movs	r3, #0
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d0c:	4d5a      	ldr	r5, [pc, #360]	; (90000e78 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x208>)
    Output_Is_Paused = 0;
90000d0e:	4f5b      	ldr	r7, [pc, #364]	; (90000e7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x20c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d10:	01d2      	lsls	r2, r2, #7
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d12:	702b      	strb	r3, [r5, #0]
    Output_Is_Paused = 0;
90000d14:	603b      	str	r3, [r7, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d16:	60ab      	str	r3, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d18:	732b      	strb	r3, [r5, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d1a:	616b      	str	r3, [r5, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d1c:	9200      	str	r2, [sp, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000d1e:	4a58      	ldr	r2, [pc, #352]	; (90000e80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d20:	f8df 8188 	ldr.w	r8, [pc, #392]	; 90000eac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x23c>
    JPEG_OUT_Write_BufferIndex = 0;
90000d24:	6013      	str	r3, [r2, #0]
    JPEG_InputImageIndex = 0;
90000d26:	4a57      	ldr	r2, [pc, #348]	; (90000e84 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x214>)
    DMA2D_output_Is_Paused = 1;
90000d28:	f8df a184 	ldr.w	sl, [pc, #388]	; 90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x240>
    JPEG_InputImageIndex = 0;
90000d2c:	6013      	str	r3, [r2, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000d2e:	4a56      	ldr	r2, [pc, #344]	; (90000e88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
    JPEG_OUT_Read_BufferIndex = 0;
90000d30:	f8c8 3000 	str.w	r3, [r8]
    JPEG_InputImageAddress = (uint32_t)input;
90000d34:	6011      	str	r1, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d36:	4a55      	ldr	r2, [pc, #340]	; (90000e8c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d38:	4855      	ldr	r0, [pc, #340]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d3a:	6016      	str	r6, [r2, #0]
    MCU_BlockIndex = 0;
90000d3c:	4a55      	ldr	r2, [pc, #340]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000d3e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x244>
90000d42:	6013      	str	r3, [r2, #0]
    DMA2D_output_Is_Paused = 1;
90000d44:	2301      	movs	r3, #1
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90000d4a:	4e53      	ldr	r6, [pc, #332]	; (90000e98 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x228>)
    DMA2D_output_Is_Paused = 1;
90000d4c:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d50:	686b      	ldr	r3, [r5, #4]
      buffer_[tail_] = job;
90000d52:	f8df b164 	ldr.w	fp, [pc, #356]	; 90000eb8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x248>
90000d56:	f008 fba5 	bl	900094a4 <HAL_JPEG_Decode_DMA>
    return 0;
90000d5a:	e007      	b.n	90000d6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfc>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d5c:	f8da 2000 	ldr.w	r2, [sl]
      return 2;
90000d60:	2a00      	cmp	r2, #0
90000d62:	bf08      	it	eq
90000d64:	2302      	moveq	r3, #2
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d66:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000d68:	6833      	ldr	r3, [r6, #0]
90000d6a:	b9db      	cbnz	r3, 90000da4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000d6c:	f8d9 3000 	ldr.w	r3, [r9]
90000d70:	b11b      	cbz	r3, 90000d7a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10a>
90000d72:	4b4a      	ldr	r3, [pc, #296]	; (90000e9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x22c>)
90000d74:	681b      	ldr	r3, [r3, #0]
90000d76:	2b00      	cmp	r3, #0
90000d78:	d161      	bne.n	90000e3e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ce>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000d7a:	f8d8 3000 	ldr.w	r3, [r8]
90000d7e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000d82:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000d86:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000d8a:	2901      	cmp	r1, #1
90000d8c:	d024      	beq.n	90000dd8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x168>
  if((Output_Is_Paused == 1) && \
90000d8e:	683b      	ldr	r3, [r7, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000d90:	2b01      	cmp	r3, #1
90000d92:	d00b      	beq.n	90000dac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x13c>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d94:	683b      	ldr	r3, [r7, #0]
90000d96:	2b00      	cmp	r3, #0
90000d98:	d0e0      	beq.n	90000d5c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xec>
  return 0;
90000d9a:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d9c:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90000d9e:	6833      	ldr	r3, [r6, #0]
90000da0:	2b00      	cmp	r3, #0
90000da2:	d0e3      	beq.n	90000d6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfc>
}
90000da4:	2001      	movs	r0, #1
90000da6:	b003      	add	sp, #12
90000da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dac:	4b34      	ldr	r3, [pc, #208]	; (90000e80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
90000dae:	681b      	ldr	r3, [r3, #0]
90000db0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000db4:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000db8:	2b00      	cmp	r3, #0
90000dba:	d1eb      	bne.n	90000d94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x124>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000dbc:	f8d8 3000 	ldr.w	r3, [r8]
90000dc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dc4:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dc8:	2b00      	cmp	r3, #0
90000dca:	d1e3      	bne.n	90000d94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x124>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dcc:	2102      	movs	r1, #2
90000dce:	4830      	ldr	r0, [pc, #192]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
      Output_Is_Paused = 0;
90000dd0:	603b      	str	r3, [r7, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dd2:	f008 fcb1 	bl	90009738 <HAL_JPEG_Resume>
90000dd6:	e7dd      	b.n	90000d94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x124>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000dd8:	f8da 1000 	ldr.w	r1, [sl]
90000ddc:	2901      	cmp	r1, #1
90000dde:	d1d6      	bne.n	90000d8e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x11e>
90000de0:	f8db 1008 	ldr.w	r1, [fp, #8]
      JPEG_OUT_Read_BufferIndex++;
90000de4:	3301      	adds	r3, #1
      };
90000de6:	482b      	ldr	r0, [pc, #172]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
      tail_ = (tail_ + 1) % max_size_;
90000de8:	f8db c000 	ldr.w	ip, [fp]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000dec:	2b01      	cmp	r3, #1
      };
90000dee:	f8d0 e000 	ldr.w	lr, [r0]
90000df2:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
90000df6:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
90000dfa:	bf88      	it	hi
90000dfc:	2300      	movhi	r3, #0
90000dfe:	f84b e031 	str.w	lr, [fp, r1, lsl #3]
90000e02:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
90000e06:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_output_Is_Paused = 0;
90000e0a:	2300      	movs	r3, #0
90000e0c:	604a      	str	r2, [r1, #4]
      count_++;
90000e0e:	f8db 100c 	ldr.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e12:	fbb0 f2fc 	udiv	r2, r0, ip
      count_++;
90000e16:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
90000e18:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
90000e1c:	f8cb 100c 	str.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e20:	f8cb 0008 	str.w	r0, [fp, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000e24:	4912      	ldr	r1, [pc, #72]	; (90000e70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
90000e26:	481b      	ldr	r0, [pc, #108]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000e28:	68c9      	ldr	r1, [r1, #12]
90000e2a:	6802      	ldr	r2, [r0, #0]
90000e2c:	440a      	add	r2, r1
90000e2e:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000e30:	6c60      	ldr	r0, [r4, #68]	; 0x44
      DMA2D_output_Is_Paused = 0;
90000e32:	f8ca 3000 	str.w	r3, [sl]
      dma.start();
90000e36:	6803      	ldr	r3, [r0, #0]
90000e38:	691b      	ldr	r3, [r3, #16]
90000e3a:	4798      	blx	r3
90000e3c:	e7a7      	b.n	90000d8e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x11e>
      return 1;
90000e3e:	2301      	movs	r3, #1
90000e40:	e791      	b.n	90000d66 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf6>
            lastError = AVI_ERROR_EOF_REACHED;
90000e42:	230d      	movs	r3, #13
90000e44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000e48:	e72d      	b.n	90000ca6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e4a:	1d33      	adds	r3, r6, #4
    if (reader != 0)
90000e4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000e4e:	f106 0208 	add.w	r2, r6, #8
90000e52:	58ce      	ldr	r6, [r1, r3]
    return movieData + offset;
90000e54:	4411      	add	r1, r2
90000e56:	e750      	b.n	90000cfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8a>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e58:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000e5a:	4b11      	ldr	r3, [pc, #68]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x230>)
90000e5c:	4a11      	ldr	r2, [pc, #68]	; (90000ea4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x234>)
90000e5e:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e60:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000e64:	4810      	ldr	r0, [pc, #64]	; (90000ea8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x238>)
90000e66:	f021 ff57 	bl	90022d18 <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e6a:	463e      	mov	r6, r7
90000e6c:	e7ee      	b.n	90000e4c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1dc>
90000e6e:	bf00      	nop
90000e70:	24005ba8 	.word	0x24005ba8
90000e74:	24005b7c 	.word	0x24005b7c
90000e78:	24000004 	.word	0x24000004
90000e7c:	24005ba4 	.word	0x24005ba4
90000e80:	24005b90 	.word	0x24005b90
90000e84:	24005b84 	.word	0x24005b84
90000e88:	24005b80 	.word	0x24005b80
90000e8c:	24005b88 	.word	0x24005b88
90000e90:	2400af08 	.word	0x2400af08
90000e94:	24005b9c 	.word	0x24005b9c
90000e98:	24005b94 	.word	0x24005b94
90000e9c:	24005b74 	.word	0x24005b74
90000ea0:	90024234 	.word	0x90024234
90000ea4:	90024248 	.word	0x90024248
90000ea8:	900241e8 	.word	0x900241e8
90000eac:	24005b8c 	.word	0x24005b8c
90000eb0:	24005b78 	.word	0x24005b78
90000eb4:	24005b98 	.word	0x24005b98
90000eb8:	24005bbc 	.word	0x24005bbc

90000ebc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ebc:	6943      	ldr	r3, [r0, #20]
{
90000ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ec2:	2b00      	cmp	r3, #0
90000ec4:	f000 8098 	beq.w	90000ff8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
90000ec8:	4605      	mov	r5, r0
    if (reader != 0)
90000eca:	6b00      	ldr	r0, [r0, #48]	; 0x30
    readData(currentMovieOffset, 8);
90000ecc:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
90000ece:	2800      	cmp	r0, #0
90000ed0:	f000 8082 	beq.w	90000fd8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
90000ed4:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000ed6:	2b07      	cmp	r3, #7
90000ed8:	f240 8083 	bls.w	90000fe2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000edc:	6803      	ldr	r3, [r0, #0]
90000ede:	4621      	mov	r1, r4
90000ee0:	68db      	ldr	r3, [r3, #12]
90000ee2:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ee4:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000ee6:	2208      	movs	r2, #8
90000ee8:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000eea:	6803      	ldr	r3, [r0, #0]
90000eec:	691b      	ldr	r3, [r3, #16]
90000eee:	4798      	blx	r3
90000ef0:	2800      	cmp	r0, #0
90000ef2:	d06d      	beq.n	90000fd0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ef4:	69aa      	ldr	r2, [r5, #24]
    if (reader != 0)
90000ef6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ef8:	1d13      	adds	r3, r2, #4
        aviBufferStartOffset = offset;
90000efa:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000efc:	2800      	cmp	r0, #0
90000efe:	d06d      	beq.n	90000fdc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
90000f00:	1b1b      	subs	r3, r3, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f02:	6b6c      	ldr	r4, [r5, #52]	; 0x34
90000f04:	18e1      	adds	r1, r4, r3
90000f06:	5ce4      	ldrb	r4, [r4, r3]
90000f08:	788b      	ldrb	r3, [r1, #2]
90000f0a:	784e      	ldrb	r6, [r1, #1]
90000f0c:	041b      	lsls	r3, r3, #16
90000f0e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
90000f12:	4323      	orrs	r3, r4
90000f14:	78cc      	ldrb	r4, [r1, #3]
90000f16:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
90000f1a:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f1c:	f243 0630 	movw	r6, #12336	; 0x3030
90000f20:	e039      	b.n	90000f96 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
90000f22:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000f24:	2b07      	cmp	r3, #7
90000f26:	d95c      	bls.n	90000fe2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000f28:	6803      	ldr	r3, [r0, #0]
90000f2a:	4621      	mov	r1, r4
90000f2c:	68db      	ldr	r3, [r3, #12]
90000f2e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f30:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f32:	2208      	movs	r2, #8
90000f34:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f36:	6803      	ldr	r3, [r0, #0]
90000f38:	691b      	ldr	r3, [r3, #16]
90000f3a:	4798      	blx	r3
90000f3c:	b908      	cbnz	r0, 90000f42 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000f3e:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    if (reader != 0)
90000f42:	6b28      	ldr	r0, [r5, #48]	; 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90000f44:	69ab      	ldr	r3, [r5, #24]
        aviBufferStartOffset = offset;
90000f46:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f48:	2800      	cmp	r0, #0
90000f4a:	d053      	beq.n	90000ff4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90000f4c:	1b1c      	subs	r4, r3, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f4e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
90000f50:	1913      	adds	r3, r2, r4
90000f52:	5d11      	ldrb	r1, [r2, r4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f54:	799c      	ldrb	r4, [r3, #6]
90000f56:	f893 a005 	ldrb.w	sl, [r3, #5]
90000f5a:	0424      	lsls	r4, r4, #16
90000f5c:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f60:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f64:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
90000f68:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f6c:	f893 8003 	ldrb.w	r8, [r3, #3]
90000f70:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90000f74:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f76:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90000f7a:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f7e:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f82:	f246 3264 	movw	r2, #25444	; 0x6364
90000f86:	42b1      	cmp	r1, r6
90000f88:	bf08      	it	eq
90000f8a:	4293      	cmpeq	r3, r2
90000f8c:	bf0c      	ite	eq
90000f8e:	2301      	moveq	r3, #1
90000f90:	2300      	movne	r3, #0
90000f92:	d01a      	beq.n	90000fca <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90000f94:	69aa      	ldr	r2, [r5, #24]
90000f96:	4414      	add	r4, r2
90000f98:	6aab      	ldr	r3, [r5, #40]	; 0x28
90000f9a:	f104 0208 	add.w	r2, r4, #8
90000f9e:	429a      	cmp	r2, r3
90000fa0:	d20e      	bcs.n	90000fc0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
90000fa2:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fa4:	3409      	adds	r4, #9
        frameNumber++;
90000fa6:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fa8:	f024 0401 	bic.w	r4, r4, #1
90000fac:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
90000fb0:	2800      	cmp	r0, #0
90000fb2:	d1b6      	bne.n	90000f22 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
90000fb4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        return d[0] | (d[1] << 8);
90000fb6:	191a      	adds	r2, r3, r4
90000fb8:	5b19      	ldrh	r1, [r3, r4]
90000fba:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fbc:	6854      	ldr	r4, [r2, #4]
90000fbe:	e7e0      	b.n	90000f82 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
90000fc0:	2101      	movs	r1, #1
    currentMovieOffset = firstFrameOffset; //start over
90000fc2:	6a2a      	ldr	r2, [r5, #32]
    return false;
90000fc4:	2300      	movs	r3, #0
    currentMovieOffset = firstFrameOffset; //start over
90000fc6:	e9c5 1205 	strd	r1, r2, [r5, #20]
}
90000fca:	4618      	mov	r0, r3
90000fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000fd0:	230d      	movs	r3, #13
90000fd2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
90000fd6:	e78d      	b.n	90000ef4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000fd8:	1d23      	adds	r3, r4, #4
90000fda:	4622      	mov	r2, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fdc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
90000fde:	58cc      	ldr	r4, [r1, r3]
90000fe0:	e79b      	b.n	90000f1a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000fe2:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000fe4:	4b07      	ldr	r3, [pc, #28]	; (90001004 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
90000fe6:	4a08      	ldr	r2, [pc, #32]	; (90001008 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
90000fe8:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000fea:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90000fee:	4807      	ldr	r0, [pc, #28]	; (9000100c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90000ff0:	f021 fe92 	bl	90022d18 <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
90000ff4:	461c      	mov	r4, r3
90000ff6:	e7dd      	b.n	90000fb4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ff8:	4b05      	ldr	r3, [pc, #20]	; (90001010 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
90000ffa:	21ec      	movs	r1, #236	; 0xec
90000ffc:	4a05      	ldr	r2, [pc, #20]	; (90001014 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
90000ffe:	4803      	ldr	r0, [pc, #12]	; (9000100c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001000:	f021 fe8a 	bl	90022d18 <__assert_func>
90001004:	90024234 	.word	0x90024234
90001008:	90024248 	.word	0x90024248
9000100c:	900241e8 	.word	0x900241e8
90001010:	9002428c 	.word	0x9002428c
90001014:	900242d8 	.word	0x900242d8

90001018 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001018:	6943      	ldr	r3, [r0, #20]
{
9000101a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000101e:	2b00      	cmp	r3, #0
90001020:	f000 8097 	beq.w	90001152 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13a>
    readData(currentMovieOffset, 8);
90001024:	4604      	mov	r4, r0
    if (reader != 0)
90001026:	6b00      	ldr	r0, [r0, #48]	; 0x30
90001028:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
9000102a:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
9000102c:	2800      	cmp	r0, #0
9000102e:	d05d      	beq.n	900010ec <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd4>
        if (length > aviBufferLength)
90001030:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001032:	2b07      	cmp	r3, #7
90001034:	f240 8093 	bls.w	9000115e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        reader->seek(offset);
90001038:	6803      	ldr	r3, [r0, #0]
9000103a:	4629      	mov	r1, r5
9000103c:	68db      	ldr	r3, [r3, #12]
9000103e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001040:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001042:	2208      	movs	r2, #8
90001044:	6b61      	ldr	r1, [r4, #52]	; 0x34
90001046:	6803      	ldr	r3, [r0, #0]
90001048:	691b      	ldr	r3, [r3, #16]
9000104a:	4798      	blx	r3
9000104c:	2800      	cmp	r0, #0
9000104e:	d048      	beq.n	900010e2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xca>
    if (reader != 0)
90001050:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t streamNo  = getU16(currentMovieOffset);
90001052:	69a1      	ldr	r1, [r4, #24]
        aviBufferStartOffset = offset;
90001054:	63e5      	str	r5, [r4, #60]	; 0x3c
    if (reader != 0)
90001056:	2800      	cmp	r0, #0
90001058:	d047      	beq.n	900010ea <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
9000105a:	1d0a      	adds	r2, r1, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
9000105c:	f101 0c02 	add.w	ip, r1, #2
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001060:	6b63      	ldr	r3, [r4, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001062:	1b52      	subs	r2, r2, r5
        const uint32_t index = offset - aviBufferStartOffset;
90001064:	ebac 0c05 	sub.w	ip, ip, r5
90001068:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000106a:	189f      	adds	r7, r3, r2
9000106c:	5c9a      	ldrb	r2, [r3, r2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
9000106e:	eb03 0805 	add.w	r8, r3, r5
90001072:	f813 e005 	ldrb.w	lr, [r3, r5]
90001076:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000107a:	f897 8001 	ldrb.w	r8, [r7, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
9000107e:	ea4e 2e05 	orr.w	lr, lr, r5, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001082:	78bd      	ldrb	r5, [r7, #2]
90001084:	042d      	lsls	r5, r5, #16
90001086:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
9000108a:	4315      	orrs	r5, r2
9000108c:	78fa      	ldrb	r2, [r7, #3]
9000108e:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001092:	eb03 020c 	add.w	r2, r3, ip
90001096:	f813 300c 	ldrb.w	r3, [r3, ip]
9000109a:	7852      	ldrb	r2, [r2, #1]
9000109c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
900010a0:	194a      	adds	r2, r1, r5
900010a2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
900010a4:	f102 0c08 	add.w	ip, r2, #8
900010a8:	45bc      	cmp	ip, r7
900010aa:	d213      	bcs.n	900010d4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
900010ac:	f243 0730 	movw	r7, #12336	; 0x3030
900010b0:	45be      	cmp	lr, r7
900010b2:	d124      	bne.n	900010fe <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xe6>
900010b4:	f246 3764 	movw	r7, #25444	; 0x6364
900010b8:	42bb      	cmp	r3, r7
900010ba:	d120      	bne.n	900010fe <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xe6>
900010bc:	bb1d      	cbnz	r5, 90001106 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
          currentMovieOffset += 8;
900010be:	4662      	mov	r2, ip
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010c0:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010c4:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010c8:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010ca:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
900010cc:	d002      	beq.n	900010d4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>
900010ce:	2001      	movs	r0, #1
}
900010d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
900010d4:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; //start over
900010d6:	6a23      	ldr	r3, [r4, #32]
900010d8:	2000      	movs	r0, #0
900010da:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
900010de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900010e2:	230d      	movs	r3, #13
900010e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
900010e8:	e7b2      	b.n	90001050 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
900010ea:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
900010ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        const uint8_t* const d = movieData + offset;
900010ee:	4629      	mov	r1, r5
900010f0:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
900010f2:	f832 e005 	ldrh.w	lr, [r2, r5]
900010f6:	442a      	add	r2, r5
900010f8:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900010fa:	6855      	ldr	r5, [r2, #4]
900010fc:	e7d0      	b.n	900010a0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x88>
        currentMovieOffset += chunkSize;
900010fe:	61a2      	str	r2, [r4, #24]
        if (chunkSize == 0) // Empty frame - Skip
90001100:	2d00      	cmp	r5, #0
90001102:	d1dd      	bne.n	900010c0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa8>
90001104:	e7db      	b.n	900010be <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa6>
            currentMovieOffset += 8;
90001106:	f101 0708 	add.w	r7, r1, #8
9000110a:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
9000110c:	b1f0      	cbz	r0, 9000114c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x134>
        if (length > aviBufferLength)
9000110e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001110:	429d      	cmp	r5, r3
90001112:	d824      	bhi.n	9000115e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        reader->seek(offset);
90001114:	6803      	ldr	r3, [r0, #0]
90001116:	4639      	mov	r1, r7
90001118:	68db      	ldr	r3, [r3, #12]
9000111a:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
9000111c:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000111e:	462a      	mov	r2, r5
90001120:	6b61      	ldr	r1, [r4, #52]	; 0x34
90001122:	6803      	ldr	r3, [r0, #0]
90001124:	691b      	ldr	r3, [r3, #16]
90001126:	4798      	blx	r3
90001128:	b910      	cbnz	r0, 90001130 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x118>
            lastError = AVI_ERROR_EOF_REACHED;
9000112a:	230d      	movs	r3, #13
9000112c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90001130:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90001132:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (outputBuffer) //only decode if buffers are assigned.
90001134:	b126      	cbz	r6, 90001140 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x128>
90001136:	4633      	mov	r3, r6
90001138:	462a      	mov	r2, r5
9000113a:	4620      	mov	r0, r4
9000113c:	f7ff fc46 	bl	900009cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
90001140:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
90001144:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
90001146:	442a      	add	r2, r5
            frameNumber++;
90001148:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) // Empty frame - Skip
9000114a:	e7b9      	b.n	900010c0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa8>
    return movieData + offset;
9000114c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
9000114e:	4439      	add	r1, r7
90001150:	e7f0      	b.n	90001134 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x11c>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001152:	4b07      	ldr	r3, [pc, #28]	; (90001170 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
90001154:	21b8      	movs	r1, #184	; 0xb8
90001156:	4a07      	ldr	r2, [pc, #28]	; (90001174 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
90001158:	4807      	ldr	r0, [pc, #28]	; (90001178 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000115a:	f021 fddd 	bl	90022d18 <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000115e:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001160:	4b06      	ldr	r3, [pc, #24]	; (9000117c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001162:	4a07      	ldr	r2, [pc, #28]	; (90001180 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001164:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001166:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
9000116a:	4803      	ldr	r0, [pc, #12]	; (90001178 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000116c:	f021 fdd4 	bl	90022d18 <__assert_func>
90001170:	9002428c 	.word	0x9002428c
90001174:	9002430c 	.word	0x9002430c
90001178:	900241e8 	.word	0x900241e8
9000117c:	90024234 	.word	0x90024234
90001180:	90024248 	.word	0x90024248

90001184 <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
90001184:	b538      	push	{r3, r4, r5, lr}
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001186:	2500      	movs	r5, #0
90001188:	4b0f      	ldr	r3, [pc, #60]	; (900011c8 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
9000118a:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
9000118c:	6003      	str	r3, [r0, #0]
9000118e:	63c5      	str	r5, [r0, #60]	; 0x3c
90001190:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
90001194:	e9c0 5505 	strd	r5, r5, [r0, #20]
90001198:	e9c0 5507 	strd	r5, r5, [r0, #28]
9000119c:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
900011a0:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
900011a4:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
900011a8:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
900011ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
900011b0:	f002 fa38 	bl	90003624 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
900011b4:	462a      	mov	r2, r5
900011b6:	4629      	mov	r1, r5
900011b8:	2001      	movs	r0, #1
900011ba:	f00c f9fd 	bl	9000d5b8 <osSemaphoreNew>
900011be:	4b03      	ldr	r3, [pc, #12]	; (900011cc <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
900011c0:	4602      	mov	r2, r0
}
900011c2:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
900011c4:	601a      	str	r2, [r3, #0]
}
900011c6:	bd38      	pop	{r3, r4, r5, pc}
900011c8:	9002448c 	.word	0x9002448c
900011cc:	24005be0 	.word	0x24005be0

900011d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
900011d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
900011d4:	2100      	movs	r1, #0
    if (reader != 0)
900011d6:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
900011d8:	b083      	sub	sp, #12
900011da:	4605      	mov	r5, r0
    currentMovieOffset = 0;
900011dc:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
900011de:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    if (reader != 0)
900011e2:	2e00      	cmp	r6, #0
900011e4:	f000 81ba 	beq.w	9000155c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38c>
        if (length > aviBufferLength)
900011e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
900011ea:	2b47      	cmp	r3, #71	; 0x47
900011ec:	f240 8212 	bls.w	90001614 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x444>
        reader->seek(offset);
900011f0:	6833      	ldr	r3, [r6, #0]
900011f2:	4630      	mov	r0, r6
900011f4:	68db      	ldr	r3, [r3, #12]
900011f6:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900011f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
900011fa:	2248      	movs	r2, #72	; 0x48
900011fc:	6b69      	ldr	r1, [r5, #52]	; 0x34
900011fe:	6803      	ldr	r3, [r0, #0]
90001200:	691b      	ldr	r3, [r3, #16]
90001202:	4798      	blx	r3
90001204:	2800      	cmp	r0, #0
90001206:	f000 80bd 	beq.w	90001384 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>
        aviBufferStartOffset = offset;
9000120a:	2300      	movs	r3, #0
    if (reader != 0)
9000120c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
9000120e:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
90001210:	46b1      	mov	r9, r6
        aviBufferStartOffset = offset;
90001212:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (reader != 0)
90001214:	2e00      	cmp	r6, #0
90001216:	f000 81a2 	beq.w	9000155e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38e>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000121a:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
    return strncmp(src, str, num);
9000121e:	2204      	movs	r2, #4
90001220:	49c6      	ldr	r1, [pc, #792]	; (9000153c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36c>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001222:	eb08 0b07 	add.w	fp, r8, r7
    return strncmp(src, str, num);
90001226:	4658      	mov	r0, fp
90001228:	f022 fa30 	bl	9002368c <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
9000122c:	2800      	cmp	r0, #0
9000122e:	f040 8201 	bne.w	90001634 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x464>
    currentMovieOffset += 8;
90001232:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001236:	2204      	movs	r2, #4
90001238:	49c1      	ldr	r1, [pc, #772]	; (90001540 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x370>)
    currentMovieOffset += 8;
9000123a:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
9000123c:	4440      	add	r0, r8
9000123e:	f022 fa25 	bl	9002368c <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
90001242:	2800      	cmp	r0, #0
90001244:	f040 820a 	bne.w	9000165c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>
    currentMovieOffset += 4;
90001248:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
9000124c:	2204      	movs	r2, #4
9000124e:	49bd      	ldr	r1, [pc, #756]	; (90001544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x374>)
90001250:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
90001254:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001258:	f022 fa18 	bl	9002368c <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
9000125c:	9001      	str	r0, [sp, #4]
9000125e:	2800      	cmp	r0, #0
90001260:	f040 81f2 	bne.w	90001648 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x478>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001264:	f89b 4012 	ldrb.w	r4, [fp, #18]
90001268:	f89b 2011 	ldrb.w	r2, [fp, #17]
9000126c:	0424      	lsls	r4, r4, #16
9000126e:	f89b 3013 	ldrb.w	r3, [fp, #19]
90001272:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
90001276:	f89b 2010 	ldrb.w	r2, [fp, #16]
9000127a:	4314      	orrs	r4, r2
    assert(aviListSize);
9000127c:	ea54 6403 	orrs.w	r4, r4, r3, lsl #24
90001280:	f000 81d1 	beq.w	90001626 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x456>
    uint32_t offset =  currentMovieOffset + 8;
90001284:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001288:	2204      	movs	r2, #4
9000128a:	49af      	ldr	r1, [pc, #700]	; (90001548 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x378>)
9000128c:	4440      	add	r0, r8
9000128e:	f022 f9fd 	bl	9002368c <strncmp>
    if (compare(offset, "hdrl", 4))
90001292:	2800      	cmp	r0, #0
90001294:	d07a      	beq.n	9000138c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
90001296:	2306      	movs	r3, #6
        foundFrame = false;
90001298:	f8dd b004 	ldr.w	fp, [sp, #4]
    offset += 4;
9000129c:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012a0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900012a4:	4440      	add	r0, r8
    return strncmp(src, str, num);
900012a6:	2204      	movs	r2, #4
900012a8:	49a8      	ldr	r1, [pc, #672]	; (9000154c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x37c>)
900012aa:	f022 f9ef 	bl	9002368c <strncmp>
    if (compare(offset, "avih", 4))
900012ae:	2800      	cmp	r0, #0
900012b0:	f000 8088 	beq.w	900013c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f4>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
900012b4:	2307      	movs	r3, #7
900012b6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900012ba:	4454      	add	r4, sl
900012bc:	3408      	adds	r4, #8
    if (reader != 0)
900012be:	f1b9 0f00 	cmp.w	r9, #0
900012c2:	f000 80dd 	beq.w	90001480 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2b0>
        if (length > aviBufferLength)
900012c6:	6bab      	ldr	r3, [r5, #56]	; 0x38
900012c8:	2b0b      	cmp	r3, #11
900012ca:	f240 81a3 	bls.w	90001614 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x444>
        reader->seek(offset);
900012ce:	f8d9 3000 	ldr.w	r3, [r9]
900012d2:	4621      	mov	r1, r4
900012d4:	4648      	mov	r0, r9
900012d6:	68db      	ldr	r3, [r3, #12]
900012d8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900012da:	6b28      	ldr	r0, [r5, #48]	; 0x30
900012dc:	220c      	movs	r2, #12
900012de:	6b69      	ldr	r1, [r5, #52]	; 0x34
900012e0:	6803      	ldr	r3, [r0, #0]
900012e2:	691b      	ldr	r3, [r3, #16]
900012e4:	4798      	blx	r3
900012e6:	2800      	cmp	r0, #0
900012e8:	f000 8122 	beq.w	90001530 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900012ec:	f895 a040 	ldrb.w	sl, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
900012f0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
900012f2:	63ec      	str	r4, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
900012f4:	f8df 825c 	ldr.w	r8, [pc, #604]	; 90001554 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x384>
            lastError = AVI_ERROR_EOF_REACHED;
900012f8:	f04f 090d 	mov.w	r9, #13
900012fc:	e003      	b.n	90001306 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x136>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900012fe:	f895 a040 	ldrb.w	sl, [r5, #64]	; 0x40
    if (reader != 0)
90001302:	6b2e      	ldr	r6, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
90001304:	63ec      	str	r4, [r5, #60]	; 0x3c
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001306:	f104 0708 	add.w	r7, r4, #8
    if (reader != 0)
9000130a:	2e00      	cmp	r6, #0
9000130c:	d048      	beq.n	900013a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000130e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
90001310:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001312:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001314:	4641      	mov	r1, r8
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001316:	1afb      	subs	r3, r7, r3
90001318:	4418      	add	r0, r3
    return strncmp(src, str, num);
9000131a:	f022 f9b7 	bl	9002368c <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000131e:	2800      	cmp	r0, #0
90001320:	d047      	beq.n	900013b2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e2>
90001322:	f1ba 0f00 	cmp.w	sl, #0
90001326:	d147      	bne.n	900013b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e8>
90001328:	6aab      	ldr	r3, [r5, #40]	; 0x28
9000132a:	42a3      	cmp	r3, r4
9000132c:	f240 80ab 	bls.w	90001486 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2b6>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
90001330:	3404      	adds	r4, #4
    if (reader != 0)
90001332:	b386      	cbz	r6, 90001396 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c6>
        const uint32_t index = offset - aviBufferStartOffset;
90001334:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        if (length > aviBufferLength)
90001336:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
9000133a:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
9000133c:	2b0b      	cmp	r3, #11
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000133e:	eb01 0204 	add.w	r2, r1, r4
90001342:	5d09      	ldrb	r1, [r1, r4]
90001344:	7894      	ldrb	r4, [r2, #2]
90001346:	7850      	ldrb	r0, [r2, #1]
90001348:	ea4f 4404 	mov.w	r4, r4, lsl #16
9000134c:	78d2      	ldrb	r2, [r2, #3]
9000134e:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90001352:	ea44 0401 	orr.w	r4, r4, r1
90001356:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
9000135a:	443c      	add	r4, r7
        if (length > aviBufferLength)
9000135c:	f240 815a 	bls.w	90001614 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x444>
        reader->seek(offset);
90001360:	6833      	ldr	r3, [r6, #0]
90001362:	4621      	mov	r1, r4
90001364:	4630      	mov	r0, r6
90001366:	68db      	ldr	r3, [r3, #12]
90001368:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
9000136a:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000136c:	220c      	movs	r2, #12
9000136e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001370:	6803      	ldr	r3, [r0, #0]
90001372:	691b      	ldr	r3, [r3, #16]
90001374:	4798      	blx	r3
90001376:	2800      	cmp	r0, #0
90001378:	d1c1      	bne.n	900012fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x12e>
            lastError = AVI_ERROR_EOF_REACHED;
9000137a:	f04f 0a0d 	mov.w	sl, #13
9000137e:	f885 9040 	strb.w	r9, [r5, #64]	; 0x40
90001382:	e7be      	b.n	90001302 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x132>
90001384:	230d      	movs	r3, #13
90001386:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
9000138a:	e73e      	b.n	9000120a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a>
    offset += 4;
9000138c:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
90001390:	f04f 0b01 	mov.w	fp, #1
90001394:	e786      	b.n	900012a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd4>
        listOffset += listSize;
90001396:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
90001398:	591c      	ldr	r4, [r3, r4]
9000139a:	443c      	add	r4, r7
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000139c:	f104 0708 	add.w	r7, r4, #8
        src = (const char*)movieData + offset;
900013a0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
900013a2:	2204      	movs	r2, #4
900013a4:	4641      	mov	r1, r8
        src = (const char*)movieData + offset;
900013a6:	2600      	movs	r6, #0
900013a8:	4438      	add	r0, r7
    return strncmp(src, str, num);
900013aa:	f022 f96f 	bl	9002368c <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900013ae:	2800      	cmp	r0, #0
900013b0:	d1b7      	bne.n	90001322 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x152>
    if (lastError != AVI_NO_ERROR)
900013b2:	f1ba 0f00 	cmp.w	sl, #0
900013b6:	d066      	beq.n	90001486 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2b6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
900013b8:	230a      	movs	r3, #10
900013ba:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900013be:	b003      	add	sp, #12
900013c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (foundFrame)
900013c4:	f1bb 0f00 	cmp.w	fp, #0
900013c8:	f43f af77 	beq.w	900012ba <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xea>
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
900013cc:	f107 0120 	add.w	r1, r7, #32
    if (reader != 0)
900013d0:	f1b9 0f00 	cmp.w	r9, #0
900013d4:	f000 8102 	beq.w	900015dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x40c>
        const uint32_t index = offset - aviBufferStartOffset;
900013d8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013da:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
900013dc:	1ac9      	subs	r1, r1, r3
900013de:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
900013e2:	f8df c174 	ldr.w	ip, [pc, #372]	; 90001558 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x388>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013e6:	f812 8001 	ldrb.w	r8, [r2, r1]
900013ea:	eb02 0e01 	add.w	lr, r2, r1
        const uint32_t index = offset - aviBufferStartOffset;
900013ee:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
900013f2:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
900013f6:	4438      	add	r0, r7
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900013f8:	f89e b001 	ldrb.w	fp, [lr, #1]
        const uint32_t index = offset - aviBufferStartOffset;
900013fc:	4439      	add	r1, r7
900013fe:	441f      	add	r7, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001400:	f89e 3002 	ldrb.w	r3, [lr, #2]
90001404:	f89e e003 	ldrb.w	lr, [lr, #3]
90001408:	041b      	lsls	r3, r3, #16
9000140a:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
9000140e:	ea43 0308 	orr.w	r3, r3, r8
90001412:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        videoInfo.ms_between_frames = getU32(offset)/1000;
90001416:	fbac c303 	umull	ip, r3, ip, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000141a:	eb02 0c00 	add.w	ip, r2, r0
        videoInfo.ms_between_frames = getU32(offset)/1000;
9000141e:	099b      	lsrs	r3, r3, #6
90001420:	606b      	str	r3, [r5, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001422:	f89c 3002 	ldrb.w	r3, [ip, #2]
90001426:	f89c 8001 	ldrb.w	r8, [ip, #1]
9000142a:	041b      	lsls	r3, r3, #16
9000142c:	f812 e000 	ldrb.w	lr, [r2, r0]
90001430:	f89c c003 	ldrb.w	ip, [ip, #3]
90001434:	1850      	adds	r0, r2, r1
90001436:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
9000143a:	ea43 030e 	orr.w	r3, r3, lr
9000143e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
90001442:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001444:	7883      	ldrb	r3, [r0, #2]
90001446:	f890 c001 	ldrb.w	ip, [r0, #1]
9000144a:	041b      	lsls	r3, r3, #16
9000144c:	5c51      	ldrb	r1, [r2, r1]
9000144e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90001452:	430b      	orrs	r3, r1
90001454:	78c1      	ldrb	r1, [r0, #3]
90001456:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000145a:	19d1      	adds	r1, r2, r7
        videoInfo.frame_width = getU32(offset + 32);
9000145c:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000145e:	788b      	ldrb	r3, [r1, #2]
90001460:	7848      	ldrb	r0, [r1, #1]
90001462:	041b      	lsls	r3, r3, #16
90001464:	5dd2      	ldrb	r2, [r2, r7]
90001466:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000146a:	4313      	orrs	r3, r2
9000146c:	78ca      	ldrb	r2, [r1, #3]
9000146e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    uint32_t listOffset = aviListOffset + aviListSize + 8;
90001472:	4454      	add	r4, sl
        videoInfo.frame_height = getU32(offset + 36);
90001474:	612b      	str	r3, [r5, #16]
    uint32_t listOffset = aviListOffset + aviListSize + 8;
90001476:	3408      	adds	r4, #8
    if (reader != 0)
90001478:	f1b9 0f00 	cmp.w	r9, #0
9000147c:	f47f af23 	bne.w	900012c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf6>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001480:	f895 a040 	ldrb.w	sl, [r5, #64]	; 0x40
90001484:	e736      	b.n	900012f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x124>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
90001486:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000148a:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
9000148c:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
9000148e:	2e00      	cmp	r6, #0
90001490:	f000 80b8 	beq.w	90001604 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x434>
        const uint32_t index = offset - aviBufferStartOffset;
90001494:	6beb      	ldr	r3, [r5, #60]	; 0x3c
90001496:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
90001498:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000149c:	f104 0e02 	add.w	lr, r4, #2
900014a0:	f104 0c01 	add.w	ip, r4, #1
900014a4:	f811 8004 	ldrb.w	r8, [r1, r4]
900014a8:	1ce0      	adds	r0, r4, #3
900014aa:	f811 300e 	ldrb.w	r3, [r1, lr]
        if (length > aviBufferLength)
900014ae:	2a03      	cmp	r2, #3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014b0:	f811 900c 	ldrb.w	r9, [r1, ip]
900014b4:	ea4f 4303 	mov.w	r3, r3, lsl #16
900014b8:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
900014bc:	ea43 0308 	orr.w	r3, r3, r8
900014c0:	f811 8000 	ldrb.w	r8, [r1, r0]
900014c4:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900014c8:	443b      	add	r3, r7
900014ca:	626b      	str	r3, [r5, #36]	; 0x24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900014cc:	f811 300e 	ldrb.w	r3, [r1, lr]
900014d0:	f811 c00c 	ldrb.w	ip, [r1, ip]
900014d4:	ea4f 4303 	mov.w	r3, r3, lsl #16
900014d8:	5d0c      	ldrb	r4, [r1, r4]
900014da:	5c09      	ldrb	r1, [r1, r0]
900014dc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
900014e0:	ea43 0304 	orr.w	r3, r3, r4
900014e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    listOffset += listSize;
900014e8:	441f      	add	r7, r3
        if (length > aviBufferLength)
900014ea:	f240 8093 	bls.w	90001614 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x444>
        reader->seek(offset);
900014ee:	6833      	ldr	r3, [r6, #0]
900014f0:	4639      	mov	r1, r7
900014f2:	4630      	mov	r0, r6
900014f4:	68db      	ldr	r3, [r3, #12]
900014f6:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900014f8:	6b28      	ldr	r0, [r5, #48]	; 0x30
900014fa:	2204      	movs	r2, #4
900014fc:	6b69      	ldr	r1, [r5, #52]	; 0x34
900014fe:	6803      	ldr	r3, [r0, #0]
90001500:	691b      	ldr	r3, [r3, #16]
90001502:	4798      	blx	r3
90001504:	2800      	cmp	r0, #0
90001506:	d05f      	beq.n	900015c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3f8>
    if (reader != 0)
90001508:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
9000150a:	63ef      	str	r7, [r5, #60]	; 0x3c
    if (reader != 0)
9000150c:	2b00      	cmp	r3, #0
9000150e:	f000 80af 	beq.w	90001670 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001512:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001514:	2204      	movs	r2, #4
90001516:	490e      	ldr	r1, [pc, #56]	; (90001550 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x380>)
90001518:	f022 f8b8 	bl	9002368c <strncmp>
    if (!compare(listOffset, "idx1", 4))
9000151c:	2800      	cmp	r0, #0
9000151e:	d16b      	bne.n	900015f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x428>
    frameNumber = 1; //next frame number is 1
90001520:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
90001522:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
90001524:	61ef      	str	r7, [r5, #28]
    frameNumber = 1; //next frame number is 1
90001526:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
90001528:	622b      	str	r3, [r5, #32]
}
9000152a:	b003      	add	sp, #12
9000152c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90001530:	230d      	movs	r3, #13
90001532:	469a      	mov	sl, r3
90001534:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
90001538:	e6da      	b.n	900012f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x120>
9000153a:	bf00      	nop
9000153c:	90024368 	.word	0x90024368
90001540:	90024420 	.word	0x90024420
90001544:	90024418 	.word	0x90024418
90001548:	90024410 	.word	0x90024410
9000154c:	900243f8 	.word	0x900243f8
90001550:	90024408 	.word	0x90024408
90001554:	90024400 	.word	0x90024400
90001558:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
9000155c:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
9000155e:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
90001562:	2204      	movs	r2, #4
90001564:	4944      	ldr	r1, [pc, #272]	; (90001678 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
        src = (const char*)movieData + offset;
90001566:	eb08 0407 	add.w	r4, r8, r7
    return strncmp(src, str, num);
9000156a:	4620      	mov	r0, r4
9000156c:	f022 f88e 	bl	9002368c <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001570:	2800      	cmp	r0, #0
90001572:	d15f      	bne.n	90001634 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x464>
    currentMovieOffset += 8;
90001574:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001578:	2204      	movs	r2, #4
9000157a:	4940      	ldr	r1, [pc, #256]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
    currentMovieOffset += 8;
9000157c:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
9000157e:	4440      	add	r0, r8
90001580:	f022 f884 	bl	9002368c <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
90001584:	2800      	cmp	r0, #0
90001586:	d169      	bne.n	9000165c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>
    currentMovieOffset += 4;
90001588:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
9000158c:	2204      	movs	r2, #4
9000158e:	493c      	ldr	r1, [pc, #240]	; (90001680 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90001590:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
90001594:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001598:	f022 f878 	bl	9002368c <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
9000159c:	4683      	mov	fp, r0
9000159e:	2800      	cmp	r0, #0
900015a0:	d152      	bne.n	90001648 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x478>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015a2:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
900015a4:	2c00      	cmp	r4, #0
900015a6:	d03e      	beq.n	90001626 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x456>
    uint32_t offset =  currentMovieOffset + 8;
900015a8:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
900015ac:	2204      	movs	r2, #4
900015ae:	4935      	ldr	r1, [pc, #212]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
900015b0:	4440      	add	r0, r8
900015b2:	f022 f86b 	bl	9002368c <strncmp>
    if (compare(offset, "hdrl", 4))
900015b6:	b958      	cbnz	r0, 900015d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x400>
    offset += 4;
900015b8:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900015bc:	f04f 0b01 	mov.w	fp, #1
        src = (const char*)movieData + offset;
900015c0:	4440      	add	r0, r8
900015c2:	f04f 0900 	mov.w	r9, #0
900015c6:	e66e      	b.n	900012a6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
            lastError = AVI_ERROR_EOF_REACHED;
900015c8:	230d      	movs	r3, #13
900015ca:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900015ce:	e79b      	b.n	90001508 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x338>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015d0:	2306      	movs	r3, #6
    offset += 4;
900015d2:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015d6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    if (reader != 0)
900015da:	e7f1      	b.n	900015c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3f0>
900015dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        videoInfo.ms_between_frames = getU32(offset)/1000;
900015de:	585a      	ldr	r2, [r3, r1]
900015e0:	441f      	add	r7, r3
900015e2:	4b29      	ldr	r3, [pc, #164]	; (90001688 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
900015e4:	fba3 2302 	umull	r2, r3, r3, r2
900015e8:	099b      	lsrs	r3, r3, #6
900015ea:	606b      	str	r3, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900015ee:	60ab      	str	r3, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        videoInfo.frame_width = getU32(offset + 32);
900015f2:	60eb      	str	r3, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900015f6:	e73c      	b.n	90001472 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
900015f8:	230b      	movs	r3, #11
900015fa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900015fe:	b003      	add	sp, #12
90001600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001604:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
90001606:	5903      	ldr	r3, [r0, r4]
90001608:	443b      	add	r3, r7
9000160a:	626b      	str	r3, [r5, #36]	; 0x24
    listOffset += listSize;
9000160c:	5903      	ldr	r3, [r0, r4]
9000160e:	441f      	add	r7, r3
        src = (const char*)movieData + offset;
90001610:	4438      	add	r0, r7
90001612:	e77f      	b.n	90001514 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x344>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001614:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001616:	4b1d      	ldr	r3, [pc, #116]	; (9000168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4bc>)
90001618:	4a1d      	ldr	r2, [pc, #116]	; (90001690 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c0>)
9000161a:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000161c:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90001620:	481c      	ldr	r0, [pc, #112]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
90001622:	f021 fb79 	bl	90022d18 <__assert_func>
    assert(aviListSize);
90001626:	4b1c      	ldr	r3, [pc, #112]	; (90001698 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c8>)
90001628:	f240 1149 	movw	r1, #329	; 0x149
9000162c:	4a1b      	ldr	r2, [pc, #108]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4cc>)
9000162e:	4819      	ldr	r0, [pc, #100]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
90001630:	f021 fb72 	bl	90022d18 <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
90001634:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
90001636:	4b1a      	ldr	r3, [pc, #104]	; (900016a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4d0>)
90001638:	4a18      	ldr	r2, [pc, #96]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4cc>)
9000163a:	f44f 719a 	mov.w	r1, #308	; 0x134
        lastError = AVI_ERROR_NOT_RIFF;
9000163e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"RIFF header not found");
90001642:	4814      	ldr	r0, [pc, #80]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
90001644:	f021 fb68 	bl	90022d18 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001648:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
9000164a:	4b16      	ldr	r3, [pc, #88]	; (900016a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4d4>)
9000164c:	4a13      	ldr	r2, [pc, #76]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4cc>)
9000164e:	f240 1143 	movw	r1, #323	; 0x143
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001652:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI LIST not found");
90001656:	480f      	ldr	r0, [pc, #60]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
90001658:	f021 fb5e 	bl	90022d18 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000165c:	2004      	movs	r0, #4
        assert(!"AVI header not found");
9000165e:	4b12      	ldr	r3, [pc, #72]	; (900016a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4d8>)
90001660:	4a0e      	ldr	r2, [pc, #56]	; (9000169c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4cc>)
90001662:	f44f 719e 	mov.w	r1, #316	; 0x13c
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90001666:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI header not found");
9000166a:	480a      	ldr	r0, [pc, #40]	; (90001694 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
9000166c:	f021 fb54 	bl	90022d18 <__assert_func>
        src = (const char*)movieData + offset;
90001670:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
90001672:	4438      	add	r0, r7
90001674:	e74e      	b.n	90001514 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x344>
90001676:	bf00      	nop
90001678:	90024368 	.word	0x90024368
9000167c:	90024420 	.word	0x90024420
90001680:	90024418 	.word	0x90024418
90001684:	90024410 	.word	0x90024410
90001688:	10624dd3 	.word	0x10624dd3
9000168c:	90024234 	.word	0x90024234
90001690:	90024248 	.word	0x90024248
90001694:	900241e8 	.word	0x900241e8
90001698:	900243ec 	.word	0x900243ec
9000169c:	9002438c 	.word	0x9002438c
900016a0:	90024370 	.word	0x90024370
900016a4:	900243d4 	.word	0x900243d4
900016a8:	900243bc 	.word	0x900243bc

900016ac <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
900016ac:	b410      	push	{r4}
    reader = 0; //not using reader
900016ae:	2400      	movs	r4, #0
    movieLength = length;
900016b0:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
900016b4:	6304      	str	r4, [r0, #48]	; 0x30
}
900016b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
900016ba:	f7ff bd89 	b.w	900011d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
900016be:	bf00      	nop

900016c0 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
900016c0:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
900016c2:	680b      	ldr	r3, [r1, #0]
{
900016c4:	4604      	mov	r4, r0
    movieData = 0;
900016c6:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
900016c8:	4608      	mov	r0, r1
900016ca:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900016cc:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
900016d0:	4798      	blx	r3
900016d2:	4603      	mov	r3, r0
    readVideoHeader();
900016d4:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900016d6:	62a3      	str	r3, [r4, #40]	; 0x28
}
900016d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900016dc:	f7ff bd78 	b.w	900011d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900016e0 <HAL_JPEG_InfoReadyCallback>:
{
900016e0:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016e2:	684b      	ldr	r3, [r1, #4]
{
900016e4:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016e6:	2b01      	cmp	r3, #1
900016e8:	d01a      	beq.n	90001720 <HAL_JPEG_InfoReadyCallback+0x40>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900016ea:	2b02      	cmp	r3, #2
900016ec:	d010      	beq.n	90001710 <HAL_JPEG_InfoReadyCallback+0x30>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900016ee:	b94b      	cbnz	r3, 90001704 <HAL_JPEG_InfoReadyCallback+0x24>
      if((pInfo->ImageWidth % 8) != 0)
900016f0:	68cb      	ldr	r3, [r1, #12]
900016f2:	0759      	lsls	r1, r3, #29
900016f4:	d12f      	bne.n	90001756 <HAL_JPEG_InfoReadyCallback+0x76>
      if((pInfo->ImageHeight % 8) != 0)
900016f6:	6883      	ldr	r3, [r0, #8]
900016f8:	075a      	lsls	r2, r3, #29
900016fa:	d003      	beq.n	90001704 <HAL_JPEG_InfoReadyCallback+0x24>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
900016fc:	f023 0307 	bic.w	r3, r3, #7
90001700:	3308      	adds	r3, #8
90001702:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
90001704:	4a1a      	ldr	r2, [pc, #104]	; (90001770 <HAL_JPEG_InfoReadyCallback+0x90>)
90001706:	491b      	ldr	r1, [pc, #108]	; (90001774 <HAL_JPEG_InfoReadyCallback+0x94>)
90001708:	f00f fb9e 	bl	90010e48 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
9000170c:	bb40      	cbnz	r0, 90001760 <HAL_JPEG_InfoReadyCallback+0x80>
}
9000170e:	bd08      	pop	{r3, pc}
      if((pInfo->ImageWidth % 16) != 0)
90001710:	68cb      	ldr	r3, [r1, #12]
90001712:	071a      	lsls	r2, r3, #28
90001714:	d0ef      	beq.n	900016f6 <HAL_JPEG_InfoReadyCallback+0x16>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
90001716:	f023 030f 	bic.w	r3, r3, #15
9000171a:	3310      	adds	r3, #16
9000171c:	60cb      	str	r3, [r1, #12]
9000171e:	e7ea      	b.n	900016f6 <HAL_JPEG_InfoReadyCallback+0x16>
    if((pInfo->ImageWidth % 16) != 0)
90001720:	68cb      	ldr	r3, [r1, #12]
90001722:	071a      	lsls	r2, r3, #28
90001724:	d003      	beq.n	9000172e <HAL_JPEG_InfoReadyCallback+0x4e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
90001726:	f023 030f 	bic.w	r3, r3, #15
9000172a:	3310      	adds	r3, #16
9000172c:	60cb      	str	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
9000172e:	6883      	ldr	r3, [r0, #8]
90001730:	0719      	lsls	r1, r3, #28
90001732:	d003      	beq.n	9000173c <HAL_JPEG_InfoReadyCallback+0x5c>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
90001734:	f023 030f 	bic.w	r3, r3, #15
90001738:	3310      	adds	r3, #16
9000173a:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
9000173c:	4a0c      	ldr	r2, [pc, #48]	; (90001770 <HAL_JPEG_InfoReadyCallback+0x90>)
9000173e:	490d      	ldr	r1, [pc, #52]	; (90001774 <HAL_JPEG_InfoReadyCallback+0x94>)
90001740:	f001 fefa 	bl	90003538 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
90001744:	2800      	cmp	r0, #0
90001746:	d0e2      	beq.n	9000170e <HAL_JPEG_InfoReadyCallback+0x2e>
      assert(status == HAL_OK);
90001748:	4b0b      	ldr	r3, [pc, #44]	; (90001778 <HAL_JPEG_InfoReadyCallback+0x98>)
9000174a:	f240 212e 	movw	r1, #558	; 0x22e
9000174e:	4a0b      	ldr	r2, [pc, #44]	; (9000177c <HAL_JPEG_InfoReadyCallback+0x9c>)
90001750:	480b      	ldr	r0, [pc, #44]	; (90001780 <HAL_JPEG_InfoReadyCallback+0xa0>)
90001752:	f021 fae1 	bl	90022d18 <__assert_func>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
90001756:	f023 0307 	bic.w	r3, r3, #7
9000175a:	3308      	adds	r3, #8
9000175c:	60c3      	str	r3, [r0, #12]
9000175e:	e7ca      	b.n	900016f6 <HAL_JPEG_InfoReadyCallback+0x16>
      assert(status == HAL_OK);
90001760:	4b05      	ldr	r3, [pc, #20]	; (90001778 <HAL_JPEG_InfoReadyCallback+0x98>)
90001762:	f44f 7112 	mov.w	r1, #584	; 0x248
90001766:	4a05      	ldr	r2, [pc, #20]	; (9000177c <HAL_JPEG_InfoReadyCallback+0x9c>)
90001768:	4805      	ldr	r0, [pc, #20]	; (90001780 <HAL_JPEG_InfoReadyCallback+0xa0>)
9000176a:	f021 fad5 	bl	90022d18 <__assert_func>
9000176e:	bf00      	nop
90001770:	24005ba0 	.word	0x24005ba0
90001774:	24005bdc 	.word	0x24005bdc
90001778:	90024428 	.word	0x90024428
9000177c:	9002443c 	.word	0x9002443c
90001780:	900241e8 	.word	0x900241e8

90001784 <HAL_JPEG_GetDataCallback>:
  JPEG_InputImageIndex += NbDecodedData;
90001784:	4b0c      	ldr	r3, [pc, #48]	; (900017b8 <HAL_JPEG_GetDataCallback+0x34>)
{
90001786:	b410      	push	{r4}
  JPEG_InputImageIndex += NbDecodedData;
90001788:	681a      	ldr	r2, [r3, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000178a:	4c0c      	ldr	r4, [pc, #48]	; (900017bc <HAL_JPEG_GetDataCallback+0x38>)
  JPEG_InputImageIndex += NbDecodedData;
9000178c:	440a      	add	r2, r1
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000178e:	6824      	ldr	r4, [r4, #0]
  JPEG_InputImageIndex += NbDecodedData;
90001790:	601a      	str	r2, [r3, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001792:	42a2      	cmp	r2, r4
90001794:	d302      	bcc.n	9000179c <HAL_JPEG_GetDataCallback+0x18>
}
90001796:	f85d 4b04 	ldr.w	r4, [sp], #4
9000179a:	4770      	bx	lr
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
9000179c:	4b08      	ldr	r3, [pc, #32]	; (900017c0 <HAL_JPEG_GetDataCallback+0x3c>)
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
9000179e:	1aa2      	subs	r2, r4, r2
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017a0:	681c      	ldr	r4, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017a2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017a6:	4421      	add	r1, r4
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017a8:	bf28      	it	cs
900017aa:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
}
900017ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
900017b2:	6019      	str	r1, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
900017b4:	f007 bef0 	b.w	90009598 <HAL_JPEG_ConfigInputBuffer>
900017b8:	24005b84 	.word	0x24005b84
900017bc:	24005b88 	.word	0x24005b88
900017c0:	24005b80 	.word	0x24005b80

900017c4 <HAL_JPEG_DataReadyCallback>:
{
900017c4:	b570      	push	{r4, r5, r6, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017c6:	4e1e      	ldr	r6, [pc, #120]	; (90001840 <HAL_JPEG_DataReadyCallback+0x7c>)
{
900017c8:	4605      	mov	r5, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017ca:	2001      	movs	r0, #1
900017cc:	4c1d      	ldr	r4, [pc, #116]	; (90001844 <HAL_JPEG_DataReadyCallback+0x80>)
900017ce:	6833      	ldr	r3, [r6, #0]
900017d0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
900017d4:	4403      	add	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017d6:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017da:	4283      	cmp	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017dc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
900017e0:	608a      	str	r2, [r1, #8]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017e2:	d91a      	bls.n	9000181a <HAL_JPEG_DataReadyCallback+0x56>
      JPEG_OUT_Write_BufferIndex = 0;
900017e4:	2200      	movs	r2, #0
900017e6:	4613      	mov	r3, r2
900017e8:	6032      	str	r2, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
900017ea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
900017ee:	005a      	lsls	r2, r3, #1
900017f0:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
900017f4:	b9c9      	cbnz	r1, 9000182a <HAL_JPEG_DataReadyCallback+0x66>
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900017f6:	4914      	ldr	r1, [pc, #80]	; (90001848 <HAL_JPEG_DataReadyCallback+0x84>)
900017f8:	4413      	add	r3, r2
900017fa:	4628      	mov	r0, r5
900017fc:	68ca      	ldr	r2, [r1, #12]
900017fe:	eb04 0483 	add.w	r4, r4, r3, lsl #2
90001802:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90001806:	6861      	ldr	r1, [r4, #4]
90001808:	01d2      	lsls	r2, r2, #7
9000180a:	f007 fec9 	bl	900095a0 <HAL_JPEG_ConfigOutputBuffer>
    SEM_POST(semDecodingDone);
9000180e:	4b0f      	ldr	r3, [pc, #60]	; (9000184c <HAL_JPEG_DataReadyCallback+0x88>)
}
90001810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SEM_POST(semDecodingDone);
90001814:	6818      	ldr	r0, [r3, #0]
90001816:	f00b bf53 	b.w	9000d6c0 <osSemaphoreRelease>
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
9000181a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
9000181e:	6033      	str	r3, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001820:	005a      	lsls	r2, r3, #1
90001822:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
90001826:	2900      	cmp	r1, #0
90001828:	d0e5      	beq.n	900017f6 <HAL_JPEG_DataReadyCallback+0x32>
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
9000182a:	2102      	movs	r1, #2
9000182c:	4628      	mov	r0, r5
9000182e:	f007 fe7b 	bl	90009528 <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
90001832:	4a07      	ldr	r2, [pc, #28]	; (90001850 <HAL_JPEG_DataReadyCallback+0x8c>)
90001834:	2101      	movs	r1, #1
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001836:	6833      	ldr	r3, [r6, #0]
      Output_Is_Paused = 1;
90001838:	6011      	str	r1, [r2, #0]
9000183a:	fa03 f201 	lsl.w	r2, r3, r1
9000183e:	e7da      	b.n	900017f6 <HAL_JPEG_DataReadyCallback+0x32>
90001840:	24005b90 	.word	0x24005b90
90001844:	24000004 	.word	0x24000004
90001848:	24005ba8 	.word	0x24005ba8
9000184c:	24005be0 	.word	0x24005be0
90001850:	24005ba4 	.word	0x24005ba4

90001854 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
90001854:	b672      	cpsid	i
  while (1)
90001856:	e7fe      	b.n	90001856 <HAL_JPEG_ErrorCallback+0x2>

90001858 <HAL_JPEG_DecodeCpltCallback>:
  Jpeg_HWDecodingEnd = 1;
90001858:	4b01      	ldr	r3, [pc, #4]	; (90001860 <HAL_JPEG_DecodeCpltCallback+0x8>)
9000185a:	2201      	movs	r2, #1
9000185c:	601a      	str	r2, [r3, #0]
}
9000185e:	4770      	bx	lr
90001860:	24005b98 	.word	0x24005b98

90001864 <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
90001864:	b5f0      	push	{r4, r5, r6, r7, lr}
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001866:	2302      	movs	r3, #2
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001868:	4c1a      	ldr	r4, [pc, #104]	; (900018d4 <DMA2D_CopyBuffer+0x70>)
9000186a:	6806      	ldr	r6, [r0, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
9000186c:	4d1a      	ldr	r5, [pc, #104]	; (900018d8 <DMA2D_CopyBuffer+0x74>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000186e:	6822      	ldr	r2, [r4, #0]
90001870:	0131      	lsls	r1, r6, #4
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001872:	636b      	str	r3, [r5, #52]	; 0x34

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001874:	4b19      	ldr	r3, [pc, #100]	; (900018dc <DMA2D_CopyBuffer+0x78>)
90001876:	681f      	ldr	r7, [r3, #0]
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001878:	fbb1 f3f2 	udiv	r3, r1, r2
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
9000187c:	fb02 1113 	mls	r1, r2, r3, r1
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001880:	6862      	ldr	r2, [r4, #4]
90001882:	fb02 f303 	mul.w	r3, r2, r3
90001886:	6922      	ldr	r2, [r4, #16]
90001888:	ea4f 1c03 	mov.w	ip, r3, lsl #4
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
9000188c:	68e3      	ldr	r3, [r4, #12]
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000188e:	fb01 f202 	mul.w	r2, r1, r2
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001892:	eba7 0e03 	sub.w	lr, r7, r3
90001896:	4576      	cmp	r6, lr
90001898:	d317      	bcc.n	900018ca <DMA2D_CopyBuffer+0x66>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
9000189a:	68a1      	ldr	r1, [r4, #8]
9000189c:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
900018a0:	6469      	str	r1, [r5, #68]	; 0x44
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018a2:	490f      	ldr	r1, [pc, #60]	; (900018e0 <DMA2D_CopyBuffer+0x7c>)

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018a4:	f1c3 031e 	rsb	r3, r3, #30

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018a8:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->FGOR, 0);
900018aa:	2400      	movs	r4, #0
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018ac:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018ae:	011b      	lsls	r3, r3, #4
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018b0:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
900018b2:	4411      	add	r1, r2
900018b4:	4a08      	ldr	r2, [pc, #32]	; (900018d8 <DMA2D_CopyBuffer+0x74>)
900018b6:	4461      	add	r1, ip
900018b8:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018ba:	6413      	str	r3, [r2, #64]	; 0x40
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018bc:	4909      	ldr	r1, [pc, #36]	; (900018e4 <DMA2D_CopyBuffer+0x80>)

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018be:	4b0a      	ldr	r3, [pc, #40]	; (900018e8 <DMA2D_CopyBuffer+0x84>)
  WRITE_REG(DMA2D->FGOR, 0);
900018c0:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018c2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018c4:	60d0      	str	r0, [r2, #12]
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018c6:	6013      	str	r3, [r2, #0]
}
900018c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018ca:	0519      	lsls	r1, r3, #20
900018cc:	f041 0110 	orr.w	r1, r1, #16
900018d0:	6469      	str	r1, [r5, #68]	; 0x44
900018d2:	e7e6      	b.n	900018a2 <DMA2D_CopyBuffer+0x3e>
900018d4:	24005ba8 	.word	0x24005ba8
900018d8:	52001000 	.word	0x52001000
900018dc:	24005ba0 	.word	0x24005ba0
900018e0:	24005b7c 	.word	0x24005b7c
900018e4:	ff09000b 	.word	0xff09000b
900018e8:	00010201 	.word	0x00010201

900018ec <DMA2D_ExternalJobCompleted>:
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
900018ec:	2200      	movs	r2, #0
900018ee:	6843      	ldr	r3, [r0, #4]
      return count_ == 0;
900018f0:	490b      	ldr	r1, [pc, #44]	; (90001920 <DMA2D_ExternalJobCompleted+0x34>)
900018f2:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
900018f4:	68c9      	ldr	r1, [r1, #12]
  job.jpeg_buffer->DataBufferSize = 0;
900018f6:	609a      	str	r2, [r3, #8]
  if(external_queue.is_empty())
900018f8:	b911      	cbnz	r1, 90001900 <DMA2D_ExternalJobCompleted+0x14>
  {
      DMA2D_output_Is_Paused = 1;
900018fa:	4b0a      	ldr	r3, [pc, #40]	; (90001924 <DMA2D_ExternalJobCompleted+0x38>)
900018fc:	2201      	movs	r2, #1
900018fe:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
90001900:	4b09      	ldr	r3, [pc, #36]	; (90001928 <DMA2D_ExternalJobCompleted+0x3c>)
90001902:	490a      	ldr	r1, [pc, #40]	; (9000192c <DMA2D_ExternalJobCompleted+0x40>)
90001904:	681b      	ldr	r3, [r3, #0]
90001906:	68c9      	ldr	r1, [r1, #12]
90001908:	6802      	ldr	r2, [r0, #0]
9000190a:	1a5b      	subs	r3, r3, r1
9000190c:	429a      	cmp	r2, r3
9000190e:	d302      	bcc.n	90001916 <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_CopyBufferEnd = 1;
90001910:	4b07      	ldr	r3, [pc, #28]	; (90001930 <DMA2D_ExternalJobCompleted+0x44>)
90001912:	2201      	movs	r2, #1
90001914:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
90001916:	4b07      	ldr	r3, [pc, #28]	; (90001934 <DMA2D_ExternalJobCompleted+0x48>)
90001918:	6818      	ldr	r0, [r3, #0]
9000191a:	f00b bed1 	b.w	9000d6c0 <osSemaphoreRelease>
9000191e:	bf00      	nop
90001920:	24005bbc 	.word	0x24005bbc
90001924:	24005b78 	.word	0x24005b78
90001928:	24005ba0 	.word	0x24005ba0
9000192c:	24005ba8 	.word	0x24005ba8
90001930:	24005b74 	.word	0x24005b74
90001934:	24005be0 	.word	0x24005be0

90001938 <_GLOBAL__sub_I_FrameBufferAddress>:
      : max_size_(Size), head_(0), tail_(0), count_(0)
90001938:	4b03      	ldr	r3, [pc, #12]	; (90001948 <_GLOBAL__sub_I_FrameBufferAddress+0x10>)
9000193a:	2200      	movs	r2, #0
9000193c:	2102      	movs	r1, #2
9000193e:	60da      	str	r2, [r3, #12]
90001940:	6019      	str	r1, [r3, #0]
90001942:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
90001946:	4770      	bx	lr
90001948:	24005bbc 	.word	0x24005bbc

9000194c <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
9000194c:	2101      	movs	r1, #1
9000194e:	2200      	movs	r2, #0
{
90001950:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001952:	4608      	mov	r0, r1
90001954:	f00b fe30 	bl	9000d5b8 <osSemaphoreNew>
90001958:	4b0b      	ldr	r3, [pc, #44]	; (90001988 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
9000195a:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
9000195c:	b140      	cbz	r0, 90001970 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
9000195e:	2200      	movs	r2, #0
90001960:	2104      	movs	r1, #4
90001962:	2001      	movs	r0, #1
90001964:	f00b fed8 	bl	9000d718 <osMessageQueueNew>
90001968:	4b08      	ldr	r3, [pc, #32]	; (9000198c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
9000196a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
9000196c:	b130      	cbz	r0, 9000197c <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
9000196e:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001970:	4b07      	ldr	r3, [pc, #28]	; (90001990 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
90001972:	2128      	movs	r1, #40	; 0x28
90001974:	4a07      	ldr	r2, [pc, #28]	; (90001994 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
90001976:	4808      	ldr	r0, [pc, #32]	; (90001998 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001978:	f021 f9ce 	bl	90022d18 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
9000197c:	4b07      	ldr	r3, [pc, #28]	; (9000199c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
9000197e:	212c      	movs	r1, #44	; 0x2c
90001980:	4a04      	ldr	r2, [pc, #16]	; (90001994 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
90001982:	4805      	ldr	r0, [pc, #20]	; (90001998 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001984:	f021 f9c8 	bl	90022d18 <__assert_func>
90001988:	24005be8 	.word	0x24005be8
9000198c:	24005be4 	.word	0x24005be4
90001990:	900244c8 	.word	0x900244c8
90001994:	90024514 	.word	0x90024514
90001998:	90024544 	.word	0x90024544
9000199c:	90024588 	.word	0x90024588

900019a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
900019a0:	4b02      	ldr	r3, [pc, #8]	; (900019ac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
900019a2:	f04f 31ff 	mov.w	r1, #4294967295
900019a6:	6818      	ldr	r0, [r3, #0]
900019a8:	f00b be56 	b.w	9000d658 <osSemaphoreAcquire>
900019ac:	24005be8 	.word	0x24005be8

900019b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
900019b0:	4b01      	ldr	r3, [pc, #4]	; (900019b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
900019b2:	6818      	ldr	r0, [r3, #0]
900019b4:	f00b be84 	b.w	9000d6c0 <osSemaphoreRelease>
900019b8:	24005be8 	.word	0x24005be8

900019bc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
900019bc:	4b02      	ldr	r3, [pc, #8]	; (900019c8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
900019be:	2100      	movs	r1, #0
900019c0:	6818      	ldr	r0, [r3, #0]
900019c2:	f00b be49 	b.w	9000d658 <osSemaphoreAcquire>
900019c6:	bf00      	nop
900019c8:	24005be8 	.word	0x24005be8

900019cc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
900019cc:	4b01      	ldr	r3, [pc, #4]	; (900019d4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
900019ce:	6818      	ldr	r0, [r3, #0]
900019d0:	f00b be76 	b.w	9000d6c0 <osSemaphoreRelease>
900019d4:	24005be8 	.word	0x24005be8

900019d8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
900019d8:	4803      	ldr	r0, [pc, #12]	; (900019e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
900019da:	2300      	movs	r3, #0
900019dc:	4903      	ldr	r1, [pc, #12]	; (900019ec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
900019de:	461a      	mov	r2, r3
900019e0:	6800      	ldr	r0, [r0, #0]
900019e2:	f00b bed3 	b.w	9000d78c <osMessageQueuePut>
900019e6:	bf00      	nop
900019e8:	24005be4 	.word	0x24005be4
900019ec:	2400001c 	.word	0x2400001c

900019f0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
900019f0:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019f2:	2300      	movs	r3, #0
{
900019f4:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019f6:	4c07      	ldr	r4, [pc, #28]	; (90001a14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
900019f8:	461a      	mov	r2, r3
900019fa:	a901      	add	r1, sp, #4
900019fc:	6820      	ldr	r0, [r4, #0]
900019fe:	f00b ff07 	bl	9000d810 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
90001a02:	f04f 33ff 	mov.w	r3, #4294967295
90001a06:	2200      	movs	r2, #0
90001a08:	a901      	add	r1, sp, #4
90001a0a:	6820      	ldr	r0, [r4, #0]
90001a0c:	f00b ff00 	bl	9000d810 <osMessageQueueGet>
}
90001a10:	b002      	add	sp, #8
90001a12:	bd10      	pop	{r4, pc}
90001a14:	24005be4 	.word	0x24005be4

90001a18 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90001a18:	6803      	ldr	r3, [r0, #0]
90001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001a1c:	4718      	bx	r3
90001a1e:	bf00      	nop

90001a20 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001a20:	2001      	movs	r0, #1
90001a22:	4770      	bx	lr

90001a24 <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
90001a24:	4905      	ldr	r1, [pc, #20]	; (90001a3c <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a2a:	4b05      	ldr	r3, [pc, #20]	; (90001a40 <_ZN8STM32DMAD1Ev+0x1c>)
90001a2c:	6001      	str	r1, [r0, #0]
90001a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a36:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90001a3a:	4770      	bx	lr
90001a3c:	90024724 	.word	0x90024724
90001a40:	e000e100 	.word	0xe000e100

90001a44 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a44:	4b0f      	ldr	r3, [pc, #60]	; (90001a84 <_ZN8STM32DMA10initializeEv+0x40>)
{
90001a46:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a48:	490f      	ldr	r1, [pc, #60]	; (90001a88 <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a4a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a4e:	480f      	ldr	r0, [pc, #60]	; (90001a8c <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a50:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a54:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a56:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90001a5a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90001a5e:	f002 0210 	and.w	r2, r2, #16
90001a62:	9201      	str	r2, [sp, #4]
90001a64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
90001a66:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a68:	f042 0210 	orr.w	r2, r2, #16
90001a6c:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90001a6e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a70:	f022 0210 	bic.w	r2, r2, #16
90001a74:	67da      	str	r2, [r3, #124]	; 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a76:	4b06      	ldr	r3, [pc, #24]	; (90001a90 <_ZN8STM32DMA10initializeEv+0x4c>)
90001a78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a7c:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90001a7e:	b002      	add	sp, #8
90001a80:	4770      	bx	lr
90001a82:	bf00      	nop
90001a84:	58024400 	.word	0x58024400
90001a88:	2400aea0 	.word	0x2400aea0
90001a8c:	90001e3d 	.word	0x90001e3d
90001a90:	e000e100 	.word	0xe000e100

90001a94 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
90001a94:	f240 30ef 	movw	r0, #1007	; 0x3ef
90001a98:	4770      	bx	lr
90001a9a:	bf00      	nop

90001a9c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
90001a9c:	4909      	ldr	r1, [pc, #36]	; (90001ac4 <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001aa2:	4b09      	ldr	r3, [pc, #36]	; (90001ac8 <_ZN8STM32DMAD0Ev+0x2c>)
90001aa4:	b510      	push	{r4, lr}
90001aa6:	6001      	str	r1, [r0, #0]
90001aa8:	4604      	mov	r4, r0
90001aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001aae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001ab2:	f3bf 8f6f 	isb	sy
}
90001ab6:	f640 51a8 	movw	r1, #3496	; 0xda8
90001aba:	f021 f8fe 	bl	90022cba <_ZdlPvj>
90001abe:	4620      	mov	r0, r4
90001ac0:	bd10      	pop	{r4, pc}
90001ac2:	bf00      	nop
90001ac4:	90024724 	.word	0x90024724
90001ac8:	e000e100 	.word	0xe000e100

90001acc <_ZN8STM32DMA5startEv>:
                externalJobExecute();
            }
        }
    }

    virtual void start()
90001acc:	b510      	push	{r4, lr}
90001ace:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
90001ad0:	f04f 31ff 	mov.w	r1, #4294967295
90001ad4:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	; 0xda4
90001ad8:	f00b fd28 	bl	9000d52c <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001adc:	6860      	ldr	r0, [r4, #4]
90001ade:	6803      	ldr	r3, [r0, #0]
90001ae0:	681b      	ldr	r3, [r3, #0]
90001ae2:	4798      	blx	r3
90001ae4:	b978      	cbnz	r0, 90001b06 <_ZN8STM32DMA5startEv+0x3a>
90001ae6:	7a63      	ldrb	r3, [r4, #9]
90001ae8:	b16b      	cbz	r3, 90001b06 <_ZN8STM32DMA5startEv+0x3a>
90001aea:	7a23      	ldrb	r3, [r4, #8]
90001aec:	b92b      	cbnz	r3, 90001afa <_ZN8STM32DMA5startEv+0x2e>
        {
            started_by_external_job = false;
            execute();
90001aee:	6822      	ldr	r2, [r4, #0]
90001af0:	4620      	mov	r0, r4
            started_by_external_job = false;
90001af2:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
            execute();
90001af6:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001af8:	4798      	blx	r3
        else if(!external_queue.is_empty() && !isRunning)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90001afa:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b02:	f00b bd37 	b.w	9000d574 <osMutexRelease>
      return count_ == 0;
90001b06:	4b0b      	ldr	r3, [pc, #44]	; (90001b34 <_ZN8STM32DMA5startEv+0x68>)
        else if(!external_queue.is_empty() && !isRunning)
90001b08:	68da      	ldr	r2, [r3, #12]
90001b0a:	2a00      	cmp	r2, #0
90001b0c:	d0f5      	beq.n	90001afa <_ZN8STM32DMA5startEv+0x2e>
90001b0e:	7a22      	ldrb	r2, [r4, #8]
90001b10:	2a00      	cmp	r2, #0
90001b12:	d1f2      	bne.n	90001afa <_ZN8STM32DMA5startEv+0x2e>
      return buffer_[head_];
90001b14:	6858      	ldr	r0, [r3, #4]
            started_by_external_job = true;
90001b16:	2201      	movs	r2, #1
      return buffer_[head_];
90001b18:	3002      	adds	r0, #2
            started_by_external_job = true;
90001b1a:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
90001b1e:	7222      	strb	r2, [r4, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
        DMA2D_CopyBuffer(job);
90001b20:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001b24:	f7ff fe9e 	bl	90001864 <DMA2D_CopyBuffer>
        MUTEX_UNLOCK(mutexIsRunning);
90001b28:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b30:	f00b bd20 	b.w	9000d574 <osMutexRelease>
90001b34:	24005bbc 	.word	0x24005bbc

90001b38 <_ZN8STM32DMA18signalDMAInterruptEv>:
    virtual void signalDMAInterrupt()
90001b38:	b538      	push	{r3, r4, r5, lr}
        if(started_by_external_job)
90001b3a:	f890 3da0 	ldrb.w	r3, [r0, #3488]	; 0xda0
    virtual void signalDMAInterrupt()
90001b3e:	4604      	mov	r4, r0
        if(started_by_external_job)
90001b40:	b943      	cbnz	r3, 90001b54 <_ZN8STM32DMA18signalDMAInterruptEv+0x1c>
            executeCompleted();
90001b42:	6803      	ldr	r3, [r0, #0]
90001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b46:	4798      	blx	r3
      return count_ == 0;
90001b48:	4b15      	ldr	r3, [pc, #84]	; (90001ba0 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
            if(!external_queue.is_empty() && !isRunning)
90001b4a:	68da      	ldr	r2, [r3, #12]
90001b4c:	b10a      	cbz	r2, 90001b52 <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b4e:	7a22      	ldrb	r2, [r4, #8]
90001b50:	b1d2      	cbz	r2, 90001b88 <_ZN8STM32DMA18signalDMAInterruptEv+0x50>
    }
90001b52:	bd38      	pop	{r3, r4, r5, pc}
      return count_ == 0;
90001b54:	4b12      	ldr	r3, [pc, #72]	; (90001ba0 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
90001b56:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001b58:	2a00      	cmp	r2, #0
90001b5a:	d0fa      	beq.n	90001b52 <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b5c:	7a01      	ldrb	r1, [r0, #8]
90001b5e:	2900      	cmp	r1, #0
90001b60:	d0f7      	beq.n	90001b52 <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
            isRunning = false;
90001b62:	2100      	movs	r1, #0
      count_--;
90001b64:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001b66:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001b6a:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001b6c:	1c41      	adds	r1, r0, #1
      count_--;
90001b6e:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001b70:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001b72:	fbb1 f2f5 	udiv	r2, r1, r5
90001b76:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001b7a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      head_ = (head_ + 1) % max_size_;
90001b7e:	6059      	str	r1, [r3, #4]
    }
90001b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            DMA2D_ExternalJobCompleted(completed_job);
90001b84:	f7ff beb2 	b.w	900018ec <DMA2D_ExternalJobCompleted>
      return buffer_[head_];
90001b88:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001b8a:	2201      	movs	r2, #1
      return buffer_[head_];
90001b8c:	3002      	adds	r0, #2
                started_by_external_job = true;
90001b8e:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001b92:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001b94:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    }
90001b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DMA2D_CopyBuffer(job);
90001b9c:	f7ff be62 	b.w	90001864 <DMA2D_CopyBuffer>
90001ba0:	24005bbc 	.word	0x24005bbc

90001ba4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
90001ba4:	b538      	push	{r3, r4, r5, lr}
    switch (format)
90001ba6:	7f8b      	ldrb	r3, [r1, #30]
90001ba8:	2b0a      	cmp	r3, #10
90001baa:	d83e      	bhi.n	90001c2a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x86>
90001bac:	e8df f003 	tbb	[pc, r3]
90001bb0:	3d2a063b 	.word	0x3d2a063b
90001bb4:	063d3d3d 	.word	0x063d3d3d
90001bb8:	0606      	.short	0x0606
90001bba:	06          	.byte	0x06
90001bbb:	00          	.byte	0x00
90001bbc:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bbe:	f8b1 c014 	ldrh.w	ip, [r1, #20]
90001bc2:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bc4:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bc6:	4b1c      	ldr	r3, [pc, #112]	; (90001c38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bcc:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bd0:	635c      	str	r4, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bd2:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001bd4:	6908      	ldr	r0, [r1, #16]
90001bd6:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bd8:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001bda:	680d      	ldr	r5, [r1, #0]
90001bdc:	2d08      	cmp	r5, #8
90001bde:	d013      	beq.n	90001c08 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
90001be0:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001be2:	61dc      	str	r4, [r3, #28]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001be4:	4c15      	ldr	r4, [pc, #84]	; (90001c3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
        WRITE_REG(DMA2D->FGOR, 0);
90001be6:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
90001be8:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90001bea:	0a0a      	lsrs	r2, r1, #8
90001bec:	0948      	lsrs	r0, r1, #5
90001bee:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90001bf2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90001bf6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90001bfa:	4302      	orrs	r2, r0
90001bfc:	430a      	orrs	r2, r1
90001bfe:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001c00:	601c      	str	r4, [r3, #0]
    }
}
90001c02:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001c04:	2400      	movs	r4, #0
90001c06:	e7da      	b.n	90001bbe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c08:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c0a:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001c0c:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c0e:	4a0c      	ldr	r2, [pc, #48]	; (90001c40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
90001c10:	7f0c      	ldrb	r4, [r1, #28]
90001c12:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c16:	4c0b      	ldr	r4, [pc, #44]	; (90001c44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c18:	61da      	str	r2, [r3, #28]
90001c1a:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001c1c:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c1e:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c20:	60d8      	str	r0, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c22:	601c      	str	r4, [r3, #0]
}
90001c24:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001c26:	2402      	movs	r4, #2
90001c28:	e7c9      	b.n	90001bbe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90001c2a:	4b07      	ldr	r3, [pc, #28]	; (90001c48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90001c2c:	2188      	movs	r1, #136	; 0x88
90001c2e:	4a07      	ldr	r2, [pc, #28]	; (90001c4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90001c30:	4807      	ldr	r0, [pc, #28]	; (90001c50 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
90001c32:	f021 f871 	bl	90022d18 <__assert_func>
90001c36:	bf00      	nop
90001c38:	52001000 	.word	0x52001000
90001c3c:	00030201 	.word	0x00030201
90001c40:	00010009 	.word	0x00010009
90001c44:	00020201 	.word	0x00020201
90001c48:	900245cc 	.word	0x900245cc
90001c4c:	900245e8 	.word	0x900245e8
90001c50:	90024634 	.word	0x90024634

90001c54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90001c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001c56:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90001c5a:	f1be 0f0b 	cmp.w	lr, #11
90001c5e:	f200 80c1 	bhi.w	90001de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c62:	e8df f01e 	tbh	[pc, lr, lsl #1]
90001c66:	0063      	.short	0x0063
90001c68:	004c0065 	.word	0x004c0065
90001c6c:	00bf00bf 	.word	0x00bf00bf
90001c70:	00bf00bf 	.word	0x00bf00bf
90001c74:	000c000c 	.word	0x000c000c
90001c78:	000c000c 	.word	0x000c000c
90001c7c:	000c      	.short	0x000c
        dma2dColorMode = DMA2D_INPUT_L8;
90001c7e:	2505      	movs	r5, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001c80:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90001c84:	f1bc 0f0b 	cmp.w	ip, #11
90001c88:	f200 80ac 	bhi.w	90001de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c8c:	e8df f00c 	tbb	[pc, ip]
90001c90:	aa0e4b52 	.word	0xaa0e4b52
90001c94:	06aaaaaa 	.word	0x06aaaaaa
90001c98:	06060606 	.word	0x06060606
    switch (format)
90001c9c:	f1ac 0307 	sub.w	r3, ip, #7
90001ca0:	2b03      	cmp	r3, #3
90001ca2:	f200 80a5 	bhi.w	90001df0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
90001ca6:	2605      	movs	r6, #5
90001ca8:	2701      	movs	r7, #1
90001caa:	e001      	b.n	90001cb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001cac:	2600      	movs	r6, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001cae:	4637      	mov	r7, r6
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cb0:	8a8b      	ldrh	r3, [r1, #20]
90001cb2:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cb4:	8b0c      	ldrh	r4, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cb6:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cb8:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cba:	1ae4      	subs	r4, r4, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cbc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cc0:	4b52      	ldr	r3, [pc, #328]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001cc2:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cc4:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cc6:	611c      	str	r4, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cc8:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001cca:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001ccc:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001cce:	6908      	ldr	r0, [r1, #16]
90001cd0:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cd2:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90001cd4:	680a      	ldr	r2, [r1, #0]
90001cd6:	2a80      	cmp	r2, #128	; 0x80
90001cd8:	d03b      	beq.n	90001d52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
90001cda:	d812      	bhi.n	90001d02 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
90001cdc:	2a20      	cmp	r2, #32
90001cde:	d02c      	beq.n	90001d3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ce0:	2a40      	cmp	r2, #64	; 0x40
90001ce2:	d02a      	beq.n	90001d3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ce4:	2a04      	cmp	r2, #4
90001ce6:	d169      	bne.n	90001dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001ce8:	7f0a      	ldrb	r2, [r1, #28]
90001cea:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001cee:	4a48      	ldr	r2, [pc, #288]	; (90001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf0:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001cf4:	61dd      	str	r5, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001cf6:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001cf8:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001cfa:	601a      	str	r2, [r3, #0]
}
90001cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001cfe:	2500      	movs	r5, #0
90001d00:	e7be      	b.n	90001c80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
90001d02:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90001d06:	d067      	beq.n	90001dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
90001d08:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90001d0c:	d156      	bne.n	90001dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d0e:	7f0c      	ldrb	r4, [r1, #28]
90001d10:	4a40      	ldr	r2, [pc, #256]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
90001d12:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
90001d16:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d18:	4a3d      	ldr	r2, [pc, #244]	; (90001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d1a:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001d1c:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d1e:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d20:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d22:	601a      	str	r2, [r3, #0]
}
90001d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90001d26:	2601      	movs	r6, #1
90001d28:	4637      	mov	r7, r6
90001d2a:	e7c1      	b.n	90001cb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
90001d2c:	2502      	movs	r5, #2
90001d2e:	e7a7      	b.n	90001c80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90001d30:	2501      	movs	r5, #1
90001d32:	e7a5      	b.n	90001c80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB565;
90001d34:	2602      	movs	r6, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001d36:	4637      	mov	r7, r6
90001d38:	e7ba      	b.n	90001cb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d3a:	7f0b      	ldrb	r3, [r1, #28]
90001d3c:	4a33      	ldr	r2, [pc, #204]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d3e:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d42:	4b33      	ldr	r3, [pc, #204]	; (90001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d44:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001d48:	61d5      	str	r5, [r2, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d4a:	6256      	str	r6, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d4c:	6150      	str	r0, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d4e:	6013      	str	r3, [r2, #0]
}
90001d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90001d52:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90001d54:	1d14      	adds	r4, r2, #4
90001d56:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d58:	7f0c      	ldrb	r4, [r1, #28]
            switch ((Bitmap::ClutFormat)palette->format)
90001d5a:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d5c:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
90001d60:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001d64:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d66:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d68:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
90001d6a:	b9b1      	cbnz	r1, 90001d9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d6c:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90001d6e:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d70:	69d8      	ldr	r0, [r3, #28]
90001d72:	4a29      	ldr	r2, [pc, #164]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d74:	3901      	subs	r1, #1
90001d76:	4002      	ands	r2, r0
90001d78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d7c:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90001d7e:	4a23      	ldr	r2, [pc, #140]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d80:	69d3      	ldr	r3, [r2, #28]
90001d82:	f043 0320 	orr.w	r3, r3, #32
90001d86:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90001d88:	69d3      	ldr	r3, [r2, #28]
90001d8a:	069b      	lsls	r3, r3, #26
90001d8c:	d4fc      	bmi.n	90001d88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90001d8e:	2310      	movs	r3, #16
90001d90:	6093      	str	r3, [r2, #8]
            if(blend)
90001d92:	b324      	cbz	r4, 90001dde <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d94:	4b1e      	ldr	r3, [pc, #120]	; (90001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d96:	6013      	str	r3, [r2, #0]
}
90001d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90001d9a:	2901      	cmp	r1, #1
90001d9c:	d12e      	bne.n	90001dfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d9e:	8851      	ldrh	r1, [r2, #2]
                if(blitOp.alpha == 255)
90001da0:	3cff      	subs	r4, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001da2:	69d8      	ldr	r0, [r3, #28]
90001da4:	4a1c      	ldr	r2, [pc, #112]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001da6:	f101 31ff 	add.w	r1, r1, #4294967295
                if(blitOp.alpha == 255)
90001daa:	bf18      	it	ne
90001dac:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001dae:	4002      	ands	r2, r0
90001db0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001db4:	f042 0210 	orr.w	r2, r2, #16
90001db8:	61da      	str	r2, [r3, #28]
                break;
90001dba:	e7e0      	b.n	90001d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dbc:	7f0a      	ldrb	r2, [r1, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
90001dbe:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc0:	4b12      	ldr	r3, [pc, #72]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001dc2:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dc6:	bf14      	ite	ne
90001dc8:	4a14      	ldrne	r2, [pc, #80]	; (90001e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001dca:	f240 2201 	movweq	r2, #513	; 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dce:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001dd2:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001dd4:	601a      	str	r2, [r3, #0]
}
90001dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dd8:	7f0c      	ldrb	r4, [r1, #28]
90001dda:	4a11      	ldr	r2, [pc, #68]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>)
90001ddc:	e799      	b.n	90001d12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dde:	4b0f      	ldr	r3, [pc, #60]	; (90001e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
90001de0:	6013      	str	r3, [r2, #0]
}
90001de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
90001de4:	4b0f      	ldr	r3, [pc, #60]	; (90001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001de6:	2167      	movs	r1, #103	; 0x67
90001de8:	4a0f      	ldr	r2, [pc, #60]	; (90001e28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>)
90001dea:	4810      	ldr	r0, [pc, #64]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001dec:	f020 ff94 	bl	90022d18 <__assert_func>
        assert(0 && "Unsupported Format!");
90001df0:	4b0c      	ldr	r3, [pc, #48]	; (90001e24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001df2:	2188      	movs	r1, #136	; 0x88
90001df4:	4a0e      	ldr	r2, [pc, #56]	; (90001e30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>)
90001df6:	480d      	ldr	r0, [pc, #52]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001df8:	f020 ff8e 	bl	90022d18 <__assert_func>
                assert(0 && "Unsupported format");
90001dfc:	4b0d      	ldr	r3, [pc, #52]	; (90001e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>)
90001dfe:	f44f 7189 	mov.w	r1, #274	; 0x112
90001e02:	4a0d      	ldr	r2, [pc, #52]	; (90001e38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>)
90001e04:	4809      	ldr	r0, [pc, #36]	; (90001e2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001e06:	f020 ff87 	bl	90022d18 <__assert_func>
90001e0a:	bf00      	nop
90001e0c:	52001000 	.word	0x52001000
90001e10:	00020201 	.word	0x00020201
90001e14:	00020009 	.word	0x00020009
90001e18:	ffff00ef 	.word	0xffff00ef
90001e1c:	00010201 	.word	0x00010201
90001e20:	0002000a 	.word	0x0002000a
90001e24:	900245cc 	.word	0x900245cc
90001e28:	90024674 	.word	0x90024674
90001e2c:	90024634 	.word	0x90024634
90001e30:	900245e8 	.word	0x900245e8
90001e34:	900246c0 	.word	0x900246c0
90001e38:	900246dc 	.word	0x900246dc

90001e3c <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90001e3c:	4b1f      	ldr	r3, [pc, #124]	; (90001ebc <DMA2D_XferCpltCallback+0x80>)
90001e3e:	4920      	ldr	r1, [pc, #128]	; (90001ec0 <DMA2D_XferCpltCallback+0x84>)
90001e40:	681b      	ldr	r3, [r3, #0]
    {
90001e42:	b570      	push	{r4, r5, r6, lr}
90001e44:	685c      	ldr	r4, [r3, #4]
90001e46:	6823      	ldr	r3, [r4, #0]
90001e48:	695a      	ldr	r2, [r3, #20]
90001e4a:	428a      	cmp	r2, r1
90001e4c:	d125      	bne.n	90001e9a <DMA2D_XferCpltCallback+0x5e>
        if(started_by_external_job)
90001e4e:	f894 2da0 	ldrb.w	r2, [r4, #3488]	; 0xda0
90001e52:	b942      	cbnz	r2, 90001e66 <DMA2D_XferCpltCallback+0x2a>
            executeCompleted();
90001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e56:	4620      	mov	r0, r4
90001e58:	4798      	blx	r3
      return count_ == 0;
90001e5a:	4b1a      	ldr	r3, [pc, #104]	; (90001ec4 <DMA2D_XferCpltCallback+0x88>)
            if(!external_queue.is_empty() && !isRunning)
90001e5c:	68da      	ldr	r2, [r3, #12]
90001e5e:	b10a      	cbz	r2, 90001e64 <DMA2D_XferCpltCallback+0x28>
90001e60:	7a22      	ldrb	r2, [r4, #8]
90001e62:	b1f2      	cbz	r2, 90001ea2 <DMA2D_XferCpltCallback+0x66>
    }
90001e64:	bd70      	pop	{r4, r5, r6, pc}
      return count_ == 0;
90001e66:	4b17      	ldr	r3, [pc, #92]	; (90001ec4 <DMA2D_XferCpltCallback+0x88>)
90001e68:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001e6a:	2a00      	cmp	r2, #0
90001e6c:	d0fa      	beq.n	90001e64 <DMA2D_XferCpltCallback+0x28>
90001e6e:	7a21      	ldrb	r1, [r4, #8]
90001e70:	2900      	cmp	r1, #0
90001e72:	d0f7      	beq.n	90001e64 <DMA2D_XferCpltCallback+0x28>
            isRunning = false;
90001e74:	2100      	movs	r1, #0
      count_--;
90001e76:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001e78:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001e7c:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001e7e:	1c41      	adds	r1, r0, #1
      count_--;
90001e80:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001e82:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001e84:	fbb1 f2f5 	udiv	r2, r1, r5
90001e88:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001e8c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      head_ = (head_ + 1) % max_size_;
90001e94:	6059      	str	r1, [r3, #4]
            DMA2D_ExternalJobCompleted(completed_job);
90001e96:	f7ff bd29 	b.w	900018ec <DMA2D_ExternalJobCompleted>
90001e9a:	4620      	mov	r0, r4
90001e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001ea0:	4710      	bx	r2
      return buffer_[head_];
90001ea2:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001ea4:	2201      	movs	r2, #1
      return buffer_[head_];
90001ea6:	3002      	adds	r0, #2
                started_by_external_job = true;
90001ea8:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001eac:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001eae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001eb6:	f7ff bcd5 	b.w	90001864 <DMA2D_CopyBuffer>
90001eba:	bf00      	nop
90001ebc:	2402626c 	.word	0x2402626c
90001ec0:	90001b39 	.word	0x90001b39
90001ec4:	24005bbc 	.word	0x24005bbc

90001ec8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
90001ec8:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001eca:	4b10      	ldr	r3, [pc, #64]	; (90001f0c <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
90001ecc:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ece:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
90001ed0:	2500      	movs	r5, #0
90001ed2:	300c      	adds	r0, #12
90001ed4:	2260      	movs	r2, #96	; 0x60
90001ed6:	7235      	strb	r5, [r6, #8]
90001ed8:	7275      	strb	r5, [r6, #9]
90001eda:	6070      	str	r0, [r6, #4]
90001edc:	f844 3b20 	str.w	r3, [r4], #32
90001ee0:	4621      	mov	r1, r4
90001ee2:	f010 f9df 	bl	900122a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
90001ee6:	4621      	mov	r1, r4
90001ee8:	f506 635a 	add.w	r3, r6, #3488	; 0xda0
        : color(0)
90001eec:	60cd      	str	r5, [r1, #12]
90001eee:	3124      	adds	r1, #36	; 0x24
90001ef0:	428b      	cmp	r3, r1
90001ef2:	d1fb      	bne.n	90001eec <_ZN8STM32DMAC1Ev+0x24>
90001ef4:	f886 5da0 	strb.w	r5, [r6, #3488]	; 0xda0
    mutexIsRunning = MUTEX_CREATE();
90001ef8:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001efa:	f8c6 5da4 	str.w	r5, [r6, #3492]	; 0xda4
    mutexIsRunning = MUTEX_CREATE();
90001efe:	f00b fadb 	bl	9000d4b8 <osMutexNew>
90001f02:	4603      	mov	r3, r0
}
90001f04:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
90001f06:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
}
90001f0a:	bd70      	pop	{r4, r5, r6, pc}
90001f0c:	90024724 	.word	0x90024724

90001f10 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90001f10:	2001      	movs	r0, #1
90001f12:	4770      	bx	lr

90001f14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90001f14:	200c      	movs	r0, #12
90001f16:	4770      	bx	lr

90001f18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
90001f18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90001f1c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90001f20:	3008      	adds	r0, #8
90001f22:	4770      	bx	lr

90001f24 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90001f24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90001f28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90001f2c:	3008      	adds	r0, #8
90001f2e:	4770      	bx	lr

90001f30 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f30:	2001      	movs	r0, #1
90001f32:	4770      	bx	lr

90001f34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001f34:	20ec      	movs	r0, #236	; 0xec
90001f36:	4770      	bx	lr

90001f38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f38:	23ec      	movs	r3, #236	; 0xec
90001f3a:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001f3e:	3008      	adds	r0, #8
90001f40:	4770      	bx	lr
90001f42:	bf00      	nop

90001f44 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f44:	23ec      	movs	r3, #236	; 0xec
90001f46:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001f4a:	3008      	adds	r0, #8
90001f4c:	4770      	bx	lr
90001f4e:	bf00      	nop

90001f50 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f50:	2001      	movs	r0, #1
90001f52:	4770      	bx	lr

90001f54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001f54:	2010      	movs	r0, #16
90001f56:	4770      	bx	lr

90001f58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f58:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001f5c:	3008      	adds	r0, #8
90001f5e:	4770      	bx	lr

90001f60 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f60:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001f64:	3008      	adds	r0, #8
90001f66:	4770      	bx	lr

90001f68 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
90001f68:	4608      	mov	r0, r1
90001f6a:	f003 b817 	b.w	90004f9c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90001f6e:	bf00      	nop

90001f70 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90001f70:	4b03      	ldr	r3, [pc, #12]	; (90001f80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001f72:	b510      	push	{r4, lr}
90001f74:	4604      	mov	r4, r0
90001f76:	6003      	str	r3, [r0, #0]
90001f78:	f00e ffff 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f7c:	4620      	mov	r0, r4
90001f7e:	bd10      	pop	{r4, pc}
90001f80:	900247dc 	.word	0x900247dc

90001f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001f84:	4b05      	ldr	r3, [pc, #20]	; (90001f9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001f86:	b510      	push	{r4, lr}
90001f88:	4604      	mov	r4, r0
90001f8a:	6003      	str	r3, [r0, #0]
90001f8c:	f00e fff5 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f90:	2114      	movs	r1, #20
90001f92:	4620      	mov	r0, r4
90001f94:	f020 fe91 	bl	90022cba <_ZdlPvj>
90001f98:	4620      	mov	r0, r4
90001f9a:	bd10      	pop	{r4, pc}
90001f9c:	900247dc 	.word	0x900247dc

90001fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001fa0:	4b03      	ldr	r3, [pc, #12]	; (90001fb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001fa2:	b510      	push	{r4, lr}
90001fa4:	4604      	mov	r4, r0
90001fa6:	6003      	str	r3, [r0, #0]
90001fa8:	f00e ffe7 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fac:	4620      	mov	r0, r4
90001fae:	bd10      	pop	{r4, pc}
90001fb0:	900247a8 	.word	0x900247a8

90001fb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001fb4:	4b05      	ldr	r3, [pc, #20]	; (90001fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001fb6:	b510      	push	{r4, lr}
90001fb8:	4604      	mov	r4, r0
90001fba:	6003      	str	r3, [r0, #0]
90001fbc:	f00e ffdd 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fc0:	21f4      	movs	r1, #244	; 0xf4
90001fc2:	4620      	mov	r0, r4
90001fc4:	f020 fe79 	bl	90022cba <_ZdlPvj>
90001fc8:	4620      	mov	r0, r4
90001fca:	bd10      	pop	{r4, pc}
90001fcc:	900247a8 	.word	0x900247a8

90001fd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001fd0:	4b03      	ldr	r3, [pc, #12]	; (90001fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001fd2:	b510      	push	{r4, lr}
90001fd4:	4604      	mov	r4, r0
90001fd6:	6003      	str	r3, [r0, #0]
90001fd8:	f00e ffcf 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fdc:	4620      	mov	r0, r4
90001fde:	bd10      	pop	{r4, pc}
90001fe0:	90024774 	.word	0x90024774

90001fe4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001fe4:	4b05      	ldr	r3, [pc, #20]	; (90001ffc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001fe6:	b510      	push	{r4, lr}
90001fe8:	4604      	mov	r4, r0
90001fea:	6003      	str	r3, [r0, #0]
90001fec:	f00e ffc5 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
90001ff0:	2118      	movs	r1, #24
90001ff2:	4620      	mov	r0, r4
90001ff4:	f020 fe61 	bl	90022cba <_ZdlPvj>
90001ff8:	4620      	mov	r0, r4
90001ffa:	bd10      	pop	{r4, pc}
90001ffc:	90024774 	.word	0x90024774

90002000 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
90002000:	b510      	push	{r4, lr}
90002002:	4a0c      	ldr	r2, [pc, #48]	; (90002034 <_ZN12FrontendHeapD1Ev+0x34>)
90002004:	4604      	mov	r4, r0
90002006:	4b0c      	ldr	r3, [pc, #48]	; (90002038 <_ZN12FrontendHeapD1Ev+0x38>)
90002008:	f500 7090 	add.w	r0, r0, #288	; 0x120
9000200c:	6022      	str	r2, [r4, #0]
9000200e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
90002012:	f00e ffb2 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
90002016:	4620      	mov	r0, r4
90002018:	4b08      	ldr	r3, [pc, #32]	; (9000203c <_ZN12FrontendHeapD1Ev+0x3c>)
9000201a:	f840 3f2c 	str.w	r3, [r0, #44]!
9000201e:	f00e ffac 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
90002022:	4620      	mov	r0, r4
90002024:	4b06      	ldr	r3, [pc, #24]	; (90002040 <_ZN12FrontendHeapD1Ev+0x40>)
90002026:	f840 3f14 	str.w	r3, [r0, #20]!
9000202a:	f00e ffa6 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
9000202e:	4620      	mov	r0, r4
90002030:	bd10      	pop	{r4, pc}
90002032:	bf00      	nop
90002034:	90024810 	.word	0x90024810
90002038:	900247dc 	.word	0x900247dc
9000203c:	900247a8 	.word	0x900247a8
90002040:	90024774 	.word	0x90024774

90002044 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
90002044:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
90002046:	4c0c      	ldr	r4, [pc, #48]	; (90002078 <__tcf_0+0x34>)
90002048:	4a0c      	ldr	r2, [pc, #48]	; (9000207c <__tcf_0+0x38>)
9000204a:	4b0d      	ldr	r3, [pc, #52]	; (90002080 <__tcf_0+0x3c>)
9000204c:	f504 7090 	add.w	r0, r4, #288	; 0x120
90002050:	6022      	str	r2, [r4, #0]
90002052:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
90002056:	f00e ff90 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
9000205a:	4620      	mov	r0, r4
9000205c:	4b09      	ldr	r3, [pc, #36]	; (90002084 <__tcf_0+0x40>)
9000205e:	f840 3f2c 	str.w	r3, [r0, #44]!
90002062:	f00e ff8a 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
90002066:	4620      	mov	r0, r4
90002068:	4b07      	ldr	r3, [pc, #28]	; (90002088 <__tcf_0+0x44>)
        static FrontendHeap instance;
9000206a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000206e:	f840 3f14 	str.w	r3, [r0, #20]!
90002072:	f00e bf82 	b.w	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
90002076:	bf00      	nop
90002078:	24005bf0 	.word	0x24005bf0
9000207c:	90024810 	.word	0x90024810
90002080:	900247dc 	.word	0x900247dc
90002084:	900247a8 	.word	0x900247a8
90002088:	90024774 	.word	0x90024774

9000208c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
9000208c:	b510      	push	{r4, lr}
9000208e:	4a0e      	ldr	r2, [pc, #56]	; (900020c8 <_ZN12FrontendHeapD0Ev+0x3c>)
90002090:	4604      	mov	r4, r0
90002092:	4b0e      	ldr	r3, [pc, #56]	; (900020cc <_ZN12FrontendHeapD0Ev+0x40>)
90002094:	f500 7090 	add.w	r0, r0, #288	; 0x120
90002098:	6022      	str	r2, [r4, #0]
9000209a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
9000209e:	f00e ff6c 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
900020a2:	4620      	mov	r0, r4
900020a4:	4b0a      	ldr	r3, [pc, #40]	; (900020d0 <_ZN12FrontendHeapD0Ev+0x44>)
900020a6:	f840 3f2c 	str.w	r3, [r0, #44]!
900020aa:	f00e ff66 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
900020ae:	4b09      	ldr	r3, [pc, #36]	; (900020d4 <_ZN12FrontendHeapD0Ev+0x48>)
900020b0:	4620      	mov	r0, r4
900020b2:	f840 3f14 	str.w	r3, [r0, #20]!
900020b6:	f00e ff60 	bl	90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>
900020ba:	4620      	mov	r0, r4
900020bc:	f44f 7126 	mov.w	r1, #664	; 0x298
900020c0:	f020 fdfb 	bl	90022cba <_ZdlPvj>
900020c4:	4620      	mov	r0, r4
900020c6:	bd10      	pop	{r4, pc}
900020c8:	90024810 	.word	0x90024810
900020cc:	900247dc 	.word	0x900247dc
900020d0:	900247a8 	.word	0x900247a8
900020d4:	90024774 	.word	0x90024774

900020d8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
900020d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900020dc:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
900020de:	2400      	movs	r4, #0
900020e0:	f002 fd72 	bl	90004bc8 <_ZN14BitmapDatabase11getInstanceEv>
900020e4:	4605      	mov	r5, r0
900020e6:	f002 fd73 	bl	90004bd0 <_ZN14BitmapDatabase15getInstanceSizeEv>
900020ea:	4623      	mov	r3, r4
900020ec:	4601      	mov	r1, r0
900020ee:	4622      	mov	r2, r4
900020f0:	4628      	mov	r0, r5
900020f2:	9400      	str	r4, [sp, #0]
900020f4:	f014 ffec 	bl	900170d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
900020f8:	4b28      	ldr	r3, [pc, #160]	; (9000219c <touchgfx_init+0xc4>)
900020fa:	4a29      	ldr	r2, [pc, #164]	; (900021a0 <touchgfx_init+0xc8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
900020fc:	4620      	mov	r0, r4
        static FrontendHeap instance;
900020fe:	4c29      	ldr	r4, [pc, #164]	; (900021a4 <touchgfx_init+0xcc>)
90002100:	601a      	str	r2, [r3, #0]
90002102:	f003 fafd 	bl	90005700 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
90002106:	4828      	ldr	r0, [pc, #160]	; (900021a8 <touchgfx_init+0xd0>)
90002108:	f014 ff4a 	bl	90016fa0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
9000210c:	7823      	ldrb	r3, [r4, #0]
9000210e:	f3bf 8f5b 	dmb	ish
90002112:	07db      	lsls	r3, r3, #31
90002114:	d505      	bpl.n	90002122 <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
90002116:	4825      	ldr	r0, [pc, #148]	; (900021ac <touchgfx_init+0xd4>)
}
90002118:	b002      	add	sp, #8
9000211a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000211e:	f7fe bbcd 	b.w	900008bc <_ZN11TouchGFXHAL10initializeEv>
90002122:	4620      	mov	r0, r4
90002124:	f020 fdcb 	bl	90022cbe <__cxa_guard_acquire>
90002128:	2800      	cmp	r0, #0
9000212a:	d0f4      	beq.n	90002116 <touchgfx_init+0x3e>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
9000212c:	4d20      	ldr	r5, [pc, #128]	; (900021b0 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
9000212e:	4b21      	ldr	r3, [pc, #132]	; (900021b4 <touchgfx_init+0xdc>)
90002130:	f505 769e 	add.w	r6, r5, #316	; 0x13c
90002134:	f105 0014 	add.w	r0, r5, #20
90002138:	f105 082c 	add.w	r8, r5, #44	; 0x2c
9000213c:	f505 7790 	add.w	r7, r5, #288	; 0x120
90002140:	602b      	str	r3, [r5, #0]
90002142:	60ef      	str	r7, [r5, #12]
90002144:	612e      	str	r6, [r5, #16]
90002146:	e9c5 0801 	strd	r0, r8, [r5, #4]
9000214a:	f00e ff17 	bl	90010f7c <_ZN8touchgfx17AbstractPartitionC1Ev>
9000214e:	4b1a      	ldr	r3, [pc, #104]	; (900021b8 <touchgfx_init+0xe0>)
90002150:	4640      	mov	r0, r8
90002152:	616b      	str	r3, [r5, #20]
90002154:	f00e ff12 	bl	90010f7c <_ZN8touchgfx17AbstractPartitionC1Ev>
90002158:	4b18      	ldr	r3, [pc, #96]	; (900021bc <touchgfx_init+0xe4>)
9000215a:	4638      	mov	r0, r7
9000215c:	62eb      	str	r3, [r5, #44]	; 0x2c
9000215e:	f00e ff0d 	bl	90010f7c <_ZN8touchgfx17AbstractPartitionC1Ev>
90002162:	4b17      	ldr	r3, [pc, #92]	; (900021c0 <touchgfx_init+0xe8>)
90002164:	f505 709a 	add.w	r0, r5, #308	; 0x134
90002168:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
9000216c:	f003 fb4a 	bl	90005804 <_ZN5ModelC1Ev>
90002170:	462a      	mov	r2, r5
90002172:	f505 719a 	add.w	r1, r5, #308	; 0x134
90002176:	4630      	mov	r0, r6
90002178:	f003 fb38 	bl	900057ec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
9000217c:	4630      	mov	r0, r6
9000217e:	f002 ff0d 	bl	90004f9c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
90002182:	4810      	ldr	r0, [pc, #64]	; (900021c4 <touchgfx_init+0xec>)
90002184:	f020 fde6 	bl	90022d54 <atexit>
90002188:	4620      	mov	r0, r4
9000218a:	f020 fda4 	bl	90022cd6 <__cxa_guard_release>
9000218e:	4807      	ldr	r0, [pc, #28]	; (900021ac <touchgfx_init+0xd4>)
}
90002190:	b002      	add	sp, #8
90002192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
90002196:	f7fe bb91 	b.w	900008bc <_ZN11TouchGFXHAL10initializeEv>
9000219a:	bf00      	nop
9000219c:	240262c8 	.word	0x240262c8
900021a0:	24006cbc 	.word	0x24006cbc
900021a4:	24005bec 	.word	0x24005bec
900021a8:	24000020 	.word	0x24000020
900021ac:	24006c34 	.word	0x24006c34
900021b0:	24005bf0 	.word	0x24005bf0
900021b4:	90024810 	.word	0x90024810
900021b8:	90024774 	.word	0x90024774
900021bc:	900247a8 	.word	0x900247a8
900021c0:	900247dc 	.word	0x900247dc
900021c4:	90002045 	.word	0x90002045

900021c8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
900021c8:	4770      	bx	lr
900021ca:	bf00      	nop

900021cc <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
900021cc:	4801      	ldr	r0, [pc, #4]	; (900021d4 <touchgfx_taskEntry+0x8>)
900021ce:	f7fe bb3b 	b.w	90000848 <_ZN11TouchGFXHAL9taskEntryEv>
900021d2:	bf00      	nop
900021d4:	24006c34 	.word	0x24006c34

900021d8 <_GLOBAL__sub_I_touchgfx_init>:
}
900021d8:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
900021da:	4b26      	ldr	r3, [pc, #152]	; (90002274 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
900021dc:	4c26      	ldr	r4, [pc, #152]	; (90002278 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static STM32DMA dma;
900021de:	4e27      	ldr	r6, [pc, #156]	; (9000227c <_GLOBAL__sub_I_touchgfx_init+0xa4>)
static LCD16bpp display;
900021e0:	4d27      	ldr	r5, [pc, #156]	; (90002280 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
900021e2:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
900021e4:	4630      	mov	r0, r6
900021e6:	f7ff fe6f 	bl	90001ec8 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
900021ea:	4628      	mov	r0, r5
900021ec:	f018 f87a 	bl	9001a2e4 <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
900021f0:	4b24      	ldr	r3, [pc, #144]	; (90002284 <_GLOBAL__sub_I_touchgfx_init+0xac>)
900021f2:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900021f4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900021f8:	f44f 7188 	mov.w	r1, #272	; 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
900021fc:	62da      	str	r2, [r3, #44]	; 0x2c
900021fe:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
90002200:	669a      	str	r2, [r3, #104]	; 0x68
90002202:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
90002206:	671a      	str	r2, [r3, #112]	; 0x70
90002208:	e9c3 4203 	strd	r4, r2, [r3, #12]
9000220c:	4c1e      	ldr	r4, [pc, #120]	; (90002288 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
9000220e:	665c      	str	r4, [r3, #100]	; 0x64
90002210:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
90002214:	675c      	str	r4, [r3, #116]	; 0x74
90002216:	2401      	movs	r4, #1
90002218:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
        instance = this;
9000221c:	4c1b      	ldr	r4, [pc, #108]	; (9000228c <_GLOBAL__sub_I_touchgfx_init+0xb4>)
9000221e:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002220:	4c1b      	ldr	r4, [pc, #108]	; (90002290 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
90002222:	8020      	strh	r0, [r4, #0]
90002224:	4c1b      	ldr	r4, [pc, #108]	; (90002294 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lastRenderMethod(HARDWARE)
90002226:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
9000222a:	8020      	strh	r0, [r4, #0]
          lastRenderMethod(HARDWARE)
9000222c:	f44f 7580 	mov.w	r5, #256	; 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90002230:	4c19      	ldr	r4, [pc, #100]	; (90002298 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
90002232:	481a      	ldr	r0, [pc, #104]	; (9000229c <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          lastRenderMethod(HARDWARE)
90002234:	649d      	str	r5, [r3, #72]	; 0x48
90002236:	e9c3 2205 	strd	r2, r2, [r3, #20]
9000223a:	e9c3 2207 	strd	r2, r2, [r3, #28]
9000223e:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
90002242:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
90002246:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
9000224a:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
9000224e:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
90002252:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90002256:	8021      	strh	r1, [r4, #0]
90002258:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
9000225a:	4c11      	ldr	r4, [pc, #68]	; (900022a0 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
9000225c:	4811      	ldr	r0, [pc, #68]	; (900022a4 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
9000225e:	4912      	ldr	r1, [pc, #72]	; (900022a8 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
          cc_in(0)
90002260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
90002264:	7022      	strb	r2, [r4, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
90002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
9000226a:	6018      	str	r0, [r3, #0]
9000226c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
90002270:	67d9      	str	r1, [r3, #124]	; 0x7c
}
90002272:	bd70      	pop	{r4, r5, r6, pc}
90002274:	90023f28 	.word	0x90023f28
90002278:	24005e88 	.word	0x24005e88
9000227c:	24005e8c 	.word	0x24005e8c
90002280:	24006cc0 	.word	0x24006cc0
90002284:	24006c34 	.word	0x24006c34
90002288:	01000001 	.word	0x01000001
9000228c:	2402626c 	.word	0x2402626c
90002290:	24026260 	.word	0x24026260
90002294:	24026266 	.word	0x24026266
90002298:	24026262 	.word	0x24026262
9000229c:	24026268 	.word	0x24026268
900022a0:	24026264 	.word	0x24026264
900022a4:	900240b8 	.word	0x900240b8
900022a8:	90023f00 	.word	0x90023f00

900022ac <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
900022ac:	4801      	ldr	r0, [pc, #4]	; (900022b4 <_GLOBAL__sub_D_touchgfx_init+0x8>)
900022ae:	f7ff bbb9 	b.w	90001a24 <_ZN8STM32DMAD1Ev>
900022b2:	bf00      	nop
900022b4:	24005e8c 	.word	0x24005e8c

900022b8 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
900022b8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900022bc:	b112      	cbz	r2, 900022c4 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
900022be:	6803      	ldr	r3, [r0, #0]
900022c0:	695b      	ldr	r3, [r3, #20]
900022c2:	4718      	bx	r3
        }
    }
900022c4:	4770      	bx	lr
900022c6:	bf00      	nop

900022c8 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
900022c8:	2000      	movs	r0, #0
900022ca:	4770      	bx	lr

900022cc <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
900022cc:	8081      	strh	r1, [r0, #4]
    }
900022ce:	4770      	bx	lr

900022d0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
900022d0:	80c1      	strh	r1, [r0, #6]
    }
900022d2:	4770      	bx	lr

900022d4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
900022d4:	8101      	strh	r1, [r0, #8]
    }
900022d6:	4770      	bx	lr

900022d8 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
900022d8:	8141      	strh	r1, [r0, #10]
    }
900022da:	4770      	bx	lr

900022dc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
900022dc:	4770      	bx	lr
900022de:	bf00      	nop

900022e0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
900022e0:	4770      	bx	lr
900022e2:	bf00      	nop

900022e4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
900022e4:	4770      	bx	lr
900022e6:	bf00      	nop

900022e8 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
900022e8:	4770      	bx	lr
900022ea:	bf00      	nop

900022ec <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
900022ec:	4770      	bx	lr
900022ee:	bf00      	nop

900022f0 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
900022f0:	f8b0 c006 	ldrh.w	ip, [r0, #6]
900022f4:	6803      	ldr	r3, [r0, #0]
900022f6:	eba2 020c 	sub.w	r2, r2, ip
900022fa:	f8b0 c004 	ldrh.w	ip, [r0, #4]
900022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90002300:	eba1 010c 	sub.w	r1, r1, ip
90002304:	b212      	sxth	r2, r2
90002306:	b209      	sxth	r1, r1
90002308:	4718      	bx	r3
9000230a:	bf00      	nop

9000230c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
9000230c:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
9000230e:	f64f 7cff 	movw	ip, #65535	; 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
90002312:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
90002316:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
9000231a:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
9000231e:	6010      	str	r0, [r2, #0]
    }
90002320:	4770      	bx	lr
90002322:	bf00      	nop

90002324 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
90002324:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002328:	b11a      	cbz	r2, 90002332 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
9000232a:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
9000232e:	b102      	cbz	r2, 90002332 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
90002330:	6018      	str	r0, [r3, #0]
        }
    }
90002332:	4770      	bx	lr

90002334 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
90002334:	2000      	movs	r0, #0
90002336:	4770      	bx	lr

90002338 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002338:	4b03      	ldr	r3, [pc, #12]	; (90002348 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
9000233a:	2290      	movs	r2, #144	; 0x90
9000233c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
90002340:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
90002344:	4770      	bx	lr
90002346:	bf00      	nop
90002348:	e000e100 	.word	0xe000e100

9000234c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
9000234c:	4a09      	ldr	r2, [pc, #36]	; (90002374 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
9000234e:	490a      	ldr	r1, [pc, #40]	; (90002378 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90002350:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90002352:	480a      	ldr	r0, [pc, #40]	; (9000237c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002354:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002358:	3b01      	subs	r3, #1
9000235a:	b29b      	uxth	r3, r3
9000235c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000235e:	6911      	ldr	r1, [r2, #16]
90002360:	f3c1 010a 	ubfx	r1, r1, #0, #11
90002364:	3901      	subs	r1, #1
90002366:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90002368:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
9000236a:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000236c:	f043 0301 	orr.w	r3, r3, #1
90002370:	6353      	str	r3, [r2, #52]	; 0x34
}
90002372:	4770      	bx	lr
90002374:	50001000 	.word	0x50001000
90002378:	24006d3c 	.word	0x24006d3c
9000237c:	24006d3a 	.word	0x24006d3a

90002380 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90002380:	4b01      	ldr	r3, [pc, #4]	; (90002388 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
90002382:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
90002386:	4770      	bx	lr
90002388:	50001000 	.word	0x50001000

9000238c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
9000238c:	4b02      	ldr	r3, [pc, #8]	; (90002398 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
9000238e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002390:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002394:	625a      	str	r2, [r3, #36]	; 0x24
}
90002396:	4770      	bx	lr
90002398:	50001000 	.word	0x50001000

9000239c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
9000239c:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
900023a0:	6381      	str	r1, [r0, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
900023a2:	4770      	bx	lr

900023a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
900023a4:	4770      	bx	lr
900023a6:	bf00      	nop

900023a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
900023a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
900023ac:	4611      	mov	r1, r2
900023ae:	6840      	ldr	r0, [r0, #4]
900023b0:	6803      	ldr	r3, [r0, #0]
900023b2:	68db      	ldr	r3, [r3, #12]
900023b4:	4718      	bx	r3
900023b6:	bf00      	nop

900023b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
900023b8:	b510      	push	{r4, lr}
900023ba:	4604      	mov	r4, r0
900023bc:	2148      	movs	r1, #72	; 0x48
900023be:	f020 fc7c 	bl	90022cba <_ZdlPvj>
900023c2:	4620      	mov	r0, r4
900023c4:	bd10      	pop	{r4, pc}
900023c6:	bf00      	nop

900023c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
900023c8:	b911      	cbnz	r1, 900023d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
900023ca:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
900023ce:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
900023d0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900023d2:	4a03      	ldr	r2, [pc, #12]	; (900023e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
900023d4:	f44f 71b8 	mov.w	r1, #368	; 0x170
900023d8:	4b02      	ldr	r3, [pc, #8]	; (900023e4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
900023da:	4803      	ldr	r0, [pc, #12]	; (900023e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
900023dc:	f020 fc9c 	bl	90022d18 <__assert_func>
900023e0:	90024830 	.word	0x90024830
900023e4:	9002481c 	.word	0x9002481c
900023e8:	900249bc 	.word	0x900249bc

900023ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900023ec:	b921      	cbnz	r1, 900023f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900023ee:	6840      	ldr	r0, [r0, #4]
900023f0:	4611      	mov	r1, r2
900023f2:	6803      	ldr	r3, [r0, #0]
900023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900023f6:	4718      	bx	r3
        assert(handle < no_streams);
900023f8:	4b03      	ldr	r3, [pc, #12]	; (90002408 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
900023fa:	f44f 71b5 	mov.w	r1, #362	; 0x16a
900023fe:	4a03      	ldr	r2, [pc, #12]	; (9000240c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
90002400:	4803      	ldr	r0, [pc, #12]	; (90002410 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
90002402:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002404:	f020 fc88 	bl	90022d18 <__assert_func>
90002408:	9002481c 	.word	0x9002481c
9000240c:	90024a00 	.word	0x90024a00
90002410:	900249bc 	.word	0x900249bc

90002414 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
90002414:	b909      	cbnz	r1, 9000241a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
90002416:	68c0      	ldr	r0, [r0, #12]
90002418:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
9000241a:	b508      	push	{r3, lr}
        assert(handle < no_streams);
9000241c:	4a02      	ldr	r2, [pc, #8]	; (90002428 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
9000241e:	2179      	movs	r1, #121	; 0x79
90002420:	4b02      	ldr	r3, [pc, #8]	; (9000242c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
90002422:	4803      	ldr	r0, [pc, #12]	; (90002430 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
90002424:	f020 fc78 	bl	90022d18 <__assert_func>
90002428:	90024bb0 	.word	0x90024bb0
9000242c:	9002481c 	.word	0x9002481c
90002430:	900249bc 	.word	0x900249bc

90002434 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
90002434:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002436:	460c      	mov	r4, r1
90002438:	b949      	cbnz	r1, 9000244e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1a>
9000243a:	4611      	mov	r1, r2
9000243c:	461a      	mov	r2, r3
        mjpegDecoders[handle]->setVideoData(movie, length);
9000243e:	6843      	ldr	r3, [r0, #4]
        stream.frameNumber = 0;
90002440:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
90002442:	681c      	ldr	r4, [r3, #0]
90002444:	4618      	mov	r0, r3
90002446:	68a3      	ldr	r3, [r4, #8]
    }
90002448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
9000244c:	4718      	bx	r3
        assert(handle < no_streams);
9000244e:	4b03      	ldr	r3, [pc, #12]	; (9000245c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
90002450:	2190      	movs	r1, #144	; 0x90
90002452:	4a03      	ldr	r2, [pc, #12]	; (90002460 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
90002454:	4803      	ldr	r0, [pc, #12]	; (90002464 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
90002456:	f020 fc5f 	bl	90022d18 <__assert_func>
9000245a:	bf00      	nop
9000245c:	9002481c 	.word	0x9002481c
90002460:	90024d64 	.word	0x90024d64
90002464:	900249bc 	.word	0x900249bc

90002468 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
90002468:	b921      	cbnz	r1, 90002474 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.tickCount = 0;
9000246a:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
9000246e:	e9c0 3206 	strd	r3, r2, [r0, #24]
90002472:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
90002474:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002476:	4a03      	ldr	r2, [pc, #12]	; (90002484 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
90002478:	2182      	movs	r1, #130	; 0x82
9000247a:	4b03      	ldr	r3, [pc, #12]	; (90002488 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
9000247c:	4803      	ldr	r0, [pc, #12]	; (9000248c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
9000247e:	f020 fc4b 	bl	90022d18 <__assert_func>
90002482:	bf00      	nop
90002484:	90024f40 	.word	0x90024f40
90002488:	9002481c 	.word	0x9002481c
9000248c:	900249bc 	.word	0x900249bc

90002490 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
90002490:	f00f b858 	b.w	90011544 <_ZN8touchgfx3HAL10beginFrameEv>

90002494 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
90002494:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
90002498:	b510      	push	{r4, lr}
    if (frameBufferUpdatedThisFrame)
9000249a:	b113      	cbz	r3, 900024a2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
9000249c:	4b1a      	ldr	r3, [pc, #104]	; (90002508 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
9000249e:	2201      	movs	r2, #1
900024a0:	701a      	strb	r2, [r3, #0]
            if (stream.isPlaying || stream.isShowingOneFrame)
900024a2:	4c1a      	ldr	r4, [pc, #104]	; (9000250c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x78>)
    HAL::endFrame();
900024a4:	f00f f85a 	bl	9001155c <_ZN8touchgfx3HAL8endFrameEv>
900024a8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
900024ac:	b963      	cbnz	r3, 900024c8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
900024ae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
900024b2:	b94b      	cbnz	r3, 900024c8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
        firstDrawThisFrame = true;
900024b4:	2301      	movs	r3, #1
        SEM_POST(semDecode);
900024b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
900024b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
900024bc:	f00b f900 	bl	9000d6c0 <osSemaphoreRelease>
        if (uiHasMutex)
900024c0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
900024c4:	b9cb      	cbnz	r3, 900024fa <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
}
900024c6:	bd10      	pop	{r4, pc}
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
900024c8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
900024cc:	69e1      	ldr	r1, [r4, #28]
900024ce:	6922      	ldr	r2, [r4, #16]
900024d0:	fb00 f303 	mul.w	r3, r0, r3
900024d4:	fb01 f202 	mul.w	r2, r1, r2
900024d8:	4293      	cmp	r3, r2
900024da:	d3eb      	bcc.n	900024b4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
        {
            if (allowSkipFrames)
900024dc:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
900024e0:	b138      	cbz	r0, 900024f2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
900024e2:	1a9b      	subs	r3, r3, r2
900024e4:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
900024e8:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
900024ea:	bf98      	it	ls
900024ec:	f102 32ff 	addls.w	r2, r2, #4294967295
900024f0:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
900024f2:	2301      	movs	r3, #1
900024f4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        for (uint32_t i = 0; i < no_streams; i++)
900024f8:	e7dc      	b.n	900024b4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
            MUTEX_UNLOCK(mutexBuffers);
900024fa:	6c60      	ldr	r0, [r4, #68]	; 0x44
900024fc:	f00b f83a 	bl	9000d574 <osMutexRelease>
            uiHasMutex = false;
90002500:	2300      	movs	r3, #0
90002502:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
90002506:	bd10      	pop	{r4, pc}
90002508:	24006d38 	.word	0x24006d38
9000250c:	24006d88 	.word	0x24006d88

90002510 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
90002510:	f00e bfe2 	b.w	900114d8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

90002514 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
90002514:	f00f b93d 	b.w	90011792 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

90002518 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
90002518:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000251c:	b903      	cbnz	r3, 90002520 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
9000251e:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
90002520:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
90002522:	f04f 31ff 	mov.w	r1, #4294967295
90002526:	4604      	mov	r4, r0
90002528:	6c40      	ldr	r0, [r0, #68]	; 0x44
9000252a:	f00a ffff 	bl	9000d52c <osMutexAcquire>
            firstDrawThisFrame = false;
9000252e:	f44f 7380 	mov.w	r3, #256	; 0x100
90002532:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
    }
90002536:	bd10      	pop	{r4, pc}

90002538 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
90002538:	b538      	push	{r3, r4, r5, lr}
9000253a:	460c      	mov	r4, r1
9000253c:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
9000253e:	f04f 31ff 	mov.w	r1, #4294967295
90002542:	6c40      	ldr	r0, [r0, #68]	; 0x44
        streams[handle].isActive = false;
90002544:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
90002548:	f00a fff0 	bl	9000d52c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
9000254c:	6c68      	ldr	r0, [r5, #68]	; 0x44
9000254e:	f00b f811 	bl	9000d574 <osMutexRelease>
        streams[handle].isActive = false;
90002552:	2300      	movs	r3, #0
90002554:	eb05 0484 	add.w	r4, r5, r4, lsl #2
90002558:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (oneIsActive == false)
9000255c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
90002560:	b90b      	cbnz	r3, 90002566 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
90002562:	6b2b      	ldr	r3, [r5, #48]	; 0x30
90002564:	63ab      	str	r3, [r5, #56]	; 0x38
    }
90002566:	bd38      	pop	{r3, r4, r5, pc}

90002568 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90002568:	4814      	ldr	r0, [pc, #80]	; (900025bc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
9000256a:	6943      	ldr	r3, [r0, #20]
9000256c:	03d9      	lsls	r1, r3, #15
9000256e:	d523      	bpl.n	900025b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90002570:	2300      	movs	r3, #0
{
90002572:	b510      	push	{r4, lr}
90002574:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90002578:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
9000257c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002580:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90002584:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002588:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000258c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002590:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002594:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002596:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
9000259a:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000259c:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
900025a0:	1c5a      	adds	r2, r3, #1
900025a2:	d1f8      	bne.n	90002596 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
900025a4:	f1ac 0c20 	sub.w	ip, ip, #32
900025a8:	f11c 0f20 	cmn.w	ip, #32
900025ac:	d1f0      	bne.n	90002590 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
900025ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900025b2:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
900025b6:	bd10      	pop	{r4, pc}
900025b8:	4770      	bx	lr
900025ba:	bf00      	nop
900025bc:	e000ed00 	.word	0xe000ed00

900025c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
900025c0:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900025c2:	2900      	cmp	r1, #0
900025c4:	d133      	bne.n	9000262e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
900025c6:	4604      	mov	r4, r0
        switch (cmd)
900025c8:	2a05      	cmp	r2, #5
900025ca:	d809      	bhi.n	900025e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
900025cc:	e8df f002 	tbb	[pc, r2]
900025d0:	211c1809 	.word	0x211c1809
900025d4:	0329      	.short	0x0329
            stream.repeat = (param > 0);
900025d6:	3b00      	subs	r3, #0
900025d8:	bf18      	it	ne
900025da:	2301      	movne	r3, #1
900025dc:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
900025e0:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900025e2:	6840      	ldr	r0, [r0, #4]
900025e4:	6803      	ldr	r3, [r0, #0]
900025e6:	691b      	ldr	r3, [r3, #16]
900025e8:	4798      	blx	r3
900025ea:	2800      	cmp	r0, #0
900025ec:	d0f8      	beq.n	900025e0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900025ee:	2201      	movs	r2, #1
                stream.frameCount = 0;
900025f0:	2300      	movs	r3, #0
                stream.isPlaying = true;
900025f2:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
900025f6:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                stream.tickCount = 0;
900025fa:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
900025fe:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
90002600:	2300      	movs	r3, #0
90002602:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
90002606:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
90002608:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
9000260a:	6203      	str	r3, [r0, #32]
            stream.tickCount = 0;
9000260c:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
90002610:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
90002612:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
90002614:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
90002616:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
90002618:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
            stream.tickCount = 0;
9000261c:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
90002620:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
90002622:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
90002624:	2301      	movs	r3, #1
            stream.isPlaying = false;
90002626:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
9000262a:	6203      	str	r3, [r0, #32]
    }
9000262c:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000262e:	4b03      	ldr	r3, [pc, #12]	; (9000263c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
90002630:	21a2      	movs	r1, #162	; 0xa2
90002632:	4a03      	ldr	r2, [pc, #12]	; (90002640 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
90002634:	4803      	ldr	r0, [pc, #12]	; (90002644 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
90002636:	f020 fb6f 	bl	90022d18 <__assert_func>
9000263a:	bf00      	nop
9000263c:	9002481c 	.word	0x9002481c
90002640:	900250fc 	.word	0x900250fc
90002644:	900249bc 	.word	0x900249bc

90002648 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90002648:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000264a:	bb39      	cbnz	r1, 9000269c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
9000264c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
90002650:	4604      	mov	r4, r0
90002652:	b923      	cbnz	r3, 9000265e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
90002654:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002658:	b963      	cbnz	r3, 90002674 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
9000265a:	2001      	movs	r0, #1
    }
9000265c:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
9000265e:	4912      	ldr	r1, [pc, #72]	; (900026a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
90002660:	6943      	ldr	r3, [r0, #20]
90002662:	6809      	ldr	r1, [r1, #0]
90002664:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
90002668:	440b      	add	r3, r1
9000266a:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
9000266c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002670:	2b00      	cmp	r3, #0
90002672:	d0f2      	beq.n	9000265a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
90002674:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
90002676:	4610      	mov	r0, r2
90002678:	6813      	ldr	r3, [r2, #0]
9000267a:	695b      	ldr	r3, [r3, #20]
9000267c:	6311      	str	r1, [r2, #48]	; 0x30
9000267e:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
90002680:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
90002682:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
90002686:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
9000268a:	2800      	cmp	r0, #0
9000268c:	d1e5      	bne.n	9000265a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
9000268e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
90002692:	2b00      	cmp	r3, #0
90002694:	d1e2      	bne.n	9000265c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
90002696:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    }
9000269a:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000269c:	4b03      	ldr	r3, [pc, #12]	; (900026ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
9000269e:	21d0      	movs	r1, #208	; 0xd0
900026a0:	4a03      	ldr	r2, [pc, #12]	; (900026b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
900026a2:	4804      	ldr	r0, [pc, #16]	; (900026b4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
900026a4:	f020 fb38 	bl	90022d18 <__assert_func>
900026a8:	2402626c 	.word	0x2402626c
900026ac:	9002481c 	.word	0x9002481c
900026b0:	900252d0 	.word	0x900252d0
900026b4:	900249bc 	.word	0x900249bc

900026b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
900026b8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
900026bc:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
900026be:	b9fb      	cbnz	r3, 90002700 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
        streams[handle].isActive = true;
900026c0:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026c2:	6b85      	ldr	r5, [r0, #56]	; 0x38
            {
                // Reset stream parameters
                streams[i] = Stream();
900026c4:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
900026c6:	6282      	str	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
900026c8:	f44f 7280 	mov.w	r2, #256	; 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026cc:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
                streams[i] = Stream();
900026d0:	6103      	str	r3, [r0, #16]
900026d2:	8582      	strh	r2, [r0, #44]	; 0x2c
900026d4:	6143      	str	r3, [r0, #20]
900026d6:	6183      	str	r3, [r0, #24]
900026d8:	61c3      	str	r3, [r0, #28]
900026da:	6203      	str	r3, [r0, #32]
900026dc:	6243      	str	r3, [r0, #36]	; 0x24
900026de:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026e2:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	; 0x30
900026e6:	4432      	add	r2, r6
900026e8:	4294      	cmp	r4, r2
900026ea:	d810      	bhi.n	9000270e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900026ec:	4a0b      	ldr	r2, [pc, #44]	; (9000271c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900026ee:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900026f0:	6384      	str	r4, [r0, #56]	; 0x38
    }
900026f2:	4618      	mov	r0, r3
        format = bufferFormat;
900026f4:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
900026f8:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
        buffer = videoBuffer;
900026fc:	630b      	str	r3, [r1, #48]	; 0x30
900026fe:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
90002700:	4b07      	ldr	r3, [pc, #28]	; (90002720 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
90002702:	f240 11c5 	movw	r1, #453	; 0x1c5
90002706:	4a07      	ldr	r2, [pc, #28]	; (90002724 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
90002708:	4807      	ldr	r0, [pc, #28]	; (90002728 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
9000270a:	f020 fb05 	bl	90022d18 <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
9000270e:	4b07      	ldr	r3, [pc, #28]	; (9000272c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
90002710:	2152      	movs	r1, #82	; 0x52
90002712:	4a07      	ldr	r2, [pc, #28]	; (90002730 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
90002714:	4804      	ldr	r0, [pc, #16]	; (90002728 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
90002716:	f020 faff 	bl	90022d18 <__assert_func>
9000271a:	bf00      	nop
9000271c:	012001e0 	.word	0x012001e0
90002720:	90025470 	.word	0x90025470
90002724:	900254a0 	.word	0x900254a0
90002728:	900249bc 	.word	0x900249bc
9000272c:	90025628 	.word	0x90025628
90002730:	90025664 	.word	0x90025664

90002734 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002734:	4b08      	ldr	r3, [pc, #32]	; (90002758 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
90002736:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
9000273a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000273e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002742:	f3bf 8f6f 	isb	sy
90002746:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
9000274a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000274e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002752:	f3bf 8f6f 	isb	sy
}
90002756:	4770      	bx	lr
90002758:	e000e100 	.word	0xe000e100

9000275c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000275c:	4b03      	ldr	r3, [pc, #12]	; (9000276c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
9000275e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002762:	609a      	str	r2, [r3, #8]
90002764:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002768:	609a      	str	r2, [r3, #8]
}
9000276a:	4770      	bx	lr
9000276c:	e000e100 	.word	0xe000e100

90002770 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90002770:	b538      	push	{r3, r4, r5, lr}
90002772:	4604      	mov	r4, r0
    HAL::initialize();
90002774:	f00e feff 	bl	90011576 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90002778:	6823      	ldr	r3, [r4, #0]
9000277a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
9000277c:	f011 fca2 	bl	900140c4 <_ZN8touchgfx11Application11getInstanceEv>
90002780:	4601      	mov	r1, r0
90002782:	4620      	mov	r0, r4
90002784:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
90002786:	6823      	ldr	r3, [r4, #0]
90002788:	4a16      	ldr	r2, [pc, #88]	; (900027e4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
9000278a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
9000278e:	4295      	cmp	r5, r2
90002790:	d11c      	bne.n	900027cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002792:	4a15      	ldr	r2, [pc, #84]	; (900027e8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002794:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
90002796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
9000279a:	f502 317f 	add.w	r1, r2, #261120	; 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000279e:	4813      	ldr	r0, [pc, #76]	; (900027ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
900027a0:	e9c4 210f 	strd	r2, r1, [r4, #60]	; 0x3c
        setAnimationStorage(animationStorage);
900027a4:	4a12      	ldr	r2, [pc, #72]	; (900027f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900027a6:	7005      	strb	r5, [r0, #0]
900027a8:	4293      	cmp	r3, r2
900027aa:	d116      	bne.n	900027da <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900027ac:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
900027ae:	4a11      	ldr	r2, [pc, #68]	; (900027f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900027b0:	6463      	str	r3, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
900027b2:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
900027b4:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
900027b6:	f44f 2087 	mov.w	r0, #276480	; 0x43800
        mjpegDecoders[index] = &decoder;
900027ba:	4b0f      	ldr	r3, [pc, #60]	; (900027f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
900027bc:	490f      	ldr	r1, [pc, #60]	; (900027fc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
900027be:	4a10      	ldr	r2, [pc, #64]	; (90002800 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
900027c0:	644c      	str	r4, [r1, #68]	; 0x44
        mjpegDecoders[index] = &decoder;
900027c2:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
900027c4:	631a      	str	r2, [r3, #48]	; 0x30
        sizeBufferRGB = sizeOfBuffer;
900027c6:	e9c3 020d 	strd	r0, r2, [r3, #52]	; 0x34
}
900027ca:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
900027cc:	4a0d      	ldr	r2, [pc, #52]	; (90002804 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
900027ce:	2300      	movs	r3, #0
900027d0:	4620      	mov	r0, r4
900027d2:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
900027d6:	47a8      	blx	r5
900027d8:	e7ec      	b.n	900027b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
900027da:	2100      	movs	r1, #0
900027dc:	4620      	mov	r0, r4
900027de:	4798      	blx	r3
900027e0:	e7e8      	b.n	900027b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
900027e2:	bf00      	nop
900027e4:	900007f1 	.word	0x900007f1
900027e8:	d003fc00 	.word	0xd003fc00
900027ec:	2402626a 	.word	0x2402626a
900027f0:	90000675 	.word	0x90000675
900027f4:	2402626b 	.word	0x2402626b
900027f8:	24006d88 	.word	0x24006d88
900027fc:	24006d40 	.word	0x24006d40
90002800:	d00bf400 	.word	0xd00bf400
90002804:	d007f800 	.word	0xd007f800

90002808 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
90002808:	b510      	push	{r4, lr}
        return instance;
9000280a:	4c14      	ldr	r4, [pc, #80]	; (9000285c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
9000280c:	6823      	ldr	r3, [r4, #0]
9000280e:	b323      	cbz	r3, 9000285a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
90002810:	4b13      	ldr	r3, [pc, #76]	; (90002860 <HAL_LTDC_LineEventCallback+0x58>)
90002812:	4a14      	ldr	r2, [pc, #80]	; (90002864 <HAL_LTDC_LineEventCallback+0x5c>)
90002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002816:	8811      	ldrh	r1, [r2, #0]
90002818:	428b      	cmp	r3, r1
9000281a:	d00a      	beq.n	90002832 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
9000281c:	f007 fefe 	bl	9000a61c <HAL_LTDC_ProgramLineEvent>
90002820:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
90002822:	6803      	ldr	r3, [r0, #0]
90002824:	6a1b      	ldr	r3, [r3, #32]
90002826:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
90002828:	2000      	movs	r0, #0
        }
    }
9000282a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
9000282e:	f7fd bec5 	b.w	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
90002832:	4b0d      	ldr	r3, [pc, #52]	; (90002868 <HAL_LTDC_LineEventCallback+0x60>)
90002834:	8819      	ldrh	r1, [r3, #0]
90002836:	f007 fef1 	bl	9000a61c <HAL_LTDC_ProgramLineEvent>
        return instance;
9000283a:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
9000283c:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
90002840:	3301      	adds	r3, #1
90002842:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
90002846:	f7ff f8c7 	bl	900019d8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
9000284a:	6820      	ldr	r0, [r4, #0]
9000284c:	f00f fbe6 	bl	9001201c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90002850:	2000      	movs	r0, #0
    }
90002852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
90002856:	f7fd be7d 	b.w	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
9000285a:	bd10      	pop	{r4, pc}
9000285c:	2402626c 	.word	0x2402626c
90002860:	50001000 	.word	0x50001000
90002864:	24006d3c 	.word	0x24006d3c
90002868:	24006d3a 	.word	0x24006d3a

9000286c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
9000286c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002870:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9000292c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
90002874:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
90002876:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002878:	f44f 7770 	mov.w	r7, #960	; 0x3c0
    void decoderTaskEntry()
9000287c:	4604      	mov	r4, r0
9000287e:	e024      	b.n	900028ca <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                        decoder->gotoFrame(stream.seek_to_frame);
90002880:	682b      	ldr	r3, [r5, #0]
90002882:	4628      	mov	r0, r5
90002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002886:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90002888:	2300      	movs	r3, #0
9000288a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
9000288c:	6829      	ldr	r1, [r5, #0]
9000288e:	f44f 7390 	mov.w	r3, #288	; 0x120
90002892:	9700      	str	r7, [sp, #0]
90002894:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90002898:	f8d1 9014 	ldr.w	r9, [r1, #20]
9000289c:	4628      	mov	r0, r5
9000289e:	68a1      	ldr	r1, [r4, #8]
900028a0:	47c8      	blx	r9
                    stream.frameCount++;
900028a2:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
900028a4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
900028a8:	3301      	adds	r3, #1
900028aa:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
900028ac:	2800      	cmp	r0, #0
900028ae:	d033      	beq.n	90002918 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
900028b0:	682b      	ldr	r3, [r5, #0]
900028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900028b4:	4543      	cmp	r3, r8
900028b6:	d131      	bne.n	9000291c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
900028b8:	6968      	ldr	r0, [r5, #20]
900028ba:	3801      	subs	r0, #1
900028bc:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
900028be:	2300      	movs	r3, #0
900028c0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
900028c4:	6c60      	ldr	r0, [r4, #68]	; 0x44
900028c6:	f00a fe55 	bl	9000d574 <osMutexRelease>
            SEM_WAIT(semDecode);
900028ca:	f04f 31ff 	mov.w	r1, #4294967295
900028ce:	6c20      	ldr	r0, [r4, #64]	; 0x40
900028d0:	f00a fec2 	bl	9000d658 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
900028d4:	f04f 31ff 	mov.w	r1, #4294967295
900028d8:	6c60      	ldr	r0, [r4, #68]	; 0x44
900028da:	f00a fe27 	bl	9000d52c <osMutexAcquire>
                if (stream.doDecode)
900028de:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
900028e2:	2b00      	cmp	r3, #0
900028e4:	d0ee      	beq.n	900028c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x58>
                    if (stream.seek_to_frame > 0)
900028e6:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
900028e8:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
900028ea:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
900028ee:	2900      	cmp	r1, #0
900028f0:	d1c6      	bne.n	90002880 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
900028f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
900028f4:	2b00      	cmp	r3, #0
900028f6:	d0c9      	beq.n	9000288c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900028f8:	682a      	ldr	r2, [r5, #0]
900028fa:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	; 0x24
900028fe:	4541      	cmp	r1, r8
90002900:	d10f      	bne.n	90002922 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb6>
90002902:	6968      	ldr	r0, [r5, #20]
90002904:	18c1      	adds	r1, r0, r3
90002906:	4628      	mov	r0, r5
90002908:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
9000290a:	6923      	ldr	r3, [r4, #16]
9000290c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
9000290e:	2200      	movs	r2, #0
                            stream.frameCount += stream.skip_frames;
90002910:	440b      	add	r3, r1
                            stream.skip_frames = 0;
90002912:	6262      	str	r2, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
90002914:	6123      	str	r3, [r4, #16]
90002916:	e7b9      	b.n	9000288c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                        stream.frameNumber = 1;
90002918:	60e6      	str	r6, [r4, #12]
9000291a:	e7d0      	b.n	900028be <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x52>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
9000291c:	4628      	mov	r0, r5
9000291e:	4798      	blx	r3
90002920:	e7cb      	b.n	900028ba <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
90002922:	4628      	mov	r0, r5
90002924:	4788      	blx	r1
90002926:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002928:	e7ec      	b.n	90002904 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x98>
9000292a:	bf00      	nop
9000292c:	90000969 	.word	0x90000969

90002930 <videoTaskFunc>:
    videoController.decoderTaskEntry();
90002930:	4801      	ldr	r0, [pc, #4]	; (90002938 <videoTaskFunc+0x8>)
{
90002932:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
90002934:	f7ff ff9a 	bl	9000286c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
90002938:	24006d88 	.word	0x24006d88

9000293c <_GLOBAL__sub_I_mjpegdecoder1>:
}
9000293c:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
9000293e:	4815      	ldr	r0, [pc, #84]	; (90002994 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002940:	2500      	movs	r5, #0
90002942:	f7fe fc1f 	bl	90001184 <_ZN20HardwareMJPEGDecoderC1Ev>
90002946:	4c14      	ldr	r4, [pc, #80]	; (90002998 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90002948:	4914      	ldr	r1, [pc, #80]	; (9000299c <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
9000294a:	f44f 7380 	mov.w	r3, #256	; 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
9000294e:	462a      	mov	r2, r5
90002950:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002952:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
90002954:	4629      	mov	r1, r5
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002956:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002958:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
9000295a:	6325      	str	r5, [r4, #48]	; 0x30
9000295c:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002960:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90002968:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
9000296c:	e9c4 5501 	strd	r5, r5, [r4, #4]
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002970:	e9c4 5503 	strd	r5, r5, [r4, #12]
90002974:	e9c4 5505 	strd	r5, r5, [r4, #20]
90002978:	e9c4 5507 	strd	r5, r5, [r4, #28]
9000297c:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
90002980:	f00a fe1a 	bl	9000d5b8 <osSemaphoreNew>
90002984:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
90002986:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90002988:	6423      	str	r3, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
9000298a:	f00a fd95 	bl	9000d4b8 <osMutexNew>
9000298e:	6460      	str	r0, [r4, #68]	; 0x44
}
90002990:	bd38      	pop	{r3, r4, r5, pc}
90002992:	bf00      	nop
90002994:	24006d40 	.word	0x24006d40
90002998:	24006d88 	.word	0x24006d88
9000299c:	90025810 	.word	0x90025810

900029a0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
900029a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900029a4:	4c7e      	ldr	r4, [pc, #504]	; (90002ba0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>)
{
900029a6:	b08d      	sub	sp, #52	; 0x34
900029a8:	9006      	str	r0, [sp, #24]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900029aa:	fba4 0303 	umull	r0, r3, r4, r3
{
900029ae:	9109      	str	r1, [sp, #36]	; 0x24
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900029b0:	0a19      	lsrs	r1, r3, #8
{
900029b2:	9208      	str	r2, [sp, #32]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
900029b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900029b8:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
900029bc:	4293      	cmp	r3, r2
900029be:	930b      	str	r3, [sp, #44]	; 0x2c
900029c0:	f240 80e9 	bls.w	90002b96 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029c4:	4b77      	ldr	r3, [pc, #476]	; (90002ba4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
900029c6:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 90002bb4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>
900029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900029cc:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 90002bb8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>
900029d0:	930a      	str	r3, [sp, #40]	; 0x28
900029d2:	9a06      	ldr	r2, [sp, #24]
    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 2;

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);

    currentMCU++;
900029d4:	f04f 0e02 	mov.w	lr, #2
900029d8:	9908      	ldr	r1, [sp, #32]
900029da:	f502 7080 	add.w	r0, r2, #256	; 0x100
900029de:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029e0:	3101      	adds	r1, #1
    currentMCU++;
900029e2:	e9cd 2003 	strd	r2, r0, [sp, #12]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029e6:	980a      	ldr	r0, [sp, #40]	; 0x28
900029e8:	9108      	str	r1, [sp, #32]
900029ea:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
900029ee:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900029f2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
900029f6:	005b      	lsls	r3, r3, #1
900029f8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
900029fc:	9301      	str	r3, [sp, #4]

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */

    pLum = pInBuffer;

    for(i= 0; i <  16; i+=2)
900029fe:	e009      	b.n	90002a14 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x74>
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002a00:	9b01      	ldr	r3, [sp, #4]
90002a02:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002a06:	d30f      	bcc.n	90002a28 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x88>
    for(i= 0; i <  16; i+=2)
90002a08:	f1be 0f10 	cmp.w	lr, #16
90002a0c:	f000 80b6 	beq.w	90002b7c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
90002a10:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90002a14:	f1be 0f0a 	cmp.w	lr, #10
90002a18:	d1f2      	bne.n	90002a00 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x60>
        pLum = pInBuffer + 128;
90002a1a:	9b06      	ldr	r3, [sp, #24]
90002a1c:	3380      	adds	r3, #128	; 0x80
90002a1e:	9303      	str	r3, [sp, #12]
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002a20:	9b01      	ldr	r3, [sp, #4]
90002a22:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002a26:	d2f3      	bcs.n	90002a10 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      {
        pOutAddr = pOutBuffer + refline;
90002a28:	9a01      	ldr	r2, [sp, #4]
90002a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002a2c:	f8cd e01c 	str.w	lr, [sp, #28]
90002a30:	4413      	add	r3, r2
90002a32:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90002a36:	f103 0c10 	add.w	ip, r3, #16
90002a3a:	3330      	adds	r3, #48	; 0x30
90002a3c:	4696      	mov	lr, r2
90002a3e:	9102      	str	r1, [sp, #8]
90002a40:	9305      	str	r3, [sp, #20]
90002a42:	9b02      	ldr	r3, [sp, #8]
90002a44:	f50c 766c 	add.w	r6, ip, #944	; 0x3b0
90002a48:	f1ac 0510 	sub.w	r5, ip, #16
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;

        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
90002a4c:	4674      	mov	r4, lr
90002a4e:	1e5f      	subs	r7, r3, #1
          {
            cbcomp = (int32_t)(*(pChrom));
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a50:	f817 1f01 	ldrb.w	r1, [r7, #1]!
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90002a54:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a56:	4b54      	ldr	r3, [pc, #336]	; (90002ba8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x208>)
          for(j=0; j < 8; j+=2)
90002a58:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a5a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90002a5e:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a60:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
          for(j=0; j < 8; j+=2)
90002a64:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a66:	4b51      	ldr	r3, [pc, #324]	; (90002bac <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>)
            ycomp = (int32_t)(*(pLum +j));
90002a68:	f814 ac02 	ldrb.w	sl, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a6c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a70:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002a74:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a76:	4403      	add	r3, r0
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a78:	484d      	ldr	r0, [pc, #308]	; (90002bb0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a7a:	eb09 4323 	add.w	r3, r9, r3, asr #16
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a7e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002a82:	eb01 020a 	add.w	r2, r1, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a86:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a88:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
90002a8c:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a90:	4482      	add	sl, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a92:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a96:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a9a:	ea4f 0292 	mov.w	r2, r2, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a9e:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002aa2:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002aa6:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
90002aaa:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr =
90002aae:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002ab2:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ab6:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aba:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002abe:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ac0:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ac4:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ac8:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002acc:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ad0:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ad4:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002ad8:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002adc:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002ae0:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90002ae4:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ae8:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aec:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002af0:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002af2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002af6:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002afa:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002afe:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b02:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b06:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002b0a:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002b0e:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
90002b12:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90002b16:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b18:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b1a:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b1c:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b1e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b22:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b26:	ea4f 0393 	mov.w	r3, r3, lsr #2
90002b2a:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b2e:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b32:	ea4f 1343 	mov.w	r3, r3, lsl #5
90002b36:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90002b3a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
90002b3e:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90002b42:	d185      	bne.n	90002a50 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>

            pChrom++;
90002b44:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002b46:	f105 0c10 	add.w	ip, r5, #16
          }
          pLum += 64;
90002b4a:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pChrom++;
90002b4e:	3304      	adds	r3, #4
90002b50:	9302      	str	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002b52:	9b05      	ldr	r3, [sp, #20]
90002b54:	4563      	cmp	r3, ip
90002b56:	f47f af74 	bne.w	90002a42 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
90002b5a:	9b04      	ldr	r3, [sp, #16]
90002b5c:	f8dd e01c 	ldr.w	lr, [sp, #28]
90002b60:	3308      	adds	r3, #8
    for(i= 0; i <  16; i+=2)
90002b62:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90002b66:	9304      	str	r3, [sp, #16]
        }

        pLum = pLum - 128 + 16;
90002b68:	9b03      	ldr	r3, [sp, #12]
90002b6a:	f103 0310 	add.w	r3, r3, #16
90002b6e:	9303      	str	r3, [sp, #12]

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
90002b70:	9b01      	ldr	r3, [sp, #4]
90002b72:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
90002b76:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90002b78:	f47f af4a 	bne.w	90002a10 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002b7c:	9b06      	ldr	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002b7e:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002b80:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90002b84:	9306      	str	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90002b88:	4293      	cmp	r3, r2
90002b8a:	f47f af22 	bne.w	900029d2 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x32>
90002b8e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
90002b92:	4a04      	ldr	r2, [pc, #16]	; (90002ba4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002b94:	6293      	str	r3, [r2, #40]	; 0x28
  }
  return numberMCU;
}
90002b96:	ee17 0a90 	vmov	r0, s15
90002b9a:	b00d      	add	sp, #52	; 0x34
90002b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002ba0:	aaaaaaab 	.word	0xaaaaaaab
90002ba4:	24009a50 	.word	0x24009a50
90002ba8:	24007dd0 	.word	0x24007dd0
90002bac:	240079d0 	.word	0x240079d0
90002bb0:	240085d0 	.word	0x240085d0
90002bb4:	240081d0 	.word	0x240081d0
90002bb8:	90025848 	.word	0x90025848

90002bbc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002bc0:	0a1c      	lsrs	r4, r3, #8
{
90002bc2:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002bc4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002bc8:	ee07 4a90 	vmov	s15, r4
{
90002bcc:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90002bce:	429a      	cmp	r2, r3
{
90002bd0:	9007      	str	r0, [sp, #28]
90002bd2:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90002bd4:	930b      	str	r3, [sp, #44]	; 0x2c
90002bd6:	f080 814a 	bcs.w	90002e6e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002bda:	4ba7      	ldr	r3, [pc, #668]	; (90002e78 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90002bdc:	4da7      	ldr	r5, [pc, #668]	; (90002e7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90002bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002be0:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90002e80 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90002be4:	920a      	str	r2, [sp, #40]	; 0x28

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002be8:	691b      	ldr	r3, [r3, #16]
90002bea:	f8df a298 	ldr.w	sl, [pc, #664]	; 90002e84 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90002bee:	f8df b298 	ldr.w	fp, [pc, #664]	; 90002e88 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90002bf2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90002e8c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002bf6:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002bf8:	9301      	str	r3, [sp, #4]
90002bfa:	e008      	b.n	90002c0e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002bfc:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002bfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002c00:	f503 7380 	add.w	r3, r3, #256	; 0x100
90002c04:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002c06:	9b08      	ldr	r3, [sp, #32]
90002c08:	4293      	cmp	r3, r2
90002c0a:	f000 8130 	beq.w	90002e6e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c0e:	9a07      	ldr	r2, [sp, #28]
90002c10:	9908      	ldr	r1, [sp, #32]
90002c12:	f102 0080 	add.w	r0, r2, #128	; 0x80
90002c16:	010b      	lsls	r3, r1, #4
90002c18:	3101      	adds	r1, #1
    currentMCU++;
90002c1a:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c1e:	980a      	ldr	r0, [sp, #40]	; 0x28
90002c20:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002c22:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c24:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002c28:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002c2c:	fb01 f202 	mul.w	r2, r1, r2
90002c30:	005b      	lsls	r3, r3, #1
90002c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90002c36:	9300      	str	r3, [sp, #0]
    currentMCU++;
90002c38:	2308      	movs	r3, #8
90002c3a:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002c3c:	e9dd 2300 	ldrd	r2, r3, [sp]
90002c40:	4293      	cmp	r3, r2
90002c42:	d9db      	bls.n	90002bfc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90002c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002c46:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90002c48:	9a03      	ldr	r2, [sp, #12]
90002c4a:	f102 0140 	add.w	r1, r2, #64	; 0x40
90002c4e:	9a02      	ldr	r2, [sp, #8]
90002c50:	f103 0020 	add.w	r0, r3, #32
90002c54:	3204      	adds	r2, #4
90002c56:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002c58:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90002c5c:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002c5e:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90002c62:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002c64:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90002c68:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90002c6a:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002c6e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c72:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002c74:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002c78:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c7c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002c7e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c80:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c84:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c88:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c8c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c90:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c92:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c96:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002c9a:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002c9e:	08e4      	lsrs	r4, r4, #3
90002ca0:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002ca4:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002ca8:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002cac:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90002cb0:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002cb4:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cb6:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cb8:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cba:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cbe:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002cc2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cc6:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cc8:	08c0      	lsrs	r0, r0, #3
90002cca:	08a4      	lsrs	r4, r4, #2
90002ccc:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002cd0:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002cd4:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002cd8:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002cdc:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002ce0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002ce4:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002ce8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cec:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002cee:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002cf2:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002cf6:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002cf8:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cfa:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cfe:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d02:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d06:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d0a:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d0c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d10:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d14:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d18:	08e4      	lsrs	r4, r4, #3
90002d1a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d1e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d22:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d26:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90002d2a:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d2e:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d30:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d32:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d34:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d38:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d3c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d40:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d42:	08c0      	lsrs	r0, r0, #3
90002d44:	08a4      	lsrs	r4, r4, #2
90002d46:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002d4a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002d4e:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d52:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d56:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002d5a:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d5e:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d62:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d66:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d6a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d6c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d70:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d72:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d74:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d78:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d7c:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d80:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d84:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d86:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d8a:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d8e:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d92:	08e4      	lsrs	r4, r4, #3
90002d94:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d98:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d9c:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002da0:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90002da4:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002da8:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002daa:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dac:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dae:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002db2:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002db6:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dba:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dbc:	08c0      	lsrs	r0, r0, #3
90002dbe:	08a4      	lsrs	r4, r4, #2
90002dc0:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002dc4:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002dc8:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002dcc:	f812 0c05 	ldrb.w	r0, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002dd0:	f892 403b 	ldrb.w	r4, [r2, #59]	; 0x3b
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002dd4:	f85b c020 	ldr.w	ip, [fp, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002dd8:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002ddc:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002de0:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002de4:	4446      	add	r6, r8
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002de6:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002de8:	4460      	add	r0, ip
            ycomp = (int32_t)(*(pLum +j));
90002dea:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dee:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002df2:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002df6:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dfa:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dfe:	4484      	add	ip, r0
90002e00:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e04:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e08:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002e0c:	08e4      	lsrs	r4, r4, #3
90002e0e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002e12:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002e16:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002e1a:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002e1e:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e22:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e24:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e26:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e28:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e2c:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002e30:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e34:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e36:	08c0      	lsrs	r0, r0, #3
90002e38:	08a4      	lsrs	r4, r4, #2
90002e3a:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e3e:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e42:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90002e46:	9804      	ldr	r0, [sp, #16]
90002e48:	4283      	cmp	r3, r0
90002e4a:	f47f af05 	bne.w	90002c58 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90002e4e:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002e50:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90002e52:	3308      	adds	r3, #8
90002e54:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90002e56:	9b03      	ldr	r3, [sp, #12]
90002e58:	3308      	adds	r3, #8
90002e5a:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002e5c:	9b00      	ldr	r3, [sp, #0]
90002e5e:	4413      	add	r3, r2
90002e60:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90002e62:	9b05      	ldr	r3, [sp, #20]
90002e64:	3b01      	subs	r3, #1
90002e66:	9305      	str	r3, [sp, #20]
90002e68:	f47f aee8 	bne.w	90002c3c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90002e6c:	e6c6      	b.n	90002bfc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90002e6e:	ee17 0a90 	vmov	r0, s15
90002e72:	b00d      	add	sp, #52	; 0x34
90002e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002e78:	24009a50 	.word	0x24009a50
90002e7c:	240079d0 	.word	0x240079d0
90002e80:	240085d0 	.word	0x240085d0
90002e84:	240081d0 	.word	0x240081d0
90002e88:	24007dd0 	.word	0x24007dd0
90002e8c:	90025848 	.word	0x90025848

90002e90 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e94:	4cb6      	ldr	r4, [pc, #728]	; (90003170 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{
90002e96:	b089      	sub	sp, #36	; 0x24
90002e98:	e9cd 0204 	strd	r0, r2, [sp, #16]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e9c:	fba4 0303 	umull	r0, r3, r4, r3
{
90002ea0:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002ea2:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002ea4:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002ea8:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002eac:	429a      	cmp	r2, r3
90002eae:	9306      	str	r3, [sp, #24]
90002eb0:	f080 8158 	bcs.w	90003164 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002eb4:	4baf      	ldr	r3, [pc, #700]	; (90003174 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002eb6:	4cb0      	ldr	r4, [pc, #704]	; (90003178 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002eba:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90003180 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ebe:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ec2:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002ec4:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90003184 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ec8:	48ac      	ldr	r0, [pc, #688]	; (9000317c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90002eca:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90003188 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ece:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ed0:	9300      	str	r3, [sp, #0]
90002ed2:	e007      	b.n	90002ee4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90002ed4:	9b04      	ldr	r3, [sp, #16]
90002ed6:	33c0      	adds	r3, #192	; 0xc0
90002ed8:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002eda:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90002ede:	4293      	cmp	r3, r2
90002ee0:	f000 8140 	beq.w	90003164 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ee4:	9e05      	ldr	r6, [sp, #20]
90002ee6:	9f07      	ldr	r7, [sp, #28]
90002ee8:	00f5      	lsls	r5, r6, #3
90002eea:	3601      	adds	r6, #1
90002eec:	9904      	ldr	r1, [sp, #16]
90002eee:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ef0:	9e03      	ldr	r6, [sp, #12]
90002ef2:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ef6:	fbb5 f2f7 	udiv	r2, r5, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90002efa:	fb07 5512 	mls	r5, r7, r2, r5
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002efe:	fb06 f202 	mul.w	r2, r6, r2
90002f02:	006d      	lsls	r5, r5, #1
90002f04:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
    currentMCU++;
90002f08:	2508      	movs	r5, #8
90002f0a:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002f0c:	9d00      	ldr	r5, [sp, #0]
90002f0e:	4295      	cmp	r5, r2
90002f10:	d9e0      	bls.n	90002ed4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f12:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90002f16:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f18:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90002f1c:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90002f1e:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f22:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f26:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90002f2a:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f2c:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f30:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f34:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f36:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f38:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f3a:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f3e:	eb05 4929 	add.w	r9, r5, r9, asr #16
90002f42:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f46:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f48:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90002f4c:	08ed      	lsrs	r5, r5, #3
90002f4e:	08bf      	lsrs	r7, r7, #2
90002f50:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr =
90002f54:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f56:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002f5a:	52ae      	strh	r6, [r5, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f5c:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f60:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90002f64:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f68:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f6c:	4425      	add	r5, r4
90002f6e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f72:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f76:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f7a:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f7c:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f7e:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f80:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f84:	eb05 4929 	add.w	r9, r5, r9, asr #16
90002f88:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f8c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f8e:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90002f92:	08ed      	lsrs	r5, r5, #3
90002f94:	08bf      	lsrs	r7, r7, #2
90002f96:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
90002f9a:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f9c:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90002fa0:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr =
90002fa2:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002fa4:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002fa8:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002fac:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fae:	4427      	add	r7, r4
90002fb0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002fb4:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fb6:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fba:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fbc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fc0:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fc4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fc8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fcc:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fce:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fd2:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002fd4:	eb07 4626 	add.w	r6, r7, r6, asr #16
90002fd8:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90002fdc:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90002fe0:	08ff      	lsrs	r7, r7, #3
90002fe2:	08b6      	lsrs	r6, r6, #2
90002fe4:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90002fe8:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002fec:	f8a5 9004 	strh.w	r9, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002ff0:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002ff4:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90002ff8:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ffc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003000:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90003004:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003006:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000300a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000300e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003010:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003012:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003014:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003018:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000301c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003020:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003024:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90003028:	08ff      	lsrs	r7, r7, #3
9000302a:	08b6      	lsrs	r6, r6, #2
9000302c:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90003030:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003034:	f8a5 9006 	strh.w	r9, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003038:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000303c:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90003040:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003044:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003048:	4427      	add	r7, r4
9000304a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000304e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003052:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003056:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003058:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000305a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000305c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003060:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003064:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003068:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000306c:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90003070:	08ff      	lsrs	r7, r7, #3
90003072:	08b6      	lsrs	r6, r6, #2
90003074:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90003078:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000307c:	f8a5 9008 	strh.w	r9, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003080:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90003084:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003088:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000308c:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000308e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003092:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003096:	44b9      	add	r9, r7
90003098:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000309c:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030a0:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030a4:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030a8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030aa:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030ac:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030b0:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
900030b4:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
900030b8:	08ff      	lsrs	r7, r7, #3
900030ba:	08b6      	lsrs	r6, r6, #2
900030bc:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
900030c0:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030c4:	f8a5 900a 	strh.w	r9, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030c8:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030cc:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
900030d0:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030d4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030d8:	4427      	add	r7, r4
900030da:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030de:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030e2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030e6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030e8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030ea:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030ec:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030f0:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030f4:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030f8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030fc:	08ff      	lsrs	r7, r7, #3
900030fe:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90003102:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90003106:	08b6      	lsrs	r6, r6, #2
90003108:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000310c:	f8a5 900c 	strh.w	r9, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003110:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003114:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90003118:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000311c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90003120:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003122:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003126:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000312a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000312e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003130:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003132:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003134:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003138:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000313c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003140:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003144:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90003148:	08ff      	lsrs	r7, r7, #3
9000314a:	08b6      	lsrs	r6, r6, #2
9000314c:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90003150:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003154:	f8a5 900e 	strh.w	r9, [r5, #14]
    for(i= 0; i <  8; i++)
90003158:	9d01      	ldr	r5, [sp, #4]
9000315a:	3d01      	subs	r5, #1
9000315c:	9501      	str	r5, [sp, #4]
9000315e:	f47f aed5 	bne.w	90002f0c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
90003162:	e6b7      	b.n	90002ed4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90003164:	ee17 0a90 	vmov	r0, s15
90003168:	b009      	add	sp, #36	; 0x24
9000316a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000316e:	bf00      	nop
90003170:	aaaaaaab 	.word	0xaaaaaaab
90003174:	24009a50 	.word	0x24009a50
90003178:	90025848 	.word	0x90025848
9000317c:	240081d0 	.word	0x240081d0
90003180:	240085d0 	.word	0x240085d0
90003184:	240079d0 	.word	0x240079d0
90003188:	24007dd0 	.word	0x24007dd0

9000318c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000318c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003190:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003194:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90003196:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003198:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000319c:	f080 8088 	bcs.w	900032b0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031a0:	4b45      	ldr	r3, [pc, #276]	; (900032b8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900031a2:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900031a6:	691e      	ldr	r6, [r3, #16]
900031a8:	e003      	b.n	900031b2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
900031aa:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
900031ac:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
900031b0:	d07e      	beq.n	900032b0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031b2:	00d5      	lsls	r5, r2, #3
    currentMCU++;
900031b4:	4604      	mov	r4, r0
900031b6:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031ba:	3201      	adds	r2, #1
900031bc:	fbb5 f7f9 	udiv	r7, r5, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900031c0:	fb09 5317 	mls	r3, r9, r7, r5
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900031c4:	fb08 f707 	mul.w	r7, r8, r7
900031c8:	005b      	lsls	r3, r3, #1
900031ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900031ce:	429e      	cmp	r6, r3
900031d0:	d9eb      	bls.n	900031aa <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
900031d2:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
900031d6:	18cd      	adds	r5, r1, r3
          pLum++;
900031d8:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
900031da:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031de:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900031e2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900031e6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900031ea:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900031ee:	ea47 070c 	orr.w	r7, r7, ip
900031f2:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;
900031f4:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900031f6:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031fa:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900031fe:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003202:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003206:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000320a:	ea47 070c 	orr.w	r7, r7, ip
9000320e:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
90003210:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003214:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003218:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000321c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003220:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003224:	ea47 070c 	orr.w	r7, r7, ip
90003228:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
9000322a:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000322e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003232:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003236:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000323a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000323e:	ea47 070c 	orr.w	r7, r7, ip
90003242:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90003244:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003248:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000324c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003250:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003254:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003258:	ea47 070c 	orr.w	r7, r7, ip
9000325c:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
9000325e:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003262:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003266:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000326a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000326e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003272:	ea47 070c 	orr.w	r7, r7, ip
90003276:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90003278:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000327c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003280:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003284:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003288:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000328c:	ea47 070c 	orr.w	r7, r7, ip
90003290:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90003292:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003296:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000329a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000329e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900032a2:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900032a6:	ea47 070c 	orr.w	r7, r7, ip
900032aa:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
900032ac:	d18f      	bne.n	900031ce <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
900032ae:	e77c      	b.n	900031aa <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
900032b0:	ee17 0a90 	vmov	r0, s15
900032b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900032b8:	24009a50 	.word	0x24009a50

900032bc <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
900032bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900032c0:	0a1c      	lsrs	r4, r3, #8
{
900032c2:	b083      	sub	sp, #12
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
900032c4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900032c8:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900032cc:	429a      	cmp	r2, r3
900032ce:	9301      	str	r3, [sp, #4]
900032d0:	f080 8128 	bcs.w	90003524 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x268>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032d4:	4b96      	ldr	r3, [pc, #600]	; (90003530 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900032d6:	f8df c25c 	ldr.w	ip, [pc, #604]	; 90003534 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900032da:	691f      	ldr	r7, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900032dc:	e9d3 a909 	ldrd	sl, r9, [r3, #36]	; 0x24
900032e0:	e006      	b.n	900032f0 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x34>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900032e2:	9a00      	ldr	r2, [sp, #0]
900032e4:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900032e8:	9b01      	ldr	r3, [sp, #4]
900032ea:	429a      	cmp	r2, r3
900032ec:	f000 811a 	beq.w	90003524 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x268>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032f0:	00d3      	lsls	r3, r2, #3
    currentMCU++;
900032f2:	f04f 0808 	mov.w	r8, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032f6:	3201      	adds	r2, #1
900032f8:	fbb3 f4fa 	udiv	r4, r3, sl
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900032fc:	fb0a 3514 	mls	r5, sl, r4, r3
    currentMCU++;
90003300:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003302:	fb09 f404 	mul.w	r4, r9, r4
90003306:	006d      	lsls	r5, r5, #1
    currentMCU++;
90003308:	9200      	str	r2, [sp, #0]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000330a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000330e:	42af      	cmp	r7, r5
90003310:	d9e7      	bls.n	900032e2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26>
            color_k = (int32_t)(*(pChrom + 192));
90003312:	f893 b0c0 	ldrb.w	fp, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;
90003316:	194e      	adds	r6, r1, r5
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003318:	f893 e040 	ldrb.w	lr, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
9000331c:	f1b8 0801 	subs.w	r8, r8, #1
            pChrom++;
90003320:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003324:	fb1e fe0b 	smulbb	lr, lr, fp
90003328:	fbac 4e0e 	umull	r4, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000332c:	f813 4c08 	ldrb.w	r4, [r3, #-8]
90003330:	fb14 f40b 	smulbb	r4, r4, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003334:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003338:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000333c:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003340:	ea4f 2494 	mov.w	r4, r4, lsr #10
90003344:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003348:	f893 e078 	ldrb.w	lr, [r3, #120]	; 0x78
9000334c:	fb1e fb0b 	smulbb	fp, lr, fp
90003350:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003354:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90003358:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
9000335a:	534c      	strh	r4, [r1, r5]
        refline += JPEG_ConvertorParams.ScaledWidth;
9000335c:	444d      	add	r5, r9
            color_k = (int32_t)(*(pChrom + 192));
9000335e:	f893 b0b9 	ldrb.w	fp, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003362:	f893 e039 	ldrb.w	lr, [r3, #57]	; 0x39
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003366:	f813 4c07 	ldrb.w	r4, [r3, #-7]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000336a:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000336e:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003372:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003376:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000337a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000337e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003382:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003386:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000338a:	f893 e079 	ldrb.w	lr, [r3, #121]	; 0x79
9000338e:	fb1e fb0b 	smulbb	fp, lr, fp
90003392:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003396:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000339a:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
9000339c:	8074      	strh	r4, [r6, #2]
            color_k = (int32_t)(*(pChrom + 192));
9000339e:	f893 b0ba 	ldrb.w	fp, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033a2:	f893 e03a 	ldrb.w	lr, [r3, #58]	; 0x3a
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033a6:	f813 4c06 	ldrb.w	r4, [r3, #-6]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033aa:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033ae:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033b2:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033b6:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033ba:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033be:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033c2:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033c6:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900033ca:	f893 e07a 	ldrb.w	lr, [r3, #122]	; 0x7a
900033ce:	fb1e fb0b 	smulbb	fp, lr, fp
900033d2:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033d6:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
900033da:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
900033dc:	80b4      	strh	r4, [r6, #4]
            color_k = (int32_t)(*(pChrom + 192));
900033de:	f893 b0bb 	ldrb.w	fp, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033e2:	f893 e03b 	ldrb.w	lr, [r3, #59]	; 0x3b
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033e6:	f813 4c05 	ldrb.w	r4, [r3, #-5]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033ea:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033ee:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033f2:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033f6:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033fa:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033fe:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003402:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003406:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000340a:	f893 e07b 	ldrb.w	lr, [r3, #123]	; 0x7b
9000340e:	fb1e fb0b 	smulbb	fp, lr, fp
90003412:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003416:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000341a:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
9000341c:	80f4      	strh	r4, [r6, #6]
            color_k = (int32_t)(*(pChrom + 192));
9000341e:	f893 b0bc 	ldrb.w	fp, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003422:	f893 e03c 	ldrb.w	lr, [r3, #60]	; 0x3c
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003426:	f813 4c04 	ldrb.w	r4, [r3, #-4]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000342a:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000342e:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003432:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003436:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000343a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000343e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003442:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003446:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000344a:	f893 e07c 	ldrb.w	lr, [r3, #124]	; 0x7c
9000344e:	fb1e fb0b 	smulbb	fp, lr, fp
90003452:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003456:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000345a:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
9000345c:	8134      	strh	r4, [r6, #8]
            color_k = (int32_t)(*(pChrom + 192));
9000345e:	f893 b0bd 	ldrb.w	fp, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003462:	f893 e03d 	ldrb.w	lr, [r3, #61]	; 0x3d
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003466:	f813 4c03 	ldrb.w	r4, [r3, #-3]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000346a:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000346e:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003472:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003476:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000347a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000347e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003482:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003486:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000348a:	f893 e07d 	ldrb.w	lr, [r3, #125]	; 0x7d
9000348e:	fb1e fb0b 	smulbb	fp, lr, fp
90003492:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003496:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000349a:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
9000349c:	8174      	strh	r4, [r6, #10]
            color_k = (int32_t)(*(pChrom + 192));
9000349e:	f893 b0be 	ldrb.w	fp, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034a2:	f813 ec02 	ldrb.w	lr, [r3, #-2]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034a6:	f893 403e 	ldrb.w	r4, [r3, #62]	; 0x3e
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034aa:	fb1e fe0b 	smulbb	lr, lr, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034ae:	fb14 f40b 	smulbb	r4, r4, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034b2:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034b6:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034ba:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034be:	ea4f 2454 	mov.w	r4, r4, lsr #9
900034c2:	ea4f 1444 	mov.w	r4, r4, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034c6:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034ca:	f893 e07e 	ldrb.w	lr, [r3, #126]	; 0x7e
900034ce:	fb1e fb0b 	smulbb	fp, lr, fp
900034d2:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034d6:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
900034da:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
900034dc:	81b4      	strh	r4, [r6, #12]
            color_k = (int32_t)(*(pChrom + 192));
900034de:	f893 b0bf 	ldrb.w	fp, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034e2:	f893 e03f 	ldrb.w	lr, [r3, #63]	; 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034e6:	f813 4c01 	ldrb.w	r4, [r3, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034ea:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034ee:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034f2:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034f6:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034fa:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034fe:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003502:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003506:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000350a:	f893 e07f 	ldrb.w	lr, [r3, #127]	; 0x7f
9000350e:	fb1e fb0b 	smulbb	fp, lr, fp
90003512:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003516:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
9000351a:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
9000351c:	81f4      	strh	r4, [r6, #14]
    for(i= 0; i <  8; i++)
9000351e:	f47f aef6 	bne.w	9000330e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x52>
90003522:	e6de      	b.n	900032e2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26>
  }
  return numberMCU;
}
90003524:	ee17 0a90 	vmov	r0, s15
90003528:	b003      	add	sp, #12
9000352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000352e:	bf00      	nop
90003530:	24009a50 	.word	0x24009a50
90003534:	80808081 	.word	0x80808081

90003538 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90003538:	b4f0      	push	{r4, r5, r6, r7}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
9000353a:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000353e:	68c5      	ldr	r5, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003540:	6804      	ldr	r4, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003542:	fb06 f005 	mul.w	r0, r6, r5
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003546:	4b31      	ldr	r3, [pc, #196]	; (9000360c <TGFX_JPEG_GetDecodeColorConvertFunc+0xd4>)
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003548:	2c10      	cmp	r4, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000354a:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000354e:	609d      	str	r5, [r3, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003550:	601c      	str	r4, [r3, #0]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
90003552:	60de      	str	r6, [r3, #12]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003554:	605f      	str	r7, [r3, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003556:	6118      	str	r0, [r3, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003558:	d02b      	beq.n	900035b2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x7a>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
9000355a:	b9fc      	cbnz	r4, 9000359c <TGFX_JPEG_GetDecodeColorConvertFunc+0x64>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9000355c:	482c      	ldr	r0, [pc, #176]	; (90003610 <TGFX_JPEG_GetDecodeColorConvertFunc+0xd8>)
9000355e:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
90003560:	f015 0007 	ands.w	r0, r5, #7
90003564:	d121      	bne.n	900035aa <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90003566:	4607      	mov	r7, r0
90003568:	6158      	str	r0, [r3, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
    }
    JPEG_ConvertorParams.H_factor = 8;
9000356a:	2108      	movs	r1, #8
9000356c:	460c      	mov	r4, r1
    JPEG_ConvertorParams.V_factor  = 8;
9000356e:	e9c3 1107 	strd	r1, r1, [r3, #28]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003572:	442f      	add	r7, r5
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003574:	fbb5 f4f4 	udiv	r4, r5, r4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003578:	006d      	lsls	r5, r5, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000357a:	625f      	str	r7, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000357c:	629d      	str	r5, [r3, #40]	; 0x28
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000357e:	b100      	cbz	r0, 90003582 <TGFX_JPEG_GetDecodeColorConvertFunc+0x4a>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
90003580:	3401      	adds	r4, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
90003582:	fbb6 f0f1 	udiv	r0, r6, r1
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90003586:	fb01 6110 	mls	r1, r1, r0, r6
9000358a:	b101      	cbz	r1, 9000358e <TGFX_JPEG_GetDecodeColorConvertFunc+0x56>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
9000358c:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000358e:	fb00 f404 	mul.w	r4, r0, r4
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
90003592:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003594:	62dc      	str	r4, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90003596:	6014      	str	r4, [r2, #0]
}
90003598:	bcf0      	pop	{r4, r5, r6, r7}
9000359a:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
9000359c:	2c30      	cmp	r4, #48	; 0x30
9000359e:	d112      	bne.n	900035c6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x8e>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
900035a0:	481c      	ldr	r0, [pc, #112]	; (90003614 <TGFX_JPEG_GetDecodeColorConvertFunc+0xdc>)
900035a2:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
900035a4:	f015 0007 	ands.w	r0, r5, #7
900035a8:	d0dd      	beq.n	90003566 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
900035aa:	f1c0 0708 	rsb	r7, r0, #8
900035ae:	615f      	str	r7, [r3, #20]
900035b0:	e7db      	b.n	9000356a <TGFX_JPEG_GetDecodeColorConvertFunc+0x32>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
900035b2:	2f01      	cmp	r7, #1
900035b4:	d017      	beq.n	900035e6 <TGFX_JPEG_GetDecodeColorConvertFunc+0xae>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
900035b6:	2f02      	cmp	r7, #2
900035b8:	d008      	beq.n	900035cc <TGFX_JPEG_GetDecodeColorConvertFunc+0x94>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
900035ba:	4817      	ldr	r0, [pc, #92]	; (90003618 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe0>)
900035bc:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035be:	f015 0007 	ands.w	r0, r5, #7
900035c2:	d1f2      	bne.n	900035aa <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
900035c4:	e7cf      	b.n	90003566 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
    return HAL_ERROR; /* Color space Not supported*/
900035c6:	2001      	movs	r0, #1
}
900035c8:	bcf0      	pop	{r4, r5, r6, r7}
900035ca:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900035cc:	4813      	ldr	r0, [pc, #76]	; (9000361c <TGFX_JPEG_GetDecodeColorConvertFunc+0xe4>)
900035ce:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035d0:	f015 000f 	ands.w	r0, r5, #15
900035d4:	d116      	bne.n	90003604 <TGFX_JPEG_GetDecodeColorConvertFunc+0xcc>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900035d6:	4607      	mov	r7, r0
900035d8:	6158      	str	r0, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
900035da:	f04f 0c10 	mov.w	ip, #16
900035de:	2108      	movs	r1, #8
900035e0:	e9c3 c107 	strd	ip, r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
900035e4:	e7c5      	b.n	90003572 <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900035e6:	480e      	ldr	r0, [pc, #56]	; (90003620 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe8>)
900035e8:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035ea:	f015 000f 	ands.w	r0, r5, #15
900035ee:	d105      	bne.n	900035fc <TGFX_JPEG_GetDecodeColorConvertFunc+0xc4>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900035f0:	4607      	mov	r7, r0
900035f2:	6158      	str	r0, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
900035f4:	2110      	movs	r1, #16
      JPEG_ConvertorParams.V_factor  = 16;
900035f6:	e9c3 1107 	strd	r1, r1, [r3, #28]
900035fa:	e7ba      	b.n	90003572 <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900035fc:	f1c0 0710 	rsb	r7, r0, #16
90003600:	615f      	str	r7, [r3, #20]
90003602:	e7f7      	b.n	900035f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
90003604:	f1c0 0710 	rsb	r7, r0, #16
90003608:	615f      	str	r7, [r3, #20]
9000360a:	e7e6      	b.n	900035da <TGFX_JPEG_GetDecodeColorConvertFunc+0xa2>
9000360c:	24009a50 	.word	0x24009a50
90003610:	9000318d 	.word	0x9000318d
90003614:	900032bd 	.word	0x900032bd
90003618:	90002e91 	.word	0x90002e91
9000361c:	90002bbd 	.word	0x90002bbd
90003620:	900029a1 	.word	0x900029a1

90003624 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
90003624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003628:	f8df c12c 	ldr.w	ip, [pc, #300]	; 90003758 <TGFX_JPEG_InitColorTables+0x134>
9000362c:	b08b      	sub	sp, #44	; 0x2c
9000362e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 9000375c <TGFX_JPEG_InitColorTables+0x138>
90003632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003636:	f8df e128 	ldr.w	lr, [pc, #296]	; 90003760 <TGFX_JPEG_InitColorTables+0x13c>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
9000363a:	2300      	movs	r3, #0
9000363c:	4f3d      	ldr	r7, [pc, #244]	; (90003734 <TGFX_JPEG_InitColorTables+0x110>)
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000363e:	f64e 3b2f 	movw	fp, #60207	; 0xeb2f
90003642:	4e3d      	ldr	r6, [pc, #244]	; (90003738 <TGFX_JPEG_InitColorTables+0x114>)
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003644:	f249 4ad0 	movw	sl, #38096	; 0x94d0
90003648:	4d3c      	ldr	r5, [pc, #240]	; (9000373c <TGFX_JPEG_InitColorTables+0x118>)
  for (i = 0; i <= 255; i++)
9000364a:	f644 498b 	movw	r9, #19595	; 0x4c8b
9000364e:	4c3c      	ldr	r4, [pc, #240]	; (90003740 <TGFX_JPEG_InitColorTables+0x11c>)
90003650:	483c      	ldr	r0, [pc, #240]	; (90003744 <TGFX_JPEG_InitColorTables+0x120>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003652:	f249 6245 	movw	r2, #38469	; 0x9645
90003656:	fb02 f203 	mul.w	r2, r2, r3
9000365a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000365e:	1412      	asrs	r2, r2, #16
90003660:	f84e 2f04 	str.w	r2, [lr, #4]!
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003664:	f641 522f 	movw	r2, #7471	; 0x1d2f
90003668:	fb02 f203 	mul.w	r2, r2, r3
9000366c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003670:	1412      	asrs	r2, r2, #16
90003672:	f84c 2f04 	str.w	r2, [ip, #4]!
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003676:	4a34      	ldr	r2, [pc, #208]	; (90003748 <TGFX_JPEG_InitColorTables+0x124>)
90003678:	fb02 f203 	mul.w	r2, r2, r3
9000367c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90003680:	1412      	asrs	r2, r2, #16
90003682:	f847 2f04 	str.w	r2, [r7, #4]!
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003686:	4a31      	ldr	r2, [pc, #196]	; (9000374c <TGFX_JPEG_InitColorTables+0x128>)
90003688:	fb02 f203 	mul.w	r2, r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000368c:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000368e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
90003692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003696:	ea4f 4222 	mov.w	r2, r2, asr #16
9000369a:	f846 2f04 	str.w	r2, [r6, #4]!
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000369e:	4a2c      	ldr	r2, [pc, #176]	; (90003750 <TGFX_JPEG_InitColorTables+0x12c>)
900036a0:	fb02 b203 	mla	r2, r2, r3, fp
900036a4:	ea4f 4222 	mov.w	r2, r2, asr #16
900036a8:	f844 2f04 	str.w	r2, [r4, #4]!
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036ac:	4a29      	ldr	r2, [pc, #164]	; (90003754 <TGFX_JPEG_InitColorTables+0x130>)
900036ae:	fb02 a203 	mla	r2, r2, r3, sl
900036b2:	ea4f 4222 	mov.w	r2, r2, asr #16
900036b6:	f840 2f04 	str.w	r2, [r0, #4]!
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036ba:	ea4f 4221 	mov.w	r2, r1, asr #16
  for (i = 0; i <= 255; i++)
900036be:	4449      	add	r1, r9
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036c0:	f848 2f04 	str.w	r2, [r8, #4]!
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036c4:	f343 024f 	sbfx	r2, r3, #1, #16
900036c8:	f845 2f04 	str.w	r2, [r5, #4]!
  for (i = 0; i <= 255; i++)
900036cc:	d1c1      	bne.n	90003652 <TGFX_JPEG_InitColorTables+0x2e>
900036ce:	f8df e094 	ldr.w	lr, [pc, #148]	; 90003764 <TGFX_JPEG_InitColorTables+0x140>
900036d2:	2138      	movs	r1, #56	; 0x38
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
900036d4:	f04f 0c00 	mov.w	ip, #0
900036d8:	e007      	b.n	900036ea <TGFX_JPEG_InitColorTables+0xc6>
900036da:	f10c 0c01 	add.w	ip, ip, #1
900036de:	f10e 0e20 	add.w	lr, lr, #32
900036e2:	4641      	mov	r1, r8
900036e4:	f1bc 0f10 	cmp.w	ip, #16
900036e8:	d03e      	beq.n	90003768 <TGFX_JPEG_InitColorTables+0x144>
  {
    for(j = 0; j < 16; j++)
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
900036ea:	f1bc 0f07 	cmp.w	ip, #7
900036ee:	f101 0808 	add.w	r8, r1, #8
900036f2:	4672      	mov	r2, lr
900036f4:	f04f 0001 	mov.w	r0, #1
900036f8:	bf94      	ite	ls
900036fa:	2600      	movls	r6, #0
900036fc:	2601      	movhi	r6, #1
900036fe:	fa1f f388 	uxth.w	r3, r8
90003702:	2400      	movs	r4, #0
90003704:	2c07      	cmp	r4, #7
90003706:	f1a1 0538 	sub.w	r5, r1, #56	; 0x38
9000370a:	bf94      	ite	ls
9000370c:	2700      	movls	r7, #0
9000370e:	2701      	movhi	r7, #1
90003710:	2f00      	cmp	r7, #0
90003712:	f000 8356 	beq.w	90003dc2 <TGFX_JPEG_InitColorTables+0x79e>
90003716:	2e00      	cmp	r6, #0
90003718:	f000 8353 	beq.w	90003dc2 <TGFX_JPEG_InitColorTables+0x79e>
9000371c:	f101 0540 	add.w	r5, r1, #64	; 0x40
    for(j = 0; j < 16; j++)
90003720:	2810      	cmp	r0, #16
      else  if((j>=8) && (i<8)) offset+= 56;
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90003722:	8015      	strh	r5, [r2, #0]
    for(j = 0; j < 16; j++)
90003724:	d0d9      	beq.n	900036da <TGFX_JPEG_InitColorTables+0xb6>
90003726:	3301      	adds	r3, #1
90003728:	3401      	adds	r4, #1
9000372a:	3001      	adds	r0, #1
9000372c:	3202      	adds	r2, #2
9000372e:	b29b      	uxth	r3, r3
90003730:	3101      	adds	r1, #1
90003732:	e7e7      	b.n	90003704 <TGFX_JPEG_InitColorTables+0xe0>
90003734:	2400a60c 	.word	0x2400a60c
90003738:	240089cc 	.word	0x240089cc
9000373c:	24006dcc 	.word	0x24006dcc
90003740:	24008dcc 	.word	0x24008dcc
90003744:	240071cc 	.word	0x240071cc
90003748:	ffffd4d1 	.word	0xffffd4d1
9000374c:	ffffab30 	.word	0xffffab30
90003750:	ffff94d1 	.word	0xffff94d1
90003754:	ffffeb30 	.word	0xffffeb30
90003758:	240075cc 	.word	0x240075cc
9000375c:	2400aa0c 	.word	0x2400aa0c
90003760:	240091cc 	.word	0x240091cc
90003764:	2400a410 	.word	0x2400a410
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
90003768:	2300      	movs	r3, #0
9000376a:	f8df b370 	ldr.w	fp, [pc, #880]	; 90003adc <TGFX_JPEG_InitColorTables+0x4b8>
9000376e:	f8df a370 	ldr.w	sl, [pc, #880]	; 90003ae0 <TGFX_JPEG_InitColorTables+0x4bc>
  for(i = 0; i < 16; i++)
90003772:	2680      	movs	r6, #128	; 0x80
90003774:	f8df 836c 	ldr.w	r8, [pc, #876]	; 90003ae4 <TGFX_JPEG_InitColorTables+0x4c0>
90003778:	f8df e36c 	ldr.w	lr, [pc, #876]	; 90003ae8 <TGFX_JPEG_InitColorTables+0x4c4>
9000377c:	f8df c36c 	ldr.w	ip, [pc, #876]	; 90003aec <TGFX_JPEG_InitColorTables+0x4c8>
90003780:	4fce      	ldr	r7, [pc, #824]	; (90003abc <TGFX_JPEG_InitColorTables+0x498>)
  for(i = 0; i < 16; i++)
90003782:	9300      	str	r3, [sp, #0]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003784:	f106 0441 	add.w	r4, r6, #65	; 0x41
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003788:	9800      	ldr	r0, [sp, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000378a:	f106 0240 	add.w	r2, r6, #64	; 0x40
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000378e:	1c71      	adds	r1, r6, #1
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003790:	b2a4      	uxth	r4, r4
90003792:	f106 0542 	add.w	r5, r6, #66	; 0x42
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003796:	0843      	lsrs	r3, r0, #1
  for(i = 0; i < 16; i++)
90003798:	3001      	adds	r0, #1
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000379a:	f8ae 4004 	strh.w	r4, [lr, #4]
9000379e:	b292      	uxth	r2, r2
900037a0:	f8ae 4006 	strh.w	r4, [lr, #6]
900037a4:	f106 0443 	add.w	r4, r6, #67	; 0x43
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037a8:	00db      	lsls	r3, r3, #3
  for(i = 0; i < 16; i++)
900037aa:	9000      	str	r0, [sp, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037ac:	b2a4      	uxth	r4, r4
900037ae:	f8ae 2000 	strh.w	r2, [lr]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037b2:	b29b      	uxth	r3, r3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037b4:	f8ae 2002 	strh.w	r2, [lr, #2]
900037b8:	9401      	str	r4, [sp, #4]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037ba:	1d34      	adds	r4, r6, #4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037bc:	f503 7080 	add.w	r0, r3, #256	; 0x100
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037c0:	b289      	uxth	r1, r1
900037c2:	b2a4      	uxth	r4, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037c4:	f203 1201 	addw	r2, r3, #257	; 0x101
900037c8:	b280      	uxth	r0, r0
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037ca:	f8aa 1004 	strh.w	r1, [sl, #4]
900037ce:	9402      	str	r4, [sp, #8]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037d0:	f106 0444 	add.w	r4, r6, #68	; 0x44
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037d4:	b292      	uxth	r2, r2
900037d6:	f8ab 0000 	strh.w	r0, [fp]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037da:	b2a4      	uxth	r4, r4

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037dc:	8038      	strh	r0, [r7, #0]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037de:	f8ab 0002 	strh.w	r0, [fp, #2]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900037e2:	f503 79a1 	add.w	r9, r3, #322	; 0x142
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037e6:	9403      	str	r4, [sp, #12]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037e8:	1d74      	adds	r4, r6, #5
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037ea:	8078      	strh	r0, [r7, #2]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037ec:	1cb0      	adds	r0, r6, #2
900037ee:	b2a4      	uxth	r4, r4
900037f0:	f8aa 1006 	strh.w	r1, [sl, #6]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037f4:	f503 7181 	add.w	r1, r3, #258	; 0x102
900037f8:	f8ab 2004 	strh.w	r2, [fp, #4]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037fc:	9404      	str	r4, [sp, #16]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037fe:	f106 0445 	add.w	r4, r6, #69	; 0x45
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003802:	b289      	uxth	r1, r1
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003804:	80ba      	strh	r2, [r7, #4]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003806:	b2a4      	uxth	r4, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003808:	f8ab 2006 	strh.w	r2, [fp, #6]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000380c:	80fa      	strh	r2, [r7, #6]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000380e:	b2ad      	uxth	r5, r5
90003810:	9405      	str	r4, [sp, #20]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003812:	1db4      	adds	r4, r6, #6
90003814:	b282      	uxth	r2, r0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003816:	f8ab 1008 	strh.w	r1, [fp, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000381a:	b2a4      	uxth	r4, r4
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000381c:	8139      	strh	r1, [r7, #8]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000381e:	fa1f f989 	uxth.w	r9, r9
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003822:	f8ab 100a 	strh.w	r1, [fp, #10]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003826:	9406      	str	r4, [sp, #24]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003828:	f106 0446 	add.w	r4, r6, #70	; 0x46
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000382c:	f8a8 9008 	strh.w	r9, [r8, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003830:	1cf0      	adds	r0, r6, #3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003832:	b2a4      	uxth	r4, r4
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003834:	f8aa 6000 	strh.w	r6, [sl]
90003838:	f8aa 6002 	strh.w	r6, [sl, #2]
9000383c:	b280      	uxth	r0, r0
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000383e:	9407      	str	r4, [sp, #28]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003840:	1df4      	adds	r4, r6, #7
90003842:	f8aa 2008 	strh.w	r2, [sl, #8]
  for(i = 0; i < 16; i++)
90003846:	f10c 0c20 	add.w	ip, ip, #32
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000384a:	b2a4      	uxth	r4, r4
9000384c:	f8aa 200a 	strh.w	r2, [sl, #10]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003850:	f8ae 5008 	strh.w	r5, [lr, #8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003854:	f203 1203 	addw	r2, r3, #259	; 0x103
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003858:	9408      	str	r4, [sp, #32]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000385a:	f106 0447 	add.w	r4, r6, #71	; 0x47
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000385e:	b292      	uxth	r2, r2
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003860:	f8ae 500a 	strh.w	r5, [lr, #10]
90003864:	b2a4      	uxth	r4, r4
90003866:	9d05      	ldr	r5, [sp, #20]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003868:	f8ab 200c 	strh.w	r2, [fp, #12]
  for(i = 0; i < 16; i++)
9000386c:	f108 0820 	add.w	r8, r8, #32
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003870:	9409      	str	r4, [sp, #36]	; 0x24
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003872:	f503 74a0 	add.w	r4, r3, #320	; 0x140
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003876:	81ba      	strh	r2, [r7, #12]
  for(i = 0; i < 16; i++)
90003878:	f10b 0b20 	add.w	fp, fp, #32
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000387c:	b2a4      	uxth	r4, r4
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000387e:	81fa      	strh	r2, [r7, #14]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003880:	f82b 2c12 	strh.w	r2, [fp, #-18]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003884:	f203 1243 	addw	r2, r3, #323	; 0x143
90003888:	f828 4c20 	strh.w	r4, [r8, #-32]
  for(i = 0; i < 16; i++)
9000388c:	3720      	adds	r7, #32
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000388e:	f828 4c1e 	strh.w	r4, [r8, #-30]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003892:	f503 74c0 	add.w	r4, r3, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003896:	b292      	uxth	r2, r2
90003898:	f828 9c16 	strh.w	r9, [r8, #-22]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000389c:	b2a4      	uxth	r4, r4
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000389e:	f827 1c16 	strh.w	r1, [r7, #-22]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038a2:	f8aa 000c 	strh.w	r0, [sl, #12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038a6:	f203 1185 	addw	r1, r3, #389	; 0x185
900038aa:	f82c 4c20 	strh.w	r4, [ip, #-32]
  for(i = 0; i < 16; i++)
900038ae:	3608      	adds	r6, #8
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038b0:	f82c 4c1e 	strh.w	r4, [ip, #-30]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038b4:	f203 1441 	addw	r4, r3, #321	; 0x141
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038b8:	f8aa 000e 	strh.w	r0, [sl, #14]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038bc:	f203 1045 	addw	r0, r3, #325	; 0x145
900038c0:	b2a4      	uxth	r4, r4
  for(i = 0; i < 16; i++)
900038c2:	f10a 0a20 	add.w	sl, sl, #32
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038c6:	b280      	uxth	r0, r0
  for(i = 0; i < 16; i++)
900038c8:	f10e 0e20 	add.w	lr, lr, #32
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038cc:	f828 4c1c 	strh.w	r4, [r8, #-28]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038d0:	b289      	uxth	r1, r1
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038d2:	f828 4c1a 	strh.w	r4, [r8, #-26]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038d6:	f203 1481 	addw	r4, r3, #385	; 0x181
  for(i = 0; i < 16; i++)
900038da:	b2b6      	uxth	r6, r6
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038dc:	b2a4      	uxth	r4, r4
900038de:	f82c 4c1c 	strh.w	r4, [ip, #-28]
900038e2:	f82c 4c1a 	strh.w	r4, [ip, #-26]
900038e6:	f503 74c1 	add.w	r4, r3, #386	; 0x182
900038ea:	b2a4      	uxth	r4, r4
900038ec:	f82c 4c18 	strh.w	r4, [ip, #-24]
900038f0:	f82c 4c16 	strh.w	r4, [ip, #-22]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038f4:	9c01      	ldr	r4, [sp, #4]
900038f6:	f82e 4c14 	strh.w	r4, [lr, #-20]
900038fa:	f82e 4c12 	strh.w	r4, [lr, #-18]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900038fe:	9c02      	ldr	r4, [sp, #8]
90003900:	f82a 4c10 	strh.w	r4, [sl, #-16]
90003904:	f82a 4c0e 	strh.w	r4, [sl, #-14]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003908:	9c03      	ldr	r4, [sp, #12]
9000390a:	f82e 4c10 	strh.w	r4, [lr, #-16]
9000390e:	f82e 4c0e 	strh.w	r4, [lr, #-14]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003912:	9c04      	ldr	r4, [sp, #16]
90003914:	f82a 4c0c 	strh.w	r4, [sl, #-12]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003918:	f82e 5c0c 	strh.w	r5, [lr, #-12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000391c:	f828 2c14 	strh.w	r2, [r8, #-20]
90003920:	f828 2c12 	strh.w	r2, [r8, #-18]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003924:	f203 1283 	addw	r2, r3, #387	; 0x183
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003928:	f82a 4c0a 	strh.w	r4, [sl, #-10]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000392c:	b292      	uxth	r2, r2
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000392e:	9c06      	ldr	r4, [sp, #24]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003930:	f828 0c0c 	strh.w	r0, [r8, #-12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003934:	f82c 2c14 	strh.w	r2, [ip, #-20]
90003938:	f82c 2c12 	strh.w	r2, [ip, #-18]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000393c:	f503 7282 	add.w	r2, r3, #260	; 0x104
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003940:	f82a 4c08 	strh.w	r4, [sl, #-8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003944:	b292      	uxth	r2, r2
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003946:	f82a 4c06 	strh.w	r4, [sl, #-6]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000394a:	9c07      	ldr	r4, [sp, #28]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000394c:	f82b 2c10 	strh.w	r2, [fp, #-16]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003950:	f827 2c10 	strh.w	r2, [r7, #-16]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003954:	f82b 2c0e 	strh.w	r2, [fp, #-14]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003958:	f827 2c0e 	strh.w	r2, [r7, #-14]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000395c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
90003960:	f828 0c0a 	strh.w	r0, [r8, #-10]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003964:	f503 70c3 	add.w	r0, r3, #390	; 0x186
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003968:	b292      	uxth	r2, r2
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000396a:	f82e 4c08 	strh.w	r4, [lr, #-8]
9000396e:	f82e 4c06 	strh.w	r4, [lr, #-6]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003972:	b280      	uxth	r0, r0
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003974:	f828 2c10 	strh.w	r2, [r8, #-16]
90003978:	f828 2c0e 	strh.w	r2, [r8, #-14]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000397c:	f503 72c2 	add.w	r2, r3, #388	; 0x184
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003980:	9c08      	ldr	r4, [sp, #32]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003982:	b292      	uxth	r2, r2
90003984:	f82c 1c0c 	strh.w	r1, [ip, #-12]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003988:	f82a 4c04 	strh.w	r4, [sl, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000398c:	f82c 2c10 	strh.w	r2, [ip, #-16]
90003990:	f82c 2c0e 	strh.w	r2, [ip, #-14]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003994:	f203 1205 	addw	r2, r3, #261	; 0x105
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003998:	f82a 4c02 	strh.w	r4, [sl, #-2]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000399c:	b292      	uxth	r2, r2
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000399e:	9c09      	ldr	r4, [sp, #36]	; 0x24
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039a0:	f82c 1c0a 	strh.w	r1, [ip, #-10]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039a4:	f203 1147 	addw	r1, r3, #327	; 0x147
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039a8:	f82b 2c0c 	strh.w	r2, [fp, #-12]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039ac:	f827 2c0c 	strh.w	r2, [r7, #-12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039b0:	b289      	uxth	r1, r1
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039b2:	f82b 2c0a 	strh.w	r2, [fp, #-10]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039b6:	f827 2c0a 	strh.w	r2, [r7, #-10]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039ba:	f203 1207 	addw	r2, r3, #263	; 0x107
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900039be:	f82e 5c0a 	strh.w	r5, [lr, #-10]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039c2:	b292      	uxth	r2, r2
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900039c4:	f82e 4c04 	strh.w	r4, [lr, #-4]
900039c8:	f82e 4c02 	strh.w	r4, [lr, #-2]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039cc:	f503 74a3 	add.w	r4, r3, #326	; 0x146
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039d0:	f82b 2c04 	strh.w	r2, [fp, #-4]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039d4:	f827 2c04 	strh.w	r2, [r7, #-4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039d8:	b2a4      	uxth	r4, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039da:	f82b 2c02 	strh.w	r2, [fp, #-2]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039de:	f827 2c02 	strh.w	r2, [r7, #-2]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039e2:	f503 7283 	add.w	r2, r3, #262	; 0x106
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039e6:	f82c 0c08 	strh.w	r0, [ip, #-8]
900039ea:	f203 1387 	addw	r3, r3, #391	; 0x187
900039ee:	f82c 0c06 	strh.w	r0, [ip, #-6]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039f2:	b292      	uxth	r2, r2
  for(i = 0; i < 16; i++)
900039f4:	9800      	ldr	r0, [sp, #0]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900039f6:	b29b      	uxth	r3, r3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039f8:	f82b 2c08 	strh.w	r2, [fp, #-8]
  for(i = 0; i < 16; i++)
900039fc:	2810      	cmp	r0, #16
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900039fe:	f828 4c08 	strh.w	r4, [r8, #-8]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a02:	f827 2c08 	strh.w	r2, [r7, #-8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a06:	f82b 2c06 	strh.w	r2, [fp, #-6]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a0a:	f828 4c06 	strh.w	r4, [r8, #-6]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a0e:	f827 2c06 	strh.w	r2, [r7, #-6]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a12:	f828 1c04 	strh.w	r1, [r8, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a16:	f82c 3c04 	strh.w	r3, [ip, #-4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a1a:	f828 1c02 	strh.w	r1, [r8, #-2]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003a1e:	f82c 3c02 	strh.w	r3, [ip, #-2]
  for(i = 0; i < 16; i++)
90003a22:	f47f aeaf 	bne.w	90003784 <TGFX_JPEG_InitColorTables+0x160>
  {
    for(j = 0; j < 8; j++)
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a26:	4826      	ldr	r0, [pc, #152]	; (90003ac0 <TGFX_JPEG_InitColorTables+0x49c>)
90003a28:	f44f 3480 	mov.w	r4, #65536	; 0x10000
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003a2c:	4925      	ldr	r1, [pc, #148]	; (90003ac4 <TGFX_JPEG_InitColorTables+0x4a0>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a2e:	6004      	str	r4, [r0, #0]
90003a30:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003a34:	4a24      	ldr	r2, [pc, #144]	; (90003ac8 <TGFX_JPEG_InitColorTables+0x4a4>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a36:	6044      	str	r4, [r0, #4]
90003a38:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003a3c:	4b23      	ldr	r3, [pc, #140]	; (90003acc <TGFX_JPEG_InitColorTables+0x4a8>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a3e:	6084      	str	r4, [r0, #8]
90003a40:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003a44:	4f22      	ldr	r7, [pc, #136]	; (90003ad0 <TGFX_JPEG_InitColorTables+0x4ac>)
90003a46:	60c4      	str	r4, [r0, #12]
90003a48:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003a4c:	4e21      	ldr	r6, [pc, #132]	; (90003ad4 <TGFX_JPEG_InitColorTables+0x4b0>)
90003a4e:	6104      	str	r4, [r0, #16]
90003a50:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003a54:	4d20      	ldr	r5, [pc, #128]	; (90003ad8 <TGFX_JPEG_InitColorTables+0x4b4>)
90003a56:	6144      	str	r4, [r0, #20]
90003a58:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003a5c:	f8df b090 	ldr.w	fp, [pc, #144]	; 90003af0 <TGFX_JPEG_InitColorTables+0x4cc>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a60:	6184      	str	r4, [r0, #24]
90003a62:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003a66:	f8df a08c 	ldr.w	sl, [pc, #140]	; 90003af4 <TGFX_JPEG_InitColorTables+0x4d0>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a6a:	61c4      	str	r4, [r0, #28]
90003a6c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003a70:	f8df 9084 	ldr.w	r9, [pc, #132]	; 90003af8 <TGFX_JPEG_InitColorTables+0x4d4>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a74:	6204      	str	r4, [r0, #32]
90003a76:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003a7a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 90003afc <TGFX_JPEG_InitColorTables+0x4d8>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a7e:	6244      	str	r4, [r0, #36]	; 0x24
90003a80:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003a84:	f8df e078 	ldr.w	lr, [pc, #120]	; 90003b00 <TGFX_JPEG_InitColorTables+0x4dc>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003a88:	6284      	str	r4, [r0, #40]	; 0x28
90003a8a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003a8e:	62c4      	str	r4, [r0, #44]	; 0x2c
90003a90:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003a94:	6304      	str	r4, [r0, #48]	; 0x30
90003a96:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003a9a:	6344      	str	r4, [r0, #52]	; 0x34
90003a9c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003aa0:	6384      	str	r4, [r0, #56]	; 0x38
90003aa2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003aa6:	63c4      	str	r4, [r0, #60]	; 0x3c
90003aa8:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003aac:	6404      	str	r4, [r0, #64]	; 0x40
90003aae:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ab2:	6444      	str	r4, [r0, #68]	; 0x44
90003ab4:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ab8:	e024      	b.n	90003b04 <TGFX_JPEG_InitColorTables+0x4e0>
90003aba:	bf00      	nop
90003abc:	2400a110 	.word	0x2400a110
90003ac0:	2400a390 	.word	0x2400a390
90003ac4:	240099d0 	.word	0x240099d0
90003ac8:	24009e90 	.word	0x24009e90
90003acc:	2400a310 	.word	0x2400a310
90003ad0:	240085cc 	.word	0x240085cc
90003ad4:	240079cc 	.word	0x240079cc
90003ad8:	240081cc 	.word	0x240081cc
90003adc:	240095d0 	.word	0x240095d0
90003ae0:	240097d0 	.word	0x240097d0
90003ae4:	24009a90 	.word	0x24009a90
90003ae8:	24009c90 	.word	0x24009c90
90003aec:	24009f10 	.word	0x24009f10
90003af0:	000166e8 	.word	0x000166e8
90003af4:	0001c5a0 	.word	0x0001c5a0
90003af8:	ffff4930 	.word	0xffff4930
90003afc:	ffffa7e8 	.word	0xffffa7e8
90003b00:	00b3f400 	.word	0x00b3f400
90003b04:	6484      	str	r4, [r0, #72]	; 0x48
90003b06:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b0a:	64c4      	str	r4, [r0, #76]	; 0x4c
90003b0c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b10:	6504      	str	r4, [r0, #80]	; 0x50
90003b12:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b16:	6544      	str	r4, [r0, #84]	; 0x54
90003b18:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b1c:	6584      	str	r4, [r0, #88]	; 0x58
90003b1e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b22:	65c4      	str	r4, [r0, #92]	; 0x5c
90003b24:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b28:	6604      	str	r4, [r0, #96]	; 0x60
90003b2a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b2e:	6644      	str	r4, [r0, #100]	; 0x64
90003b30:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b34:	6684      	str	r4, [r0, #104]	; 0x68
90003b36:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b3a:	66c4      	str	r4, [r0, #108]	; 0x6c
90003b3c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b40:	6704      	str	r4, [r0, #112]	; 0x70
90003b42:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b46:	6744      	str	r4, [r0, #116]	; 0x74
90003b48:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b4c:	6784      	str	r4, [r0, #120]	; 0x78
90003b4e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b52:	67c4      	str	r4, [r0, #124]	; 0x7c
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003b54:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003b58:	48a1      	ldr	r0, [pc, #644]	; (90003de0 <TGFX_JPEG_InitColorTables+0x7bc>)
90003b5a:	e9c1 4000 	strd	r4, r0, [r1]
90003b5e:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003b62:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003b66:	e9c1 4002 	strd	r4, r0, [r1, #8]
90003b6a:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003b6e:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003b72:	e9c1 4004 	strd	r4, r0, [r1, #16]
90003b76:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003b7a:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003b7e:	e9c1 4006 	strd	r4, r0, [r1, #24]
90003b82:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003b86:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003b8a:	e9c1 4008 	strd	r4, r0, [r1, #32]
90003b8e:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003b92:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003b96:	e9c1 400a 	strd	r4, r0, [r1, #40]	; 0x28
90003b9a:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003b9e:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003ba2:	e9c1 400c 	strd	r4, r0, [r1, #48]	; 0x30
90003ba6:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003baa:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bae:	e9c1 400e 	strd	r4, r0, [r1, #56]	; 0x38
90003bb2:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003bb6:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bba:	e9c1 4010 	strd	r4, r0, [r1, #64]	; 0x40
90003bbe:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003bc2:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bc6:	e9c1 4012 	strd	r4, r0, [r1, #72]	; 0x48
90003bca:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003bce:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bd2:	e9c1 4014 	strd	r4, r0, [r1, #80]	; 0x50
90003bd6:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003bda:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bde:	e9c1 4016 	strd	r4, r0, [r1, #88]	; 0x58
90003be2:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003be6:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bea:	e9c1 4018 	strd	r4, r0, [r1, #96]	; 0x60
90003bee:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003bf2:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003bf6:	e9c1 401a 	strd	r4, r0, [r1, #104]	; 0x68
90003bfa:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003bfe:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003c02:	e9c1 401c 	strd	r4, r0, [r1, #112]	; 0x70
90003c06:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003c0a:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003c0e:	e9c1 401e 	strd	r4, r0, [r1, #120]	; 0x78
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003c12:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003c16:	4973      	ldr	r1, [pc, #460]	; (90003de4 <TGFX_JPEG_InitColorTables+0x7c0>)
90003c18:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003c1c:	e9c2 4100 	strd	r4, r1, [r2]
90003c20:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c24:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003c28:	e9c2 0102 	strd	r0, r1, [r2, #8]
90003c2c:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c30:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003c34:	e9c2 4104 	strd	r4, r1, [r2, #16]
90003c38:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c3c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003c40:	e9c2 0106 	strd	r0, r1, [r2, #24]
90003c44:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c48:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003c4c:	e9c2 4108 	strd	r4, r1, [r2, #32]
90003c50:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c54:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003c58:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
90003c5c:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c60:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003c64:	e9c2 410c 	strd	r4, r1, [r2, #48]	; 0x30
90003c68:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c6c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003c70:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
90003c74:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c78:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003c7c:	e9c2 4110 	strd	r4, r1, [r2, #64]	; 0x40
90003c80:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c84:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003c88:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
90003c8c:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c90:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003c94:	e9c2 4114 	strd	r4, r1, [r2, #80]	; 0x50
90003c98:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003c9c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ca0:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
90003ca4:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003ca8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003cac:	e9c2 4118 	strd	r4, r1, [r2, #96]	; 0x60
90003cb0:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003cb4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003cb8:	e9c2 011a 	strd	r0, r1, [r2, #104]	; 0x68
90003cbc:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003cc0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003cc4:	e9c2 411c 	strd	r4, r1, [r2, #112]	; 0x70
90003cc8:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003ccc:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003cd0:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003cd4:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003cd8:	f101 1106 	add.w	r1, r1, #393222	; 0x60006
90003cdc:	4a42      	ldr	r2, [pc, #264]	; (90003de8 <TGFX_JPEG_InitColorTables+0x7c4>)
90003cde:	e9c3 4000 	strd	r4, r0, [r3]
90003ce2:	e9c3 1202 	strd	r1, r2, [r3, #8]
90003ce6:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003cea:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003cee:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003cf2:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003cf6:	e9c3 4004 	strd	r4, r0, [r3, #16]
90003cfa:	e9c3 1206 	strd	r1, r2, [r3, #24]
90003cfe:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d02:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003d06:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003d0a:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003d0e:	e9c3 4008 	strd	r4, r0, [r3, #32]
90003d12:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
90003d16:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d1a:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003d1e:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003d22:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003d26:	e9c3 400c 	strd	r4, r0, [r3, #48]	; 0x30
90003d2a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
90003d2e:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d32:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003d36:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003d3a:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003d3e:	e9c3 4010 	strd	r4, r0, [r3, #64]	; 0x40
90003d42:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
90003d46:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d4a:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003d4e:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003d52:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003d56:	e9c3 4014 	strd	r4, r0, [r3, #80]	; 0x50
90003d5a:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
90003d5e:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d62:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003d66:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003d6a:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003d6e:	e9c3 4018 	strd	r4, r0, [r3, #96]	; 0x60
90003d72:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
90003d76:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003d7a:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003d7e:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003d82:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003d86:	e9c3 401c 	strd	r4, r0, [r3, #112]	; 0x70
90003d8a:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
  for(i = 0; i < 8; i++)
90003d8e:	4c17      	ldr	r4, [pc, #92]	; (90003dec <TGFX_JPEG_InitColorTables+0x7c8>)
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003d90:	4817      	ldr	r0, [pc, #92]	; (90003df0 <TGFX_JPEG_InitColorTables+0x7cc>)
90003d92:	4918      	ldr	r1, [pc, #96]	; (90003df4 <TGFX_JPEG_InitColorTables+0x7d0>)
90003d94:	4a18      	ldr	r2, [pc, #96]	; (90003df8 <TGFX_JPEG_InitColorTables+0x7d4>)
90003d96:	4b19      	ldr	r3, [pc, #100]	; (90003dfc <TGFX_JPEG_InitColorTables+0x7d8>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003d98:	ea4f 4c23 	mov.w	ip, r3, asr #16
  for (i = 0; i <= 255; i++)
90003d9c:	445b      	add	r3, fp
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
90003d9e:	f845 1f04 	str.w	r1, [r5, #4]!
  for (i = 0; i <= 255; i++)
90003da2:	4449      	add	r1, r9
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003da4:	f847 cf04 	str.w	ip, [r7, #4]!
  for (i = 0; i <= 255; i++)
90003da8:	4573      	cmp	r3, lr
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003daa:	ea4f 4c22 	mov.w	ip, r2, asr #16
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
90003dae:	f844 0f04 	str.w	r0, [r4, #4]!
  for (i = 0; i <= 255; i++)
90003db2:	4452      	add	r2, sl
90003db4:	4440      	add	r0, r8
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003db6:	f846 cf04 	str.w	ip, [r6, #4]!
  for (i = 0; i <= 255; i++)
90003dba:	d1ed      	bne.n	90003d98 <TGFX_JPEG_InitColorTables+0x774>
}
90003dbc:	b00b      	add	sp, #44	; 0x2c
90003dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j>=8) && (i<8)) offset+= 56;
90003dc2:	f1bc 0f07 	cmp.w	ip, #7
90003dc6:	d802      	bhi.n	90003dce <TGFX_JPEG_InitColorTables+0x7aa>
90003dc8:	b10f      	cbz	r7, 90003dce <TGFX_JPEG_InitColorTables+0x7aa>
90003dca:	460d      	mov	r5, r1
90003dcc:	e4a8      	b.n	90003720 <TGFX_JPEG_InitColorTables+0xfc>
      else  if((j<8) && (i>=8)) offset+= 64;
90003dce:	2c07      	cmp	r4, #7
90003dd0:	f63f aca6 	bhi.w	90003720 <TGFX_JPEG_InitColorTables+0xfc>
90003dd4:	2e00      	cmp	r6, #0
90003dd6:	f43f aca3 	beq.w	90003720 <TGFX_JPEG_InitColorTables+0xfc>
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90003dda:	8013      	strh	r3, [r2, #0]
    for(j = 0; j < 16; j++)
90003ddc:	e4a3      	b.n	90003726 <TGFX_JPEG_InitColorTables+0x102>
90003dde:	bf00      	nop
90003de0:	00430042 	.word	0x00430042
90003de4:	00830082 	.word	0x00830082
90003de8:	00c700c6 	.word	0x00c700c6
90003dec:	24007dcc 	.word	0x24007dcc
90003df0:	002c0c00 	.word	0x002c0c00
90003df4:	005b6800 	.word	0x005b6800
90003df8:	ff1db000 	.word	0xff1db000
90003dfc:	ff4d0c00 	.word	0xff4d0c00

90003e00 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
90003e00:	4901      	ldr	r1, [pc, #4]	; (90003e08 <vApplicationIdleHook+0x8>)
90003e02:	2000      	movs	r0, #0
90003e04:	f00b bdb4 	b.w	9000f970 <vTaskSetApplicationTaskTag>
90003e08:	90000945 	.word	0x90000945

90003e0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
90003e0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
90003e0e:	2064      	movs	r0, #100	; 0x64
90003e10:	f009 fb44 	bl	9000d49c <osDelay>
  for(;;)
90003e14:	e7fb      	b.n	90003e0e <StartDefaultTask+0x2>
90003e16:	bf00      	nop

90003e18 <SystemClock_Config>:
{
90003e18:	b510      	push	{r4, lr}
90003e1a:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90003e1c:	224c      	movs	r2, #76	; 0x4c
90003e1e:	2100      	movs	r1, #0
90003e20:	a80a      	add	r0, sp, #40	; 0x28
90003e22:	f01f f809 	bl	90022e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90003e26:	2220      	movs	r2, #32
90003e28:	2100      	movs	r1, #0
90003e2a:	a802      	add	r0, sp, #8
90003e2c:	f01f f804 	bl	90022e38 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
90003e30:	2002      	movs	r0, #2
90003e32:	f006 fe33 	bl	9000aa9c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90003e36:	4b23      	ldr	r3, [pc, #140]	; (90003ec4 <SystemClock_Config+0xac>)
90003e38:	2100      	movs	r1, #0
90003e3a:	4a23      	ldr	r2, [pc, #140]	; (90003ec8 <SystemClock_Config+0xb0>)
90003e3c:	9101      	str	r1, [sp, #4]
90003e3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
90003e40:	f021 0101 	bic.w	r1, r1, #1
90003e44:	62d9      	str	r1, [r3, #44]	; 0x2c
90003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003e48:	f003 0301 	and.w	r3, r3, #1
90003e4c:	9301      	str	r3, [sp, #4]
90003e4e:	6993      	ldr	r3, [r2, #24]
90003e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
90003e54:	6193      	str	r3, [r2, #24]
90003e56:	6993      	ldr	r3, [r2, #24]
90003e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
90003e5c:	9301      	str	r3, [sp, #4]
90003e5e:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90003e60:	6993      	ldr	r3, [r2, #24]
90003e62:	049b      	lsls	r3, r3, #18
90003e64:	d5fc      	bpl.n	90003e60 <SystemClock_Config+0x48>
  RCC_OscInitStruct.PLL.PLLM = 5;
90003e66:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90003e68:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90003e6a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
90003e6e:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLM = 5;
90003e70:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 160;
90003e72:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
90003e74:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90003e76:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 160;
90003e78:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
90003e7a:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
90003e7c:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90003e7e:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLQ = 4;
90003e80:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
90003e82:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLP = 2;
90003e84:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
90003e86:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90003e88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90003e8c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90003e8e:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90003e92:	f006 febf 	bl	9000ac14 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90003e96:	223f      	movs	r2, #63	; 0x3f
90003e98:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90003e9a:	4621      	mov	r1, r4
90003e9c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90003e9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
90003ea2:	2200      	movs	r2, #0
90003ea4:	2308      	movs	r3, #8
90003ea6:	e9cd 2304 	strd	r2, r3, [sp, #16]
90003eaa:	2240      	movs	r2, #64	; 0x40
90003eac:	2340      	movs	r3, #64	; 0x40
90003eae:	e9cd 2306 	strd	r2, r3, [sp, #24]
90003eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
90003eb6:	2340      	movs	r3, #64	; 0x40
90003eb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90003ebc:	f007 fa3e 	bl	9000b33c <HAL_RCC_ClockConfig>
}
90003ec0:	b01e      	add	sp, #120	; 0x78
90003ec2:	bd10      	pop	{r4, pc}
90003ec4:	58000400 	.word	0x58000400
90003ec8:	58024800 	.word	0x58024800
90003ecc:	00000000 	.word	0x00000000

90003ed0 <main>:
{
90003ed0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90003ed4:	2400      	movs	r4, #0
{
90003ed6:	b09f      	sub	sp, #124	; 0x7c
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90003ed8:	2501      	movs	r5, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90003eda:	271b      	movs	r7, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90003edc:	2603      	movs	r6, #3
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90003ede:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
90003ee2:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  HAL_MPU_Disable();
90003ee6:	f003 fdb1 	bl	90007a4c <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
90003eea:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90003eee:	49d8      	ldr	r1, [pc, #864]	; (90004250 <main+0x380>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003ef0:	a810      	add	r0, sp, #64	; 0x40
  MPU_InitStruct.BaseAddress = 0x24000000;
90003ef2:	9311      	str	r3, [sp, #68]	; 0x44
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90003ef4:	4bd7      	ldr	r3, [pc, #860]	; (90004254 <main+0x384>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90003ef6:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90003efa:	e9cd 1312 	strd	r1, r3, [sp, #72]	; 0x48
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003efe:	f003 fdc3 	bl	90007a88 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
90003f02:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f06:	a810      	add	r0, sp, #64	; 0x40
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90003f08:	f88d 404b 	strb.w	r4, [sp, #75]	; 0x4b
  MPU_InitStruct.BaseAddress = 0x90000000;
90003f0c:	9311      	str	r3, [sp, #68]	; 0x44
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90003f0e:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90003f12:	f88d 5041 	strb.w	r5, [sp, #65]	; 0x41
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90003f16:	f88d 7048 	strb.w	r7, [sp, #72]	; 0x48
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f1a:	f003 fdb5 	bl	90007a88 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90003f1e:	2302      	movs	r3, #2
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f20:	a810      	add	r0, sp, #64	; 0x40
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90003f22:	f8ad 604b 	strh.w	r6, [sp, #75]	; 0x4b
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90003f26:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
90003f2a:	231a      	movs	r3, #26
90003f2c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90003f30:	f240 1301 	movw	r3, #257	; 0x101
90003f34:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f38:	f003 fda6 	bl	90007a88 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xD0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90003f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f40:	a810      	add	r0, sp, #64	; 0x40
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90003f42:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
90003f46:	2404      	movs	r4, #4
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90003f48:	f8ad 304b 	strh.w	r3, [sp, #75]	; 0x4b
  MPU_InitStruct.BaseAddress = 0xD0000000;
90003f4c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90003f50:	f88d 7048 	strb.w	r7, [sp, #72]	; 0x48
  MPU_InitStruct.BaseAddress = 0xD0000000;
90003f54:	9311      	str	r3, [sp, #68]	; 0x44
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
90003f56:	f88d 6041 	strb.w	r6, [sp, #65]	; 0x41
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f5a:	f003 fd95 	bl	90007a88 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90003f5e:	2318      	movs	r3, #24
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f60:	a810      	add	r0, sp, #64	; 0x40
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90003f62:	f88d 604b 	strb.w	r6, [sp, #75]	; 0x4b
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
90003f66:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
90003f6a:	f88d 4041 	strb.w	r4, [sp, #65]	; 0x41
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90003f6e:	f88d 504e 	strb.w	r5, [sp, #78]	; 0x4e
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90003f72:	f003 fd89 	bl	90007a88 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90003f76:	4620      	mov	r0, r4
90003f78:	f003 fd76 	bl	90007a68 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90003f7c:	4ab6      	ldr	r2, [pc, #728]	; (90004258 <main+0x388>)
90003f7e:	6953      	ldr	r3, [r2, #20]
90003f80:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
90003f84:	d111      	bne.n	90003faa <main+0xda>
  __ASM volatile ("dsb 0xF":::"memory");
90003f86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90003f8a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
90003f8e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90003f92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90003f96:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90003f9a:	6953      	ldr	r3, [r2, #20]
90003f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90003fa0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90003fa2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90003fa6:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90003faa:	48ab      	ldr	r0, [pc, #684]	; (90004258 <main+0x388>)
90003fac:	6943      	ldr	r3, [r0, #20]
90003fae:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
90003fb2:	d124      	bne.n	90003ffe <main+0x12e>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90003fb4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90003fb8:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90003fbc:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90003fc0:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90003fc4:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90003fc8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
90003fcc:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90003fce:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90003fd2:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90003fd4:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
90003fd8:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90003fda:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
90003fde:	1c5a      	adds	r2, r3, #1
90003fe0:	d1f8      	bne.n	90003fd4 <main+0x104>
    } while(sets-- != 0U);
90003fe2:	3c20      	subs	r4, #32
90003fe4:	f114 0f20 	cmn.w	r4, #32
90003fe8:	d1f1      	bne.n	90003fce <main+0xfe>
90003fea:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90003fee:	6943      	ldr	r3, [r0, #20]
90003ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90003ff4:	6143      	str	r3, [r0, #20]
90003ff6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90003ffa:	f3bf 8f6f 	isb	sy
  HAL_Init();
90003ffe:	f002 fdc7 	bl	90006b90 <HAL_Init>
  SystemClock_Config();
90004002:	f7ff ff09 	bl	90003e18 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
90004006:	b662      	cpsie	i
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004008:	2400      	movs	r4, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
9000400a:	4d94      	ldr	r5, [pc, #592]	; (9000425c <main+0x38c>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
9000400c:	21c0      	movs	r1, #192	; 0xc0
9000400e:	4894      	ldr	r0, [pc, #592]	; (90004260 <main+0x390>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004010:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004012:	4622      	mov	r2, r4
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
90004014:	f04f 0901 	mov.w	r9, #1
  hltdc.Instance = LTDC;
90004018:	4f92      	ldr	r7, [pc, #584]	; (90004264 <main+0x394>)
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
9000401a:	f04f 0b02 	mov.w	fp, #2
  hdma2d.Instance = DMA2D;
9000401e:	f8df 8260 	ldr.w	r8, [pc, #608]	; 90004280 <main+0x3b0>
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
90004022:	f04f 0a04 	mov.w	sl, #4
  hadc1.Instance = ADC1;
90004026:	4e90      	ldr	r6, [pc, #576]	; (90004268 <main+0x398>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004028:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
9000402c:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  __HAL_RCC_GPIOK_CLK_ENABLE();
90004030:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004034:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90004038:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000403c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90004044:	9302      	str	r3, [sp, #8]
90004046:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90004048:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000404c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90004050:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004054:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
9000405c:	9303      	str	r3, [sp, #12]
9000405e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
90004060:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90004068:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000406c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004074:	9304      	str	r3, [sp, #16]
90004076:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90004078:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000407c:	f043 0310 	orr.w	r3, r3, #16
90004080:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004084:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004088:	f003 0310 	and.w	r3, r3, #16
9000408c:	9305      	str	r3, [sp, #20]
9000408e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
90004090:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004094:	f043 0302 	orr.w	r3, r3, #2
90004098:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000409c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040a0:	f003 0302 	and.w	r3, r3, #2
900040a4:	9306      	str	r3, [sp, #24]
900040a6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
900040a8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900040b0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900040b4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
900040bc:	9307      	str	r3, [sp, #28]
900040be:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
900040c0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040c4:	f043 0308 	orr.w	r3, r3, #8
900040c8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900040cc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040d0:	f003 0308 	and.w	r3, r3, #8
900040d4:	9308      	str	r3, [sp, #32]
900040d6:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900040d8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040dc:	f043 0320 	orr.w	r3, r3, #32
900040e0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900040e4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040e8:	f003 0320 	and.w	r3, r3, #32
900040ec:	9309      	str	r3, [sp, #36]	; 0x24
900040ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
900040f0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900040f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900040f8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900040fc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004100:	f003 0380 	and.w	r3, r3, #128	; 0x80
90004104:	930a      	str	r3, [sp, #40]	; 0x28
90004106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
90004108:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000410c:	f043 0304 	orr.w	r3, r3, #4
90004110:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004114:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004118:	f003 0304 	and.w	r3, r3, #4
9000411c:	930b      	str	r3, [sp, #44]	; 0x2c
9000411e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
90004120:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004124:	f043 0301 	orr.w	r3, r3, #1
90004128:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000412c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004130:	f003 0301 	and.w	r3, r3, #1
90004134:	930c      	str	r3, [sp, #48]	; 0x30
90004136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004138:	f004 f89e 	bl	90008278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_RESET);
9000413c:	4622      	mov	r2, r4
9000413e:	2180      	movs	r1, #128	; 0x80
90004140:	484a      	ldr	r0, [pc, #296]	; (9000426c <main+0x39c>)
90004142:	f004 f899 	bl	90008278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
90004146:	4622      	mov	r2, r4
90004148:	2108      	movs	r1, #8
9000414a:	4849      	ldr	r0, [pc, #292]	; (90004270 <main+0x3a0>)
9000414c:	f004 f894 	bl	90008278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
90004150:	2201      	movs	r2, #1
90004152:	4848      	ldr	r0, [pc, #288]	; (90004274 <main+0x3a4>)
90004154:	4611      	mov	r1, r2
90004156:	f004 f88f 	bl	90008278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
9000415a:	4622      	mov	r2, r4
9000415c:	2144      	movs	r1, #68	; 0x44
9000415e:	4846      	ldr	r0, [pc, #280]	; (90004278 <main+0x3a8>)
90004160:	f004 f88a 	bl	90008278 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
90004164:	22c0      	movs	r2, #192	; 0xc0
90004166:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004168:	a910      	add	r1, sp, #64	; 0x40
9000416a:	483d      	ldr	r0, [pc, #244]	; (90004260 <main+0x390>)
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
9000416c:	ed9f 8b34 	vldr	d8, [pc, #208]	; 90004240 <main+0x370>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90004170:	ed9f 9b35 	vldr	d9, [pc, #212]	; 90004248 <main+0x378>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
90004174:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
90004178:	ed8d 8b12 	vstr	d8, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
9000417c:	f003 fe74 	bl	90007e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90004180:	2280      	movs	r2, #128	; 0x80
90004182:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90004184:	a910      	add	r1, sp, #64	; 0x40
90004186:	4839      	ldr	r0, [pc, #228]	; (9000426c <main+0x39c>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
90004188:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
9000418c:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
90004190:	f003 fe6a 	bl	90007e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
90004194:	2208      	movs	r2, #8
90004196:	2301      	movs	r3, #1
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90004198:	a910      	add	r1, sp, #64	; 0x40
9000419a:	4835      	ldr	r0, [pc, #212]	; (90004270 <main+0x3a0>)
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
9000419c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
900041a0:	ed8d 8b12 	vstr	d8, [sp, #72]	; 0x48
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
900041a4:	f003 fe60 	bl	90007e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
900041a8:	2201      	movs	r2, #1
900041aa:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
900041ac:	a910      	add	r1, sp, #64	; 0x40
900041ae:	4831      	ldr	r0, [pc, #196]	; (90004274 <main+0x3a4>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
900041b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
900041b4:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
900041b8:	f003 fe56 	bl	90007e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
900041bc:	2204      	movs	r2, #4
900041be:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
900041c0:	a910      	add	r1, sp, #64	; 0x40
900041c2:	482d      	ldr	r0, [pc, #180]	; (90004278 <main+0x3a8>)
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
900041c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
900041c8:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
900041cc:	f003 fe4c 	bl	90007e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
900041d0:	2240      	movs	r2, #64	; 0x40
900041d2:	2301      	movs	r3, #1
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
900041d4:	a910      	add	r1, sp, #64	; 0x40
900041d6:	4828      	ldr	r0, [pc, #160]	; (90004278 <main+0x3a8>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
900041d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
900041dc:	ed8d 8b12 	vstr	d8, [sp, #72]	; 0x48
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
900041e0:	f003 fe42 	bl	90007e68 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
900041e4:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900041e8:	4622      	mov	r2, r4
900041ea:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
900041ec:	ea43 0309 	orr.w	r3, r3, r9
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900041f0:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
900041f2:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
900041f6:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  hltdc.Init.AccumulatedActiveH = 283;
900041fa:	f240 250a 	movw	r5, #522	; 0x20a
  __HAL_RCC_MDMA_CLK_ENABLE();
900041fe:	ea03 0309 	and.w	r3, r3, r9
90004202:	9301      	str	r3, [sp, #4]
90004204:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90004206:	f003 fbc1 	bl	9000798c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
9000420a:	207a      	movs	r0, #122	; 0x7a
9000420c:	f003 fbfc 	bl	90007a08 <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
90004210:	2234      	movs	r2, #52	; 0x34
90004212:	4621      	mov	r1, r4
90004214:	a810      	add	r0, sp, #64	; 0x40
90004216:	f01e fe0f 	bl	90022e38 <memset>
  hltdc.Instance = LTDC;
9000421a:	4b18      	ldr	r3, [pc, #96]	; (9000427c <main+0x3ac>)
  hltdc.Init.VerticalSync = 8;
9000421c:	2127      	movs	r1, #39	; 0x27
  hltdc.Init.AccumulatedVBP = 11;
9000421e:	202a      	movs	r0, #42	; 0x2a
  hltdc.Instance = LTDC;
90004220:	603b      	str	r3, [r7, #0]
  hltdc.Init.VerticalSync = 8;
90004222:	2308      	movs	r3, #8
  hltdc.Init.TotalHeigh = 285;
90004224:	f44f 7c04 	mov.w	ip, #528	; 0x210
  hltdc.Init.Backcolor.Blue = 0;
90004228:	86bc      	strh	r4, [r7, #52]	; 0x34
  hltdc.Init.Backcolor.Red = 0;
9000422a:	f887 4036 	strb.w	r4, [r7, #54]	; 0x36
  hltdc.Init.VerticalSync = 8;
9000422e:	e9c7 1305 	strd	r1, r3, [r7, #20]
  hltdc.Init.AccumulatedVBP = 11;
90004232:	230b      	movs	r3, #11
90004234:	e9c7 0307 	strd	r0, r3, [r7, #28]
90004238:	e024      	b.n	90004284 <main+0x3b4>
9000423a:	bf00      	nop
9000423c:	f3af 8000 	nop.w
90004240:	00000000 	.word	0x00000000
90004244:	00000003 	.word	0x00000003
	...
90004250:	03000012 	.word	0x03000012
90004254:	01010001 	.word	0x01010001
90004258:	e000ed00 	.word	0xe000ed00
9000425c:	58024400 	.word	0x58024400
90004260:	58020400 	.word	0x58020400
90004264:	2400af60 	.word	0x2400af60
90004268:	2400ae18 	.word	0x2400ae18
9000426c:	58020c00 	.word	0x58020c00
90004270:	58021800 	.word	0x58021800
90004274:	58022800 	.word	0x58022800
90004278:	58020000 	.word	0x58020000
9000427c:	50001000 	.word	0x50001000
90004280:	2400aea0 	.word	0x2400aea0
  hltdc.Init.AccumulatedActiveH = 283;
90004284:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90004288:	4638      	mov	r0, r7
  hltdc.Init.AccumulatedActiveH = 283;
9000428a:	e9c7 5309 	strd	r5, r3, [r7, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
9000428e:	f240 131d 	movw	r3, #285	; 0x11d
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90004292:	2510      	movs	r5, #16
  hltdc.Init.TotalHeigh = 285;
90004294:	e9c7 c30b 	strd	ip, r3, [r7, #44]	; 0x2c
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
90004298:	e9c7 4401 	strd	r4, r4, [r7, #4]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
9000429c:	e9c7 4403 	strd	r4, r4, [r7, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
900042a0:	f006 f814 	bl	9000a2cc <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
900042a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
900042a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
900042ac:	a910      	add	r1, sp, #64	; 0x40
  pLayerCfg.WindowX1 = 480;
900042ae:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
900042b0:	4638      	mov	r0, r7
  pLayerCfg.ImageWidth = 480;
900042b2:	931a      	str	r3, [sp, #104]	; 0x68
  pLayerCfg.WindowY1 = 272;
900042b4:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
900042b8:	9410      	str	r4, [sp, #64]	; 0x40
  pLayerCfg.WindowY1 = 272;
900042ba:	9313      	str	r3, [sp, #76]	; 0x4c
  pLayerCfg.ImageHeight = 272;
900042bc:	931b      	str	r3, [sp, #108]	; 0x6c
  pLayerCfg.Alpha = 255;
900042be:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.WindowY0 = 0;
900042c0:	9412      	str	r4, [sp, #72]	; 0x48
  pLayerCfg.Alpha = 255;
900042c2:	9315      	str	r3, [sp, #84]	; 0x54
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
900042c4:	2305      	movs	r3, #5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
900042c6:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
  pLayerCfg.Alpha0 = 0;
900042ca:	9416      	str	r4, [sp, #88]	; 0x58
  pLayerCfg.FBStartAdress = 0;
900042cc:	9419      	str	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Blue = 0;
900042ce:	f8ad 4070 	strh.w	r4, [sp, #112]	; 0x70
  pLayerCfg.Backcolor.Red = 0;
900042d2:	f88d 4072 	strb.w	r4, [sp, #114]	; 0x72
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
900042d6:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
900042da:	4622      	mov	r2, r4
900042dc:	f006 f8ca 	bl	9000a474 <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
900042e0:	4b54      	ldr	r3, [pc, #336]	; (90004434 <main+0x564>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
900042e2:	4640      	mov	r0, r8
  hdma2d.Init.OutputOffset = 0;
900042e4:	f8c8 400c 	str.w	r4, [r8, #12]
  hdma2d.Instance = DMA2D;
900042e8:	f8c8 3000 	str.w	r3, [r8]
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
900042ec:	f8c8 405c 	str.w	r4, [r8, #92]	; 0x5c
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
900042f0:	e9c8 4b01 	strd	r4, fp, [r8, #4]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
900042f4:	e9c8 4b11 	strd	r4, fp, [r8, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
900042f8:	e9c8 4413 	strd	r4, r4, [r8, #76]	; 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
900042fc:	e9c8 4415 	strd	r4, r4, [r8, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90004300:	f003 fc6a 	bl	90007bd8 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
90004304:	4649      	mov	r1, r9
90004306:	4640      	mov	r0, r8
90004308:	f003 fd3e 	bl	90007d88 <HAL_DMA2D_ConfigLayer>
  hsdram2.Instance = FMC_SDRAM_DEVICE;
9000430c:	484a      	ldr	r0, [pc, #296]	; (90004438 <main+0x568>)
9000430e:	4b4b      	ldr	r3, [pc, #300]	; (9000443c <main+0x56c>)
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
90004310:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  SdramTiming.LoadToActiveDelay = 2;
90004314:	2202      	movs	r2, #2
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
90004316:	a910      	add	r1, sp, #64	; 0x40
  hsdram2.Instance = FMC_SDRAM_DEVICE;
90004318:	6003      	str	r3, [r0, #0]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
9000431a:	2340      	movs	r3, #64	; 0x40
  SdramTiming.RCDDelay = 2;
9000431c:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
90004320:	f8c0 a00c 	str.w	sl, [r0, #12]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90004324:	61c4      	str	r4, [r0, #28]
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
90004326:	6284      	str	r4, [r0, #40]	; 0x28
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90004328:	e9c0 5304 	strd	r5, r3, [r0, #16]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
9000432c:	f44f 73c0 	mov.w	r3, #384	; 0x180
90004330:	6183      	str	r3, [r0, #24]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
90004332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
90004336:	e9c0 c308 	strd	ip, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
9000433a:	2307      	movs	r3, #7
9000433c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
90004340:	2204      	movs	r2, #4
90004342:	2307      	movs	r3, #7
90004344:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
90004348:	2205      	movs	r2, #5
9000434a:	2302      	movs	r3, #2
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
9000434c:	e9c0 9401 	strd	r9, r4, [r0, #4]
  SdramTiming.LoadToActiveDelay = 2;
90004350:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
90004354:	f008 fd10 	bl	9000cd78 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
90004358:	4620      	mov	r0, r4
9000435a:	f002 f9ab 	bl	900066b4 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
9000435e:	4620      	mov	r0, r4
90004360:	f002 f9f4 	bl	9000674c <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
90004364:	f7fc f836 	bl	900003d4 <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
90004368:	4b35      	ldr	r3, [pc, #212]	; (90004440 <main+0x570>)
9000436a:	4836      	ldr	r0, [pc, #216]	; (90004444 <main+0x574>)
9000436c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
9000436e:	f004 ff63 	bl	90009238 <HAL_JPEG_Init>
  hcrc.Instance = CRC;
90004372:	4835      	ldr	r0, [pc, #212]	; (90004448 <main+0x578>)
90004374:	4b35      	ldr	r3, [pc, #212]	; (9000444c <main+0x57c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
90004376:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
90004378:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
9000437a:	f8c0 9020 	str.w	r9, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
9000437e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
90004382:	f003 fbb3 	bl	90007aec <HAL_CRC_Init>
  hadc1.Instance = ADC1;
90004386:	4b32      	ldr	r3, [pc, #200]	; (90004450 <main+0x580>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
90004388:	4630      	mov	r0, r6
  hadc1.Init.LowPowerAutoWait = DISABLE;
9000438a:	82b4      	strh	r4, [r6, #20]
  hadc1.Instance = ADC1;
9000438c:	6033      	str	r3, [r6, #0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
9000438e:	f8c6 a010 	str.w	sl, [r6, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
90004392:	60f4      	str	r4, [r6, #12]
  hadc1.Init.NbrOfConversion = 1;
90004394:	f8c6 9018 	str.w	r9, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
90004398:	7734      	strb	r4, [r6, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
9000439a:	6374      	str	r4, [r6, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
9000439c:	f886 4038 	strb.w	r4, [r6, #56]	; 0x38
  ADC_MultiModeTypeDef multimode = {0};
900043a0:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
900043a4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
900043a8:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
900043ac:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
900043b0:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
900043b4:	e9c6 4401 	strd	r4, r4, [r6, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
900043b8:	e9c6 4409 	strd	r4, r4, [r6, #36]	; 0x24
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
900043bc:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
900043c0:	f003 f95c 	bl	9000767c <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
900043c4:	a90d      	add	r1, sp, #52	; 0x34
900043c6:	4630      	mov	r0, r6
  multimode.Mode = ADC_MODE_INDEPENDENT;
900043c8:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
900043ca:	f003 fa65 	bl	90007898 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_10;
900043ce:	4a21      	ldr	r2, [pc, #132]	; (90004454 <main+0x584>)
900043d0:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
900043d2:	a910      	add	r1, sp, #64	; 0x40
900043d4:	4630      	mov	r0, r6
  sConfig.OffsetSignedSaturation = DISABLE;
900043d6:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
  sConfig.Channel = ADC_CHANNEL_10;
900043da:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
900043de:	2200      	movs	r2, #0
900043e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
900043e4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
900043e8:	2300      	movs	r3, #0
900043ea:	2204      	movs	r2, #4
900043ec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
900043f0:	f002 fca6 	bl	90006d40 <HAL_ADC_ConfigChannel>
  MX_TouchGFX_Init();
900043f4:	f7fb fff2 	bl	900003dc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
900043f8:	f7fb ffee 	bl	900003d8 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
900043fc:	f008 ffd8 	bl	9000d3b0 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004400:	4a15      	ldr	r2, [pc, #84]	; (90004458 <main+0x588>)
90004402:	4621      	mov	r1, r4
90004404:	4815      	ldr	r0, [pc, #84]	; (9000445c <main+0x58c>)
90004406:	f008 ffff 	bl	9000d408 <osThreadNew>
9000440a:	4b15      	ldr	r3, [pc, #84]	; (90004460 <main+0x590>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
9000440c:	4a15      	ldr	r2, [pc, #84]	; (90004464 <main+0x594>)
9000440e:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004410:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004412:	4815      	ldr	r0, [pc, #84]	; (90004468 <main+0x598>)
90004414:	f008 fff8 	bl	9000d408 <osThreadNew>
90004418:	4b14      	ldr	r3, [pc, #80]	; (9000446c <main+0x59c>)
9000441a:	4605      	mov	r5, r0
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
9000441c:	4a14      	ldr	r2, [pc, #80]	; (90004470 <main+0x5a0>)
9000441e:	4621      	mov	r1, r4
90004420:	4814      	ldr	r0, [pc, #80]	; (90004474 <main+0x5a4>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004422:	601d      	str	r5, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
90004424:	f008 fff0 	bl	9000d408 <osThreadNew>
90004428:	4b13      	ldr	r3, [pc, #76]	; (90004478 <main+0x5a8>)
9000442a:	6018      	str	r0, [r3, #0]
  osKernelStart();
9000442c:	f008 ffd2 	bl	9000d3d4 <osKernelStart>
  while (1)
90004430:	e7fe      	b.n	90004430 <main+0x560>
90004432:	bf00      	nop
90004434:	52001000 	.word	0x52001000
90004438:	2400b0e0 	.word	0x2400b0e0
9000443c:	52004140 	.word	0x52004140
90004440:	52003000 	.word	0x52003000
90004444:	2400af08 	.word	0x2400af08
90004448:	2400ae7c 	.word	0x2400ae7c
9000444c:	58024c00 	.word	0x58024c00
90004450:	40022000 	.word	0x40022000
90004454:	2a000400 	.word	0x2a000400
90004458:	90025b8c 	.word	0x90025b8c
9000445c:	90003e0d 	.word	0x90003e0d
90004460:	2400ae14 	.word	0x2400ae14
90004464:	90025b68 	.word	0x90025b68
90004468:	900003ed 	.word	0x900003ed
9000446c:	2400ae10 	.word	0x2400ae10
90004470:	90025bb0 	.word	0x90025bb0
90004474:	90002931 	.word	0x90002931
90004478:	2400b114 	.word	0x2400b114

9000447c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
9000447c:	4b03      	ldr	r3, [pc, #12]	; (9000448c <HAL_TIM_PeriodElapsedCallback+0x10>)
9000447e:	6802      	ldr	r2, [r0, #0]
90004480:	429a      	cmp	r2, r3
90004482:	d000      	beq.n	90004486 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90004484:	4770      	bx	lr
    HAL_IncTick();
90004486:	f002 bbb3 	b.w	90006bf0 <HAL_IncTick>
9000448a:	bf00      	nop
9000448c:	40001000 	.word	0x40001000

90004490 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
90004490:	4770      	bx	lr
90004492:	bf00      	nop

90004494 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004494:	4b0b      	ldr	r3, [pc, #44]	; (900044c4 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90004496:	2200      	movs	r2, #0
90004498:	210f      	movs	r1, #15
9000449a:	f06f 0001 	mvn.w	r0, #1
{
9000449e:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
900044a0:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
900044a4:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
900044a6:	f044 0402 	orr.w	r4, r4, #2
900044aa:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
900044ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900044b2:	f003 0302 	and.w	r3, r3, #2
900044b6:	9301      	str	r3, [sp, #4]
900044b8:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
900044ba:	b003      	add	sp, #12
900044bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
900044c0:	f003 ba64 	b.w	9000798c <HAL_NVIC_SetPriority>
900044c4:	58024400 	.word	0x58024400

900044c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
900044c8:	b510      	push	{r4, lr}
900044ca:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900044cc:	2100      	movs	r1, #0
{
900044ce:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900044d0:	22c0      	movs	r2, #192	; 0xc0
900044d2:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900044d4:	9106      	str	r1, [sp, #24]
900044d6:	e9cd 1102 	strd	r1, r1, [sp, #8]
900044da:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900044de:	f01e fcab 	bl	90022e38 <memset>
  if(hadc->Instance==ADC1)
900044e2:	4b23      	ldr	r3, [pc, #140]	; (90004570 <HAL_ADC_MspInit+0xa8>)
900044e4:	6822      	ldr	r2, [r4, #0]
900044e6:	429a      	cmp	r2, r3
900044e8:	d001      	beq.n	900044ee <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
900044ea:	b038      	add	sp, #224	; 0xe0
900044ec:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
900044ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
900044f2:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900044f4:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
900044f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
900044fa:	2220      	movs	r2, #32
900044fc:	2381      	movs	r3, #129	; 0x81
900044fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
90004502:	2202      	movs	r2, #2
90004504:	2302      	movs	r3, #2
90004506:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
9000450a:	2202      	movs	r2, #2
9000450c:	23c0      	movs	r3, #192	; 0xc0
9000450e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004512:	f007 fa2b 	bl	9000b96c <HAL_RCCEx_PeriphCLKConfig>
90004516:	bb20      	cbnz	r0, 90004562 <HAL_ADC_MspInit+0x9a>
    __HAL_RCC_ADC12_CLK_ENABLE();
90004518:	4b16      	ldr	r3, [pc, #88]	; (90004574 <HAL_ADC_MspInit+0xac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000451a:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000451c:	a902      	add	r1, sp, #8
9000451e:	4816      	ldr	r0, [pc, #88]	; (90004578 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
90004520:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
90004524:	f042 0220 	orr.w	r2, r2, #32
90004528:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
9000452c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
90004530:	f002 0220 	and.w	r2, r2, #32
90004534:	9200      	str	r2, [sp, #0]
90004536:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
90004538:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000453c:	f042 0204 	orr.w	r2, r2, #4
90004540:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004548:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
9000454a:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0;
9000454e:	ed9f 7b06 	vldr	d7, [pc, #24]	; 90004568 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
90004552:	9301      	str	r3, [sp, #4]
90004554:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
90004556:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
9000455a:	f003 fc85 	bl	90007e68 <HAL_GPIO_Init>
}
9000455e:	b038      	add	sp, #224	; 0xe0
90004560:	bd10      	pop	{r4, pc}
      Error_Handler();
90004562:	f7ff ff95 	bl	90004490 <Error_Handler>
90004566:	e7d7      	b.n	90004518 <HAL_ADC_MspInit+0x50>
90004568:	00000001 	.word	0x00000001
9000456c:	00000003 	.word	0x00000003
90004570:	40022000 	.word	0x40022000
90004574:	58024400 	.word	0x58024400
90004578:	58020800 	.word	0x58020800

9000457c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
9000457c:	4b0a      	ldr	r3, [pc, #40]	; (900045a8 <HAL_CRC_MspInit+0x2c>)
9000457e:	6802      	ldr	r2, [r0, #0]
90004580:	429a      	cmp	r2, r3
90004582:	d000      	beq.n	90004586 <HAL_CRC_MspInit+0xa>
90004584:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
90004586:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
9000458a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
9000458c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004590:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
90004594:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000459c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
900045a0:	9301      	str	r3, [sp, #4]
900045a2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
900045a4:	b002      	add	sp, #8
900045a6:	4770      	bx	lr
900045a8:	58024c00 	.word	0x58024c00

900045ac <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
900045ac:	4b0f      	ldr	r3, [pc, #60]	; (900045ec <HAL_DMA2D_MspInit+0x40>)
900045ae:	6802      	ldr	r2, [r0, #0]
900045b0:	429a      	cmp	r2, r3
900045b2:	d000      	beq.n	900045b6 <HAL_DMA2D_MspInit+0xa>
900045b4:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
900045b6:	4b0e      	ldr	r3, [pc, #56]	; (900045f0 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900045b8:	205a      	movs	r0, #90	; 0x5a
900045ba:	2200      	movs	r2, #0
900045bc:	2105      	movs	r1, #5
{
900045be:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
900045c0:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
900045c4:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
900045c6:	f044 0410 	orr.w	r4, r4, #16
900045ca:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
900045ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
900045d2:	f003 0310 	and.w	r3, r3, #16
900045d6:	9301      	str	r3, [sp, #4]
900045d8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900045da:	f003 f9d7 	bl	9000798c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900045de:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
900045e0:	b002      	add	sp, #8
900045e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900045e6:	f003 ba0f 	b.w	90007a08 <HAL_NVIC_EnableIRQ>
900045ea:	bf00      	nop
900045ec:	52001000 	.word	0x52001000
900045f0:	58024400 	.word	0x58024400

900045f4 <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
900045f4:	4b3f      	ldr	r3, [pc, #252]	; (900046f4 <HAL_JPEG_MspInit+0x100>)
900045f6:	6802      	ldr	r2, [r0, #0]
900045f8:	429a      	cmp	r2, r3
900045fa:	d000      	beq.n	900045fe <HAL_JPEG_MspInit+0xa>
900045fc:	4770      	bx	lr
{
900045fe:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
90004600:	4b3d      	ldr	r3, [pc, #244]	; (900046f8 <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
90004602:	2211      	movs	r2, #17
90004604:	4e3d      	ldr	r6, [pc, #244]	; (900046fc <HAL_JPEG_MspInit+0x108>)
{
90004606:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90004608:	4d3d      	ldr	r5, [pc, #244]	; (90004700 <HAL_JPEG_MspInit+0x10c>)
9000460a:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
9000460c:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
9000460e:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
90004610:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
90004614:	493b      	ldr	r1, [pc, #236]	; (90004704 <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
90004616:	f042 0220 	orr.w	r2, r2, #32
9000461a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
9000461e:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
90004620:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90004624:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
90004626:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
9000462a:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
9000462c:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000462e:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
90004630:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90004632:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
90004634:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
9000463c:	6272      	str	r2, [r6, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
9000463e:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
90004640:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
90004644:	e9c6 330d 	strd	r3, r3, [r6, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90004648:	62b2      	str	r2, [r6, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
9000464a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
9000464e:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
90004652:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90004656:	2313      	movs	r3, #19
90004658:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
9000465a:	2302      	movs	r3, #2
9000465c:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
9000465e:	f005 ffff 	bl	9000a660 <HAL_MDMA_Init>
90004662:	2800      	cmp	r0, #0
90004664:	d13a      	bne.n	900046dc <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
90004666:	2200      	movs	r2, #0
90004668:	4824      	ldr	r0, [pc, #144]	; (900046fc <HAL_JPEG_MspInit+0x108>)
9000466a:	4611      	mov	r1, r2
9000466c:	f006 f896 	bl	9000a79c <HAL_MDMA_ConfigPostRequestMask>
90004670:	2800      	cmp	r0, #0
90004672:	d13c      	bne.n	900046ee <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90004674:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90004676:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90004678:	6326      	str	r6, [r4, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
9000467a:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
9000467c:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
9000467e:	62aa      	str	r2, [r5, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90004680:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90004684:	4920      	ldr	r1, [pc, #128]	; (90004708 <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90004686:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
90004688:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
9000468a:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
9000468c:	6434      	str	r4, [r6, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
9000468e:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
90004692:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90004696:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004698:	22c0      	movs	r2, #192	; 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
9000469a:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
9000469e:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
900046a0:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900046a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
900046a8:	4815      	ldr	r0, [pc, #84]	; (90004700 <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
900046aa:	62e9      	str	r1, [r5, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
900046ac:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
900046ae:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
900046b0:	f005 ffd6 	bl	9000a660 <HAL_MDMA_Init>
900046b4:	b9c0      	cbnz	r0, 900046e8 <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
900046b6:	2200      	movs	r2, #0
900046b8:	4811      	ldr	r0, [pc, #68]	; (90004700 <HAL_JPEG_MspInit+0x10c>)
900046ba:	4611      	mov	r1, r2
900046bc:	f006 f86e 	bl	9000a79c <HAL_MDMA_ConfigPostRequestMask>
900046c0:	b978      	cbnz	r0, 900046e2 <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
900046c2:	6365      	str	r5, [r4, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
900046c4:	2079      	movs	r0, #121	; 0x79
900046c6:	2200      	movs	r2, #0
900046c8:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
900046ca:	642c      	str	r4, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
900046cc:	f003 f95e 	bl	9000798c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
900046d0:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
900046d2:	b002      	add	sp, #8
900046d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
900046d8:	f003 b996 	b.w	90007a08 <HAL_NVIC_EnableIRQ>
      Error_Handler();
900046dc:	f7ff fed8 	bl	90004490 <Error_Handler>
900046e0:	e7c1      	b.n	90004666 <HAL_JPEG_MspInit+0x72>
      Error_Handler();
900046e2:	f7ff fed5 	bl	90004490 <Error_Handler>
900046e6:	e7ec      	b.n	900046c2 <HAL_JPEG_MspInit+0xce>
      Error_Handler();
900046e8:	f7ff fed2 	bl	90004490 <Error_Handler>
900046ec:	e7e3      	b.n	900046b6 <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
900046ee:	f7ff fecf 	bl	90004490 <Error_Handler>
900046f2:	e7bf      	b.n	90004674 <HAL_JPEG_MspInit+0x80>
900046f4:	52003000 	.word	0x52003000
900046f8:	58024400 	.word	0x58024400
900046fc:	2400b008 	.word	0x2400b008
90004700:	2400b074 	.word	0x2400b074
90004704:	52000200 	.word	0x52000200
90004708:	520001c0 	.word	0x520001c0

9000470c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
9000470c:	b5d0      	push	{r4, r6, r7, lr}
9000470e:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004710:	2100      	movs	r1, #0
{
90004712:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004714:	22c0      	movs	r2, #192	; 0xc0
90004716:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004718:	910a      	str	r1, [sp, #40]	; 0x28
9000471a:	e9cd 1106 	strd	r1, r1, [sp, #24]
9000471e:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004722:	f01e fb89 	bl	90022e38 <memset>
  if(hltdc->Instance==LTDC)
90004726:	4b4c      	ldr	r3, [pc, #304]	; (90004858 <HAL_LTDC_MspInit+0x14c>)
90004728:	6822      	ldr	r2, [r4, #0]
9000472a:	429a      	cmp	r2, r3
9000472c:	d001      	beq.n	90004732 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
9000472e:	b03c      	add	sp, #240	; 0xf0
90004730:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004732:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
90004736:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004738:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
9000473a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 5;
9000473e:	2205      	movs	r2, #5
90004740:	23a0      	movs	r3, #160	; 0xa0
90004742:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
90004746:	2202      	movs	r2, #2
90004748:	2302      	movs	r3, #2
9000474a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
9000474e:	2253      	movs	r2, #83	; 0x53
90004750:	f44f 6300 	mov.w	r3, #2048	; 0x800
90004754:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004758:	f007 f908 	bl	9000b96c <HAL_RCCEx_PeriphCLKConfig>
9000475c:	2800      	cmp	r0, #0
9000475e:	d178      	bne.n	90004852 <HAL_LTDC_MspInit+0x146>
    __HAL_RCC_LTDC_CLK_ENABLE();
90004760:	4b3e      	ldr	r3, [pc, #248]	; (9000485c <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004762:	20fc      	movs	r0, #252	; 0xfc
90004764:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004766:	240e      	movs	r4, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
90004768:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
9000476c:	2600      	movs	r6, #0
9000476e:	2702      	movs	r7, #2
    __HAL_RCC_LTDC_CLK_ENABLE();
90004770:	f042 0208 	orr.w	r2, r2, #8
90004774:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
90004778:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
9000477c:	f002 0208 	and.w	r2, r2, #8
90004780:	9201      	str	r2, [sp, #4]
90004782:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90004784:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004788:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
9000478c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004790:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004794:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90004798:	9202      	str	r2, [sp, #8]
9000479a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOI_CLK_ENABLE();
9000479c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900047a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
900047a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900047a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900047ac:	f402 7280 	and.w	r2, r2, #256	; 0x100
900047b0:	9203      	str	r2, [sp, #12]
900047b2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
900047b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900047b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
900047bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900047c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900047c4:	f402 7200 	and.w	r2, r2, #512	; 0x200
900047c8:	9204      	str	r2, [sp, #16]
900047ca:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
900047cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900047d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900047d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900047d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900047dc:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
900047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
900047e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
900047e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
900047e8:	a906      	add	r1, sp, #24
900047ea:	481d      	ldr	r0, [pc, #116]	; (90004860 <HAL_LTDC_MspInit+0x154>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
900047ec:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
900047ee:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
900047f2:	f003 fb39 	bl	90007e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
900047f6:	f24d 2203 	movw	r2, #53763	; 0xd203
900047fa:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900047fc:	a906      	add	r1, sp, #24
900047fe:	4819      	ldr	r0, [pc, #100]	; (90004864 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004800:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90004802:	e9cd 2306 	strd	r2, r3, [sp, #24]
90004806:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
9000480a:	f003 fb2d 	bl	90007e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
9000480e:	f64f 72fb 	movw	r2, #65531	; 0xfffb
90004812:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004814:	a906      	add	r1, sp, #24
90004816:	4814      	ldr	r0, [pc, #80]	; (90004868 <HAL_LTDC_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004818:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
9000481a:	e9cd 2306 	strd	r2, r3, [sp, #24]
9000481e:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004822:	f003 fb21 	bl	90007e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004826:	2302      	movs	r3, #2
90004828:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000482c:	a906      	add	r1, sp, #24
9000482e:	480f      	ldr	r0, [pc, #60]	; (9000486c <HAL_LTDC_MspInit+0x160>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004830:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004832:	e9cd 2306 	strd	r2, r3, [sp, #24]
90004836:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000483a:	f003 fb15 	bl	90007e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
9000483e:	2200      	movs	r2, #0
90004840:	2105      	movs	r1, #5
90004842:	2058      	movs	r0, #88	; 0x58
90004844:	f003 f8a2 	bl	9000798c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
90004848:	2058      	movs	r0, #88	; 0x58
9000484a:	f003 f8dd 	bl	90007a08 <HAL_NVIC_EnableIRQ>
}
9000484e:	b03c      	add	sp, #240	; 0xf0
90004850:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90004852:	f7ff fe1d 	bl	90004490 <Error_Handler>
90004856:	e783      	b.n	90004760 <HAL_LTDC_MspInit+0x54>
90004858:	50001000 	.word	0x50001000
9000485c:	58024400 	.word	0x58024400
90004860:	58022800 	.word	0x58022800
90004864:	58022000 	.word	0x58022000
90004868:	58022400 	.word	0x58022400
9000486c:	58021c00 	.word	0x58021c00

90004870 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
90004870:	4836      	ldr	r0, [pc, #216]	; (9000494c <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004872:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004874:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
90004876:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004878:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
9000487a:	e9cd 3302 	strd	r3, r3, [sp, #8]
9000487e:	e9cd 3304 	strd	r3, r3, [sp, #16]
90004882:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
90004884:	b109      	cbz	r1, 9000488a <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
90004886:	b038      	add	sp, #224	; 0xe0
90004888:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
9000488a:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
9000488c:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
9000488e:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004890:	a80a      	add	r0, sp, #40	; 0x28
90004892:	f01e fad1 	bl	90022e38 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004896:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
9000489a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000489c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
9000489e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
900048a2:	f007 f863 	bl	9000b96c <HAL_RCCEx_PeriphCLKConfig>
900048a6:	2800      	cmp	r0, #0
900048a8:	d14c      	bne.n	90004944 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
900048aa:	4b29      	ldr	r3, [pc, #164]	; (90004950 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
900048ac:	f64f 7083 	movw	r0, #65411	; 0xff83
900048b0:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900048b2:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
900048b4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
900048b8:	2600      	movs	r6, #0
900048ba:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
900048bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
900048c0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
900048c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900048c8:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
900048ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
900048ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
900048d2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900048d4:	a902      	add	r1, sp, #8
900048d6:	481f      	ldr	r0, [pc, #124]	; (90004954 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
900048d8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
900048da:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900048de:	f003 fac3 	bl	90007e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
900048e2:	f248 1233 	movw	r2, #33075	; 0x8133
900048e6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
900048e8:	a902      	add	r1, sp, #8
900048ea:	481b      	ldr	r0, [pc, #108]	; (90004958 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
900048ec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
900048ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
900048f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
900048f6:	f003 fab7 	bl	90007e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
900048fa:	f24c 7203 	movw	r2, #50947	; 0xc703
900048fe:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004900:	a902      	add	r1, sp, #8
90004902:	4816      	ldr	r0, [pc, #88]	; (9000495c <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004904:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004906:	e9cd 2302 	strd	r2, r3, [sp, #8]
9000490a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
9000490e:	f003 faab 	bl	90007e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004912:	f64f 023f 	movw	r2, #63551	; 0xf83f
90004916:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004918:	a902      	add	r1, sp, #8
9000491a:	4811      	ldr	r0, [pc, #68]	; (90004960 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
9000491c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
9000491e:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004922:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004926:	f003 fa9f 	bl	90007e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
9000492a:	22e0      	movs	r2, #224	; 0xe0
9000492c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000492e:	a902      	add	r1, sp, #8
90004930:	480c      	ldr	r0, [pc, #48]	; (90004964 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004932:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004934:	e9cd 6704 	strd	r6, r7, [sp, #16]
90004938:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000493c:	f003 fa94 	bl	90007e68 <HAL_GPIO_Init>
}
90004940:	b038      	add	sp, #224	; 0xe0
90004942:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90004944:	f7ff fda4 	bl	90004490 <Error_Handler>
90004948:	e7af      	b.n	900048aa <HAL_SDRAM_MspInit+0x3a>
9000494a:	bf00      	nop
9000494c:	2400b11c 	.word	0x2400b11c
90004950:	58024400 	.word	0x58024400
90004954:	58021000 	.word	0x58021000
90004958:	58021800 	.word	0x58021800
9000495c:	58020c00 	.word	0x58020c00
90004960:	58021400 	.word	0x58021400
90004964:	58021c00 	.word	0x58021c00

90004968 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90004968:	4b13      	ldr	r3, [pc, #76]	; (900049b8 <HAL_SDRAM_MspDeInit+0x50>)
9000496a:	681a      	ldr	r2, [r3, #0]
9000496c:	b102      	cbz	r2, 90004970 <HAL_SDRAM_MspDeInit+0x8>
9000496e:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
90004970:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
90004972:	4a12      	ldr	r2, [pc, #72]	; (900049bc <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
90004974:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004976:	f64f 7183 	movw	r1, #65411	; 0xff83
9000497a:	4811      	ldr	r0, [pc, #68]	; (900049c0 <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
9000497c:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
9000497e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
90004982:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90004986:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
9000498a:	f003 fba7 	bl	900080dc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
9000498e:	f248 1133 	movw	r1, #33075	; 0x8133
90004992:	480c      	ldr	r0, [pc, #48]	; (900049c4 <HAL_SDRAM_MspDeInit+0x5c>)
90004994:	f003 fba2 	bl	900080dc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004998:	f24c 7103 	movw	r1, #50947	; 0xc703
9000499c:	480a      	ldr	r0, [pc, #40]	; (900049c8 <HAL_SDRAM_MspDeInit+0x60>)
9000499e:	f003 fb9d 	bl	900080dc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
900049a2:	f64f 013f 	movw	r1, #63551	; 0xf83f
900049a6:	4809      	ldr	r0, [pc, #36]	; (900049cc <HAL_SDRAM_MspDeInit+0x64>)
900049a8:	f003 fb98 	bl	900080dc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
900049ac:	21e0      	movs	r1, #224	; 0xe0
900049ae:	4808      	ldr	r0, [pc, #32]	; (900049d0 <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
900049b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
900049b4:	f003 bb92 	b.w	900080dc <HAL_GPIO_DeInit>
900049b8:	2400b118 	.word	0x2400b118
900049bc:	58024400 	.word	0x58024400
900049c0:	58021000 	.word	0x58021000
900049c4:	58021800 	.word	0x58021800
900049c8:	58020c00 	.word	0x58020c00
900049cc:	58021400 	.word	0x58021400
900049d0:	58021c00 	.word	0x58021c00

900049d4 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
900049d4:	280f      	cmp	r0, #15
900049d6:	d901      	bls.n	900049dc <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
900049d8:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
900049da:	4770      	bx	lr
{
900049dc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
900049de:	4601      	mov	r1, r0
{
900049e0:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
900049e2:	2200      	movs	r2, #0
900049e4:	4604      	mov	r4, r0
900049e6:	2036      	movs	r0, #54	; 0x36
900049e8:	f002 ffd0 	bl	9000798c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
900049ec:	2036      	movs	r0, #54	; 0x36
900049ee:	f003 f80b 	bl	90007a08 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
900049f2:	4b1a      	ldr	r3, [pc, #104]	; (90004a5c <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
900049f4:	4a1a      	ldr	r2, [pc, #104]	; (90004a60 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
900049f6:	4669      	mov	r1, sp
900049f8:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
900049fa:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
900049fc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90004a00:	f042 0210 	orr.w	r2, r2, #16
90004a04:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
90004a08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90004a0c:	f003 0310 	and.w	r3, r3, #16
90004a10:	9301      	str	r3, [sp, #4]
90004a12:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004a14:	f006 fe8a 	bl	9000b72c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
90004a18:	9b07      	ldr	r3, [sp, #28]
90004a1a:	b9bb      	cbnz	r3, 90004a4c <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90004a1c:	f006 fdf6 	bl	9000b60c <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004a20:	4b10      	ldr	r3, [pc, #64]	; (90004a64 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
90004a22:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
90004a24:	4c10      	ldr	r4, [pc, #64]	; (90004a68 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004a26:	fba3 0300 	umull	r0, r3, r3, r0
  htim6.Instance = TIM6;
90004a2a:	4910      	ldr	r1, [pc, #64]	; (90004a6c <HAL_InitTick+0x98>)
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004a2c:	4620      	mov	r0, r4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90004a2e:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004a30:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
90004a32:	6021      	str	r1, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004a34:	f240 31e7 	movw	r1, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004a38:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004a3a:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90004a3e:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004a40:	f008 fa0c 	bl	9000ce5c <HAL_TIM_Base_Init>
90004a44:	b130      	cbz	r0, 90004a54 <HAL_InitTick+0x80>
    return HAL_ERROR;
90004a46:	2001      	movs	r0, #1
}
90004a48:	b00a      	add	sp, #40	; 0x28
90004a4a:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90004a4c:	f006 fdde 	bl	9000b60c <HAL_RCC_GetPCLK1Freq>
90004a50:	0040      	lsls	r0, r0, #1
90004a52:	e7e5      	b.n	90004a20 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
90004a54:	4620      	mov	r0, r4
90004a56:	f008 fab7 	bl	9000cfc8 <HAL_TIM_Base_Start_IT>
90004a5a:	e7f5      	b.n	90004a48 <HAL_InitTick+0x74>
90004a5c:	58024400 	.word	0x58024400
90004a60:	24000060 	.word	0x24000060
90004a64:	431bde83 	.word	0x431bde83
90004a68:	2400b120 	.word	0x2400b120
90004a6c:	40001000 	.word	0x40001000

90004a70 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
90004a70:	4770      	bx	lr
90004a72:	bf00      	nop

90004a74 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90004a74:	e7fe      	b.n	90004a74 <HardFault_Handler>
90004a76:	bf00      	nop

90004a78 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90004a78:	e7fe      	b.n	90004a78 <MemManage_Handler>
90004a7a:	bf00      	nop

90004a7c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90004a7c:	e7fe      	b.n	90004a7c <BusFault_Handler>
90004a7e:	bf00      	nop

90004a80 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90004a80:	e7fe      	b.n	90004a80 <UsageFault_Handler>
90004a82:	bf00      	nop

90004a84 <DebugMon_Handler>:
90004a84:	4770      	bx	lr
90004a86:	bf00      	nop

90004a88 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90004a88:	4801      	ldr	r0, [pc, #4]	; (90004a90 <TIM6_DAC_IRQHandler+0x8>)
90004a8a:	f008 bb01 	b.w	9000d090 <HAL_TIM_IRQHandler>
90004a8e:	bf00      	nop
90004a90:	2400b120 	.word	0x2400b120

90004a94 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90004a94:	4801      	ldr	r0, [pc, #4]	; (90004a9c <LTDC_IRQHandler+0x8>)
90004a96:	f005 bc8b 	b.w	9000a3b0 <HAL_LTDC_IRQHandler>
90004a9a:	bf00      	nop
90004a9c:	2400af60 	.word	0x2400af60

90004aa0 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90004aa0:	4801      	ldr	r0, [pc, #4]	; (90004aa8 <DMA2D_IRQHandler+0x8>)
90004aa2:	f003 b8dd 	b.w	90007c60 <HAL_DMA2D_IRQHandler>
90004aa6:	bf00      	nop
90004aa8:	2400aea0 	.word	0x2400aea0

90004aac <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
90004aac:	4801      	ldr	r0, [pc, #4]	; (90004ab4 <JPEG_IRQHandler+0x8>)
90004aae:	f005 bb6b 	b.w	9000a188 <HAL_JPEG_IRQHandler>
90004ab2:	bf00      	nop
90004ab4:	2400af08 	.word	0x2400af08

90004ab8 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004ab8:	4804      	ldr	r0, [pc, #16]	; (90004acc <MDMA_IRQHandler+0x14>)
{
90004aba:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004abc:	f005 ff30 	bl	9000a920 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004ac0:	4803      	ldr	r0, [pc, #12]	; (90004ad0 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
90004ac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004ac6:	f005 bf2b 	b.w	9000a920 <HAL_MDMA_IRQHandler>
90004aca:	bf00      	nop
90004acc:	2400b074 	.word	0x2400b074
90004ad0:	2400b008 	.word	0x2400b008

90004ad4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
90004ad4:	2001      	movs	r0, #1
90004ad6:	4770      	bx	lr

90004ad8 <_kill>:

int _kill(int pid, int sig)
{
90004ad8:	b508      	push	{r3, lr}
	errno = EINVAL;
90004ada:	f01e f94f 	bl	90022d7c <__errno>
90004ade:	2216      	movs	r2, #22
90004ae0:	4603      	mov	r3, r0
	return -1;
}
90004ae2:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
90004ae6:	601a      	str	r2, [r3, #0]
}
90004ae8:	bd08      	pop	{r3, pc}
90004aea:	bf00      	nop

90004aec <_exit>:

void _exit (int status)
{
90004aec:	b508      	push	{r3, lr}
	errno = EINVAL;
90004aee:	f01e f945 	bl	90022d7c <__errno>
90004af2:	2316      	movs	r3, #22
90004af4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
90004af6:	e7fe      	b.n	90004af6 <_exit+0xa>

90004af8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90004af8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004afa:	1e16      	subs	r6, r2, #0
90004afc:	dd07      	ble.n	90004b0e <_read+0x16>
90004afe:	460c      	mov	r4, r1
90004b00:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
90004b02:	f3af 8000 	nop.w
90004b06:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004b0a:	42a5      	cmp	r5, r4
90004b0c:	d1f9      	bne.n	90004b02 <_read+0xa>
	}

return len;
}
90004b0e:	4630      	mov	r0, r6
90004b10:	bd70      	pop	{r4, r5, r6, pc}
90004b12:	bf00      	nop

90004b14 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90004b14:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004b16:	1e16      	subs	r6, r2, #0
90004b18:	dd07      	ble.n	90004b2a <_write+0x16>
90004b1a:	460c      	mov	r4, r1
90004b1c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
90004b1e:	f814 0b01 	ldrb.w	r0, [r4], #1
90004b22:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004b26:	42ac      	cmp	r4, r5
90004b28:	d1f9      	bne.n	90004b1e <_write+0xa>
	}
	return len;
}
90004b2a:	4630      	mov	r0, r6
90004b2c:	bd70      	pop	{r4, r5, r6, pc}
90004b2e:	bf00      	nop

90004b30 <_close>:

int _close(int file)
{
	return -1;
}
90004b30:	f04f 30ff 	mov.w	r0, #4294967295
90004b34:	4770      	bx	lr
90004b36:	bf00      	nop

90004b38 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
90004b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90004b3c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90004b3e:	604b      	str	r3, [r1, #4]
}
90004b40:	4770      	bx	lr
90004b42:	bf00      	nop

90004b44 <_isatty>:

int _isatty(int file)
{
	return 1;
}
90004b44:	2001      	movs	r0, #1
90004b46:	4770      	bx	lr

90004b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
90004b48:	2000      	movs	r0, #0
90004b4a:	4770      	bx	lr

90004b4c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90004b4c:	490d      	ldr	r1, [pc, #52]	; (90004b84 <_sbrk+0x38>)
90004b4e:	680a      	ldr	r2, [r1, #0]
{
90004b50:	b508      	push	{r3, lr}
90004b52:	4603      	mov	r3, r0
	if (heap_end == 0)
90004b54:	b132      	cbz	r2, 90004b64 <_sbrk+0x18>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
90004b56:	4413      	add	r3, r2
90004b58:	4668      	mov	r0, sp
90004b5a:	4283      	cmp	r3, r0
90004b5c:	d809      	bhi.n	90004b72 <_sbrk+0x26>
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
90004b5e:	4610      	mov	r0, r2
	heap_end += incr;
90004b60:	600b      	str	r3, [r1, #0]
}
90004b62:	bd08      	pop	{r3, pc}
		heap_end = &end;
90004b64:	4808      	ldr	r0, [pc, #32]	; (90004b88 <_sbrk+0x3c>)
90004b66:	4602      	mov	r2, r0
90004b68:	6008      	str	r0, [r1, #0]
	if (heap_end + incr > stack_ptr)
90004b6a:	4668      	mov	r0, sp
90004b6c:	4413      	add	r3, r2
90004b6e:	4283      	cmp	r3, r0
90004b70:	d9f5      	bls.n	90004b5e <_sbrk+0x12>
		errno = ENOMEM;
90004b72:	f01e f903 	bl	90022d7c <__errno>
90004b76:	230c      	movs	r3, #12
		return (caddr_t) -1;
90004b78:	f04f 32ff 	mov.w	r2, #4294967295
		errno = ENOMEM;
90004b7c:	6003      	str	r3, [r0, #0]
}
90004b7e:	4610      	mov	r0, r2
90004b80:	bd08      	pop	{r3, pc}
90004b82:	bf00      	nop
90004b84:	2400b16c 	.word	0x2400b16c
90004b88:	24026510 	.word	0x24026510

90004b8c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004b8c:	4770      	bx	lr
90004b8e:	bf00      	nop

90004b90 <_ZN23ApplicationFontProviderD0Ev>:
90004b90:	b510      	push	{r4, lr}
90004b92:	4604      	mov	r4, r0
90004b94:	2104      	movs	r1, #4
90004b96:	f01e f890 	bl	90022cba <_ZdlPvj>
90004b9a:	4620      	mov	r0, r4
90004b9c:	bd10      	pop	{r4, pc}
90004b9e:	bf00      	nop

90004ba0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
90004ba0:	2901      	cmp	r1, #1
{
90004ba2:	b508      	push	{r3, lr}
    switch (typography)
90004ba4:	d004      	beq.n	90004bb0 <_ZN23ApplicationFontProvider7getFontEt+0x10>
90004ba6:	2902      	cmp	r1, #2
90004ba8:	d00a      	beq.n	90004bc0 <_ZN23ApplicationFontProvider7getFontEt+0x20>
90004baa:	b129      	cbz	r1, 90004bb8 <_ZN23ApplicationFontProvider7getFontEt+0x18>
90004bac:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
90004bae:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004bb0:	f000 fdf4 	bl	9000579c <_ZN17TypedTextDatabase8getFontsEv>
90004bb4:	6840      	ldr	r0, [r0, #4]
}
90004bb6:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004bb8:	f000 fdf0 	bl	9000579c <_ZN17TypedTextDatabase8getFontsEv>
90004bbc:	6800      	ldr	r0, [r0, #0]
}
90004bbe:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004bc0:	f000 fdec 	bl	9000579c <_ZN17TypedTextDatabase8getFontsEv>
90004bc4:	6880      	ldr	r0, [r0, #8]
}
90004bc6:	bd08      	pop	{r3, pc}

90004bc8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004bc8:	4800      	ldr	r0, [pc, #0]	; (90004bcc <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004bca:	4770      	bx	lr
90004bcc:	90025be8 	.word	0x90025be8

90004bd0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004bd0:	2001      	movs	r0, #1
90004bd2:	4770      	bx	lr

90004bd4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
90004bd4:	b169      	cbz	r1, 90004bf2 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004bd6:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004bd8:	b530      	push	{r4, r5, lr}
90004bda:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004bdc:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004bde:	6895      	ldr	r5, [r2, #8]
90004be0:	f10d 0303 	add.w	r3, sp, #3
90004be4:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90004be6:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004be8:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004bec:	47a8      	blx	r5
        return glyph;
    }
90004bee:	b003      	add	sp, #12
90004bf0:	bd30      	pop	{r4, r5, pc}
            return 0;
90004bf2:	4608      	mov	r0, r1
    }
90004bf4:	4770      	bx	lr
90004bf6:	bf00      	nop

90004bf8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90004bf8:	89c0      	ldrh	r0, [r0, #14]
90004bfa:	4770      	bx	lr

90004bfc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
90004bfc:	8a00      	ldrh	r0, [r0, #16]
90004bfe:	4770      	bx	lr

90004c00 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
90004c00:	88c0      	ldrh	r0, [r0, #6]
90004c02:	4770      	bx	lr

90004c04 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
90004c04:	8880      	ldrh	r0, [r0, #4]
90004c06:	4770      	bx	lr

90004c08 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
90004c08:	7a80      	ldrb	r0, [r0, #10]
    }
90004c0a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
90004c0e:	4770      	bx	lr

90004c10 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90004c10:	7a80      	ldrb	r0, [r0, #10]
    }
90004c12:	09c0      	lsrs	r0, r0, #7
90004c14:	4770      	bx	lr
90004c16:	bf00      	nop

90004c18 <_ZN8touchgfx9TypedTextD1Ev>:
    }
90004c18:	4770      	bx	lr
90004c1a:	bf00      	nop

90004c1c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
90004c1c:	b510      	push	{r4, lr}
90004c1e:	4604      	mov	r4, r0
    }
90004c20:	2108      	movs	r1, #8
90004c22:	f01e f84a 	bl	90022cba <_ZdlPvj>
90004c26:	4620      	mov	r0, r4
90004c28:	bd10      	pop	{r4, pc}
90004c2a:	bf00      	nop

90004c2c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
90004c2c:	4770      	bx	lr
90004c2e:	bf00      	nop

90004c30 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
90004c30:	f500 7398 	add.w	r3, r0, #304	; 0x130
90004c34:	6808      	ldr	r0, [r1, #0]
90004c36:	6849      	ldr	r1, [r1, #4]
90004c38:	c303      	stmia	r3!, {r0, r1}
    }
90004c3a:	4770      	bx	lr

90004c3c <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
90004c3c:	4770      	bx	lr
90004c3e:	bf00      	nop

90004c40 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
90004c40:	4770      	bx	lr
90004c42:	bf00      	nop

90004c44 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
90004c44:	6041      	str	r1, [r0, #4]
    }
90004c46:	4770      	bx	lr

90004c48 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90004c48:	4770      	bx	lr
90004c4a:	bf00      	nop

90004c4c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004c4c:	4905      	ldr	r1, [pc, #20]	; (90004c64 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
90004c4e:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90004c50:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90004c54:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004c58:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004c5c:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
90004c60:	4770      	bx	lr
90004c62:	bf00      	nop
90004c64:	90004cf1 	.word	0x90004cf1

90004c68 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
90004c68:	2301      	movs	r3, #1
90004c6a:	7203      	strb	r3, [r0, #8]
    }
90004c6c:	4770      	bx	lr
90004c6e:	bf00      	nop

90004c70 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90004c70:	4770      	bx	lr
90004c72:	bf00      	nop

90004c74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90004c74:	4770      	bx	lr
90004c76:	bf00      	nop

90004c78 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
90004c78:	68c2      	ldr	r2, [r0, #12]
    virtual void execute()
90004c7a:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
90004c7c:	6841      	ldr	r1, [r0, #4]
90004c7e:	ea4f 0c62 	mov.w	ip, r2, asr #1
90004c82:	eb01 0062 	add.w	r0, r1, r2, asr #1
90004c86:	07d2      	lsls	r2, r2, #31
90004c88:	d401      	bmi.n	90004c8e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
90004c8a:	689b      	ldr	r3, [r3, #8]
90004c8c:	4718      	bx	r3
90004c8e:	f851 200c 	ldr.w	r2, [r1, ip]
90004c92:	689b      	ldr	r3, [r3, #8]
90004c94:	58d3      	ldr	r3, [r2, r3]
90004c96:	4718      	bx	r3

90004c98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
90004c98:	6843      	ldr	r3, [r0, #4]
90004c9a:	b13b      	cbz	r3, 90004cac <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90004c9c:	6883      	ldr	r3, [r0, #8]
90004c9e:	b10b      	cbz	r3, 90004ca4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90004ca0:	2001      	movs	r0, #1
    }
90004ca2:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90004ca4:	68c0      	ldr	r0, [r0, #12]
90004ca6:	f000 0001 	and.w	r0, r0, #1
90004caa:	4770      	bx	lr
90004cac:	4618      	mov	r0, r3
90004cae:	4770      	bx	lr

90004cb0 <_ZN8touchgfx12NoTransitionD0Ev>:
90004cb0:	b510      	push	{r4, lr}
90004cb2:	4604      	mov	r4, r0
90004cb4:	210c      	movs	r1, #12
90004cb6:	f01e f800 	bl	90022cba <_ZdlPvj>
90004cba:	4620      	mov	r0, r4
90004cbc:	bd10      	pop	{r4, pc}
90004cbe:	bf00      	nop

90004cc0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004cc0:	b510      	push	{r4, lr}
90004cc2:	4604      	mov	r4, r0
90004cc4:	2110      	movs	r1, #16
90004cc6:	f01d fff8 	bl	90022cba <_ZdlPvj>
90004cca:	4620      	mov	r0, r4
90004ccc:	bd10      	pop	{r4, pc}
90004cce:	bf00      	nop

90004cd0 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90004cd0:	b510      	push	{r4, lr}
90004cd2:	4604      	mov	r4, r0
90004cd4:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90004cd8:	f01d ffef 	bl	90022cba <_ZdlPvj>
90004cdc:	4620      	mov	r0, r4
90004cde:	bd10      	pop	{r4, pc}

90004ce0 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90004ce0:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
90004ce2:	f00f f9ef 	bl	900140c4 <_ZN8touchgfx11Application11getInstanceEv>
    }
90004ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
90004cea:	f00f be35 	b.w	90014958 <_ZN8touchgfx11Application10invalidateEv>
90004cee:	bf00      	nop

90004cf0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
90004cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90004cf4:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
90004cf8:	4607      	mov	r7, r0
90004cfa:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90004cfc:	68a0      	ldr	r0, [r4, #8]
90004cfe:	6803      	ldr	r3, [r0, #0]
90004d00:	6a1b      	ldr	r3, [r3, #32]
90004d02:	4798      	blx	r3
90004d04:	28eb      	cmp	r0, #235	; 0xeb
90004d06:	f240 80a8 	bls.w	90004e5a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16a>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90004d0a:	6860      	ldr	r0, [r4, #4]
90004d0c:	6803      	ldr	r3, [r0, #0]
90004d0e:	6a1b      	ldr	r3, [r3, #32]
90004d10:	4798      	blx	r3
90004d12:	280f      	cmp	r0, #15
90004d14:	f240 809b 	bls.w	90004e4e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x15e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90004d18:	68e0      	ldr	r0, [r4, #12]
90004d1a:	6803      	ldr	r3, [r0, #0]
90004d1c:	6a1b      	ldr	r3, [r3, #32]
90004d1e:	4798      	blx	r3
90004d20:	280b      	cmp	r0, #11
90004d22:	f240 80a0 	bls.w	90004e66 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x176>
    if (*currentTrans)
90004d26:	f8df 9170 	ldr.w	r9, [pc, #368]	; 90004e98 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a8>
    Application::getInstance()->clearAllTimerWidgets();
90004d2a:	f00f f9cb 	bl	900140c4 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
90004d2e:	3004      	adds	r0, #4
90004d30:	f00f f9ed 	bl	9001410e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
90004d34:	f8d9 0000 	ldr.w	r0, [r9]
90004d38:	b130      	cbz	r0, 90004d48 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x58>
        (*currentTrans)->tearDown();
90004d3a:	6803      	ldr	r3, [r0, #0]
90004d3c:	494d      	ldr	r1, [pc, #308]	; (90004e74 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x184>)
90004d3e:	68da      	ldr	r2, [r3, #12]
90004d40:	428a      	cmp	r2, r1
90004d42:	d17c      	bne.n	90004e3e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14e>
        (*currentTrans)->~Transition();
90004d44:	681b      	ldr	r3, [r3, #0]
90004d46:	4798      	blx	r3
    if (*currentScreen)
90004d48:	f8df 8150 	ldr.w	r8, [pc, #336]	; 90004e9c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1ac>
90004d4c:	f8d8 0000 	ldr.w	r0, [r8]
90004d50:	2800      	cmp	r0, #0
90004d52:	d061      	beq.n	90004e18 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>
        (*currentScreen)->tearDownScreen();
90004d54:	6803      	ldr	r3, [r0, #0]
90004d56:	695b      	ldr	r3, [r3, #20]
90004d58:	4798      	blx	r3
    if (*currentPresenter)
90004d5a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004d5e:	2800      	cmp	r0, #0
90004d60:	d055      	beq.n	90004e0e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x11e>
        (*currentPresenter)->deactivate();
90004d62:	6803      	ldr	r3, [r0, #0]
90004d64:	685b      	ldr	r3, [r3, #4]
90004d66:	4798      	blx	r3
    if (*currentScreen)
90004d68:	f8d8 0000 	ldr.w	r0, [r8]
90004d6c:	b110      	cbz	r0, 90004d74 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->~Screen();
90004d6e:	6803      	ldr	r3, [r0, #0]
90004d70:	681b      	ldr	r3, [r3, #0]
90004d72:	4798      	blx	r3
    if (*currentPresenter)
90004d74:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004d78:	b110      	cbz	r0, 90004d80 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->~Presenter();
90004d7a:	6803      	ldr	r3, [r0, #0]
90004d7c:	689b      	ldr	r3, [r3, #8]
90004d7e:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
90004d80:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
90004d82:	2100      	movs	r1, #0
90004d84:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90004d86:	468b      	mov	fp, r1
90004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004d8a:	4798      	blx	r3
90004d8c:	4b3a      	ldr	r3, [pc, #232]	; (90004e78 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
90004d8e:	4605      	mov	r5, r0
90004d90:	f8c0 b004 	str.w	fp, [r0, #4]
90004d94:	f880 b008 	strb.w	fp, [r0, #8]
90004d98:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90004d9a:	68a0      	ldr	r0, [r4, #8]
90004d9c:	602b      	str	r3, [r5, #0]
90004d9e:	6803      	ldr	r3, [r0, #0]
90004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004da2:	4798      	blx	r3
90004da4:	4606      	mov	r6, r0
90004da6:	f000 fda3 	bl	900058f0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90004daa:	6860      	ldr	r0, [r4, #4]
90004dac:	4659      	mov	r1, fp
90004dae:	6803      	ldr	r3, [r0, #0]
90004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004db2:	4798      	blx	r3
90004db4:	4604      	mov	r4, r0
90004db6:	4631      	mov	r1, r6
90004db8:	f000 fd70 	bl	9000589c <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
90004dbc:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
90004dc0:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
90004dc4:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
90004dc8:	b35c      	cbz	r4, 90004e22 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x132>
90004dca:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
90004dcc:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
90004dd0:	4630      	mov	r0, r6
90004dd2:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
90004dd4:	f8c4 a008 	str.w	sl, [r4, #8]
90004dd8:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
90004dda:	63f4      	str	r4, [r6, #60]	; 0x3c
90004ddc:	4798      	blx	r3
    newPresenter->activate();
90004dde:	6823      	ldr	r3, [r4, #0]
90004de0:	4620      	mov	r0, r4
90004de2:	681b      	ldr	r3, [r3, #0]
90004de4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
90004de6:	4629      	mov	r1, r5
90004de8:	4630      	mov	r0, r6
90004dea:	f010 fe05 	bl	900159f8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
90004dee:	682b      	ldr	r3, [r5, #0]
90004df0:	4922      	ldr	r1, [pc, #136]	; (90004e7c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90004df2:	691a      	ldr	r2, [r3, #16]
90004df4:	428a      	cmp	r2, r1
90004df6:	d116      	bne.n	90004e26 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x136>
    newTransition->invalidate();
90004df8:	695b      	ldr	r3, [r3, #20]
90004dfa:	4a21      	ldr	r2, [pc, #132]	; (90004e80 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
90004dfc:	4293      	cmp	r3, r2
90004dfe:	d119      	bne.n	90004e34 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
        Application::getInstance()->invalidate();
90004e00:	f00f f960 	bl	900140c4 <_ZN8touchgfx11Application11getInstanceEv>
}
90004e04:	b001      	add	sp, #4
90004e06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004e0a:	f00f bda5 	b.w	90014958 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
90004e0e:	f8d8 0000 	ldr.w	r0, [r8]
90004e12:	2800      	cmp	r0, #0
90004e14:	d1ab      	bne.n	90004d6e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x7e>
90004e16:	e7b3      	b.n	90004d80 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
    if (*currentPresenter)
90004e18:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004e1c:	2800      	cmp	r0, #0
90004e1e:	d1a0      	bne.n	90004d62 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
90004e20:	e7ae      	b.n	90004d80 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
    model->bind(newPresenter);
90004e22:	4623      	mov	r3, r4
90004e24:	e7d2      	b.n	90004dcc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xdc>
    newTransition->init();
90004e26:	4628      	mov	r0, r5
90004e28:	4790      	blx	r2
    newTransition->invalidate();
90004e2a:	682b      	ldr	r3, [r5, #0]
90004e2c:	4a14      	ldr	r2, [pc, #80]	; (90004e80 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
90004e2e:	695b      	ldr	r3, [r3, #20]
90004e30:	4293      	cmp	r3, r2
90004e32:	d0e5      	beq.n	90004e00 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x110>
90004e34:	4628      	mov	r0, r5
90004e36:	b001      	add	sp, #4
90004e38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90004e3c:	4718      	bx	r3
        (*currentTrans)->tearDown();
90004e3e:	4790      	blx	r2
    if (*currentTrans)
90004e40:	f8d9 0000 	ldr.w	r0, [r9]
90004e44:	2800      	cmp	r0, #0
90004e46:	f43f af7f 	beq.w	90004d48 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x58>
        (*currentTrans)->~Transition();
90004e4a:	6803      	ldr	r3, [r0, #0]
90004e4c:	e77a      	b.n	90004d44 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x54>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90004e4e:	4b0d      	ldr	r3, [pc, #52]	; (90004e84 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
90004e50:	21a4      	movs	r1, #164	; 0xa4
90004e52:	4a0d      	ldr	r2, [pc, #52]	; (90004e88 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90004e54:	480d      	ldr	r0, [pc, #52]	; (90004e8c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90004e56:	f01d ff5f 	bl	90022d18 <__assert_func>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90004e5a:	4b0d      	ldr	r3, [pc, #52]	; (90004e90 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a0>)
90004e5c:	21a3      	movs	r1, #163	; 0xa3
90004e5e:	4a0a      	ldr	r2, [pc, #40]	; (90004e88 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90004e60:	480a      	ldr	r0, [pc, #40]	; (90004e8c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90004e62:	f01d ff59 	bl	90022d18 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90004e66:	4b0b      	ldr	r3, [pc, #44]	; (90004e94 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a4>)
90004e68:	21a5      	movs	r1, #165	; 0xa5
90004e6a:	4a07      	ldr	r2, [pc, #28]	; (90004e88 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90004e6c:	4807      	ldr	r0, [pc, #28]	; (90004e8c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90004e6e:	f01d ff53 	bl	90022d18 <__assert_func>
90004e72:	bf00      	nop
90004e74:	90004c3d 	.word	0x90004c3d
90004e78:	90025f9c 	.word	0x90025f9c
90004e7c:	90004c41 	.word	0x90004c41
90004e80:	90004ce1 	.word	0x90004ce1
90004e84:	90025de8 	.word	0x90025de8
90004e88:	90025c9c 	.word	0x90025c9c
90004e8c:	90025da0 	.word	0x90025da0
90004e90:	90025c0c 	.word	0x90025c0c
90004e94:	90025e8c 	.word	0x90025e8c
90004e98:	240262ac 	.word	0x240262ac
90004e9c:	240262a8 	.word	0x240262a8

90004ea0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90004ea0:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
90004ea4:	b1d3      	cbz	r3, 90004edc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
90004ea6:	681a      	ldr	r2, [r3, #0]
    virtual void handlePendingScreenTransition()
90004ea8:	b570      	push	{r4, r5, r6, lr}
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90004eaa:	68d1      	ldr	r1, [r2, #12]
90004eac:	4604      	mov	r4, r0
90004eae:	4818      	ldr	r0, [pc, #96]	; (90004f10 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x70>)
90004eb0:	4281      	cmp	r1, r0
90004eb2:	d118      	bne.n	90004ee6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x46>
        return (pobject != 0) && (pmemfun != 0);
90004eb4:	6858      	ldr	r0, [r3, #4]
90004eb6:	b180      	cbz	r0, 90004eda <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90004eb8:	6899      	ldr	r1, [r3, #8]
90004eba:	b1e1      	cbz	r1, 90004ef6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x56>
            pendingScreenTransitionCallback->execute();
90004ebc:	6892      	ldr	r2, [r2, #8]
90004ebe:	4915      	ldr	r1, [pc, #84]	; (90004f14 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90004ec0:	428a      	cmp	r2, r1
90004ec2:	d122      	bne.n	90004f0a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90004ec4:	68da      	ldr	r2, [r3, #12]
90004ec6:	6858      	ldr	r0, [r3, #4]
90004ec8:	eb00 0062 	add.w	r0, r0, r2, asr #1
90004ecc:	07d2      	lsls	r2, r2, #31
90004ece:	d406      	bmi.n	90004ede <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3e>
90004ed0:	689b      	ldr	r3, [r3, #8]
90004ed2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
90004ed4:	2300      	movs	r3, #0
90004ed6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
90004eda:	bd70      	pop	{r4, r5, r6, pc}
90004edc:	4770      	bx	lr
90004ede:	6899      	ldr	r1, [r3, #8]
90004ee0:	6803      	ldr	r3, [r0, #0]
90004ee2:	585b      	ldr	r3, [r3, r1]
90004ee4:	e7f5      	b.n	90004ed2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90004ee6:	4618      	mov	r0, r3
90004ee8:	4788      	blx	r1
90004eea:	2800      	cmp	r0, #0
90004eec:	d0f5      	beq.n	90004eda <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
90004eee:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
90004ef2:	681a      	ldr	r2, [r3, #0]
90004ef4:	e7e2      	b.n	90004ebc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
        return (pobject != 0) && (pmemfun != 0);
90004ef6:	68dd      	ldr	r5, [r3, #12]
90004ef8:	07ee      	lsls	r6, r5, #31
90004efa:	d5ee      	bpl.n	90004eda <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90004efc:	6892      	ldr	r2, [r2, #8]
90004efe:	4e05      	ldr	r6, [pc, #20]	; (90004f14 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90004f00:	42b2      	cmp	r2, r6
90004f02:	d102      	bne.n	90004f0a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90004f04:	eb00 0065 	add.w	r0, r0, r5, asr #1
90004f08:	e7ea      	b.n	90004ee0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x40>
90004f0a:	4618      	mov	r0, r3
90004f0c:	4790      	blx	r2
90004f0e:	e7e1      	b.n	90004ed4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
90004f10:	90004c99 	.word	0x90004c99
90004f14:	90004c79 	.word	0x90004c79

90004f18 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
90004f18:	b570      	push	{r4, r5, r6, lr}
90004f1a:	4604      	mov	r4, r0
90004f1c:	4616      	mov	r6, r2
90004f1e:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
90004f20:	f00f f996 	bl	90014250 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
90004f24:	4a18      	ldr	r2, [pc, #96]	; (90004f88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
          pendingScreenTransitionCallback(0)
90004f26:	2300      	movs	r3, #0
      model(m)
90004f28:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        instance = this;
90004f2c:	6014      	str	r4, [r2, #0]
        return instance;
90004f2e:	4e17      	ldr	r6, [pc, #92]	; (90004f8c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
90004f30:	4a17      	ldr	r2, [pc, #92]	; (90004f90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
90004f32:	6830      	ldr	r0, [r6, #0]
90004f34:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
90004f36:	4a17      	ldr	r2, [pc, #92]	; (90004f94 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
90004f38:	4917      	ldr	r1, [pc, #92]	; (90004f98 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
90004f3a:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
90004f3e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
90004f42:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
90004f46:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
90004f4a:	6802      	ldr	r2, [r0, #0]
90004f4c:	6892      	ldr	r2, [r2, #8]
90004f4e:	428a      	cmp	r2, r1
          pendingScreenTransitionCallback(0)
90004f50:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
90004f54:	d115      	bne.n	90004f82 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
        requestedOrientation = orientation;
90004f56:	f44f 7380 	mov.w	r3, #256	; 0x100
90004f5a:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
    touchgfx::Texts::setLanguage(GB);
90004f5e:	2000      	movs	r0, #0
90004f60:	f000 fbce 	bl	90005700 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
90004f64:	6833      	ldr	r3, [r6, #0]
90004f66:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90004f6a:	b12a      	cbz	r2, 90004f78 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
90004f6c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90004f6e:	b118      	cbz	r0, 90004f78 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90004f70:	f016 ff9f 	bl	9001beb2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90004f74:	4620      	mov	r0, r4
90004f76:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
90004f78:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90004f7a:	f016 ff9a 	bl	9001beb2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90004f7e:	4620      	mov	r0, r4
90004f80:	bd70      	pop	{r4, r5, r6, pc}
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
90004f82:	4619      	mov	r1, r3
90004f84:	4790      	blx	r2
90004f86:	e7ea      	b.n	90004f5e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
90004f88:	240262b8 	.word	0x240262b8
90004f8c:	2402626c 	.word	0x2402626c
90004f90:	90025f50 	.word	0x90025f50
90004f94:	90025f38 	.word	0x90025f38
90004f98:	90000665 	.word	0x90000665

90004f9c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004f9c:	4905      	ldr	r1, [pc, #20]	; (90004fb4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
90004f9e:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90004fa0:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90004fa4:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004fa8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004fac:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90004fb0:	4770      	bx	lr
90004fb2:	bf00      	nop
90004fb4:	90004cf1 	.word	0x90004cf1

90004fb8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
90004fb8:	6a40      	ldr	r0, [r0, #36]	; 0x24
90004fba:	4770      	bx	lr

90004fbc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
90004fbc:	6a80      	ldr	r0, [r0, #40]	; 0x28
90004fbe:	4770      	bx	lr

90004fc0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
90004fc0:	4770      	bx	lr
90004fc2:	bf00      	nop

90004fc4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
90004fc4:	888b      	ldrh	r3, [r1, #4]
90004fc6:	69c0      	ldr	r0, [r0, #28]
90004fc8:	0adb      	lsrs	r3, r3, #11
90004fca:	680a      	ldr	r2, [r1, #0]
90004fcc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
90004fd0:	4410      	add	r0, r2
90004fd2:	4770      	bx	lr

90004fd4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
90004fd4:	b1da      	cbz	r2, 9000500e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
{
90004fd6:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
90004fd8:	7b14      	ldrb	r4, [r2, #12]
90004fda:	b1b4      	cbz	r4, 9000500a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
90004fdc:	f892 c00d 	ldrb.w	ip, [r2, #13]
90004fe0:	f892 e00b 	ldrb.w	lr, [r2, #11]
90004fe4:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
90004fe8:	6a03      	ldr	r3, [r0, #32]
90004fea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
90004fee:	ea4e 0202 	orr.w	r2, lr, r2
90004ff2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90004ff6:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
90004ffa:	881a      	ldrh	r2, [r3, #0]
90004ffc:	428a      	cmp	r2, r1
90004ffe:	d008      	beq.n	90005012 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90005000:	f103 0304 	add.w	r3, r3, #4
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
90005004:	d801      	bhi.n	9000500a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90005006:	4283      	cmp	r3, r0
90005008:	d1f7      	bne.n	90004ffa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
9000500a:	2000      	movs	r0, #0
        {
            break;
        }
    }
    return 0;
}
9000500c:	bd10      	pop	{r4, pc}
        return 0;
9000500e:	4610      	mov	r0, r2
}
90005010:	4770      	bx	lr
            return kerndata->distance;
90005012:	f993 0002 	ldrsb.w	r0, [r3, #2]
}
90005016:	bd10      	pop	{r4, pc}

90005018 <_ZN8touchgfx13GeneratedFontD0Ev>:
90005018:	b510      	push	{r4, lr}
9000501a:	4604      	mov	r4, r0
9000501c:	212c      	movs	r1, #44	; 0x2c
9000501e:	f01d fe4c 	bl	90022cba <_ZdlPvj>
90005022:	4620      	mov	r0, r4
90005024:	bd10      	pop	{r4, pc}
90005026:	bf00      	nop

90005028 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005028:	b530      	push	{r4, r5, lr}
9000502a:	b08b      	sub	sp, #44	; 0x2c
9000502c:	4604      	mov	r4, r0
9000502e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
      arabicTable(formsTable)
90005032:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005034:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
      arabicTable(formsTable)
90005038:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
9000503a:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
      arabicTable(formsTable)
9000503e:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005040:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
      arabicTable(formsTable)
90005044:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005046:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
      arabicTable(formsTable)
9000504a:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
9000504c:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
      arabicTable(formsTable)
90005050:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005052:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
      arabicTable(formsTable)
90005056:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005058:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
      arabicTable(formsTable)
9000505c:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
9000505e:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
      arabicTable(formsTable)
90005062:	9508      	str	r5, [sp, #32]
90005064:	f010 f920 	bl	900152a8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
90005068:	9b15      	ldr	r3, [sp, #84]	; 0x54
}
9000506a:	4620      	mov	r0, r4
      arabicTable(formsTable)
9000506c:	61e3      	str	r3, [r4, #28]
9000506e:	9b16      	ldr	r3, [sp, #88]	; 0x58
90005070:	6223      	str	r3, [r4, #32]
90005072:	9b19      	ldr	r3, [sp, #100]	; 0x64
90005074:	6263      	str	r3, [r4, #36]	; 0x24
90005076:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90005078:	62a3      	str	r3, [r4, #40]	; 0x28
9000507a:	4b02      	ldr	r3, [pc, #8]	; (90005084 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
9000507c:	6023      	str	r3, [r4, #0]
}
9000507e:	b00b      	add	sp, #44	; 0x2c
90005080:	bd30      	pop	{r4, r5, pc}
90005082:	bf00      	nop
90005084:	90025fc0 	.word	0x90025fc0

90005088 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
90005088:	4770      	bx	lr
9000508a:	bf00      	nop

9000508c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
9000508c:	4770      	bx	lr
9000508e:	bf00      	nop

90005090 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
90005090:	4770      	bx	lr
90005092:	bf00      	nop

90005094 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
90005094:	4770      	bx	lr
90005096:	bf00      	nop

90005098 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
90005098:	b530      	push	{r4, r5, lr}
9000509a:	b085      	sub	sp, #20
9000509c:	460a      	mov	r2, r1
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
9000509e:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
900050a0:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
900050a2:	466d      	mov	r5, sp
900050a4:	4601      	mov	r1, r0
        rect.width = width;
900050a6:	8102      	strh	r2, [r0, #8]
900050a8:	343c      	adds	r4, #60	; 0x3c
900050aa:	4628      	mov	r0, r5
900050ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900050b0:	4798      	blx	r3
900050b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900050b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
900050ba:	b005      	add	sp, #20
900050bc:	bd30      	pop	{r4, r5, pc}
900050be:	bf00      	nop

900050c0 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
900050c0:	b530      	push	{r4, r5, lr}
900050c2:	b085      	sub	sp, #20
900050c4:	460a      	mov	r2, r1
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
900050c6:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
900050c8:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
900050ca:	466d      	mov	r5, sp
900050cc:	4601      	mov	r1, r0
        rect.height = height;
900050ce:	8142      	strh	r2, [r0, #10]
900050d0:	343c      	adds	r4, #60	; 0x3c
900050d2:	4628      	mov	r0, r5
900050d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900050d8:	4798      	blx	r3
900050da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900050de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
900050e2:	b005      	add	sp, #20
900050e4:	bd30      	pop	{r4, r5, pc}
900050e6:	bf00      	nop

900050e8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
900050e8:	2200      	movs	r2, #0
900050ea:	6002      	str	r2, [r0, #0]
900050ec:	6042      	str	r2, [r0, #4]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
900050ee:	4770      	bx	lr

900050f0 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
900050f0:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
900050f4:	4770      	bx	lr
900050f6:	bf00      	nop

900050f8 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
900050f8:	2000      	movs	r0, #0
900050fa:	4770      	bx	lr

900050fc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
        if (visible)
900050fc:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90005100:	b112      	cbz	r2, 90005108 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xc>
            invalidate();
90005102:	6803      	ldr	r3, [r0, #0]
90005104:	695b      	ldr	r3, [r3, #20]
90005106:	4718      	bx	r3
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
    {
        Widget::invalidateContent();
    }
90005108:	4770      	bx	lr
9000510a:	bf00      	nop

9000510c <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000510c:	2200      	movs	r2, #0
9000510e:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
90005112:	6082      	str	r2, [r0, #8]
90005114:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
90005118:	4770      	bx	lr
9000511a:	bf00      	nop

9000511c <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
9000511c:	6c80      	ldr	r0, [r0, #72]	; 0x48
9000511e:	4770      	bx	lr

90005120 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
90005120:	4770      	bx	lr
90005122:	bf00      	nop

90005124 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
90005124:	4770      	bx	lr
90005126:	bf00      	nop

90005128 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
90005128:	4770      	bx	lr
9000512a:	bf00      	nop

9000512c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
9000512c:	b510      	push	{r4, lr}
9000512e:	4604      	mov	r4, r0
90005130:	214c      	movs	r1, #76	; 0x4c
90005132:	f01d fdc2 	bl	90022cba <_ZdlPvj>
90005136:	4620      	mov	r0, r4
90005138:	bd10      	pop	{r4, pc}
9000513a:	bf00      	nop

9000513c <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
9000513c:	b510      	push	{r4, lr}
9000513e:	4604      	mov	r4, r0
}
90005140:	21ec      	movs	r1, #236	; 0xec
90005142:	f01d fdba 	bl	90022cba <_ZdlPvj>
90005146:	4620      	mov	r0, r4
90005148:	bd10      	pop	{r4, pc}
9000514a:	bf00      	nop

9000514c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
9000514c:	4b1b      	ldr	r3, [pc, #108]	; (900051bc <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
9000514e:	6802      	ldr	r2, [r0, #0]
90005150:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
90005152:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005154:	6b55      	ldr	r5, [r2, #52]	; 0x34
90005156:	b323      	cbz	r3, 900051a2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
90005158:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
9000515a:	4919      	ldr	r1, [pc, #100]	; (900051c0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x74>)
9000515c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
9000515e:	4604      	mov	r4, r0
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005160:	8809      	ldrh	r1, [r1, #0]
90005162:	4291      	cmp	r1, r2
90005164:	d923      	bls.n	900051ae <_ZN8touchgfx8TextArea12setBaselineYEs+0x62>
        return fonts[typedTexts[typedTextId].fontIdx];
90005166:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
9000516a:	4b16      	ldr	r3, [pc, #88]	; (900051c4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x78>)
9000516c:	681b      	ldr	r3, [r3, #0]
9000516e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005172:	4a15      	ldr	r2, [pc, #84]	; (900051c8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x7c>)
90005174:	6803      	ldr	r3, [r0, #0]
90005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005178:	4293      	cmp	r3, r2
9000517a:	d107      	bne.n	9000518c <_ZN8touchgfx8TextArea12setBaselineYEs+0x40>
        return baselineHeight;
9000517c:	88c0      	ldrh	r0, [r0, #6]
9000517e:	4b13      	ldr	r3, [pc, #76]	; (900051cc <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005180:	1a31      	subs	r1, r6, r0
90005182:	429d      	cmp	r5, r3
90005184:	b209      	sxth	r1, r1
90005186:	d107      	bne.n	90005198 <_ZN8touchgfx8TextArea12setBaselineYEs+0x4c>
        rect.y = y;
90005188:	80e1      	strh	r1, [r4, #6]
    }
9000518a:	bd70      	pop	{r4, r5, r6, pc}
        setY(baselineY - getTypedText().getFont()->getBaseline());
9000518c:	4798      	blx	r3
9000518e:	4b0f      	ldr	r3, [pc, #60]	; (900051cc <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005190:	1a31      	subs	r1, r6, r0
90005192:	429d      	cmp	r5, r3
90005194:	b209      	sxth	r1, r1
90005196:	d0f7      	beq.n	90005188 <_ZN8touchgfx8TextArea12setBaselineYEs+0x3c>
90005198:	4620      	mov	r0, r4
9000519a:	462b      	mov	r3, r5
    }
9000519c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
900051a0:	4718      	bx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900051a2:	4b0b      	ldr	r3, [pc, #44]	; (900051d0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x84>)
900051a4:	216c      	movs	r1, #108	; 0x6c
900051a6:	4a0b      	ldr	r2, [pc, #44]	; (900051d4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
900051a8:	480b      	ldr	r0, [pc, #44]	; (900051d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
900051aa:	f01d fdb5 	bl	90022d18 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900051ae:	4b0b      	ldr	r3, [pc, #44]	; (900051dc <_ZN8touchgfx8TextArea12setBaselineYEs+0x90>)
900051b0:	216d      	movs	r1, #109	; 0x6d
900051b2:	4a08      	ldr	r2, [pc, #32]	; (900051d4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
900051b4:	4808      	ldr	r0, [pc, #32]	; (900051d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
900051b6:	f01d fdaf 	bl	90022d18 <__assert_func>
900051ba:	bf00      	nop
900051bc:	240262bc 	.word	0x240262bc
900051c0:	240262c0 	.word	0x240262c0
900051c4:	240262c4 	.word	0x240262c4
900051c8:	90004c01 	.word	0x90004c01
900051cc:	900022d1 	.word	0x900022d1
900051d0:	90026018 	.word	0x90026018
900051d4:	9002605c 	.word	0x9002605c
900051d8:	90026098 	.word	0x90026098
900051dc:	900260e0 	.word	0x900260e0

900051e0 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
900051e0:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
900051e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900051e6:	4f25      	ldr	r7, [pc, #148]	; (9000527c <_ZN8touchgfx8TextArea13setXBaselineYEss+0x9c>)
900051e8:	4605      	mov	r5, r0
        setX(x);
900051ea:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
900051ec:	4690      	mov	r8, r2
900051ee:	42be      	cmp	r6, r7
900051f0:	d125      	bne.n	9000523e <_ZN8touchgfx8TextArea13setXBaselineYEss+0x5e>
        setBaselineY(baselineY);
900051f2:	6e5c      	ldr	r4, [r3, #100]	; 0x64
        rect.x = x;
900051f4:	80a9      	strh	r1, [r5, #4]
900051f6:	4922      	ldr	r1, [pc, #136]	; (90005280 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
900051f8:	428c      	cmp	r4, r1
900051fa:	d126      	bne.n	9000524a <_ZN8touchgfx8TextArea13setXBaselineYEss+0x6a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900051fc:	4921      	ldr	r1, [pc, #132]	; (90005284 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa4>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
900051fe:	fa1f f888 	uxth.w	r8, r8
90005202:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90005204:	680b      	ldr	r3, [r1, #0]
90005206:	2b00      	cmp	r3, #0
90005208:	d032      	beq.n	90005270 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x90>
        return typedTextId < numberOfTypedTexts;
9000520a:	491f      	ldr	r1, [pc, #124]	; (90005288 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa8>)
9000520c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
9000520e:	8809      	ldrh	r1, [r1, #0]
90005210:	4291      	cmp	r1, r2
90005212:	d927      	bls.n	90005264 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x84>
        return fonts[typedTexts[typedTextId].fontIdx];
90005214:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90005218:	4b1c      	ldr	r3, [pc, #112]	; (9000528c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xac>)
9000521a:	681b      	ldr	r3, [r3, #0]
9000521c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005220:	4a1b      	ldr	r2, [pc, #108]	; (90005290 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb0>)
90005222:	6803      	ldr	r3, [r0, #0]
90005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005226:	4293      	cmp	r3, r2
90005228:	d11a      	bne.n	90005260 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x80>
9000522a:	88c0      	ldrh	r0, [r0, #6]
9000522c:	4b19      	ldr	r3, [pc, #100]	; (90005294 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb4>)
9000522e:	eba8 0200 	sub.w	r2, r8, r0
90005232:	429e      	cmp	r6, r3
90005234:	b211      	sxth	r1, r2
90005236:	d10e      	bne.n	90005256 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x76>
        rect.y = y;
90005238:	80e9      	strh	r1, [r5, #6]
    }
9000523a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setX(x);
9000523e:	47b0      	blx	r6
        setBaselineY(baselineY);
90005240:	682b      	ldr	r3, [r5, #0]
90005242:	490f      	ldr	r1, [pc, #60]	; (90005280 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005244:	6e5c      	ldr	r4, [r3, #100]	; 0x64
90005246:	428c      	cmp	r4, r1
90005248:	d0d8      	beq.n	900051fc <_ZN8touchgfx8TextArea13setXBaselineYEss+0x1c>
9000524a:	4641      	mov	r1, r8
9000524c:	4628      	mov	r0, r5
9000524e:	4623      	mov	r3, r4
    }
90005250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setBaselineY(baselineY);
90005254:	4718      	bx	r3
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005256:	4628      	mov	r0, r5
90005258:	4633      	mov	r3, r6
    }
9000525a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
9000525e:	4718      	bx	r3
90005260:	4798      	blx	r3
90005262:	e7e3      	b.n	9000522c <_ZN8touchgfx8TextArea13setXBaselineYEss+0x4c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005264:	4b0c      	ldr	r3, [pc, #48]	; (90005298 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb8>)
90005266:	216d      	movs	r1, #109	; 0x6d
90005268:	4a0c      	ldr	r2, [pc, #48]	; (9000529c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
9000526a:	480d      	ldr	r0, [pc, #52]	; (900052a0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
9000526c:	f01d fd54 	bl	90022d18 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005270:	4b0c      	ldr	r3, [pc, #48]	; (900052a4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc4>)
90005272:	216c      	movs	r1, #108	; 0x6c
90005274:	4a09      	ldr	r2, [pc, #36]	; (9000529c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
90005276:	480a      	ldr	r0, [pc, #40]	; (900052a0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
90005278:	f01d fd4e 	bl	90022d18 <__assert_func>
9000527c:	900022cd 	.word	0x900022cd
90005280:	9000514d 	.word	0x9000514d
90005284:	240262bc 	.word	0x240262bc
90005288:	240262c0 	.word	0x240262c0
9000528c:	240262c4 	.word	0x240262c4
90005290:	90004c01 	.word	0x90004c01
90005294:	900022d1 	.word	0x900022d1
90005298:	900260e0 	.word	0x900260e0
9000529c:	9002605c 	.word	0x9002605c
900052a0:	90026098 	.word	0x90026098
900052a4:	90026018 	.word	0x90026018

900052a8 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
900052a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900052ac:	b086      	sub	sp, #24
900052ae:	4604      	mov	r4, r0
        : presenter(0)
900052b0:	f010 f9f6 	bl	900156a0 <_ZN8touchgfx6ScreenC1Ev>
900052b4:	4b5e      	ldr	r3, [pc, #376]	; (90005430 <_ZN15Screen1ViewBaseC1Ev+0x188>)
900052b6:	2500      	movs	r5, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
900052b8:	f64f 76ff 	movw	r6, #65535	; 0xffff
900052bc:	6023      	str	r3, [r4, #0]
          visible(true)
900052be:	f44f 7880 	mov.w	r8, #256	; 0x100
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
900052c2:	4b5c      	ldr	r3, [pc, #368]	; (90005434 <_ZN15Screen1ViewBaseC1Ev+0x18c>)
900052c4:	f04f 09ff 	mov.w	r9, #255	; 0xff
900052c8:	f104 076c 	add.w	r7, r4, #108	; 0x6c
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
900052cc:	a904      	add	r1, sp, #16
900052ce:	6423      	str	r3, [r4, #64]	; 0x40
900052d0:	f04f 3aff 	mov.w	sl, #4294967295
        : Widget(), bitmap(bmp), alpha(255)
900052d4:	4b58      	ldr	r3, [pc, #352]	; (90005438 <_ZN15Screen1ViewBaseC1Ev+0x190>)
        Image::setBitmap(bmp);
900052d6:	4638      	mov	r0, r7
900052d8:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
900052dc:	f884 9066 	strb.w	r9, [r4, #102]	; 0x66
900052e0:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
        : Widget(), bitmap(bmp), alpha(255)
900052e4:	f8a4 6092 	strh.w	r6, [r4, #146]	; 0x92
900052e8:	f884 6094 	strb.w	r6, [r4, #148]	; 0x94
900052ec:	66e3      	str	r3, [r4, #108]	; 0x6c
900052ee:	63e5      	str	r5, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
900052f0:	6465      	str	r5, [r4, #68]	; 0x44
900052f2:	6625      	str	r5, [r4, #96]	; 0x60
        : color(col)
900052f4:	66a5      	str	r5, [r4, #104]	; 0x68
900052f6:	f8ad 6010 	strh.w	r6, [sp, #16]
        : x(0), y(0), width(0), height(0)
900052fa:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
900052fe:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
90005302:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
90005306:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
9000530a:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
9000530e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
90005312:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
90005316:	f00d f9a8 	bl	9001266a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : TextAreaWithWildcardBase(), wc1(0)
9000531a:	4b48      	ldr	r3, [pc, #288]	; (9000543c <_ZN15Screen1ViewBaseC1Ev+0x194>)
9000531c:	f8a4 80bc 	strh.w	r8, [r4, #188]	; 0xbc
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
90005320:	f104 0804 	add.w	r8, r4, #4
        : typedTextId(id)
90005324:	f8a4 60c4 	strh.w	r6, [r4, #196]	; 0xc4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
90005328:	f04f 467f 	mov.w	r6, #4278190080	; 0xff000000
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
9000532c:	f8c4 90ce 	str.w	r9, [r4, #206]	; 0xce
90005330:	f104 0140 	add.w	r1, r4, #64	; 0x40
90005334:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
90005338:	4640      	mov	r0, r8
        rect.width = width;
9000533a:	4b41      	ldr	r3, [pc, #260]	; (90005440 <_ZN15Screen1ViewBaseC1Ev+0x198>)
9000533c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 9000546c <_ZN15Screen1ViewBaseC1Ev+0x1c4>
90005340:	64a3      	str	r3, [r4, #72]	; 0x48
90005342:	66a6      	str	r6, [r4, #104]	; 0x68
        : color(col)
90005344:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
90005348:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000534c:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
        rect.x = x;
90005350:	6465      	str	r5, [r4, #68]	; 0x44
90005352:	f8c4 a0d8 	str.w	sl, [r4, #216]	; 0xd8
90005356:	f8c4 90c0 	str.w	r9, [r4, #192]	; 0xc0
        : x(0), y(0), width(0), height(0)
9000535a:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
9000535e:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
          visible(true)
90005362:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
90005366:	e9c4 552d 	strd	r5, r5, [r4, #180]	; 0xb4
9000536a:	e9c4 5537 	strd	r5, r5, [r4, #220]	; 0xdc
9000536e:	f00b fe19 	bl	90010fa4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_RAYS_ID));
90005372:	a904      	add	r1, sp, #16
90005374:	4638      	mov	r0, r7
        rect.x = x;
90005376:	6725      	str	r5, [r4, #112]	; 0x70
90005378:	f8ad 5010 	strh.w	r5, [sp, #16]
9000537c:	f00d f975 	bl	9001266a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90005380:	4639      	mov	r1, r7
90005382:	4640      	mov	r0, r8
90005384:	f00b fe0e 	bl	90010fa4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
90005388:	4a2e      	ldr	r2, [pc, #184]	; (90005444 <_ZN15Screen1ViewBaseC1Ev+0x19c>)
        boundingArea = calculateBoundingArea();
9000538a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
        color = newColor;
9000538e:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    textArea1.setXY(161, 124);
90005392:	f104 0698 	add.w	r6, r4, #152	; 0x98
        boundingArea = calculateBoundingArea();
90005396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000539a:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
9000539e:	4a2a      	ldr	r2, [pc, #168]	; (90005448 <_ZN15Screen1ViewBaseC1Ev+0x1a0>)
        linespace = space;
900053a0:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
900053a4:	4293      	cmp	r3, r2
900053a6:	d12c      	bne.n	90005402 <_ZN15Screen1ViewBaseC1Ev+0x15a>
        boundingArea = calculateBoundingArea();
900053a8:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
900053ac:	e9c4 5a35 	strd	r5, sl, [r4, #212]	; 0xd4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900053b0:	4b26      	ldr	r3, [pc, #152]	; (9000544c <_ZN15Screen1ViewBaseC1Ev+0x1a4>)
    Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1MEA).getText());
900053b2:	f104 05e4 	add.w	r5, r4, #228	; 0xe4
900053b6:	681b      	ldr	r3, [r3, #0]
900053b8:	b3a3      	cbz	r3, 90005424 <_ZN15Screen1ViewBaseC1Ev+0x17c>
        return typedTextId < numberOfTypedTexts;
900053ba:	4b25      	ldr	r3, [pc, #148]	; (90005450 <_ZN15Screen1ViewBaseC1Ev+0x1a8>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900053bc:	881b      	ldrh	r3, [r3, #0]
900053be:	b35b      	cbz	r3, 90005418 <_ZN15Screen1ViewBaseC1Ev+0x170>
        return texts->getText(typedTextId);
900053c0:	4b24      	ldr	r3, [pc, #144]	; (90005454 <_ZN15Screen1ViewBaseC1Ev+0x1ac>)
900053c2:	2100      	movs	r1, #0
900053c4:	6818      	ldr	r0, [r3, #0]
900053c6:	f000 f9d9 	bl	9000577c <_ZNK8touchgfx5Texts7getTextEt>
900053ca:	4a23      	ldr	r2, [pc, #140]	; (90005458 <_ZN15Screen1ViewBaseC1Ev+0x1b0>)
900053cc:	4603      	mov	r3, r0
900053ce:	2104      	movs	r1, #4
900053d0:	4628      	mov	r0, r5
900053d2:	f011 fdd7 	bl	90016f84 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea1.resizeToCurrentText();
900053d6:	4630      	mov	r0, r6
        wc1 = value;
900053d8:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
900053dc:	f00d f85e 	bl	9001249c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
900053e0:	2301      	movs	r3, #1
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9J1Y));
900053e2:	a904      	add	r1, sp, #16
900053e4:	4630      	mov	r0, r6
900053e6:	f8ad 3014 	strh.w	r3, [sp, #20]
900053ea:	f8cd 9010 	str.w	r9, [sp, #16]
900053ee:	f00d f875 	bl	900124dc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
900053f2:	4640      	mov	r0, r8
900053f4:	4631      	mov	r1, r6
900053f6:	f00b fdd5 	bl	90010fa4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
900053fa:	4620      	mov	r0, r4
900053fc:	b006      	add	sp, #24
900053fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90005402:	466d      	mov	r5, sp
90005404:	4631      	mov	r1, r6
90005406:	4628      	mov	r0, r5
90005408:	4798      	blx	r3
9000540a:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
9000540e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005412:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90005416:	e7cb      	b.n	900053b0 <_ZN15Screen1ViewBaseC1Ev+0x108>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005418:	4b10      	ldr	r3, [pc, #64]	; (9000545c <_ZN15Screen1ViewBaseC1Ev+0x1b4>)
9000541a:	2161      	movs	r1, #97	; 0x61
9000541c:	4a10      	ldr	r2, [pc, #64]	; (90005460 <_ZN15Screen1ViewBaseC1Ev+0x1b8>)
9000541e:	4811      	ldr	r0, [pc, #68]	; (90005464 <_ZN15Screen1ViewBaseC1Ev+0x1bc>)
90005420:	f01d fc7a 	bl	90022d18 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005424:	4b10      	ldr	r3, [pc, #64]	; (90005468 <_ZN15Screen1ViewBaseC1Ev+0x1c0>)
90005426:	2160      	movs	r1, #96	; 0x60
90005428:	4a0d      	ldr	r2, [pc, #52]	; (90005460 <_ZN15Screen1ViewBaseC1Ev+0x1b8>)
9000542a:	480e      	ldr	r0, [pc, #56]	; (90005464 <_ZN15Screen1ViewBaseC1Ev+0x1bc>)
9000542c:	f01d fc74 	bl	90022d18 <__assert_func>
90005430:	900261f4 	.word	0x900261f4
90005434:	90026b3c 	.word	0x90026b3c
90005438:	90026ba4 	.word	0x90026ba4
9000543c:	90026164 	.word	0x90026164
90005440:	011001e0 	.word	0x011001e0
90005444:	007c00a1 	.word	0x007c00a1
90005448:	9000510d 	.word	0x9000510d
9000544c:	240262bc 	.word	0x240262bc
90005450:	240262c0 	.word	0x240262c0
90005454:	240262c8 	.word	0x240262c8
90005458:	90026158 	.word	0x90026158
9000545c:	900260e0 	.word	0x900260e0
90005460:	90026120 	.word	0x90026120
90005464:	90026098 	.word	0x90026098
90005468:	90026018 	.word	0x90026018
9000546c:	90025c04 	.word	0x90025c04

90005470 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90005470:	4770      	bx	lr
90005472:	bf00      	nop

90005474 <_Z23getFont_verdana_10_4bppv>:
{
90005474:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90005476:	4d18      	ldr	r5, [pc, #96]	; (900054d8 <_Z23getFont_verdana_10_4bppv+0x64>)
{
90005478:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
9000547a:	782b      	ldrb	r3, [r5, #0]
9000547c:	f3bf 8f5b 	dmb	ish
90005480:	f013 0401 	ands.w	r4, r3, #1
90005484:	d002      	beq.n	9000548c <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
90005486:	4815      	ldr	r0, [pc, #84]	; (900054dc <_Z23getFont_verdana_10_4bppv+0x68>)
90005488:	b00f      	add	sp, #60	; 0x3c
9000548a:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
9000548c:	4628      	mov	r0, r5
9000548e:	f01d fc16 	bl	90022cbe <__cxa_guard_acquire>
90005492:	2800      	cmp	r0, #0
90005494:	d0f7      	beq.n	90005486 <_Z23getFont_verdana_10_4bppv+0x12>
90005496:	213f      	movs	r1, #63	; 0x3f
90005498:	2201      	movs	r2, #1
9000549a:	230a      	movs	r3, #10
9000549c:	2004      	movs	r0, #4
9000549e:	9204      	str	r2, [sp, #16]
900054a0:	9300      	str	r3, [sp, #0]
900054a2:	9003      	str	r0, [sp, #12]
900054a4:	480d      	ldr	r0, [pc, #52]	; (900054dc <_Z23getFont_verdana_10_4bppv+0x68>)
900054a6:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
900054aa:	490d      	ldr	r1, [pc, #52]	; (900054e0 <_Z23getFont_verdana_10_4bppv+0x6c>)
900054ac:	9108      	str	r1, [sp, #32]
900054ae:	490d      	ldr	r1, [pc, #52]	; (900054e4 <_Z23getFont_verdana_10_4bppv+0x70>)
900054b0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
900054b4:	9107      	str	r1, [sp, #28]
900054b6:	490c      	ldr	r1, [pc, #48]	; (900054e8 <_Z23getFont_verdana_10_4bppv+0x74>)
900054b8:	e9cd 4405 	strd	r4, r4, [sp, #20]
900054bc:	e9cd 4401 	strd	r4, r4, [sp, #4]
900054c0:	f7ff fdb2 	bl	90005028 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
900054c4:	4809      	ldr	r0, [pc, #36]	; (900054ec <_Z23getFont_verdana_10_4bppv+0x78>)
900054c6:	f01d fc45 	bl	90022d54 <atexit>
900054ca:	4628      	mov	r0, r5
900054cc:	f01d fc03 	bl	90022cd6 <__cxa_guard_release>
}
900054d0:	4802      	ldr	r0, [pc, #8]	; (900054dc <_Z23getFont_verdana_10_4bppv+0x68>)
900054d2:	b00f      	add	sp, #60	; 0x3c
900054d4:	bd30      	pop	{r4, r5, pc}
900054d6:	bf00      	nop
900054d8:	2400b170 	.word	0x2400b170
900054dc:	2400b174 	.word	0x2400b174
900054e0:	90027084 	.word	0x90027084
900054e4:	90027230 	.word	0x90027230
900054e8:	90201c10 	.word	0x90201c10
900054ec:	90005471 	.word	0x90005471

900054f0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900054f0:	4770      	bx	lr
900054f2:	bf00      	nop

900054f4 <_Z23getFont_verdana_20_4bppv>:
{
900054f4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900054f6:	4d19      	ldr	r5, [pc, #100]	; (9000555c <_Z23getFont_verdana_20_4bppv+0x68>)
{
900054f8:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900054fa:	782b      	ldrb	r3, [r5, #0]
900054fc:	f3bf 8f5b 	dmb	ish
90005500:	f013 0401 	ands.w	r4, r3, #1
90005504:	d002      	beq.n	9000550c <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
90005506:	4816      	ldr	r0, [pc, #88]	; (90005560 <_Z23getFont_verdana_20_4bppv+0x6c>)
90005508:	b00f      	add	sp, #60	; 0x3c
9000550a:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
9000550c:	4628      	mov	r0, r5
9000550e:	f01d fbd6 	bl	90022cbe <__cxa_guard_acquire>
90005512:	2800      	cmp	r0, #0
90005514:	d0f7      	beq.n	90005506 <_Z23getFont_verdana_20_4bppv+0x12>
90005516:	213f      	movs	r1, #63	; 0x3f
90005518:	4a12      	ldr	r2, [pc, #72]	; (90005564 <_Z23getFont_verdana_20_4bppv+0x70>)
9000551a:	2301      	movs	r3, #1
9000551c:	2014      	movs	r0, #20
9000551e:	9208      	str	r2, [sp, #32]
90005520:	2204      	movs	r2, #4
90005522:	9304      	str	r3, [sp, #16]
90005524:	9000      	str	r0, [sp, #0]
90005526:	9401      	str	r4, [sp, #4]
90005528:	480d      	ldr	r0, [pc, #52]	; (90005560 <_Z23getFont_verdana_20_4bppv+0x6c>)
9000552a:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
9000552e:	490e      	ldr	r1, [pc, #56]	; (90005568 <_Z23getFont_verdana_20_4bppv+0x74>)
90005530:	e9cd 3305 	strd	r3, r3, [sp, #20]
90005534:	9107      	str	r1, [sp, #28]
90005536:	2318      	movs	r3, #24
90005538:	490c      	ldr	r1, [pc, #48]	; (9000556c <_Z23getFont_verdana_20_4bppv+0x78>)
9000553a:	e9cd 4202 	strd	r4, r2, [sp, #8]
9000553e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005542:	225f      	movs	r2, #95	; 0x5f
90005544:	f7ff fd70 	bl	90005028 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005548:	4809      	ldr	r0, [pc, #36]	; (90005570 <_Z23getFont_verdana_20_4bppv+0x7c>)
9000554a:	f01d fc03 	bl	90022d54 <atexit>
9000554e:	4628      	mov	r0, r5
90005550:	f01d fbc1 	bl	90022cd6 <__cxa_guard_release>
}
90005554:	4802      	ldr	r0, [pc, #8]	; (90005560 <_Z23getFont_verdana_20_4bppv+0x6c>)
90005556:	b00f      	add	sp, #60	; 0x3c
90005558:	bd30      	pop	{r4, r5, pc}
9000555a:	bf00      	nop
9000555c:	2400b1a0 	.word	0x2400b1a0
90005560:	2400b1a4 	.word	0x2400b1a4
90005564:	90027088 	.word	0x90027088
90005568:	90027234 	.word	0x90027234
9000556c:	90201c20 	.word	0x90201c20
90005570:	900054f1 	.word	0x900054f1

90005574 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005574:	4770      	bx	lr
90005576:	bf00      	nop

90005578 <_Z23getFont_verdana_40_4bppv>:
{
90005578:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
9000557a:	4d18      	ldr	r5, [pc, #96]	; (900055dc <_Z23getFont_verdana_40_4bppv+0x64>)
{
9000557c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
9000557e:	782b      	ldrb	r3, [r5, #0]
90005580:	f3bf 8f5b 	dmb	ish
90005584:	f013 0401 	ands.w	r4, r3, #1
90005588:	d002      	beq.n	90005590 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
9000558a:	4815      	ldr	r0, [pc, #84]	; (900055e0 <_Z23getFont_verdana_40_4bppv+0x68>)
9000558c:	b00f      	add	sp, #60	; 0x3c
9000558e:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90005590:	4628      	mov	r0, r5
90005592:	f01d fb94 	bl	90022cbe <__cxa_guard_acquire>
90005596:	2800      	cmp	r0, #0
90005598:	d0f7      	beq.n	9000558a <_Z23getFont_verdana_40_4bppv+0x12>
9000559a:	213f      	movs	r1, #63	; 0x3f
9000559c:	2201      	movs	r2, #1
9000559e:	2328      	movs	r3, #40	; 0x28
900055a0:	2004      	movs	r0, #4
900055a2:	9204      	str	r2, [sp, #16]
900055a4:	9300      	str	r3, [sp, #0]
900055a6:	9003      	str	r0, [sp, #12]
900055a8:	480d      	ldr	r0, [pc, #52]	; (900055e0 <_Z23getFont_verdana_40_4bppv+0x68>)
900055aa:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
900055ae:	490d      	ldr	r1, [pc, #52]	; (900055e4 <_Z23getFont_verdana_40_4bppv+0x6c>)
900055b0:	9108      	str	r1, [sp, #32]
900055b2:	490d      	ldr	r1, [pc, #52]	; (900055e8 <_Z23getFont_verdana_40_4bppv+0x70>)
900055b4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
900055b8:	9107      	str	r1, [sp, #28]
900055ba:	490c      	ldr	r1, [pc, #48]	; (900055ec <_Z23getFont_verdana_40_4bppv+0x74>)
900055bc:	e9cd 4405 	strd	r4, r4, [sp, #20]
900055c0:	e9cd 4401 	strd	r4, r4, [sp, #4]
900055c4:	f7ff fd30 	bl	90005028 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
900055c8:	4809      	ldr	r0, [pc, #36]	; (900055f0 <_Z23getFont_verdana_40_4bppv+0x78>)
900055ca:	f01d fbc3 	bl	90022d54 <atexit>
900055ce:	4628      	mov	r0, r5
900055d0:	f01d fb81 	bl	90022cd6 <__cxa_guard_release>
}
900055d4:	4802      	ldr	r0, [pc, #8]	; (900055e0 <_Z23getFont_verdana_40_4bppv+0x68>)
900055d6:	b00f      	add	sp, #60	; 0x3c
900055d8:	bd30      	pop	{r4, r5, pc}
900055da:	bf00      	nop
900055dc:	2400b1d0 	.word	0x2400b1d0
900055e0:	2400b1d4 	.word	0x2400b1d4
900055e4:	9002722c 	.word	0x9002722c
900055e8:	90027238 	.word	0x90027238
900055ec:	90202154 	.word	0x90202154
900055f0:	90005575 	.word	0x90005575

900055f4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
900055f4:	2000      	movs	r0, #0
900055f6:	4770      	bx	lr

900055f8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
900055f8:	2000      	movs	r0, #0
900055fa:	4770      	bx	lr

900055fc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
900055fc:	b40e      	push	{r1, r2, r3}
900055fe:	b500      	push	{lr}
90005600:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90005602:	2100      	movs	r1, #0
{
90005604:	ab03      	add	r3, sp, #12
90005606:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
9000560a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
9000560c:	f00f fc74 	bl	90014ef8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90005610:	b002      	add	sp, #8
90005612:	f85d eb04 	ldr.w	lr, [sp], #4
90005616:	b003      	add	sp, #12
90005618:	4770      	bx	lr
9000561a:	bf00      	nop

9000561c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
9000561c:	b40c      	push	{r2, r3}
9000561e:	b500      	push	{lr}
90005620:	b083      	sub	sp, #12
90005622:	ab04      	add	r3, sp, #16
90005624:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
90005628:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
9000562a:	f00f fc65 	bl	90014ef8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
9000562e:	b003      	add	sp, #12
90005630:	f85d eb04 	ldr.w	lr, [sp], #4
90005634:	b002      	add	sp, #8
90005636:	4770      	bx	lr

90005638 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
90005638:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
9000563a:	b510      	push	{r4, lr}
9000563c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
9000563e:	b133      	cbz	r3, 9000564e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
90005640:	8f03      	ldrh	r3, [r0, #56]	; 0x38
90005642:	b39b      	cbz	r3, 900056ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
90005644:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90005646:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9000564a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
9000564c:	b923      	cbnz	r3, 90005658 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
9000564e:	4620      	mov	r0, r4
}
90005650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
90005654:	f010 bdea 	b.w	9001622c <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
90005658:	f010 fee6 	bl	90016428 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
9000565c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9000565e:	2b01      	cmp	r3, #1
90005660:	d92a      	bls.n	900056b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
90005662:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90005664:	1c53      	adds	r3, r2, #1
90005666:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
90005668:	2b09      	cmp	r3, #9
9000566a:	d812      	bhi.n	90005692 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
9000566c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
90005670:	f640 103f 	movw	r0, #2367	; 0x93f
90005674:	8c49      	ldrh	r1, [r1, #34]	; 0x22
90005676:	4281      	cmp	r1, r0
90005678:	d1e9      	bne.n	9000564e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
9000567a:	eb04 0142 	add.w	r1, r4, r2, lsl #1
9000567e:	0052      	lsls	r2, r2, #1
90005680:	8c49      	ldrh	r1, [r1, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
90005682:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
90005686:	4422      	add	r2, r4
90005688:	f640 103f 	movw	r0, #2367	; 0x93f
            buffer[index < size ? index : 0] = newChar;
9000568c:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
9000568e:	8450      	strh	r0, [r2, #34]	; 0x22
        }
90005690:	e7dd      	b.n	9000564e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
90005692:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90005696:	f640 113f 	movw	r1, #2367	; 0x93f
9000569a:	89db      	ldrh	r3, [r3, #14]
9000569c:	428b      	cmp	r3, r1
9000569e:	d1d6      	bne.n	9000564e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
900056a0:	eb04 0142 	add.w	r1, r4, r2, lsl #1
900056a4:	2300      	movs	r3, #0
900056a6:	0052      	lsls	r2, r2, #1
900056a8:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
900056aa:	e7ea      	b.n	90005682 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
900056ac:	4b05      	ldr	r3, [pc, #20]	; (900056c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
900056ae:	21c5      	movs	r1, #197	; 0xc5
900056b0:	4a05      	ldr	r2, [pc, #20]	; (900056c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
900056b2:	4806      	ldr	r0, [pc, #24]	; (900056cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
900056b4:	f01d fb30 	bl	90022d18 <__assert_func>
            assert(offset < used);
900056b8:	4b05      	ldr	r3, [pc, #20]	; (900056d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
900056ba:	21cb      	movs	r1, #203	; 0xcb
900056bc:	4a05      	ldr	r2, [pc, #20]	; (900056d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
900056be:	4803      	ldr	r0, [pc, #12]	; (900056cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
900056c0:	f01d fb2a 	bl	90022d18 <__assert_func>
900056c4:	90026220 	.word	0x90026220
900056c8:	9002622c 	.word	0x9002622c
900056cc:	900262d8 	.word	0x900262d8
900056d0:	90026324 	.word	0x90026324
900056d4:	90026334 	.word	0x90026334

900056d8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
900056d8:	f010 bd71 	b.w	900161be <_ZN8touchgfx12TextProvider15fillInputBufferEv>

900056dc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
900056dc:	b510      	push	{r4, lr}
900056de:	b086      	sub	sp, #24
900056e0:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
900056e4:	ac0a      	add	r4, sp, #40	; 0x28
{
900056e6:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
900056ea:	461a      	mov	r2, r3
900056ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
900056ee:	4661      	mov	r1, ip
900056f0:	9401      	str	r4, [sp, #4]
900056f2:	9300      	str	r3, [sp, #0]
900056f4:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
900056f6:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
900056f8:	f00e f8a0 	bl	9001383c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
900056fc:	b006      	add	sp, #24
900056fe:	bd10      	pop	{r4, pc}

90005700 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
90005700:	b9e0      	cbnz	r0, 9000573c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
90005702:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
90005704:	4b13      	ldr	r3, [pc, #76]	; (90005754 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
90005706:	681b      	ldr	r3, [r3, #0]
90005708:	b1cb      	cbz	r3, 9000573e <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
9000570a:	4c13      	ldr	r4, [pc, #76]	; (90005758 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
9000570c:	4813      	ldr	r0, [pc, #76]	; (9000575c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
9000570e:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90005712:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90005714:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90005716:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90005718:	689c      	ldr	r4, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
9000571a:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
9000571c:	441c      	add	r4, r3
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
9000571e:	4b10      	ldr	r3, [pc, #64]	; (90005760 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
90005720:	2200      	movs	r2, #0
90005722:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
90005724:	f000 f83a 	bl	9000579c <_ZN17TypedTextDatabase8getFontsEv>
90005728:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
9000572a:	f000 f835 	bl	90005798 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
9000572e:	4b0d      	ldr	r3, [pc, #52]	; (90005764 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
90005730:	4a0d      	ldr	r2, [pc, #52]	; (90005768 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
90005732:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
90005734:	4b0d      	ldr	r3, [pc, #52]	; (9000576c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
90005736:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
90005738:	8018      	strh	r0, [r3, #0]
    }
}
9000573a:	bd38      	pop	{r3, r4, r5, pc}
9000573c:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
9000573e:	4c0c      	ldr	r4, [pc, #48]	; (90005770 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
90005740:	4905      	ldr	r1, [pc, #20]	; (90005758 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
90005742:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
90005744:	480b      	ldr	r0, [pc, #44]	; (90005774 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
90005746:	4b05      	ldr	r3, [pc, #20]	; (9000575c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90005748:	4a0b      	ldr	r2, [pc, #44]	; (90005778 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
9000574a:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
9000574c:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
9000574e:	2c00      	cmp	r4, #0
90005750:	d1e5      	bne.n	9000571e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
90005752:	bd38      	pop	{r3, r4, r5, pc}
90005754:	2400b200 	.word	0x2400b200
90005758:	2400b204 	.word	0x2400b204
9000575c:	2400b208 	.word	0x2400b208
90005760:	2400b20c 	.word	0x2400b20c
90005764:	240262bc 	.word	0x240262bc
90005768:	240262c4 	.word	0x240262c4
9000576c:	240262c0 	.word	0x240262c0
90005770:	90202194 	.word	0x90202194
90005774:	9020216c 	.word	0x9020216c
90005778:	90202164 	.word	0x90202164

9000577c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
9000577c:	4a04      	ldr	r2, [pc, #16]	; (90005790 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
9000577e:	4b05      	ldr	r3, [pc, #20]	; (90005794 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
90005780:	6812      	ldr	r2, [r2, #0]
90005782:	681b      	ldr	r3, [r3, #0]
90005784:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
90005788:	eb03 0040 	add.w	r0, r3, r0, lsl #1
9000578c:	4770      	bx	lr
9000578e:	bf00      	nop
90005790:	2400b208 	.word	0x2400b208
90005794:	2400b204 	.word	0x2400b204

90005798 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
90005798:	2002      	movs	r0, #2
9000579a:	4770      	bx	lr

9000579c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
9000579c:	4800      	ldr	r0, [pc, #0]	; (900057a0 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
9000579e:	4770      	bx	lr
900057a0:	2400b210 	.word	0x2400b210

900057a4 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
900057a4:	b510      	push	{r4, lr}
};
900057a6:	4c05      	ldr	r4, [pc, #20]	; (900057bc <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
900057a8:	f7ff fea4 	bl	900054f4 <_Z23getFont_verdana_20_4bppv>
};
900057ac:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
900057ae:	f7ff fee3 	bl	90005578 <_Z23getFont_verdana_40_4bppv>
};
900057b2:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
900057b4:	f7ff fe5e 	bl	90005474 <_Z23getFont_verdana_10_4bppv>
};
900057b8:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
900057ba:	bd10      	pop	{r4, pc}
900057bc:	2400b210 	.word	0x2400b210

900057c0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
900057c0:	4770      	bx	lr
900057c2:	bf00      	nop

900057c4 <_ZN19FrontendApplicationD0Ev>:
900057c4:	b510      	push	{r4, lr}
900057c6:	4604      	mov	r4, r0
900057c8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
900057cc:	f01d fa75 	bl	90022cba <_ZdlPvj>
900057d0:	4620      	mov	r0, r4
900057d2:	bd10      	pop	{r4, pc}

900057d4 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
900057d4:	b510      	push	{r4, lr}
900057d6:	4604      	mov	r4, r0
    {
        model.tick();
900057d8:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
900057dc:	f000 f818 	bl	90005810 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
900057e0:	4620      	mov	r0, r4
    }
900057e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
900057e6:	f00e bcef 	b.w	900141c8 <_ZN8touchgfx11Application15handleTickEventEv>
900057ea:	bf00      	nop

900057ec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
900057ec:	b510      	push	{r4, lr}
900057ee:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
900057f0:	f7ff fb92 	bl	90004f18 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
900057f4:	4b01      	ldr	r3, [pc, #4]	; (900057fc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
900057f6:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
900057f8:	6023      	str	r3, [r4, #0]
}
900057fa:	bd10      	pop	{r4, pc}
900057fc:	90026410 	.word	0x90026410

90005800 <_ZN13ModelListener6setADCEi>:
    }
    virtual void setADC(int value) {};
90005800:	4770      	bx	lr
90005802:	bf00      	nop

90005804 <_ZN5ModelC1Ev>:
	{
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
	}
}
#endif
Model::Model() : modelListener(0), ADC_VAL(50)
90005804:	2100      	movs	r1, #0
90005806:	2232      	movs	r2, #50	; 0x32
90005808:	e9c0 1200 	strd	r1, r2, [r0]
{

}
9000580c:	4770      	bx	lr
9000580e:	bf00      	nop

90005810 <_ZN5Model4tickEv>:

void Model::tick()
{
90005810:	b570      	push	{r4, r5, r6, lr}
90005812:	4605      	mov	r5, r0
#ifndef SIMULATOR
	HAL_ADC_Start(&hadc1);
90005814:	480e      	ldr	r0, [pc, #56]	; (90005850 <_ZN5Model4tickEv+0x40>)
90005816:	f001 fd95 	bl	90007344 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
9000581a:	210a      	movs	r1, #10
9000581c:	480c      	ldr	r0, [pc, #48]	; (90005850 <_ZN5Model4tickEv+0x40>)
9000581e:	f001 f9ff 	bl	90006c20 <HAL_ADC_PollForConversion>
	uint16_t value = HAL_ADC_GetValue(&hadc1);
90005822:	480b      	ldr	r0, [pc, #44]	; (90005850 <_ZN5Model4tickEv+0x40>)
90005824:	f001 fa88 	bl	90006d38 <HAL_ADC_GetValue>
90005828:	4604      	mov	r4, r0
	HAL_ADC_Stop (&hadc1);
9000582a:	4809      	ldr	r0, [pc, #36]	; (90005850 <_ZN5Model4tickEv+0x40>)
9000582c:	f001 fe44 	bl	900074b8 <HAL_ADC_Stop>

	ADC_VAL = map(value, 0, 65535, 0, 100);
	modelListener->setADC(ADC_VAL);
90005830:	6828      	ldr	r0, [r5, #0]
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
90005832:	2265      	movs	r2, #101	; 0x65
	ADC_VAL = map(value, 0, 65535, 0, 100);
90005834:	b2a1      	uxth	r1, r4
	modelListener->setADC(ADC_VAL);
90005836:	6803      	ldr	r3, [r0, #0]
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
90005838:	fb02 f101 	mul.w	r1, r2, r1
9000583c:	4a05      	ldr	r2, [pc, #20]	; (90005854 <_ZN5Model4tickEv+0x44>)
	modelListener->setADC(ADC_VAL);
9000583e:	689b      	ldr	r3, [r3, #8]
	  return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
90005840:	1409      	asrs	r1, r1, #16
90005842:	4293      	cmp	r3, r2
	ADC_VAL = map(value, 0, 65535, 0, 100);
90005844:	6069      	str	r1, [r5, #4]
	modelListener->setADC(ADC_VAL);
90005846:	d100      	bne.n	9000584a <_ZN5Model4tickEv+0x3a>
	#endif
}
90005848:	bd70      	pop	{r4, r5, r6, pc}
9000584a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	modelListener->setADC(ADC_VAL);
9000584e:	4718      	bx	r3
90005850:	2400ae18 	.word	0x2400ae18
90005854:	90005801 	.word	0x90005801

90005858 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
90005858:	4770      	bx	lr
9000585a:	bf00      	nop

9000585c <_ZThn4_N16Screen1PresenterD1Ev>:
9000585c:	3804      	subs	r0, #4
9000585e:	4770      	bx	lr

90005860 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
90005860:	4770      	bx	lr
90005862:	bf00      	nop

90005864 <_ZN16Screen1Presenter6setADCEi>:

}

void Screen1Presenter::setADC (int value)
{
	view.setADC(value);
90005864:	68c0      	ldr	r0, [r0, #12]
90005866:	6803      	ldr	r3, [r0, #0]
90005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000586a:	4718      	bx	r3

9000586c <_ZN16Screen1PresenterD0Ev>:
9000586c:	b510      	push	{r4, lr}
9000586e:	4604      	mov	r4, r0
90005870:	2110      	movs	r1, #16
90005872:	f01d fa22 	bl	90022cba <_ZdlPvj>
90005876:	4620      	mov	r0, r4
90005878:	bd10      	pop	{r4, pc}
9000587a:	bf00      	nop

9000587c <_ZThn4_N16Screen1PresenterD0Ev>:
9000587c:	b500      	push	{lr}
9000587e:	3804      	subs	r0, #4
90005880:	b083      	sub	sp, #12
90005882:	2110      	movs	r1, #16
90005884:	9001      	str	r0, [sp, #4]
90005886:	f01d fa18 	bl	90022cba <_ZdlPvj>
9000588a:	9801      	ldr	r0, [sp, #4]
9000588c:	b003      	add	sp, #12
9000588e:	f85d fb04 	ldr.w	pc, [sp], #4
90005892:	bf00      	nop

90005894 <_ZThn4_N16Screen1Presenter6setADCEi>:
90005894:	6880      	ldr	r0, [r0, #8]
90005896:	6803      	ldr	r3, [r0, #0]
90005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000589a:	4718      	bx	r3

9000589c <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
9000589c:	4a06      	ldr	r2, [pc, #24]	; (900058b8 <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
9000589e:	60c1      	str	r1, [r0, #12]
Screen1Presenter::Screen1Presenter(Screen1View& v)
900058a0:	b410      	push	{r4}
    ModelListener() : model(0) {}
900058a2:	2400      	movs	r4, #0
900058a4:	6084      	str	r4, [r0, #8]
    : view(v)
900058a6:	f102 0408 	add.w	r4, r2, #8
900058aa:	3224      	adds	r2, #36	; 0x24
900058ac:	e9c0 4200 	strd	r4, r2, [r0]
}
900058b0:	f85d 4b04 	ldr.w	r4, [sp], #4
900058b4:	4770      	bx	lr
900058b6:	bf00      	nop
900058b8:	90026454 	.word	0x90026454

900058bc <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
900058bc:	4770      	bx	lr
900058be:	bf00      	nop

900058c0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
900058c0:	4b03      	ldr	r3, [pc, #12]	; (900058d0 <_ZN11Screen1ViewD1Ev+0x10>)
900058c2:	b510      	push	{r4, lr}
900058c4:	4604      	mov	r4, r0
900058c6:	6003      	str	r3, [r0, #0]
900058c8:	f7ff fc2a 	bl	90005120 <_ZN15Screen1ViewBaseD1Ev>
900058cc:	4620      	mov	r0, r4
900058ce:	bd10      	pop	{r4, pc}
900058d0:	90026490 	.word	0x90026490

900058d4 <_ZN11Screen1ViewD0Ev>:
900058d4:	4b05      	ldr	r3, [pc, #20]	; (900058ec <_ZN11Screen1ViewD0Ev+0x18>)
900058d6:	b510      	push	{r4, lr}
900058d8:	4604      	mov	r4, r0
900058da:	6003      	str	r3, [r0, #0]
900058dc:	f7ff fc20 	bl	90005120 <_ZN15Screen1ViewBaseD1Ev>
900058e0:	21ec      	movs	r1, #236	; 0xec
900058e2:	4620      	mov	r0, r4
900058e4:	f01d f9e9 	bl	90022cba <_ZdlPvj>
900058e8:	4620      	mov	r0, r4
900058ea:	bd10      	pop	{r4, pc}
900058ec:	90026490 	.word	0x90026490

900058f0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
900058f0:	b510      	push	{r4, lr}
900058f2:	4604      	mov	r4, r0
900058f4:	f7ff fcd8 	bl	900052a8 <_ZN15Screen1ViewBaseC1Ev>
900058f8:	4b01      	ldr	r3, [pc, #4]	; (90005900 <_ZN11Screen1ViewC1Ev+0x10>)
}
900058fa:	4620      	mov	r0, r4
Screen1View::Screen1View()
900058fc:	6023      	str	r3, [r4, #0]
}
900058fe:	bd10      	pop	{r4, pc}
90005900:	90026490 	.word	0x90026490

90005904 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
90005904:	f7ff bc0e 	b.w	90005124 <_ZN15Screen1ViewBase11setupScreenEv>

90005908 <_ZN11Screen1View6setADCEi>:

void Screen1View::setADC(int value) {
90005908:	b510      	push	{r4, lr}
9000590a:	4604      	mov	r4, r0
9000590c:	460b      	mov	r3, r1
	Unicode::snprintf(textArea1Buffer, TEXTAREA1_SIZE, "%d", value);
9000590e:	4a05      	ldr	r2, [pc, #20]	; (90005924 <_ZN11Screen1View6setADCEi+0x1c>)
90005910:	2104      	movs	r1, #4
90005912:	30e4      	adds	r0, #228	; 0xe4
90005914:	f011 fb36 	bl	90016f84 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea1.invalidate();
90005918:	f104 0098 	add.w	r0, r4, #152	; 0x98
};
9000591c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textArea1.invalidate();
90005920:	f00f bc15 	b.w	9001514e <_ZNK8touchgfx8Drawable10invalidateEv>
90005924:	90026484 	.word	0x90026484

90005928 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90005928:	f240 1c01 	movw	ip, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
9000592c:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
9000592e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90005932:	f44f 7388 	mov.w	r3, #272	; 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90005936:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
90005938:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
9000593a:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
9000593e:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
90005942:	4770      	bx	lr

90005944 <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
90005944:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
90005948:	2b01      	cmp	r3, #1
9000594a:	d102      	bne.n	90005952 <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
9000594c:	2300      	movs	r3, #0
9000594e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
90005952:	2000      	movs	r0, #0
90005954:	4770      	bx	lr
90005956:	bf00      	nop

90005958 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
90005958:	2000      	movs	r0, #0
9000595a:	4770      	bx	lr

9000595c <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
9000595c:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
9000595e:	6904      	ldr	r4, [r0, #16]
90005960:	8900      	ldrh	r0, [r0, #8]
90005962:	46a4      	mov	ip, r4
}
90005964:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90005968:	4760      	bx	ip
9000596a:	bf00      	nop

9000596c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
9000596c:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
9000596e:	68c4      	ldr	r4, [r0, #12]
90005970:	8900      	ldrh	r0, [r0, #8]
90005972:	46a4      	mov	ip, r4
}
90005974:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90005978:	4760      	bx	ip
9000597a:	bf00      	nop

9000597c <FT5336_GestureConfig>:
{
9000597c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005980:	f100 0718 	add.w	r7, r0, #24
{
90005984:	4688      	mov	r8, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005986:	7809      	ldrb	r1, [r1, #0]
90005988:	4638      	mov	r0, r7
9000598a:	f000 f975 	bl	90005c78 <ft5336_radian_value>
9000598e:	4605      	mov	r5, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90005990:	f898 1004 	ldrb.w	r1, [r8, #4]
90005994:	4638      	mov	r0, r7
90005996:	f000 f97d 	bl	90005c94 <ft5336_offset_left_right>
9000599a:	4405      	add	r5, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
9000599c:	f898 1008 	ldrb.w	r1, [r8, #8]
900059a0:	4638      	mov	r0, r7
900059a2:	f000 f985 	bl	90005cb0 <ft5336_offset_up_down>
900059a6:	4405      	add	r5, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
900059a8:	f898 100c 	ldrb.w	r1, [r8, #12]
900059ac:	4638      	mov	r0, r7
900059ae:	f000 f98d 	bl	90005ccc <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
900059b2:	f898 1010 	ldrb.w	r1, [r8, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
900059b6:	4405      	add	r5, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
900059b8:	4638      	mov	r0, r7
900059ba:	f000 f995 	bl	90005ce8 <ft5336_distance_up_down>
900059be:	4604      	mov	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
900059c0:	f898 1014 	ldrb.w	r1, [r8, #20]
900059c4:	4638      	mov	r0, r7
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
900059c6:	442c      	add	r4, r5
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
900059c8:	f000 f99c 	bl	90005d04 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
900059cc:	42c4      	cmn	r4, r0
}
900059ce:	bf14      	ite	ne
900059d0:	f04f 30ff 	movne.w	r0, #4294967295
900059d4:	2000      	moveq	r0, #0
900059d6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
900059da:	bf00      	nop

900059dc <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
900059dc:	3018      	adds	r0, #24
900059de:	f000 b9ad 	b.w	90005d3c <ft5336_chip_id>
900059e2:	bf00      	nop

900059e4 <FT5336_GetState>:
{
900059e4:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
900059e6:	f100 0518 	add.w	r5, r0, #24
{
900059ea:	b083      	sub	sp, #12
900059ec:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
900059ee:	4628      	mov	r0, r5
900059f0:	a901      	add	r1, sp, #4
900059f2:	f000 f933 	bl	90005c5c <ft5336_td_status>
900059f6:	bb10      	cbnz	r0, 90005a3e <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
900059f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900059fc:	2b05      	cmp	r3, #5
900059fe:	bf94      	ite	ls
90005a00:	4619      	movls	r1, r3
90005a02:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005a04:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005a06:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005a08:	4628      	mov	r0, r5
90005a0a:	2103      	movs	r1, #3
90005a0c:	eb0d 0203 	add.w	r2, sp, r3
90005a10:	f000 f912 	bl	90005c38 <ft5336_read_reg>
90005a14:	b9b0      	cbnz	r0, 90005a44 <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005a16:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005a1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005a1e:	0212      	lsls	r2, r2, #8
90005a20:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005a24:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005a26:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005a2a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005a2e:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005a30:	f89d 1007 	ldrb.w	r1, [sp, #7]
90005a34:	430b      	orrs	r3, r1
90005a36:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90005a3a:	b003      	add	sp, #12
90005a3c:	bd30      	pop	{r4, r5, pc}
90005a3e:	f04f 31ff 	mov.w	r1, #4294967295
90005a42:	e7df      	b.n	90005a04 <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
90005a44:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005a48:	e7f7      	b.n	90005a3a <FT5336_GetState+0x56>
90005a4a:	bf00      	nop

90005a4c <FT5336_GetMultiTouchState>:
{
90005a4c:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005a4e:	f100 0518 	add.w	r5, r0, #24
{
90005a52:	b088      	sub	sp, #32
90005a54:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005a56:	4628      	mov	r0, r5
90005a58:	4669      	mov	r1, sp
90005a5a:	f000 f8ff 	bl	90005c5c <ft5336_td_status>
90005a5e:	2800      	cmp	r0, #0
90005a60:	f040 809a 	bne.w	90005b98 <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005a64:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005a68:	2b05      	cmp	r3, #5
90005a6a:	bf94      	ite	ls
90005a6c:	4619      	movls	r1, r3
90005a6e:	2100      	movhi	r1, #0
90005a70:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005a72:	231e      	movs	r3, #30
90005a74:	466a      	mov	r2, sp
90005a76:	4628      	mov	r0, r5
90005a78:	2103      	movs	r1, #3
90005a7a:	f000 f8dd 	bl	90005c38 <ft5336_read_reg>
90005a7e:	2800      	cmp	r0, #0
90005a80:	f040 808d 	bne.w	90005b9e <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005a84:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005a88:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005a8c:	020a      	lsls	r2, r1, #8
90005a8e:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005a92:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005a94:	f89d c007 	ldrb.w	ip, [sp, #7]
90005a98:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005a9c:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005a9e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005aa2:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005aa6:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005aa8:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005aac:	6421      	str	r1, [r4, #64]	; 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005aae:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005ab0:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ab2:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005ab4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005ab8:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005aba:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005abe:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005ac2:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005ac4:	62e2      	str	r2, [r4, #44]	; 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005ac6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005aca:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005acc:	6563      	str	r3, [r4, #84]	; 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005ace:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ad0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005ad4:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005ad6:	6461      	str	r1, [r4, #68]	; 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ad8:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005adc:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005ae0:	65a2      	str	r2, [r4, #88]	; 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ae2:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005ae4:	6321      	str	r1, [r4, #48]	; 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ae6:	ea45 050c 	orr.w	r5, r5, ip
90005aea:	f402 6170 	and.w	r1, r2, #3840	; 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005aee:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005af2:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005af4:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005af6:	0212      	lsls	r2, r2, #8
90005af8:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005afc:	64a3      	str	r3, [r4, #72]	; 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005afe:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005b02:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b06:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005b08:	6363      	str	r3, [r4, #52]	; 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
90005b0e:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005b10:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b14:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005b16:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005b1c:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
90005b22:	4313      	orrs	r3, r2
90005b24:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005b26:	65e6      	str	r6, [r4, #92]	; 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005b28:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b2c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005b30:	020a      	lsls	r2, r1, #8
90005b32:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b36:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005b38:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005b3c:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b3e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005b42:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b44:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005b48:	64e1      	str	r1, [r4, #76]	; 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b4a:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005b4c:	f89d 1018 	ldrb.w	r1, [sp, #24]
90005b50:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b52:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005b54:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005b56:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005b5a:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005b5c:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005b60:	63a2      	str	r2, [r4, #56]	; 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005b62:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005b66:	f89d 301d 	ldrb.w	r3, [sp, #29]
90005b6a:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90005b6c:	6521      	str	r1, [r4, #80]	; 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005b6e:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005b70:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90005b74:	6625      	str	r5, [r4, #96]	; 0x60
90005b76:	6663      	str	r3, [r4, #100]	; 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b78:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90005b7c:	63e1      	str	r1, [r4, #60]	; 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005b7e:	021b      	lsls	r3, r3, #8
90005b80:	f89d 101b 	ldrb.w	r1, [sp, #27]
90005b84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90005b88:	430b      	orrs	r3, r1
90005b8a:	62a3      	str	r3, [r4, #40]	; 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005b8c:	f89d 3019 	ldrb.w	r3, [sp, #25]
90005b90:	4313      	orrs	r3, r2
90005b92:	6163      	str	r3, [r4, #20]
}
90005b94:	b008      	add	sp, #32
90005b96:	bd70      	pop	{r4, r5, r6, pc}
90005b98:	f04f 31ff 	mov.w	r1, #4294967295
90005b9c:	e768      	b.n	90005a70 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
90005b9e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005ba2:	e7f7      	b.n	90005b94 <FT5336_GetMultiTouchState+0x148>

90005ba4 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
90005ba4:	3018      	adds	r0, #24
90005ba6:	f000 b84f 	b.w	90005c48 <ft5336_gest_id>
90005baa:	bf00      	nop

90005bac <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90005bac:	2101      	movs	r1, #1
90005bae:	3018      	adds	r0, #24
90005bb0:	f000 b8b6 	b.w	90005d20 <ft5336_g_mode>

90005bb4 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90005bb4:	2100      	movs	r1, #0
90005bb6:	3018      	adds	r0, #24
90005bb8:	f000 b8b2 	b.w	90005d20 <ft5336_g_mode>

90005bbc <FT5336_Init>:
{
90005bbc:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
90005bbe:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
90005bc2:	b98d      	cbnz	r5, 90005be8 <FT5336_Init+0x2c>
    pObj->IO.Init();
90005bc4:	4606      	mov	r6, r0
90005bc6:	4604      	mov	r4, r0
90005bc8:	f856 3b18 	ldr.w	r3, [r6], #24
90005bcc:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90005bce:	4629      	mov	r1, r5
90005bd0:	4630      	mov	r0, r6
90005bd2:	f000 f8a5 	bl	90005d20 <ft5336_g_mode>
  if(ret != FT5336_OK)
90005bd6:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
90005bd8:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
90005bdc:	bf18      	it	ne
90005bde:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
90005be0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
90005be4:	4240      	negs	r0, r0
}
90005be6:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = FT5336_OK;
90005be8:	2000      	movs	r0, #0
}
90005bea:	bd70      	pop	{r4, r5, r6, pc}

90005bec <FT5336_ClearIT>:
90005bec:	2000      	movs	r0, #0
90005bee:	4770      	bx	lr

90005bf0 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
90005bf0:	b1d0      	cbz	r0, 90005c28 <FT5336_RegisterBusIO+0x38>
    pObj->IO.Address   = pIO->Address;
90005bf2:	890a      	ldrh	r2, [r1, #8]
{
90005bf4:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
90005bf6:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
90005bfa:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
90005bfc:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.ReadReg   = pIO->ReadReg;
90005c00:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
    pObj->IO.GetTick   = pIO->GetTick;
90005c04:	6949      	ldr	r1, [r1, #20]
    pObj->IO.ReadReg   = pIO->ReadReg;
90005c06:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
90005c08:	6141      	str	r1, [r0, #20]
    pObj->Ctx.WriteReg = WriteRegWrap;
90005c0a:	4a09      	ldr	r2, [pc, #36]	; (90005c30 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.ReadReg  = ReadRegWrap;
90005c0c:	4909      	ldr	r1, [pc, #36]	; (90005c34 <FT5336_RegisterBusIO+0x44>)
    pObj->IO.WriteReg  = pIO->WriteReg;
90005c0e:	60c4      	str	r4, [r0, #12]
    pObj->Ctx.handle   = pObj;
90005c10:	6200      	str	r0, [r0, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
90005c12:	e9c0 2106 	strd	r2, r1, [r0, #24]
    if(pObj->IO.Init != NULL)
90005c16:	b113      	cbz	r3, 90005c1e <FT5336_RegisterBusIO+0x2e>
}
90005c18:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
90005c1c:	4718      	bx	r3
}
90005c1e:	f04f 30ff 	mov.w	r0, #4294967295
90005c22:	f85d 4b04 	ldr.w	r4, [sp], #4
90005c26:	4770      	bx	lr
90005c28:	f04f 30ff 	mov.w	r0, #4294967295
90005c2c:	4770      	bx	lr
90005c2e:	bf00      	nop
90005c30:	9000596d 	.word	0x9000596d
90005c34:	9000595d 	.word	0x9000595d

90005c38 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
90005c38:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005c3a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90005c3e:	46a4      	mov	ip, r4
}
90005c40:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005c44:	4760      	bx	ip
90005c46:	bf00      	nop

90005c48 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90005c48:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005c4a:	2301      	movs	r3, #1
{
90005c4c:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005c4e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
90005c52:	4619      	mov	r1, r3
90005c54:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
90005c56:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005c5a:	4760      	bx	ip

90005c5c <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
90005c5c:	b538      	push	{r3, r4, r5, lr}
90005c5e:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005c60:	2301      	movs	r3, #1
90005c62:	2102      	movs	r1, #2
90005c64:	4622      	mov	r2, r4
90005c66:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
90005c6a:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
90005c6c:	b918      	cbnz	r0, 90005c76 <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
90005c6e:	7823      	ldrb	r3, [r4, #0]
90005c70:	f003 030f 	and.w	r3, r3, #15
90005c74:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
90005c76:	bd38      	pop	{r3, r4, r5, pc}

90005c78 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90005c78:	b510      	push	{r4, lr}
90005c7a:	460c      	mov	r4, r1
90005c7c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005c7e:	2301      	movs	r3, #1
90005c80:	2191      	movs	r1, #145	; 0x91
{
90005c82:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005c86:	f10d 0207 	add.w	r2, sp, #7
90005c8a:	6804      	ldr	r4, [r0, #0]
90005c8c:	6880      	ldr	r0, [r0, #8]
90005c8e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
90005c90:	b002      	add	sp, #8
90005c92:	bd10      	pop	{r4, pc}

90005c94 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90005c94:	b510      	push	{r4, lr}
90005c96:	460c      	mov	r4, r1
90005c98:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005c9a:	2301      	movs	r3, #1
90005c9c:	2192      	movs	r1, #146	; 0x92
{
90005c9e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005ca2:	f10d 0207 	add.w	r2, sp, #7
90005ca6:	6804      	ldr	r4, [r0, #0]
90005ca8:	6880      	ldr	r0, [r0, #8]
90005caa:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
90005cac:	b002      	add	sp, #8
90005cae:	bd10      	pop	{r4, pc}

90005cb0 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90005cb0:	b510      	push	{r4, lr}
90005cb2:	460c      	mov	r4, r1
90005cb4:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005cb6:	2301      	movs	r3, #1
90005cb8:	2193      	movs	r1, #147	; 0x93
{
90005cba:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005cbe:	f10d 0207 	add.w	r2, sp, #7
90005cc2:	6804      	ldr	r4, [r0, #0]
90005cc4:	6880      	ldr	r0, [r0, #8]
90005cc6:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
90005cc8:	b002      	add	sp, #8
90005cca:	bd10      	pop	{r4, pc}

90005ccc <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90005ccc:	b510      	push	{r4, lr}
90005cce:	460c      	mov	r4, r1
90005cd0:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005cd2:	2301      	movs	r3, #1
90005cd4:	2194      	movs	r1, #148	; 0x94
{
90005cd6:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005cda:	f10d 0207 	add.w	r2, sp, #7
90005cde:	6804      	ldr	r4, [r0, #0]
90005ce0:	6880      	ldr	r0, [r0, #8]
90005ce2:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
90005ce4:	b002      	add	sp, #8
90005ce6:	bd10      	pop	{r4, pc}

90005ce8 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90005ce8:	b510      	push	{r4, lr}
90005cea:	460c      	mov	r4, r1
90005cec:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005cee:	2301      	movs	r3, #1
90005cf0:	2195      	movs	r1, #149	; 0x95
{
90005cf2:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005cf6:	f10d 0207 	add.w	r2, sp, #7
90005cfa:	6804      	ldr	r4, [r0, #0]
90005cfc:	6880      	ldr	r0, [r0, #8]
90005cfe:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
90005d00:	b002      	add	sp, #8
90005d02:	bd10      	pop	{r4, pc}

90005d04 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90005d04:	b510      	push	{r4, lr}
90005d06:	460c      	mov	r4, r1
90005d08:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005d0a:	2301      	movs	r3, #1
90005d0c:	2196      	movs	r1, #150	; 0x96
{
90005d0e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005d12:	f10d 0207 	add.w	r2, sp, #7
90005d16:	6804      	ldr	r4, [r0, #0]
90005d18:	6880      	ldr	r0, [r0, #8]
90005d1a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
90005d1c:	b002      	add	sp, #8
90005d1e:	bd10      	pop	{r4, pc}

90005d20 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90005d20:	b510      	push	{r4, lr}
90005d22:	460c      	mov	r4, r1
90005d24:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005d26:	2301      	movs	r3, #1
90005d28:	21a4      	movs	r1, #164	; 0xa4
{
90005d2a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90005d2e:	f10d 0207 	add.w	r2, sp, #7
90005d32:	6804      	ldr	r4, [r0, #0]
90005d34:	6880      	ldr	r0, [r0, #8]
90005d36:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
90005d38:	b002      	add	sp, #8
90005d3a:	bd10      	pop	{r4, pc}

90005d3c <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90005d3c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005d3e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
90005d42:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005d44:	2301      	movs	r3, #1
90005d46:	46a4      	mov	ip, r4
90005d48:	21a8      	movs	r1, #168	; 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
90005d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90005d4e:	4760      	bx	ip

90005d50 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90005d52:	680b      	ldr	r3, [r1, #0]
{
90005d54:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90005d56:	4c2b      	ldr	r4, [pc, #172]	; (90005e04 <MT48LC4M32B2_Init+0xb4>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
90005d5c:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
90005d5e:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
90005d60:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005d62:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
90005d64:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90005d66:	2301      	movs	r3, #1
90005d68:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
90005d6a:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005d6c:	f007 f83c 	bl	9000cde8 <HAL_SDRAM_SendCommand>
90005d70:	2800      	cmp	r0, #0
90005d72:	d143      	bne.n	90005dfc <MT48LC4M32B2_Init+0xac>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90005d74:	f000 ff48 	bl	90006c08 <HAL_GetTick>
90005d78:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
90005d7a:	f000 ff45 	bl	90006c08 <HAL_GetTick>
90005d7e:	4286      	cmp	r6, r0
90005d80:	d0fb      	beq.n	90005d7a <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90005d82:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90005d84:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
90005d86:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005d88:	491e      	ldr	r1, [pc, #120]	; (90005e04 <MT48LC4M32B2_Init+0xb4>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90005d8a:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
90005d8c:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
90005d8e:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005d90:	4638      	mov	r0, r7
90005d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
90005d96:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
90005d98:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005d9a:	f007 f825 	bl	9000cde8 <HAL_SDRAM_SendCommand>
90005d9e:	bb68      	cbnz	r0, 90005dfc <MT48LC4M32B2_Init+0xac>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005da0:	4918      	ldr	r1, [pc, #96]	; (90005e04 <MT48LC4M32B2_Init+0xb4>)
90005da2:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
90005da4:	e9d5 2300 	ldrd	r2, r3, [r5]
90005da8:	e9c4 3200 	strd	r3, r2, [r4]
  Command.AutoRefreshNumber      = 8;
90005dac:	2208      	movs	r2, #8
90005dae:	2300      	movs	r3, #0
90005db0:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
90005db8:	f007 f816 	bl	9000cde8 <HAL_SDRAM_SendCommand>
90005dbc:	b9f0      	cbnz	r0, 90005dfc <MT48LC4M32B2_Init+0xac>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005dbe:	4911      	ldr	r1, [pc, #68]	; (90005e04 <MT48LC4M32B2_Init+0xb4>)
90005dc0:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90005dc2:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
90005dc6:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
90005dc8:	696a      	ldr	r2, [r5, #20]
90005dca:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
90005dcc:	69aa      	ldr	r2, [r5, #24]
90005dce:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90005dd0:	69ea      	ldr	r2, [r5, #28]
90005dd2:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
90005dd4:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
90005dd6:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90005dd8:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
90005dda:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90005de2:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90005de4:	f007 f800 	bl	9000cde8 <HAL_SDRAM_SendCommand>
90005de8:	b940      	cbnz	r0, 90005dfc <MT48LC4M32B2_Init+0xac>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90005dea:	68a9      	ldr	r1, [r5, #8]
90005dec:	4638      	mov	r0, r7
90005dee:	f007 f81b 	bl	9000ce28 <HAL_SDRAM_ProgramRefreshRate>
90005df2:	3800      	subs	r0, #0
90005df4:	bf18      	it	ne
90005df6:	2001      	movne	r0, #1
90005df8:	4240      	negs	r0, r0
}
90005dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
90005dfc:	f04f 30ff 	mov.w	r0, #4294967295
}
90005e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90005e02:	bf00      	nop
90005e04:	2400b220 	.word	0x2400b220

90005e08 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
90005e08:	4a10      	ldr	r2, [pc, #64]	; (90005e4c <BSP_I2C4_DeInit+0x44>)
{
90005e0a:	b508      	push	{r3, lr}
  I2c4InitCounter--;
90005e0c:	6813      	ldr	r3, [r2, #0]
90005e0e:	3b01      	subs	r3, #1
90005e10:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90005e12:	b10b      	cbz	r3, 90005e18 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
90005e14:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
90005e16:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90005e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90005e1c:	480c      	ldr	r0, [pc, #48]	; (90005e50 <BSP_I2C4_DeInit+0x48>)
90005e1e:	f002 f95d 	bl	900080dc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90005e22:	480b      	ldr	r0, [pc, #44]	; (90005e50 <BSP_I2C4_DeInit+0x48>)
90005e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90005e28:	f002 f958 	bl	900080dc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90005e2c:	4a09      	ldr	r2, [pc, #36]	; (90005e54 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90005e2e:	480a      	ldr	r0, [pc, #40]	; (90005e58 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
90005e30:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
90005e34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90005e38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90005e3c:	f002 fbee 	bl	9000861c <HAL_I2C_DeInit>
90005e40:	2800      	cmp	r0, #0
90005e42:	d0e7      	beq.n	90005e14 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
90005e44:	f06f 0007 	mvn.w	r0, #7
}
90005e48:	bd08      	pop	{r3, pc}
90005e4a:	bf00      	nop
90005e4c:	2400b230 	.word	0x2400b230
90005e50:	58020c00 	.word	0x58020c00
90005e54:	58024400 	.word	0x58024400
90005e58:	2400bc38 	.word	0x2400bc38

90005e5c <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
90005e5c:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90005e5e:	2201      	movs	r2, #1
{
90005e60:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
90005e62:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90005e66:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90005e6a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90005e6e:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
90005e72:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
90005e74:	f002 fb7a 	bl	9000856c <HAL_I2C_Init>
90005e78:	b108      	cbz	r0, 90005e7e <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
90005e7a:	2001      	movs	r0, #1
}
90005e7c:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90005e7e:	4601      	mov	r1, r0
90005e80:	4620      	mov	r0, r4
90005e82:	f002 fe85 	bl	90008b90 <HAL_I2CEx_ConfigAnalogFilter>
90005e86:	2800      	cmp	r0, #0
90005e88:	d1f7      	bne.n	90005e7a <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90005e8a:	4601      	mov	r1, r0
90005e8c:	4620      	mov	r0, r4
90005e8e:	f002 fea9 	bl	90008be4 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
90005e92:	3800      	subs	r0, #0
90005e94:	bf18      	it	ne
90005e96:	2001      	movne	r0, #1
}
90005e98:	bd10      	pop	{r4, pc}
90005e9a:	bf00      	nop

90005e9c <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
90005e9c:	4b99      	ldr	r3, [pc, #612]	; (90006104 <BSP_I2C4_Init+0x268>)
  hbus_i2c4.Instance = BUS_I2C4;
90005e9e:	489a      	ldr	r0, [pc, #616]	; (90006108 <BSP_I2C4_Init+0x26c>)
90005ea0:	4a9a      	ldr	r2, [pc, #616]	; (9000610c <BSP_I2C4_Init+0x270>)
  if (I2c4InitCounter == 0U)
90005ea2:	6819      	ldr	r1, [r3, #0]
{
90005ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005ea8:	b09f      	sub	sp, #124	; 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
90005eaa:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
90005eac:	9103      	str	r1, [sp, #12]
90005eae:	b119      	cbz	r1, 90005eb8 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
90005eb0:	2000      	movs	r0, #0
}
90005eb2:	b01f      	add	sp, #124	; 0x7c
90005eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
90005eb8:	2201      	movs	r2, #1
90005eba:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90005ebc:	f002 fe62 	bl	90008b84 <HAL_I2C_GetState>
90005ec0:	2800      	cmp	r0, #0
90005ec2:	d1f5      	bne.n	90005eb0 <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90005ec4:	4c92      	ldr	r4, [pc, #584]	; (90006110 <BSP_I2C4_Init+0x274>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90005ec6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
90005eca:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90005ecc:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90005ece:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90005ed2:	2600      	movs	r6, #0
90005ed4:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90005ed6:	f043 0308 	orr.w	r3, r3, #8
90005eda:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90005ede:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90005ee2:	f003 0308 	and.w	r3, r3, #8
90005ee6:	9315      	str	r3, [sp, #84]	; 0x54
90005ee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90005eea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90005eee:	f043 0308 	orr.w	r3, r3, #8
90005ef2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90005ef6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90005efa:	951c      	str	r5, [sp, #112]	; 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90005efc:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90005f00:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90005f04:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90005f06:	a918      	add	r1, sp, #96	; 0x60
90005f08:	4882      	ldr	r0, [pc, #520]	; (90006114 <BSP_I2C4_Init+0x278>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90005f0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90005f0c:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90005f10:	f001 ffaa 	bl	90007e68 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90005f14:	2312      	movs	r3, #18
90005f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90005f1a:	a918      	add	r1, sp, #96	; 0x60
90005f1c:	487d      	ldr	r0, [pc, #500]	; (90006114 <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90005f1e:	951c      	str	r5, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90005f20:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
90005f24:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90005f28:	f001 ff9e 	bl	90007e68 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
90005f2c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90005f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90005f34:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
90005f38:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90005f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
90005f40:	9317      	str	r3, [sp, #92]	; 0x5c
90005f42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  BUS_I2C4_FORCE_RESET();
90005f44:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90005f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90005f4c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
90005f50:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90005f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90005f58:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90005f5c:	f005 fb9e 	bl	9000b69c <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90005f60:	2800      	cmp	r0, #0
90005f62:	f000 81ed 	beq.w	90006340 <BSP_I2C4_Init+0x4a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90005f66:	4b6c      	ldr	r3, [pc, #432]	; (90006118 <BSP_I2C4_Init+0x27c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
90005f68:	f04f 0b10 	mov.w	fp, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90005f6c:	9e03      	ldr	r6, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90005f6e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90005f72:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 90006120 <BSP_I2C4_Init+0x284>
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90005f76:	4635      	mov	r5, r6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90005f78:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90005f7c:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90005f7e:	9702      	str	r7, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90005f80:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90005f84:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90005f88:	0079      	lsls	r1, r7, #1
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90005f8a:	f1c2 0232 	rsb	r2, r2, #50	; 0x32
  if (tsdadel_min <= 0)
90005f8e:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
90005f92:	4b62      	ldr	r3, [pc, #392]	; (9000611c <BSP_I2C4_Init+0x280>)
90005f94:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90005f98:	9113      	str	r1, [sp, #76]	; 0x4c
90005f9a:	681b      	ldr	r3, [r3, #0]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90005f9c:	4699      	mov	r9, r3
90005f9e:	930a      	str	r3, [sp, #40]	; 0x28
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90005fa0:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
90005fa4:	46b8      	mov	r8, r7
90005fa6:	eb07 0347 	add.w	r3, r7, r7, lsl #1
90005faa:	bf94      	ite	ls
90005fac:	2101      	movls	r1, #1
90005fae:	2100      	movhi	r1, #0
90005fb0:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
90005fb4:	f001 0101 	and.w	r1, r1, #1
90005fb8:	eb07 0287 	add.w	r2, r7, r7, lsl #2
90005fbc:	bf38      	it	cc
90005fbe:	2100      	movcc	r1, #0
90005fc0:	429c      	cmp	r4, r3
90005fc2:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
90005fc6:	9105      	str	r1, [sp, #20]
90005fc8:	bf8c      	ite	hi
90005fca:	2100      	movhi	r1, #0
90005fcc:	2101      	movls	r1, #1
90005fce:	459c      	cmp	ip, r3
90005fd0:	bf38      	it	cc
90005fd2:	2100      	movcc	r1, #0
90005fd4:	ebb4 0f87 	cmp.w	r4, r7, lsl #2
90005fd8:	9106      	str	r1, [sp, #24]
90005fda:	eb07 0142 	add.w	r1, r7, r2, lsl #1
90005fde:	9104      	str	r1, [sp, #16]
90005fe0:	eb07 0183 	add.w	r1, r7, r3, lsl #2
90005fe4:	9111      	str	r1, [sp, #68]	; 0x44
90005fe6:	bf94      	ite	ls
90005fe8:	2101      	movls	r1, #1
90005fea:	2100      	movhi	r1, #0
90005fec:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
90005ff0:	f001 0e01 	and.w	lr, r1, #1
90005ff4:	bf38      	it	cc
90005ff6:	f04f 0e00 	movcc.w	lr, #0
90005ffa:	4294      	cmp	r4, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90005ffc:	f04f 0100 	mov.w	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90006000:	f8cd e01c 	str.w	lr, [sp, #28]
90006004:	bf8c      	ite	hi
90006006:	f04f 0e00 	movhi.w	lr, #0
9000600a:	f04f 0e01 	movls.w	lr, #1
9000600e:	4594      	cmp	ip, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90006010:	9101      	str	r1, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90006012:	bf38      	it	cc
90006014:	f04f 0e00 	movcc.w	lr, #0
90006018:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
9000601c:	bf98      	it	ls
9000601e:	2101      	movls	r1, #1
90006020:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
90006024:	f8cd e020 	str.w	lr, [sp, #32]
90006028:	f001 0101 	and.w	r1, r1, #1
9000602c:	bf38      	it	cc
9000602e:	2100      	movcc	r1, #0
90006030:	4284      	cmp	r4, r0
90006032:	9109      	str	r1, [sp, #36]	; 0x24
90006034:	4601      	mov	r1, r0
90006036:	bf8c      	ite	hi
90006038:	2000      	movhi	r0, #0
9000603a:	2001      	movls	r0, #1
9000603c:	458c      	cmp	ip, r1
9000603e:	bf38      	it	cc
90006040:	2000      	movcc	r0, #0
90006042:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
90006046:	900b      	str	r0, [sp, #44]	; 0x2c
90006048:	bf94      	ite	ls
9000604a:	2001      	movls	r0, #1
9000604c:	2000      	movhi	r0, #0
9000604e:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
90006052:	f000 0001 	and.w	r0, r0, #1
90006056:	bf38      	it	cc
90006058:	2000      	movcc	r0, #0
9000605a:	900c      	str	r0, [sp, #48]	; 0x30
9000605c:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
90006060:	4284      	cmp	r4, r0
90006062:	bf8c      	ite	hi
90006064:	f04f 0e00 	movhi.w	lr, #0
90006068:	f04f 0e01 	movls.w	lr, #1
9000606c:	4584      	cmp	ip, r0
9000606e:	bf38      	it	cc
90006070:	f04f 0e00 	movcc.w	lr, #0
90006074:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
90006078:	4670      	mov	r0, lr
9000607a:	bf94      	ite	ls
9000607c:	2001      	movls	r0, #1
9000607e:	2000      	movhi	r0, #0
90006080:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
90006084:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
90006088:	f04f 0e00 	mov.w	lr, #0
9000608c:	f000 0001 	and.w	r0, r0, #1
90006090:	bf38      	it	cc
90006092:	2000      	movcc	r0, #0
90006094:	900e      	str	r0, [sp, #56]	; 0x38
90006096:	9804      	ldr	r0, [sp, #16]
90006098:	4284      	cmp	r4, r0
9000609a:	4602      	mov	r2, r0
9000609c:	bf8c      	ite	hi
9000609e:	2200      	movhi	r2, #0
900060a0:	2201      	movls	r2, #1
900060a2:	4584      	cmp	ip, r0
900060a4:	bf38      	it	cc
900060a6:	2200      	movcc	r2, #0
900060a8:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
900060ac:	920f      	str	r2, [sp, #60]	; 0x3c
900060ae:	bf94      	ite	ls
900060b0:	2201      	movls	r2, #1
900060b2:	2200      	movhi	r2, #0
900060b4:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
900060b8:	f002 0201 	and.w	r2, r2, #1
900060bc:	bf38      	it	cc
900060be:	2200      	movcc	r2, #0
900060c0:	9210      	str	r2, [sp, #64]	; 0x40
900060c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
900060c4:	4294      	cmp	r4, r2
900060c6:	4613      	mov	r3, r2
900060c8:	bf8c      	ite	hi
900060ca:	2300      	movhi	r3, #0
900060cc:	2301      	movls	r3, #1
900060ce:	4594      	cmp	ip, r2
900060d0:	bf38      	it	cc
900060d2:	2300      	movcc	r3, #0
900060d4:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
900060d8:	9311      	str	r3, [sp, #68]	; 0x44
900060da:	bf94      	ite	ls
900060dc:	2301      	movls	r3, #1
900060de:	2300      	movhi	r3, #0
900060e0:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
900060e4:	f003 0301 	and.w	r3, r3, #1
900060e8:	bf38      	it	cc
900060ea:	2300      	movcc	r3, #0
900060ec:	9312      	str	r3, [sp, #72]	; 0x48
900060ee:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
900060f2:	429c      	cmp	r4, r3
900060f4:	bf8c      	ite	hi
900060f6:	2200      	movhi	r2, #0
900060f8:	2201      	movls	r2, #1
900060fa:	459c      	cmp	ip, r3
900060fc:	bf38      	it	cc
900060fe:	2200      	movcc	r2, #0
90006100:	9204      	str	r2, [sp, #16]
90006102:	e014      	b.n	9000612e <BSP_I2C4_Init+0x292>
90006104:	2400b230 	.word	0x2400b230
90006108:	2400bc38 	.word	0x2400bc38
9000610c:	58001c00 	.word	0x58001c00
90006110:	58024400 	.word	0x58024400
90006114:	58020c00 	.word	0x58020c00
90006118:	3b9aca00 	.word	0x3b9aca00
9000611c:	2400bc34 	.word	0x2400bc34
90006120:	2400b234 	.word	0x2400b234
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90006124:	f1be 0f10 	cmp.w	lr, #16
90006128:	44b8      	add	r8, r7
9000612a:	f000 826b 	beq.w	90006604 <BSP_I2C4_Init+0x768>
      if (tscldel >= (uint32_t)tscldel_min)
9000612e:	f5b8 7faf 	cmp.w	r8, #350	; 0x15e
90006132:	4673      	mov	r3, lr
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90006134:	f10e 0e01 	add.w	lr, lr, #1
      if (tscldel >= (uint32_t)tscldel_min)
90006138:	d3f4      	bcc.n	90006124 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
9000613a:	ebbb 0105 	subs.w	r1, fp, r5
9000613e:	bf18      	it	ne
90006140:	2101      	movne	r1, #1
90006142:	2c00      	cmp	r4, #0
90006144:	bf18      	it	ne
90006146:	2100      	movne	r1, #0
90006148:	2900      	cmp	r1, #0
9000614a:	f040 8249 	bne.w	900065e0 <BSP_I2C4_Init+0x744>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
9000614e:	42bc      	cmp	r4, r7
90006150:	bf8c      	ite	hi
90006152:	2100      	movhi	r1, #0
90006154:	2101      	movls	r1, #1
90006156:	45bc      	cmp	ip, r7
90006158:	bf38      	it	cc
9000615a:	2100      	movcc	r1, #0
            if(presc != prev_presc)
9000615c:	45ab      	cmp	fp, r5
9000615e:	bf0c      	ite	eq
90006160:	2100      	moveq	r1, #0
90006162:	f001 0101 	andne.w	r1, r1, #1
90006166:	2900      	cmp	r1, #0
90006168:	f000 821e 	beq.w	900065a8 <BSP_I2C4_Init+0x70c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000616c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006170:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006174:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006176:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000617a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000617e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006182:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006184:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006186:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006188:	f200 8116 	bhi.w	900063b8 <BSP_I2C4_Init+0x51c>
9000618c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000618e:	9e06      	ldr	r6, [sp, #24]
90006190:	45ab      	cmp	fp, r5
90006192:	bf0c      	ite	eq
90006194:	2600      	moveq	r6, #0
90006196:	f006 0601 	andne.w	r6, r6, #1
9000619a:	2e00      	cmp	r6, #0
9000619c:	f000 81cc 	beq.w	90006538 <BSP_I2C4_Init+0x69c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061a0:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900061a4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900061a8:	2103      	movs	r1, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061aa:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900061ae:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061b2:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900061b6:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900061b8:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061ba:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900061bc:	f200 80fc 	bhi.w	900063b8 <BSP_I2C4_Init+0x51c>
900061c0:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900061c2:	9808      	ldr	r0, [sp, #32]
900061c4:	455d      	cmp	r5, fp
900061c6:	bf0c      	ite	eq
900061c8:	2000      	moveq	r0, #0
900061ca:	f000 0001 	andne.w	r0, r0, #1
900061ce:	2800      	cmp	r0, #0
900061d0:	f000 81e8 	beq.w	900065a4 <BSP_I2C4_Init+0x708>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061d4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900061d8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900061dc:	2105      	movs	r1, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061de:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900061e2:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061e6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900061ea:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900061ec:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900061ee:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900061f0:	f200 80e2 	bhi.w	900063b8 <BSP_I2C4_Init+0x51c>
900061f4:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900061f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
900061f8:	455d      	cmp	r5, fp
900061fa:	bf0c      	ite	eq
900061fc:	2100      	moveq	r1, #0
900061fe:	f001 0101 	andne.w	r1, r1, #1
90006202:	2900      	cmp	r1, #0
90006204:	f000 817c 	beq.w	90006500 <BSP_I2C4_Init+0x664>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006208:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000620c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006210:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006212:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006216:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000621a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000621e:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006220:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006222:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006224:	f200 80c8 	bhi.w	900063b8 <BSP_I2C4_Init+0x51c>
90006228:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000622a:	980d      	ldr	r0, [sp, #52]	; 0x34
9000622c:	455d      	cmp	r5, fp
9000622e:	bf0c      	ite	eq
90006230:	2000      	moveq	r0, #0
90006232:	f000 0001 	andne.w	r0, r0, #1
90006236:	2800      	cmp	r0, #0
90006238:	f000 8144 	beq.w	900064c4 <BSP_I2C4_Init+0x628>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000623c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006240:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006244:	2109      	movs	r1, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006246:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000624a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000624e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006252:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006254:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006256:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006258:	f200 80ae 	bhi.w	900063b8 <BSP_I2C4_Init+0x51c>
9000625c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000625e:	990f      	ldr	r1, [sp, #60]	; 0x3c
90006260:	455d      	cmp	r5, fp
90006262:	bf0c      	ite	eq
90006264:	2100      	moveq	r1, #0
90006266:	f001 0101 	andne.w	r1, r1, #1
9000626a:	2900      	cmp	r1, #0
9000626c:	d072      	beq.n	90006354 <BSP_I2C4_Init+0x4b8>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000626e:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006272:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006276:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006278:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000627c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006280:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006284:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006286:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006288:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000628a:	f200 8095 	bhi.w	900063b8 <BSP_I2C4_Init+0x51c>
9000628e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006290:	9811      	ldr	r0, [sp, #68]	; 0x44
90006292:	455d      	cmp	r5, fp
90006294:	bf0c      	ite	eq
90006296:	2000      	moveq	r0, #0
90006298:	f000 0001 	andne.w	r0, r0, #1
9000629c:	2800      	cmp	r0, #0
9000629e:	d073      	beq.n	90006388 <BSP_I2C4_Init+0x4ec>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062a0:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900062a4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062a8:	210d      	movs	r1, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062aa:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062ae:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062b2:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900062b6:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062b8:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062ba:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062bc:	d87c      	bhi.n	900063b8 <BSP_I2C4_Init+0x51c>
900062be:	4601      	mov	r1, r0
900062c0:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900062c2:	9e04      	ldr	r6, [sp, #16]
900062c4:	455d      	cmp	r5, fp
900062c6:	bf0c      	ite	eq
900062c8:	2600      	moveq	r6, #0
900062ca:	f006 0601 	andne.w	r6, r6, #1
900062ce:	2e00      	cmp	r6, #0
900062d0:	f000 80f6 	beq.w	900064c0 <BSP_I2C4_Init+0x624>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062d4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900062d8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062dc:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
900062e0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062e4:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900062e8:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900062ea:	f04f 030f 	mov.w	r3, #15
900062ee:	6093      	str	r3, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900062f0:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900062f2:	d861      	bhi.n	900063b8 <BSP_I2C4_Init+0x51c>
900062f4:	46ab      	mov	fp, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
900062f6:	e715      	b.n	90006124 <BSP_I2C4_Init+0x288>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900062f8:	9a07      	ldr	r2, [sp, #28]
900062fa:	9b08      	ldr	r3, [sp, #32]
900062fc:	3214      	adds	r2, #20
900062fe:	3301      	adds	r3, #1
90006300:	9207      	str	r2, [sp, #28]
90006302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90006304:	9308      	str	r3, [sp, #32]
90006306:	4293      	cmp	r3, r2
90006308:	d178      	bne.n	900063fc <BSP_I2C4_Init+0x560>
        if (idx < I2C_VALID_TIMING_NBR)
9000630a:	297f      	cmp	r1, #127	; 0x7f
9000630c:	d818      	bhi.n	90006340 <BSP_I2C4_Init+0x4a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000630e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
90006312:	990b      	ldr	r1, [sp, #44]	; 0x2c
90006314:	eb01 0283 	add.w	r2, r1, r3, lsl #2
90006318:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
9000631c:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
9000631e:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90006320:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90006322:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90006326:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
9000632a:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000632e:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90006330:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90006332:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
90006334:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
90006338:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
9000633a:	430b      	orrs	r3, r1
9000633c:	4313      	orrs	r3, r2
9000633e:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90006340:	9903      	ldr	r1, [sp, #12]
90006342:	48ba      	ldr	r0, [pc, #744]	; (9000662c <BSP_I2C4_Init+0x790>)
90006344:	f7ff fd8a 	bl	90005e5c <MX_I2C4_Init>
90006348:	2800      	cmp	r0, #0
9000634a:	f43f adb1 	beq.w	90005eb0 <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
9000634e:	f06f 0007 	mvn.w	r0, #7
  return ret;
90006352:	e5ae      	b.n	90005eb2 <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
90006354:	4606      	mov	r6, r0
90006356:	9910      	ldr	r1, [sp, #64]	; 0x40
90006358:	455d      	cmp	r5, fp
9000635a:	bf0c      	ite	eq
9000635c:	2100      	moveq	r1, #0
9000635e:	f001 0101 	andne.w	r1, r1, #1
90006362:	2900      	cmp	r1, #0
90006364:	f000 80ca 	beq.w	900064fc <BSP_I2C4_Init+0x660>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006368:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000636c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006370:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006372:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006376:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000637a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000637e:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006380:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006382:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006384:	d818      	bhi.n	900063b8 <BSP_I2C4_Init+0x51c>
90006386:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006388:	9e12      	ldr	r6, [sp, #72]	; 0x48
9000638a:	455d      	cmp	r5, fp
9000638c:	bf0c      	ite	eq
9000638e:	2600      	moveq	r6, #0
90006390:	f006 0601 	andne.w	r6, r6, #1
90006394:	2e00      	cmp	r6, #0
90006396:	d094      	beq.n	900062c2 <BSP_I2C4_Init+0x426>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006398:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000639c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063a0:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
900063a4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900063a8:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900063ac:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900063ae:	f04f 030e 	mov.w	r3, #14
900063b2:	6093      	str	r3, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900063b4:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900063b6:	d99d      	bls.n	900062f4 <BSP_I2C4_Init+0x458>
900063b8:	4b9d      	ldr	r3, [pc, #628]	; (90006630 <BSP_I2C4_Init+0x794>)
900063ba:	920b      	str	r2, [sp, #44]	; 0x2c
900063bc:	f8c3 9000 	str.w	r9, [r3]
              I2c_valid_timing_nbr ++;
900063c0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
900063c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900063c6:	f240 4201 	movw	r2, #1025	; 0x401
900063ca:	f240 2657 	movw	r6, #599	; 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
900063ce:	f640 1ac4 	movw	sl, #2500	; 0x9c4
900063d2:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
900063d4:	f240 4b12 	movw	fp, #1042	; 0x412
900063d8:	920d      	str	r2, [sp, #52]	; 0x34
900063da:	9a02      	ldr	r2, [sp, #8]
900063dc:	4296      	cmp	r6, r2
900063de:	bf38      	it	cc
900063e0:	4616      	movcc	r6, r2
900063e2:	4a94      	ldr	r2, [pc, #592]	; (90006634 <BSP_I2C4_Init+0x798>)
900063e4:	9207      	str	r2, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
900063e6:	2200      	movs	r2, #0
900063e8:	9208      	str	r2, [sp, #32]
900063ea:	f04f 32ff 	mov.w	r2, #4294967295
900063ee:	4611      	mov	r1, r2
900063f0:	f103 0232 	add.w	r2, r3, #50	; 0x32
900063f4:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
900063f8:	920c      	str	r2, [sp, #48]	; 0x30
900063fa:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
900063fc:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
900063fe:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90006402:	6818      	ldr	r0, [r3, #0]
90006404:	9b02      	ldr	r3, [sp, #8]
90006406:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
9000640a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9000640c:	1a1b      	subs	r3, r3, r0
9000640e:	ea4f 0943 	mov.w	r9, r3, lsl #1
90006412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90006414:	eb03 0e00 	add.w	lr, r3, r0
90006418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9000641a:	4403      	add	r3, r0
9000641c:	9309      	str	r3, [sp, #36]	; 0x24
9000641e:	e006      	b.n	9000642e <BSP_I2C4_Init+0x592>
90006420:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
90006424:	4486      	add	lr, r0
90006426:	eba9 0900 	sub.w	r9, r9, r0
9000642a:	f43f af65 	beq.w	900062f8 <BSP_I2C4_Init+0x45c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
9000642e:	f240 5214 	movw	r2, #1300	; 0x514
90006432:	f8cd 8004 	str.w	r8, [sp, #4]
90006436:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
9000643a:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
9000643e:	4596      	cmp	lr, r2
90006440:	d9ee      	bls.n	90006420 <BSP_I2C4_Init+0x584>
90006442:	9a02      	ldr	r2, [sp, #8]
90006444:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
90006448:	d2ea      	bcs.n	90006420 <BSP_I2C4_Init+0x584>
9000644a:	f640 0c34 	movw	ip, #2100	; 0x834
9000644e:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006450:	f8cd 8010 	str.w	r8, [sp, #16]
90006454:	2200      	movs	r2, #0
90006456:	ebac 0c03 	sub.w	ip, ip, r3
9000645a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000645c:	f8cd e014 	str.w	lr, [sp, #20]
90006460:	4473      	add	r3, lr
90006462:	f8cd 9018 	str.w	r9, [sp, #24]
90006466:	f8dd 801c 	ldr.w	r8, [sp, #28]
9000646a:	468e      	mov	lr, r1
9000646c:	f8dd 9020 	ldr.w	r9, [sp, #32]
90006470:	e005      	b.n	9000647e <BSP_I2C4_Init+0x5e2>
90006472:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90006476:	eba4 0400 	sub.w	r4, r4, r0
9000647a:	4403      	add	r3, r0
9000647c:	d01a      	beq.n	900064b4 <BSP_I2C4_Init+0x618>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
9000647e:	eb0c 0103 	add.w	r1, ip, r3
90006482:	4617      	mov	r7, r2
90006484:	f203 15a1 	addw	r5, r3, #417	; 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90006488:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
9000648a:	42b1      	cmp	r1, r6
9000648c:	d9f1      	bls.n	90006472 <BSP_I2C4_Init+0x5d6>
9000648e:	455d      	cmp	r5, fp
90006490:	d8ef      	bhi.n	90006472 <BSP_I2C4_Init+0x5d6>
            if (error < 0)
90006492:	ea33 0123 	bics.w	r1, r3, r3, asr #32
90006496:	bf28      	it	cs
90006498:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
9000649a:	458a      	cmp	sl, r1
9000649c:	d9e9      	bls.n	90006472 <BSP_I2C4_Init+0x5d6>
              I2c_valid_timing[count].sclh = sclh;
9000649e:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900064a0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
900064a4:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
900064a6:	46ce      	mov	lr, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900064a8:	eba4 0400 	sub.w	r4, r4, r0
900064ac:	4403      	add	r3, r0
              I2c_valid_timing[count].sclh = sclh;
900064ae:	e9c8 7103 	strd	r7, r1, [r8, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900064b2:	d1e4      	bne.n	9000647e <BSP_I2C4_Init+0x5e2>
900064b4:	4671      	mov	r1, lr
900064b6:	f8dd 8010 	ldr.w	r8, [sp, #16]
900064ba:	e9dd e905 	ldrd	lr, r9, [sp, #20]
900064be:	e7af      	b.n	90006420 <BSP_I2C4_Init+0x584>
900064c0:	460e      	mov	r6, r1
900064c2:	e62f      	b.n	90006124 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
900064c4:	4608      	mov	r0, r1
900064c6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
900064c8:	455d      	cmp	r5, fp
900064ca:	bf0c      	ite	eq
900064cc:	2600      	moveq	r6, #0
900064ce:	f006 0601 	andne.w	r6, r6, #1
900064d2:	2e00      	cmp	r6, #0
900064d4:	f43f aec3 	beq.w	9000625e <BSP_I2C4_Init+0x3c2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064d8:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900064dc:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900064e0:	210a      	movs	r1, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064e2:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900064e6:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064ea:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900064ee:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900064f0:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064f2:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900064f4:	f63f af60 	bhi.w	900063b8 <BSP_I2C4_Init+0x51c>
900064f8:	46ab      	mov	fp, r5
900064fa:	e72c      	b.n	90006356 <BSP_I2C4_Init+0x4ba>
            if(presc != prev_presc)
900064fc:	4631      	mov	r1, r6
900064fe:	e6c7      	b.n	90006290 <BSP_I2C4_Init+0x3f4>
90006500:	4601      	mov	r1, r0
90006502:	980c      	ldr	r0, [sp, #48]	; 0x30
90006504:	455d      	cmp	r5, fp
90006506:	bf0c      	ite	eq
90006508:	2000      	moveq	r0, #0
9000650a:	f000 0001 	andne.w	r0, r0, #1
9000650e:	2800      	cmp	r0, #0
90006510:	f43f ae8b 	beq.w	9000622a <BSP_I2C4_Init+0x38e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006514:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006518:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000651c:	2108      	movs	r1, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000651e:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006522:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006526:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000652a:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000652c:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000652e:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006530:	f63f af42 	bhi.w	900063b8 <BSP_I2C4_Init+0x51c>
90006534:	46ab      	mov	fp, r5
90006536:	e7c6      	b.n	900064c6 <BSP_I2C4_Init+0x62a>
            if(presc != prev_presc)
90006538:	460e      	mov	r6, r1
9000653a:	9807      	ldr	r0, [sp, #28]
9000653c:	455d      	cmp	r5, fp
9000653e:	bf0c      	ite	eq
90006540:	2000      	moveq	r0, #0
90006542:	f000 0001 	andne.w	r0, r0, #1
90006546:	2800      	cmp	r0, #0
90006548:	f43f ae3b 	beq.w	900061c2 <BSP_I2C4_Init+0x326>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000654c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006550:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006554:	2104      	movs	r1, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006556:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000655a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000655e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006562:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006564:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006566:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006568:	f63f af26 	bhi.w	900063b8 <BSP_I2C4_Init+0x51c>
9000656c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000656e:	9909      	ldr	r1, [sp, #36]	; 0x24
90006570:	455d      	cmp	r5, fp
90006572:	bf0c      	ite	eq
90006574:	2100      	moveq	r1, #0
90006576:	f001 0101 	andne.w	r1, r1, #1
9000657a:	2900      	cmp	r1, #0
9000657c:	f43f ae3b 	beq.w	900061f6 <BSP_I2C4_Init+0x35a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006580:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006584:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006588:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000658a:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000658e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006592:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006596:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006598:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000659a:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000659c:	f63f af0c 	bhi.w	900063b8 <BSP_I2C4_Init+0x51c>
900065a0:	46ab      	mov	fp, r5
900065a2:	e7ae      	b.n	90006502 <BSP_I2C4_Init+0x666>
            if(presc != prev_presc)
900065a4:	4630      	mov	r0, r6
900065a6:	e7e2      	b.n	9000656e <BSP_I2C4_Init+0x6d2>
900065a8:	4631      	mov	r1, r6
900065aa:	9e05      	ldr	r6, [sp, #20]
900065ac:	45ab      	cmp	fp, r5
900065ae:	bf0c      	ite	eq
900065b0:	2600      	moveq	r6, #0
900065b2:	f006 0601 	andne.w	r6, r6, #1
900065b6:	2e00      	cmp	r6, #0
900065b8:	f43f ade9 	beq.w	9000618e <BSP_I2C4_Init+0x2f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065bc:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900065c0:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065c4:	2102      	movs	r1, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065c6:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065ca:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065ce:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900065d2:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065d4:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065d6:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065d8:	f63f aeee 	bhi.w	900063b8 <BSP_I2C4_Init+0x51c>
900065dc:	46ab      	mov	fp, r5
900065de:	e7ac      	b.n	9000653a <BSP_I2C4_Init+0x69e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065e0:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900065e4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065e8:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065ea:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065ee:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065f2:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900065f6:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900065f8:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900065fa:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900065fc:	f63f aedc 	bhi.w	900063b8 <BSP_I2C4_Init+0x51c>
90006600:	46ab      	mov	fp, r5
90006602:	e7d2      	b.n	900065aa <BSP_I2C4_Init+0x70e>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90006604:	3501      	adds	r5, #1
90006606:	9b02      	ldr	r3, [sp, #8]
90006608:	2d10      	cmp	r5, #16
9000660a:	441f      	add	r7, r3
9000660c:	f47f acc8 	bne.w	90005fa0 <BSP_I2C4_Init+0x104>
90006610:	b126      	cbz	r6, 9000661c <BSP_I2C4_Init+0x780>
90006612:	4b07      	ldr	r3, [pc, #28]	; (90006630 <BSP_I2C4_Init+0x794>)
90006614:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90006618:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
9000661c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9000661e:	2b00      	cmp	r3, #0
90006620:	f43f ae8e 	beq.w	90006340 <BSP_I2C4_Init+0x4a4>
90006624:	4b03      	ldr	r3, [pc, #12]	; (90006634 <BSP_I2C4_Init+0x798>)
90006626:	930b      	str	r3, [sp, #44]	; 0x2c
90006628:	e6cc      	b.n	900063c4 <BSP_I2C4_Init+0x528>
9000662a:	bf00      	nop
9000662c:	2400bc38 	.word	0x2400bc38
90006630:	2400bc34 	.word	0x2400bc34
90006634:	2400b234 	.word	0x2400b234

90006638 <BSP_I2C4_WriteReg>:
{
90006638:	b530      	push	{r4, r5, lr}
9000663a:	4614      	mov	r4, r2
9000663c:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
9000663e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
90006642:	460a      	mov	r2, r1
90006644:	9301      	str	r3, [sp, #4]
90006646:	4601      	mov	r1, r0
90006648:	2301      	movs	r3, #1
9000664a:	4809      	ldr	r0, [pc, #36]	; (90006670 <BSP_I2C4_WriteReg+0x38>)
9000664c:	9502      	str	r5, [sp, #8]
9000664e:	9400      	str	r4, [sp, #0]
90006650:	f001 fffe 	bl	90008650 <HAL_I2C_Mem_Write>
90006654:	b908      	cbnz	r0, 9000665a <BSP_I2C4_WriteReg+0x22>
}
90006656:	b005      	add	sp, #20
90006658:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
9000665a:	4805      	ldr	r0, [pc, #20]	; (90006670 <BSP_I2C4_WriteReg+0x38>)
9000665c:	f002 fa96 	bl	90008b8c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90006660:	2804      	cmp	r0, #4
90006662:	bf0c      	ite	eq
90006664:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90006668:	f06f 0003 	mvnne.w	r0, #3
9000666c:	e7f3      	b.n	90006656 <BSP_I2C4_WriteReg+0x1e>
9000666e:	bf00      	nop
90006670:	2400bc38 	.word	0x2400bc38

90006674 <BSP_I2C4_ReadReg>:
{
90006674:	b530      	push	{r4, r5, lr}
90006676:	4614      	mov	r4, r2
90006678:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
9000667a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
9000667e:	460a      	mov	r2, r1
90006680:	9301      	str	r3, [sp, #4]
90006682:	4601      	mov	r1, r0
90006684:	2301      	movs	r3, #1
90006686:	4809      	ldr	r0, [pc, #36]	; (900066ac <BSP_I2C4_ReadReg+0x38>)
90006688:	9502      	str	r5, [sp, #8]
9000668a:	9400      	str	r4, [sp, #0]
9000668c:	f002 f914 	bl	900088b8 <HAL_I2C_Mem_Read>
90006690:	b908      	cbnz	r0, 90006696 <BSP_I2C4_ReadReg+0x22>
}
90006692:	b005      	add	sp, #20
90006694:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90006696:	4805      	ldr	r0, [pc, #20]	; (900066ac <BSP_I2C4_ReadReg+0x38>)
90006698:	f002 fa78 	bl	90008b8c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
9000669c:	2804      	cmp	r0, #4
9000669e:	bf0c      	ite	eq
900066a0:	f06f 0065 	mvneq.w	r0, #101	; 0x65
900066a4:	f06f 0003 	mvnne.w	r0, #3
900066a8:	e7f3      	b.n	90006692 <BSP_I2C4_ReadReg+0x1e>
900066aa:	bf00      	nop
900066ac:	2400bc38 	.word	0x2400bc38

900066b0 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
900066b0:	f000 baaa 	b.w	90006c08 <HAL_GetTick>

900066b4 <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
900066b4:	b970      	cbnz	r0, 900066d4 <BSP_SDRAM_DeInit+0x20>
{
900066b6:	b510      	push	{r4, lr}
900066b8:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
900066ba:	4808      	ldr	r0, [pc, #32]	; (900066dc <BSP_SDRAM_DeInit+0x28>)
900066bc:	f006 fb86 	bl	9000cdcc <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
900066c0:	207a      	movs	r0, #122	; 0x7a
900066c2:	f001 f9af 	bl	90007a24 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900066c6:	4b06      	ldr	r3, [pc, #24]	; (900066e0 <BSP_SDRAM_DeInit+0x2c>)
900066c8:	4806      	ldr	r0, [pc, #24]	; (900066e4 <BSP_SDRAM_DeInit+0x30>)
900066ca:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
900066cc:	f004 f842 	bl	9000a754 <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
900066d0:	4620      	mov	r0, r4
}
900066d2:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
900066d4:	f06f 0001 	mvn.w	r0, #1
}
900066d8:	4770      	bx	lr
900066da:	bf00      	nop
900066dc:	2400bc8c 	.word	0x2400bc8c
900066e0:	52000040 	.word	0x52000040
900066e4:	2400bcc0 	.word	0x2400bcc0

900066e8 <MX_SDRAM_BANK2_Init>:
{
900066e8:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
900066ea:	6102      	str	r2, [r0, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900066ec:	2200      	movs	r2, #0
  hsdram->Instance = FMC_SDRAM_DEVICE;
900066ee:	4c15      	ldr	r4, [pc, #84]	; (90006744 <MX_SDRAM_BANK2_Init+0x5c>)
{
900066f0:	b089      	sub	sp, #36	; 0x24
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
900066f2:	60c1      	str	r1, [r0, #12]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
900066f4:	2140      	movs	r1, #64	; 0x40
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
900066f6:	6082      	str	r2, [r0, #8]
  sdram_timing.LoadToActiveDelay    = 2;
900066f8:	2307      	movs	r3, #7
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900066fa:	61c2      	str	r2, [r0, #28]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
900066fc:	f44f 75c0 	mov.w	r5, #384	; 0x180
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90006700:	6282      	str	r2, [r0, #40]	; 0x28
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006702:	2201      	movs	r2, #1
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90006704:	6185      	str	r5, [r0, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006706:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90006708:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
9000670c:	6161      	str	r1, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
9000670e:	f44f 6100 	mov.w	r1, #2048	; 0x800
90006712:	e9c0 1208 	strd	r1, r2, [r0, #32]
  sdram_timing.LoadToActiveDelay    = 2;
90006716:	2202      	movs	r2, #2
  sdram_timing.RCDDelay             = 2;
90006718:	2102      	movs	r1, #2
  sdram_timing.LoadToActiveDelay    = 2;
9000671a:	e9cd 2300 	strd	r2, r3, [sp]
9000671e:	2204      	movs	r2, #4
90006720:	2307      	movs	r3, #7
  sdram_timing.RCDDelay             = 2;
90006722:	9106      	str	r1, [sp, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90006724:	4669      	mov	r1, sp
  sdram_timing.LoadToActiveDelay    = 2;
90006726:	e9cd 2302 	strd	r2, r3, [sp, #8]
9000672a:	2202      	movs	r2, #2
9000672c:	2302      	movs	r3, #2
9000672e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
90006732:	4b05      	ldr	r3, [pc, #20]	; (90006748 <MX_SDRAM_BANK2_Init+0x60>)
90006734:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90006736:	f006 fb1f 	bl	9000cd78 <HAL_SDRAM_Init>
}
9000673a:	3800      	subs	r0, #0
9000673c:	bf18      	it	ne
9000673e:	2001      	movne	r0, #1
90006740:	b009      	add	sp, #36	; 0x24
90006742:	bd30      	pop	{r4, r5, pc}
90006744:	2400bc8c 	.word	0x2400bc8c
90006748:	52004140 	.word	0x52004140

9000674c <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
9000674c:	2800      	cmp	r0, #0
9000674e:	f040 80d2 	bne.w	900068f6 <BSP_SDRAM_Init+0x1aa>
  __HAL_RCC_FMC_CLK_ENABLE();
90006752:	4b6c      	ldr	r3, [pc, #432]	; (90006904 <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90006754:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90006756:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
9000675a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
9000675e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90006760:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
90006764:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
90006766:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
9000676a:	4605      	mov	r5, r0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
9000676c:	f24c 7003 	movw	r0, #50947	; 0xc703
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90006770:	4c65      	ldr	r4, [pc, #404]	; (90006908 <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
90006772:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90006776:	4e65      	ldr	r6, [pc, #404]	; (9000690c <BSP_SDRAM_Init+0x1c0>)
  __HAL_RCC_FMC_CLK_ENABLE();
90006778:	9201      	str	r2, [sp, #4]
9000677a:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
9000677c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90006780:	f042 0201 	orr.w	r2, r2, #1
90006784:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90006788:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
9000678c:	f002 0201 	and.w	r2, r2, #1
90006790:	9202      	str	r2, [sp, #8]
90006792:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90006794:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006798:	f042 0208 	orr.w	r2, r2, #8
9000679c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900067a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900067a4:	f002 0208 	and.w	r2, r2, #8
900067a8:	9203      	str	r2, [sp, #12]
900067aa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900067ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900067b0:	f042 0210 	orr.w	r2, r2, #16
900067b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900067b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900067bc:	f002 0210 	and.w	r2, r2, #16
900067c0:	9204      	str	r2, [sp, #16]
900067c2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
900067c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900067c8:	f042 0220 	orr.w	r2, r2, #32
900067cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900067d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900067d4:	f002 0220 	and.w	r2, r2, #32
900067d8:	9205      	str	r2, [sp, #20]
900067da:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900067dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900067e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
900067e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900067e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900067ec:	f002 0240 	and.w	r2, r2, #64	; 0x40
900067f0:	9206      	str	r2, [sp, #24]
900067f2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
900067f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900067f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900067fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90006804:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006806:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006808:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
9000680c:	e9cd 0108 	strd	r0, r1, [sp, #32]
90006810:	2001      	movs	r0, #1
90006812:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006814:	9307      	str	r3, [sp, #28]
90006816:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006818:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
9000681c:	a908      	add	r1, sp, #32
9000681e:	483c      	ldr	r0, [pc, #240]	; (90006910 <BSP_SDRAM_Init+0x1c4>)
90006820:	f001 fb22 	bl	90007e68 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90006824:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90006828:	a908      	add	r1, sp, #32
9000682a:	483a      	ldr	r0, [pc, #232]	; (90006914 <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
9000682c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
9000682e:	f001 fb1b 	bl	90007e68 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90006832:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90006836:	a908      	add	r1, sp, #32
90006838:	4837      	ldr	r0, [pc, #220]	; (90006918 <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
9000683a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
9000683c:	f001 fb14 	bl	90007e68 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90006840:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90006844:	a908      	add	r1, sp, #32
90006846:	4835      	ldr	r0, [pc, #212]	; (9000691c <BSP_SDRAM_Init+0x1d0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90006848:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
9000684a:	f001 fb0d 	bl	90007e68 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
9000684e:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90006850:	a908      	add	r1, sp, #32
90006852:	4833      	ldr	r0, [pc, #204]	; (90006920 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90006854:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90006856:	f001 fb07 	bl	90007e68 <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
9000685a:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
9000685c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90006860:	f240 2102 	movw	r1, #514	; 0x202
  HAL_MDMA_DeInit(&mdma_handle);
90006864:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90006866:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
90006868:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
9000686a:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
9000686c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90006870:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90006872:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006874:	4a2b      	ldr	r2, [pc, #172]	; (90006924 <BSP_SDRAM_Init+0x1d8>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90006876:	6334      	str	r4, [r6, #48]	; 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006878:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
9000687a:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
9000687c:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90006880:	f640 0308 	movw	r3, #2056	; 0x808
90006884:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90006886:	2320      	movs	r3, #32
90006888:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000688a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
9000688e:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90006892:	6263      	str	r3, [r4, #36]	; 0x24
  mdma_handle.Init.DestBlockAddressOffset = 0;
90006894:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
90006898:	f003 ff5c 	bl	9000a754 <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
9000689c:	4620      	mov	r0, r4
9000689e:	f003 fedf 	bl	9000a660 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
900068a2:	462a      	mov	r2, r5
900068a4:	210f      	movs	r1, #15
900068a6:	207a      	movs	r0, #122	; 0x7a
900068a8:	f001 f870 	bl	9000798c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
900068ac:	207a      	movs	r0, #122	; 0x7a
900068ae:	f001 f8ab 	bl	90007a08 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
900068b2:	2210      	movs	r2, #16
900068b4:	2104      	movs	r1, #4
900068b6:	4630      	mov	r0, r6
900068b8:	f7ff ff16 	bl	900066e8 <MX_SDRAM_BANK2_Init>
900068bc:	b9f0      	cbnz	r0, 900068fc <BSP_SDRAM_Init+0x1b0>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
900068be:	491a      	ldr	r1, [pc, #104]	; (90006928 <BSP_SDRAM_Init+0x1dc>)
900068c0:	2208      	movs	r2, #8
900068c2:	2303      	movs	r3, #3
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
900068c4:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
900068c6:	e9c1 2300 	strd	r2, r3, [r1]
900068ca:	f240 6203 	movw	r2, #1539	; 0x603
900068ce:	2300      	movs	r3, #0
900068d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
900068d4:	2200      	movs	r2, #0
900068d6:	2330      	movs	r3, #48	; 0x30
900068d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
900068dc:	2200      	movs	r2, #0
900068de:	f44f 7300 	mov.w	r3, #512	; 0x200
900068e2:	e9c1 2306 	strd	r2, r3, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
900068e6:	f7ff fa33 	bl	90005d50 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
900068ea:	2800      	cmp	r0, #0
900068ec:	bf18      	it	ne
900068ee:	f06f 0004 	mvnne.w	r0, #4
}
900068f2:	b00e      	add	sp, #56	; 0x38
900068f4:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
900068f6:	f06f 0001 	mvn.w	r0, #1
}
900068fa:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
900068fc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90006900:	e7f7      	b.n	900068f2 <BSP_SDRAM_Init+0x1a6>
90006902:	bf00      	nop
90006904:	58024400 	.word	0x58024400
90006908:	2400bd2c 	.word	0x2400bd2c
9000690c:	2400bc8c 	.word	0x2400bc8c
90006910:	58020c00 	.word	0x58020c00
90006914:	58021000 	.word	0x58021000
90006918:	58021400 	.word	0x58021400
9000691c:	58021800 	.word	0x58021800
90006920:	58021c00 	.word	0x58021c00
90006924:	52000040 	.word	0x52000040
90006928:	2400bd98 	.word	0x2400bd98

9000692c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
9000692c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006930:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90006932:	2800      	cmp	r0, #0
90006934:	d16b      	bne.n	90006a0e <BSP_TS_Init+0xe2>
90006936:	680b      	ldr	r3, [r1, #0]
90006938:	460c      	mov	r4, r1
9000693a:	1e5a      	subs	r2, r3, #1
9000693c:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
90006940:	d265      	bcs.n	90006a0e <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006942:	684a      	ldr	r2, [r1, #4]
90006944:	1e51      	subs	r1, r2, #1
90006946:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
9000694a:	d260      	bcs.n	90006a0e <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
9000694c:	4293      	cmp	r3, r2
9000694e:	bf28      	it	cs
90006950:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006952:	68e2      	ldr	r2, [r4, #12]
90006954:	429a      	cmp	r2, r3
90006956:	d85a      	bhi.n	90006a0e <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90006958:	2270      	movs	r2, #112	; 0x70
  IOCtx.Init        = BSP_I2C4_Init;
9000695a:	4b31      	ldr	r3, [pc, #196]	; (90006a20 <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
9000695c:	4d31      	ldr	r5, [pc, #196]	; (90006a24 <BSP_TS_Init+0xf8>)
9000695e:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
90006960:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
90006964:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90006966:	4a30      	ldr	r2, [pc, #192]	; (90006a28 <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90006968:	4b30      	ldr	r3, [pc, #192]	; (90006a2c <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
9000696a:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
9000696c:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
9000696e:	4a30      	ldr	r2, [pc, #192]	; (90006a30 <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
90006970:	4b30      	ldr	r3, [pc, #192]	; (90006a34 <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
90006972:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006974:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90006976:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
90006978:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
9000697a:	f7ff f939 	bl	90005bf0 <FT5336_RegisterBusIO>
9000697e:	2800      	cmp	r0, #0
90006980:	d14b      	bne.n	90006a1a <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90006982:	a901      	add	r1, sp, #4
90006984:	4628      	mov	r0, r5
90006986:	f7ff f829 	bl	900059dc <FT5336_ReadID>
9000698a:	2800      	cmp	r0, #0
9000698c:	d145      	bne.n	90006a1a <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
9000698e:	9b01      	ldr	r3, [sp, #4]
90006990:	2b51      	cmp	r3, #81	; 0x51
90006992:	d142      	bne.n	90006a1a <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006994:	4b28      	ldr	r3, [pc, #160]	; (90006a38 <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006996:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
90006998:	4f28      	ldr	r7, [pc, #160]	; (90006a3c <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
9000699a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 90006a44 <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
9000699e:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
900069a0:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
900069a4:	681b      	ldr	r3, [r3, #0]
900069a6:	4798      	blx	r3
900069a8:	4606      	mov	r6, r0
900069aa:	2800      	cmp	r0, #0
900069ac:	d135      	bne.n	90006a1a <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
900069ae:	4d24      	ldr	r5, [pc, #144]	; (90006a40 <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
900069b0:	a902      	add	r1, sp, #8
900069b2:	6838      	ldr	r0, [r7, #0]
900069b4:	f8d8 3000 	ldr.w	r3, [r8]
900069b8:	e9d4 7200 	ldrd	r7, r2, [r4]
900069bc:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
900069be:	e9c5 7200 	strd	r7, r2, [r5]
900069c2:	68a2      	ldr	r2, [r4, #8]
900069c4:	60aa      	str	r2, [r5, #8]
900069c6:	68e2      	ldr	r2, [r4, #12]
900069c8:	60ea      	str	r2, [r5, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
900069ca:	4798      	blx	r3
900069cc:	2800      	cmp	r0, #0
900069ce:	db18      	blt.n	90006a02 <BSP_TS_Init+0xd6>
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900069d0:	68e3      	ldr	r3, [r4, #12]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
900069d2:	9803      	ldr	r0, [sp, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900069d4:	e9d4 2100 	ldrd	r2, r1, [r4]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
900069d8:	6128      	str	r0, [r5, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900069da:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900069dc:	440b      	add	r3, r1
900069de:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900069e0:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
900069e2:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
900069e6:	636b      	str	r3, [r5, #52]	; 0x34
900069e8:	63ab      	str	r3, [r5, #56]	; 0x38
900069ea:	63eb      	str	r3, [r5, #60]	; 0x3c
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
900069ec:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900069ee:	622a      	str	r2, [r5, #32]
900069f0:	626a      	str	r2, [r5, #36]	; 0x24
900069f2:	62aa      	str	r2, [r5, #40]	; 0x28
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
900069f4:	616b      	str	r3, [r5, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
900069f6:	e9c5 2206 	strd	r2, r2, [r5, #24]
}
900069fa:	4630      	mov	r0, r6
900069fc:	b008      	add	sp, #32
900069fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
90006a02:	f06f 0604 	mvn.w	r6, #4
}
90006a06:	4630      	mov	r0, r6
90006a08:	b008      	add	sp, #32
90006a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
90006a0e:	f06f 0601 	mvn.w	r6, #1
}
90006a12:	4630      	mov	r0, r6
90006a14:	b008      	add	sp, #32
90006a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
90006a1a:	f04f 36ff 	mov.w	r6, #4294967295
90006a1e:	e7ec      	b.n	900069fa <BSP_TS_Init+0xce>
90006a20:	90005e9d 	.word	0x90005e9d
90006a24:	2400bdb8 	.word	0x2400bdb8
90006a28:	90005e09 	.word	0x90005e09
90006a2c:	90006675 	.word	0x90006675
90006a30:	90006639 	.word	0x90006639
90006a34:	900066b1 	.word	0x900066b1
90006a38:	24000024 	.word	0x24000024
90006a3c:	2400bde0 	.word	0x2400bde0
90006a40:	2400bde4 	.word	0x2400bde4
90006a44:	2400be24 	.word	0x2400be24

90006a48 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
90006a48:	2800      	cmp	r0, #0
90006a4a:	d156      	bne.n	90006afa <BSP_TS_GetState+0xb2>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90006a4c:	4b2c      	ldr	r3, [pc, #176]	; (90006b00 <BSP_TS_GetState+0xb8>)
90006a4e:	4a2d      	ldr	r2, [pc, #180]	; (90006b04 <BSP_TS_GetState+0xbc>)
90006a50:	681b      	ldr	r3, [r3, #0]
90006a52:	6810      	ldr	r0, [r2, #0]
90006a54:	691b      	ldr	r3, [r3, #16]
{
90006a56:	b5f0      	push	{r4, r5, r6, r7, lr}
90006a58:	b085      	sub	sp, #20
90006a5a:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90006a5c:	a901      	add	r1, sp, #4
90006a5e:	4798      	blx	r3
90006a60:	2800      	cmp	r0, #0
90006a62:	db40      	blt.n	90006ae6 <BSP_TS_GetState+0x9e>
    else if(state.TouchDetected != 0U)
90006a64:	9d01      	ldr	r5, [sp, #4]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006a66:	4b28      	ldr	r3, [pc, #160]	; (90006b08 <BSP_TS_GetState+0xc0>)
    else if(state.TouchDetected != 0U)
90006a68:	b93d      	cbnz	r5, 90006a7a <BSP_TS_GetState+0x32>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
90006a6a:	699a      	ldr	r2, [r3, #24]
  int32_t ret = BSP_ERROR_NONE;
90006a6c:	4628      	mov	r0, r5
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      TS_State->TouchDetected = 0U;
90006a70:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006a72:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90006a76:	b005      	add	sp, #20
90006a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006a7a:	6899      	ldr	r1, [r3, #8]
90006a7c:	0708      	lsls	r0, r1, #28
      y_oriented = state.TouchY;
90006a7e:	e9dd 6202 	ldrd	r6, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006a82:	d434      	bmi.n	90006aee <BSP_TS_GetState+0xa6>
      y_oriented = state.TouchY;
90006a84:	4610      	mov	r0, r2
      x_oriented = state.TouchX;
90006a86:	46b4      	mov	ip, r6
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006a88:	691f      	ldr	r7, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
90006a8a:	f011 0f02 	tst.w	r1, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006a8e:	bf1c      	itt	ne
90006a90:	f107 3cff 	addne.w	ip, r7, #4294967295
90006a94:	ebac 0c06 	subne.w	ip, ip, r6
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90006a98:	695e      	ldr	r6, [r3, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
90006a9a:	0749      	lsls	r1, r1, #29
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006a9c:	6859      	ldr	r1, [r3, #4]
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90006a9e:	bf48      	it	mi
90006aa0:	1ab0      	submi	r0, r6, r2
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006aa2:	681a      	ldr	r2, [r3, #0]
      TS_State->TouchDetected = state.TouchDetected;
90006aa4:	6025      	str	r5, [r4, #0]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006aa6:	fb02 f20c 	mul.w	r2, r2, ip
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
90006aaa:	6add      	ldr	r5, [r3, #44]	; 0x2c
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006aac:	fb00 f101 	mul.w	r1, r0, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006ab0:	fbb2 f2f7 	udiv	r2, r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006ab4:	fbb1 f1f6 	udiv	r1, r1, r6
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90006ab8:	699e      	ldr	r6, [r3, #24]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006aba:	6062      	str	r2, [r4, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90006abc:	42b2      	cmp	r2, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90006abe:	60a1      	str	r1, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90006ac0:	bf8c      	ite	hi
90006ac2:	1b90      	subhi	r0, r2, r6
90006ac4:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90006ac6:	42a9      	cmp	r1, r5
90006ac8:	bf8c      	ite	hi
90006aca:	1b4f      	subhi	r7, r1, r5
90006acc:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90006ace:	42b8      	cmp	r0, r7
90006ad0:	bf38      	it	cc
90006ad2:	4638      	movcc	r0, r7
90006ad4:	68df      	ldr	r7, [r3, #12]
90006ad6:	4287      	cmp	r7, r0
  int32_t ret = BSP_ERROR_NONE;
90006ad8:	f04f 0000 	mov.w	r0, #0
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90006adc:	d20a      	bcs.n	90006af4 <BSP_TS_GetState+0xac>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
90006ade:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
90006ae0:	62d9      	str	r1, [r3, #44]	; 0x2c
}
90006ae2:	b005      	add	sp, #20
90006ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
90006ae6:	f06f 0004 	mvn.w	r0, #4
}
90006aea:	b005      	add	sp, #20
90006aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y_oriented = state.TouchX;
90006aee:	4630      	mov	r0, r6
        x_oriented = state.TouchY;
90006af0:	4694      	mov	ip, r2
90006af2:	e7c9      	b.n	90006a88 <BSP_TS_GetState+0x40>
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006af4:	e9c4 6501 	strd	r6, r5, [r4, #4]
90006af8:	e7bd      	b.n	90006a76 <BSP_TS_GetState+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
90006afa:	f06f 0001 	mvn.w	r0, #1
}
90006afe:	4770      	bx	lr
90006b00:	2400be24 	.word	0x2400be24
90006b04:	2400bde0 	.word	0x2400bde0
90006b08:	2400bde4 	.word	0x2400bde4

90006b0c <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
90006b0c:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90006b0e:	4c19      	ldr	r4, [pc, #100]	; (90006b74 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90006b10:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
90006b12:	4b19      	ldr	r3, [pc, #100]	; (90006b78 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90006b14:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90006b18:	4818      	ldr	r0, [pc, #96]	; (90006b7c <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90006b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
90006b1e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
90006b22:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006b24:	4c16      	ldr	r4, [pc, #88]	; (90006b80 <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
90006b26:	f041 0101 	orr.w	r1, r1, #1
90006b2a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
90006b2c:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
90006b2e:	6819      	ldr	r1, [r3, #0]
90006b30:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006b32:	4914      	ldr	r1, [pc, #80]	; (90006b84 <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
90006b34:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
90006b36:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
90006b38:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
90006b3a:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
90006b3c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
90006b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
90006b40:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
90006b42:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
90006b44:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
90006b46:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
90006b48:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
90006b4a:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
90006b4c:	6818      	ldr	r0, [r3, #0]
90006b4e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
90006b52:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
90006b54:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90006b56:	6823      	ldr	r3, [r4, #0]
90006b58:	4019      	ands	r1, r3
90006b5a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
90006b5e:	d203      	bcs.n	90006b68 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
90006b60:	4b09      	ldr	r3, [pc, #36]	; (90006b88 <SystemInit+0x7c>)
90006b62:	2201      	movs	r2, #1
90006b64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90006b68:	4a08      	ldr	r2, [pc, #32]	; (90006b8c <SystemInit+0x80>)
90006b6a:	4b02      	ldr	r3, [pc, #8]	; (90006b74 <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
90006b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
90006b70:	609a      	str	r2, [r3, #8]
}
90006b72:	4770      	bx	lr
90006b74:	e000ed00 	.word	0xe000ed00
90006b78:	58024400 	.word	0x58024400
90006b7c:	eaf6ed7f 	.word	0xeaf6ed7f
90006b80:	5c001000 	.word	0x5c001000
90006b84:	ffff0000 	.word	0xffff0000
90006b88:	51008000 	.word	0x51008000
90006b8c:	90000000 	.word	0x90000000

90006b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90006b90:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90006b92:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006b94:	4c12      	ldr	r4, [pc, #72]	; (90006be0 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
90006b96:	f000 fee7 	bl	90007968 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006b9a:	f004 fb2f 	bl	9000b1fc <HAL_RCC_GetSysClockFreq>
90006b9e:	4b11      	ldr	r3, [pc, #68]	; (90006be4 <HAL_Init+0x54>)
90006ba0:	4911      	ldr	r1, [pc, #68]	; (90006be8 <HAL_Init+0x58>)
90006ba2:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006ba4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006ba6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006baa:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006bae:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006bb0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006bb2:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90006bb6:	490d      	ldr	r1, [pc, #52]	; (90006bec <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006bb8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90006bbc:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006bbe:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
90006bc2:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90006bc4:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90006bc6:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90006bc8:	f7fd ff04 	bl	900049d4 <HAL_InitTick>
90006bcc:	b110      	cbz	r0, 90006bd4 <HAL_Init+0x44>
  {
    return HAL_ERROR;
90006bce:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
90006bd0:	4620      	mov	r0, r4
90006bd2:	bd10      	pop	{r4, pc}
90006bd4:	4604      	mov	r4, r0
  HAL_MspInit();
90006bd6:	f7fd fc5d 	bl	90004494 <HAL_MspInit>
}
90006bda:	4620      	mov	r0, r4
90006bdc:	bd10      	pop	{r4, pc}
90006bde:	bf00      	nop
90006be0:	24000058 	.word	0x24000058
90006be4:	58024400 	.word	0x58024400
90006be8:	900264c0 	.word	0x900264c0
90006bec:	24000054 	.word	0x24000054

90006bf0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
90006bf0:	4a03      	ldr	r2, [pc, #12]	; (90006c00 <HAL_IncTick+0x10>)
90006bf2:	4b04      	ldr	r3, [pc, #16]	; (90006c04 <HAL_IncTick+0x14>)
90006bf4:	6811      	ldr	r1, [r2, #0]
90006bf6:	781b      	ldrb	r3, [r3, #0]
90006bf8:	440b      	add	r3, r1
90006bfa:	6013      	str	r3, [r2, #0]
}
90006bfc:	4770      	bx	lr
90006bfe:	bf00      	nop
90006c00:	2400be28 	.word	0x2400be28
90006c04:	2400005c 	.word	0x2400005c

90006c08 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90006c08:	4b01      	ldr	r3, [pc, #4]	; (90006c10 <HAL_GetTick+0x8>)
90006c0a:	6818      	ldr	r0, [r3, #0]
}
90006c0c:	4770      	bx	lr
90006c0e:	bf00      	nop
90006c10:	2400be28 	.word	0x2400be28

90006c14 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
90006c14:	4b01      	ldr	r3, [pc, #4]	; (90006c1c <HAL_GetREVID+0x8>)
90006c16:	6818      	ldr	r0, [r3, #0]
}
90006c18:	0c00      	lsrs	r0, r0, #16
90006c1a:	4770      	bx	lr
90006c1c:	5c001000 	.word	0x5c001000

90006c20 <HAL_ADC_PollForConversion>:
{
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90006c20:	4a41      	ldr	r2, [pc, #260]	; (90006d28 <HAL_ADC_PollForConversion+0x108>)
90006c22:	6803      	ldr	r3, [r0, #0]
90006c24:	4293      	cmp	r3, r2
{
90006c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006c2a:	4605      	mov	r5, r0
90006c2c:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90006c2e:	d05a      	beq.n	90006ce6 <HAL_ADC_PollForConversion+0xc6>
90006c30:	f502 7280 	add.w	r2, r2, #256	; 0x100
90006c34:	4293      	cmp	r3, r2
90006c36:	d056      	beq.n	90006ce6 <HAL_ADC_PollForConversion+0xc6>
90006c38:	4a3c      	ldr	r2, [pc, #240]	; (90006d2c <HAL_ADC_PollForConversion+0x10c>)

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
90006c3a:	692c      	ldr	r4, [r5, #16]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
90006c3c:	6897      	ldr	r7, [r2, #8]
90006c3e:	2c08      	cmp	r4, #8
90006c40:	f007 071f 	and.w	r7, r7, #31
90006c44:	d00a      	beq.n	90006c5c <HAL_ADC_PollForConversion+0x3c>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
90006c46:	2f09      	cmp	r7, #9
90006c48:	d84f      	bhi.n	90006cea <HAL_ADC_PollForConversion+0xca>
90006c4a:	f240 2121 	movw	r1, #545	; 0x221
90006c4e:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
90006c50:	07c9      	lsls	r1, r1, #31
90006c52:	d54a      	bpl.n	90006cea <HAL_ADC_PollForConversion+0xca>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
90006c54:	68db      	ldr	r3, [r3, #12]
90006c56:	07da      	lsls	r2, r3, #31
90006c58:	d44b      	bmi.n	90006cf2 <HAL_ADC_PollForConversion+0xd2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
90006c5a:	2404      	movs	r4, #4
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
90006c5c:	f7ff ffd4 	bl	90006c08 <HAL_GetTick>

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
90006c60:	682a      	ldr	r2, [r5, #0]
  tickstart = HAL_GetTick();
90006c62:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
90006c64:	1c73      	adds	r3, r6, #1
90006c66:	d127      	bne.n	90006cb8 <HAL_ADC_PollForConversion+0x98>
90006c68:	6813      	ldr	r3, [r2, #0]
90006c6a:	421c      	tst	r4, r3
90006c6c:	d0fc      	beq.n	90006c68 <HAL_ADC_PollForConversion+0x48>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
90006c6e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
90006c70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90006c74:	656b      	str	r3, [r5, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
90006c76:	68d3      	ldr	r3, [r2, #12]
90006c78:	f413 6f40 	tst.w	r3, #3072	; 0xc00
90006c7c:	d10f      	bne.n	90006c9e <HAL_ADC_PollForConversion+0x7e>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
90006c7e:	7d6b      	ldrb	r3, [r5, #21]
90006c80:	b96b      	cbnz	r3, 90006c9e <HAL_ADC_PollForConversion+0x7e>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
90006c82:	6813      	ldr	r3, [r2, #0]
90006c84:	0718      	lsls	r0, r3, #28
90006c86:	d50a      	bpl.n	90006c9e <HAL_ADC_PollForConversion+0x7e>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
90006c88:	6d6b      	ldr	r3, [r5, #84]	; 0x54
90006c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90006c8e:	656b      	str	r3, [r5, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
90006c90:	6d6b      	ldr	r3, [r5, #84]	; 0x54
90006c92:	04d9      	lsls	r1, r3, #19
90006c94:	d403      	bmi.n	90006c9e <HAL_ADC_PollForConversion+0x7e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
90006c96:	6d6b      	ldr	r3, [r5, #84]	; 0x54
90006c98:	f043 0301 	orr.w	r3, r3, #1
90006c9c:	656b      	str	r3, [r5, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
90006c9e:	4b24      	ldr	r3, [pc, #144]	; (90006d30 <HAL_ADC_PollForConversion+0x110>)
90006ca0:	429a      	cmp	r2, r3
90006ca2:	d031      	beq.n	90006d08 <HAL_ADC_PollForConversion+0xe8>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
90006ca4:	68d0      	ldr	r0, [r2, #12]
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
90006ca6:	2c08      	cmp	r4, #8
90006ca8:	d02a      	beq.n	90006d00 <HAL_ADC_PollForConversion+0xe0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
90006caa:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
90006cae:	d137      	bne.n	90006d20 <HAL_ADC_PollForConversion+0x100>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
90006cb0:	230c      	movs	r3, #12
90006cb2:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
}
90006cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
90006cb8:	6813      	ldr	r3, [r2, #0]
90006cba:	4223      	tst	r3, r4
90006cbc:	d1d7      	bne.n	90006c6e <HAL_ADC_PollForConversion+0x4e>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
90006cbe:	f7ff ffa3 	bl	90006c08 <HAL_GetTick>
90006cc2:	eba0 0008 	sub.w	r0, r0, r8
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
90006cc6:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
90006cc8:	42b0      	cmp	r0, r6
90006cca:	d801      	bhi.n	90006cd0 <HAL_ADC_PollForConversion+0xb0>
90006ccc:	2e00      	cmp	r6, #0
90006cce:	d1c9      	bne.n	90006c64 <HAL_ADC_PollForConversion+0x44>
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
90006cd0:	6813      	ldr	r3, [r2, #0]
90006cd2:	4023      	ands	r3, r4
90006cd4:	d1c6      	bne.n	90006c64 <HAL_ADC_PollForConversion+0x44>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
90006cd6:	6d6a      	ldr	r2, [r5, #84]	; 0x54
          return HAL_TIMEOUT;
90006cd8:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
90006cda:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
90006cde:	f042 0204 	orr.w	r2, r2, #4
90006ce2:	656a      	str	r2, [r5, #84]	; 0x54
          return HAL_TIMEOUT;
90006ce4:	e7e6      	b.n	90006cb4 <HAL_ADC_PollForConversion+0x94>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90006ce6:	4a13      	ldr	r2, [pc, #76]	; (90006d34 <HAL_ADC_PollForConversion+0x114>)
90006ce8:	e7a7      	b.n	90006c3a <HAL_ADC_PollForConversion+0x1a>
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
90006cea:	6893      	ldr	r3, [r2, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
90006cec:	f413 4f40 	tst.w	r3, #49152	; 0xc000
90006cf0:	d0b3      	beq.n	90006c5a <HAL_ADC_PollForConversion+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90006cf2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
        return HAL_ERROR;
90006cf4:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90006cf6:	f043 0320 	orr.w	r3, r3, #32
90006cfa:	656b      	str	r3, [r5, #84]	; 0x54
}
90006cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
90006d00:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
90006d02:	6014      	str	r4, [r2, #0]
}
90006d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
90006d08:	2f09      	cmp	r7, #9
90006d0a:	d902      	bls.n	90006d12 <HAL_ADC_PollForConversion+0xf2>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
90006d0c:	4b06      	ldr	r3, [pc, #24]	; (90006d28 <HAL_ADC_PollForConversion+0x108>)
90006d0e:	68d8      	ldr	r0, [r3, #12]
90006d10:	e7c9      	b.n	90006ca6 <HAL_ADC_PollForConversion+0x86>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
90006d12:	f240 2321 	movw	r3, #545	; 0x221
90006d16:	fa23 f707 	lsr.w	r7, r3, r7
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
90006d1a:	07fb      	lsls	r3, r7, #31
90006d1c:	d4c2      	bmi.n	90006ca4 <HAL_ADC_PollForConversion+0x84>
90006d1e:	e7f5      	b.n	90006d0c <HAL_ADC_PollForConversion+0xec>
  return HAL_OK;
90006d20:	2000      	movs	r0, #0
}
90006d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90006d26:	bf00      	nop
90006d28:	40022000 	.word	0x40022000
90006d2c:	58026300 	.word	0x58026300
90006d30:	40022100 	.word	0x40022100
90006d34:	40022300 	.word	0x40022300

90006d38 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
90006d38:	6803      	ldr	r3, [r0, #0]
90006d3a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
90006d3c:	4770      	bx	lr
90006d3e:	bf00      	nop

90006d40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
90006d40:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
90006d42:	2200      	movs	r2, #0
{
90006d44:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
90006d46:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
90006d48:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
90006d4c:	2a01      	cmp	r2, #1
90006d4e:	f000 813b 	beq.w	90006fc8 <HAL_ADC_ConfigChannel+0x288>
90006d52:	4603      	mov	r3, r0
90006d54:	2001      	movs	r0, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
90006d56:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
90006d58:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90006d5c:	6894      	ldr	r4, [r2, #8]
90006d5e:	0764      	lsls	r4, r4, #29
90006d60:	f100 8099 	bmi.w	90006e96 <HAL_ADC_ConfigChannel+0x156>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
90006d64:	680c      	ldr	r4, [r1, #0]
90006d66:	f3c4 0513 	ubfx	r5, r4, #0, #20
90006d6a:	2d00      	cmp	r5, #0
90006d6c:	f040 809e 	bne.w	90006eac <HAL_ADC_ConfigChannel+0x16c>
90006d70:	f3c4 6484 	ubfx	r4, r4, #26, #5
90006d74:	40a0      	lsls	r0, r4
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
90006d76:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(*preg,
90006d78:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
90006d7c:	69d6      	ldr	r6, [r2, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
90006d7e:	ea4f 1c95 	mov.w	ip, r5, lsr #6
90006d82:	4330      	orrs	r0, r6
90006d84:	f00c 0c0c 	and.w	ip, ip, #12
90006d88:	61d0      	str	r0, [r2, #28]
  MODIFY_REG(*preg,
90006d8a:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
90006d8e:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
90006d92:	4084      	lsls	r4, r0
90006d94:	fa0e fe00 	lsl.w	lr, lr, r0
90006d98:	f85c 0005 	ldr.w	r0, [ip, r5]
90006d9c:	ea20 000e 	bic.w	r0, r0, lr
90006da0:	4304      	orrs	r4, r0
90006da2:	f84c 4005 	str.w	r4, [ip, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90006da6:	6890      	ldr	r0, [r2, #8]
90006da8:	0740      	lsls	r0, r0, #29
90006daa:	d47d      	bmi.n	90006ea8 <HAL_ADC_ConfigChannel+0x168>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90006dac:	6895      	ldr	r5, [r2, #8]
90006dae:	f015 0508 	ands.w	r5, r5, #8
90006db2:	d156      	bne.n	90006e62 <HAL_ADC_ConfigChannel+0x122>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
90006db4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(*preg,
90006db6:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
90006db8:	f102 0614 	add.w	r6, r2, #20
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
90006dbc:	4fb7      	ldr	r7, [pc, #732]	; (9000709c <HAL_ADC_ConfigChannel+0x35c>)
90006dbe:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
90006dc2:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
90006dc6:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
90006dca:	fa00 fe04 	lsl.w	lr, r0, r4
90006dce:	6888      	ldr	r0, [r1, #8]
90006dd0:	fa00 f404 	lsl.w	r4, r0, r4
90006dd4:	f85c 0006 	ldr.w	r0, [ip, r6]
90006dd8:	ea20 000e 	bic.w	r0, r0, lr
90006ddc:	4320      	orrs	r0, r4
90006dde:	f84c 0006 	str.w	r0, [ip, r6]
90006de2:	6838      	ldr	r0, [r7, #0]
90006de4:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
90006de8:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
90006dec:	f000 8095 	beq.w	90006f1a <HAL_ADC_ConfigChannel+0x1da>
90006df0:	68d0      	ldr	r0, [r2, #12]
90006df2:	68d6      	ldr	r6, [r2, #12]
90006df4:	06c7      	lsls	r7, r0, #27
90006df6:	f100 8107 	bmi.w	90007008 <HAL_ADC_ConfigChannel+0x2c8>
90006dfa:	f3c6 0682 	ubfx	r6, r6, #2, #3
90006dfe:	6948      	ldr	r0, [r1, #20]
90006e00:	0076      	lsls	r6, r6, #1
90006e02:	fa00 f606 	lsl.w	r6, r0, r6
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
90006e06:	690f      	ldr	r7, [r1, #16]
90006e08:	2f04      	cmp	r7, #4
90006e0a:	f000 80e0 	beq.w	90006fce <HAL_ADC_ConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
90006e0e:	f102 0460 	add.w	r4, r2, #96	; 0x60
    MODIFY_REG(*preg,
90006e12:	6808      	ldr	r0, [r1, #0]
90006e14:	f854 c027 	ldr.w	ip, [r4, r7, lsl #2]
90006e18:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
90006e1c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
90006e20:	ea40 000c 	orr.w	r0, r0, ip
90006e24:	4330      	orrs	r0, r6
90006e26:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
90006e2a:	7e48      	ldrb	r0, [r1, #25]
90006e2c:	690e      	ldr	r6, [r1, #16]
90006e2e:	2801      	cmp	r0, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
90006e30:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
90006e34:	bf0c      	ite	eq
90006e36:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
90006e3a:	2700      	movne	r7, #0
90006e3c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
90006e40:	4338      	orrs	r0, r7
90006e42:	f844 0026 	str.w	r0, [r4, r6, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
90006e46:	7e0c      	ldrb	r4, [r1, #24]
90006e48:	6908      	ldr	r0, [r1, #16]
90006e4a:	2c01      	cmp	r4, #1
90006e4c:	d104      	bne.n	90006e58 <HAL_ADC_ConfigChannel+0x118>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
90006e4e:	f000 001f 	and.w	r0, r0, #31
90006e52:	f44f 6500 	mov.w	r5, #2048	; 0x800
90006e56:	4085      	lsls	r5, r0
90006e58:	6910      	ldr	r0, [r2, #16]
90006e5a:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
90006e5e:	4305      	orrs	r5, r0
90006e60:	6115      	str	r5, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90006e62:	6890      	ldr	r0, [r2, #8]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
90006e64:	07c4      	lsls	r4, r0, #31
90006e66:	d414      	bmi.n	90006e92 <HAL_ADC_ConfigChannel+0x152>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
90006e68:	68ce      	ldr	r6, [r1, #12]
90006e6a:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
90006e6c:	f006 0718 	and.w	r7, r6, #24
90006e70:	488b      	ldr	r0, [pc, #556]	; (900070a0 <HAL_ADC_ConfigChannel+0x360>)
90006e72:	f8d2 50c0 	ldr.w	r5, [r2, #192]	; 0xc0
90006e76:	40f8      	lsrs	r0, r7
90006e78:	f3c4 0713 	ubfx	r7, r4, #0, #20
90006e7c:	4020      	ands	r0, r4
90006e7e:	ea25 0507 	bic.w	r5, r5, r7
90006e82:	4328      	orrs	r0, r5
90006e84:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
90006e88:	4886      	ldr	r0, [pc, #536]	; (900070a4 <HAL_ADC_ConfigChannel+0x364>)
90006e8a:	4286      	cmp	r6, r0
90006e8c:	d04d      	beq.n	90006f2a <HAL_ADC_ConfigChannel+0x1ea>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
90006e8e:	2c00      	cmp	r4, #0
90006e90:	db15      	blt.n	90006ebe <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90006e92:	2000      	movs	r0, #0
90006e94:	e003      	b.n	90006e9e <HAL_ADC_ConfigChannel+0x15e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90006e96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
90006e98:	f042 0220 	orr.w	r2, r2, #32
90006e9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
90006e9e:	2200      	movs	r2, #0
90006ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
90006ea4:	b003      	add	sp, #12
90006ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90006ea8:	6890      	ldr	r0, [r2, #8]
90006eaa:	e7da      	b.n	90006e62 <HAL_ADC_ConfigChannel+0x122>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90006eac:	fa94 f5a4 	rbit	r5, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
90006eb0:	b115      	cbz	r5, 90006eb8 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
  }
  return __builtin_clz(value);
90006eb2:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
90006eb6:	40a8      	lsls	r0, r5
90006eb8:	f3c4 6484 	ubfx	r4, r4, #26, #5
90006ebc:	e75b      	b.n	90006d76 <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90006ebe:	497a      	ldr	r1, [pc, #488]	; (900070a8 <HAL_ADC_ConfigChannel+0x368>)
90006ec0:	428a      	cmp	r2, r1
90006ec2:	f000 80c7 	beq.w	90007054 <HAL_ADC_ConfigChannel+0x314>
90006ec6:	f501 7180 	add.w	r1, r1, #256	; 0x100
90006eca:	428a      	cmp	r2, r1
90006ecc:	f000 80c2 	beq.w	90007054 <HAL_ADC_ConfigChannel+0x314>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
90006ed0:	4d76      	ldr	r5, [pc, #472]	; (900070ac <HAL_ADC_ConfigChannel+0x36c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90006ed2:	4877      	ldr	r0, [pc, #476]	; (900070b0 <HAL_ADC_ConfigChannel+0x370>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
90006ed4:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90006ed6:	6880      	ldr	r0, [r0, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
90006ed8:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
90006edc:	43c0      	mvns	r0, r0
90006ede:	f000 0001 	and.w	r0, r0, #1
90006ee2:	2800      	cmp	r0, #0
90006ee4:	f000 80c5 	beq.w	90007072 <HAL_ADC_ConfigChannel+0x332>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
90006ee8:	4872      	ldr	r0, [pc, #456]	; (900070b4 <HAL_ADC_ConfigChannel+0x374>)
90006eea:	4284      	cmp	r4, r0
90006eec:	f000 810e 	beq.w	9000710c <HAL_ADC_ConfigChannel+0x3cc>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
90006ef0:	4871      	ldr	r0, [pc, #452]	; (900070b8 <HAL_ADC_ConfigChannel+0x378>)
90006ef2:	4284      	cmp	r4, r0
90006ef4:	f000 812d 	beq.w	90007152 <HAL_ADC_ConfigChannel+0x412>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
90006ef8:	4870      	ldr	r0, [pc, #448]	; (900070bc <HAL_ADC_ConfigChannel+0x37c>)
90006efa:	4284      	cmp	r4, r0
90006efc:	d1c9      	bne.n	90006e92 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_VREFINT_INSTANCE(hadc))
90006efe:	0249      	lsls	r1, r1, #9
90006f00:	d4c7      	bmi.n	90006e92 <HAL_ADC_ConfigChannel+0x152>
90006f02:	496b      	ldr	r1, [pc, #428]	; (900070b0 <HAL_ADC_ConfigChannel+0x370>)
90006f04:	428a      	cmp	r2, r1
90006f06:	d1c4      	bne.n	90006e92 <HAL_ADC_ConfigChannel+0x152>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
90006f08:	68aa      	ldr	r2, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
90006f0a:	2000      	movs	r0, #0
90006f0c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
90006f10:	4332      	orrs	r2, r6
90006f12:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
90006f16:	60aa      	str	r2, [r5, #8]
}
90006f18:	e7c1      	b.n	90006e9e <HAL_ADC_ConfigChannel+0x15e>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
90006f1a:	68d6      	ldr	r6, [r2, #12]
90006f1c:	6948      	ldr	r0, [r1, #20]
90006f1e:	f3c6 0682 	ubfx	r6, r6, #2, #3
90006f22:	0076      	lsls	r6, r6, #1
90006f24:	fa00 f606 	lsl.w	r6, r0, r6
90006f28:	e76d      	b.n	90006e06 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90006f2a:	2f00      	cmp	r7, #0
90006f2c:	d073      	beq.n	90007016 <HAL_ADC_ConfigChannel+0x2d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90006f2e:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
90006f32:	2800      	cmp	r0, #0
90006f34:	f000 80c6 	beq.w	900070c4 <HAL_ADC_ConfigChannel+0x384>
  return __builtin_clz(value);
90006f38:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
90006f3c:	3001      	adds	r0, #1
90006f3e:	f000 001f 	and.w	r0, r0, #31
90006f42:	2809      	cmp	r0, #9
90006f44:	f240 80be 	bls.w	900070c4 <HAL_ADC_ConfigChannel+0x384>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90006f48:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
90006f4c:	2800      	cmp	r0, #0
90006f4e:	f000 8114 	beq.w	9000717a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
90006f52:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90006f56:	3001      	adds	r0, #1
90006f58:	0680      	lsls	r0, r0, #26
90006f5a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90006f5e:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
90006f62:	2d00      	cmp	r5, #0
90006f64:	f000 8107 	beq.w	90007176 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
90006f68:	fab5 f585 	clz	r5, r5
90006f6c:	2601      	movs	r6, #1
90006f6e:	3501      	adds	r5, #1
90006f70:	f005 051f 	and.w	r5, r5, #31
90006f74:	fa06 f505 	lsl.w	r5, r6, r5
90006f78:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
90006f7a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
90006f7e:	2c00      	cmp	r4, #0
90006f80:	f000 80f7 	beq.w	90007172 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
90006f84:	fab4 f484 	clz	r4, r4
90006f88:	f06f 061d 	mvn.w	r6, #29
90006f8c:	1c60      	adds	r0, r4, #1
90006f8e:	f000 041f 	and.w	r4, r0, #31
90006f92:	2003      	movs	r0, #3
90006f94:	fb10 6004 	smlabb	r0, r0, r4, r6
90006f98:	0500      	lsls	r0, r0, #20
90006f9a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
90006f9e:	4328      	orrs	r0, r5
  MODIFY_REG(*preg,
90006fa0:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
90006fa2:	f102 0514 	add.w	r5, r2, #20
90006fa6:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
90006fa8:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
90006fac:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
90006fb0:	fa04 f700 	lsl.w	r7, r4, r0
90006fb4:	5974      	ldr	r4, [r6, r5]
90006fb6:	ea24 0407 	bic.w	r4, r4, r7
90006fba:	688f      	ldr	r7, [r1, #8]
90006fbc:	fa07 f000 	lsl.w	r0, r7, r0
90006fc0:	4320      	orrs	r0, r4
90006fc2:	5170      	str	r0, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
90006fc4:	680c      	ldr	r4, [r1, #0]
}
90006fc6:	e762      	b.n	90006e8e <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
90006fc8:	2002      	movs	r0, #2
}
90006fca:	b003      	add	sp, #12
90006fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
90006fce:	6e10      	ldr	r0, [r2, #96]	; 0x60
90006fd0:	680c      	ldr	r4, [r1, #0]
90006fd2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
90006fd6:	06a5      	lsls	r5, r4, #26
90006fd8:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
90006fdc:	d030      	beq.n	90007040 <HAL_ADC_ConfigChannel+0x300>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
90006fde:	6e50      	ldr	r0, [r2, #100]	; 0x64
90006fe0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
90006fe4:	4285      	cmp	r5, r0
90006fe6:	d026      	beq.n	90007036 <HAL_ADC_ConfigChannel+0x2f6>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
90006fe8:	6e90      	ldr	r0, [r2, #104]	; 0x68
90006fea:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
90006fee:	4285      	cmp	r5, r0
90006ff0:	d02b      	beq.n	9000704a <HAL_ADC_ConfigChannel+0x30a>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
90006ff2:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
90006ff4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
90006ff8:	4285      	cmp	r5, r0
90006ffa:	f47f af32 	bne.w	90006e62 <HAL_ADC_ConfigChannel+0x122>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
90006ffe:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
90007000:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
90007004:	66d0      	str	r0, [r2, #108]	; 0x6c
90007006:	e72c      	b.n	90006e62 <HAL_ADC_ConfigChannel+0x122>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
90007008:	0876      	lsrs	r6, r6, #1
9000700a:	6948      	ldr	r0, [r1, #20]
9000700c:	f006 0608 	and.w	r6, r6, #8
90007010:	fa00 f606 	lsl.w	r6, r0, r6
90007014:	e6f7      	b.n	90006e06 <HAL_ADC_ConfigChannel+0xc6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90007016:	0ea4      	lsrs	r4, r4, #26
90007018:	3401      	adds	r4, #1
9000701a:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
9000701e:	2e09      	cmp	r6, #9
90007020:	d82d      	bhi.n	9000707e <HAL_ADC_ConfigChannel+0x33e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
90007022:	06a5      	lsls	r5, r4, #26
90007024:	2001      	movs	r0, #1
90007026:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
9000702a:	40b0      	lsls	r0, r6
9000702c:	4305      	orrs	r5, r0
9000702e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
90007032:	0500      	lsls	r0, r0, #20
90007034:	e7b3      	b.n	90006f9e <HAL_ADC_ConfigChannel+0x25e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
90007036:	6e50      	ldr	r0, [r2, #100]	; 0x64
90007038:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
9000703c:	6650      	str	r0, [r2, #100]	; 0x64
9000703e:	e7d3      	b.n	90006fe8 <HAL_ADC_ConfigChannel+0x2a8>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
90007040:	6e10      	ldr	r0, [r2, #96]	; 0x60
90007042:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
90007046:	6610      	str	r0, [r2, #96]	; 0x60
90007048:	e7c9      	b.n	90006fde <HAL_ADC_ConfigChannel+0x29e>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
9000704a:	6e90      	ldr	r0, [r2, #104]	; 0x68
9000704c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
90007050:	6690      	str	r0, [r2, #104]	; 0x68
90007052:	e7ce      	b.n	90006ff2 <HAL_ADC_ConfigChannel+0x2b2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007054:	4814      	ldr	r0, [pc, #80]	; (900070a8 <HAL_ADC_ConfigChannel+0x368>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
90007056:	4d1a      	ldr	r5, [pc, #104]	; (900070c0 <HAL_ADC_ConfigChannel+0x380>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007058:	f500 7080 	add.w	r0, r0, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
9000705c:	68a9      	ldr	r1, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
9000705e:	f850 6cf8 	ldr.w	r6, [r0, #-248]
90007062:	6880      	ldr	r0, [r0, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
90007064:	4330      	orrs	r0, r6
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
90007066:	f001 76e0 	and.w	r6, r1, #29360128	; 0x1c00000
9000706a:	43c0      	mvns	r0, r0
9000706c:	f000 0001 	and.w	r0, r0, #1
90007070:	e737      	b.n	90006ee2 <HAL_ADC_ConfigChannel+0x1a2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90007072:	6d5a      	ldr	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
90007074:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
90007076:	f042 0220 	orr.w	r2, r2, #32
9000707a:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
9000707c:	e70f      	b.n	90006e9e <HAL_ADC_ConfigChannel+0x15e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
9000707e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
90007082:	06a5      	lsls	r5, r4, #26
90007084:	2401      	movs	r4, #1
90007086:	381e      	subs	r0, #30
90007088:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
9000708c:	fa04 f606 	lsl.w	r6, r4, r6
90007090:	0500      	lsls	r0, r0, #20
90007092:	4335      	orrs	r5, r6
90007094:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
90007098:	e781      	b.n	90006f9e <HAL_ADC_ConfigChannel+0x25e>
9000709a:	bf00      	nop
9000709c:	5c001000 	.word	0x5c001000
900070a0:	000fffff 	.word	0x000fffff
900070a4:	47ff0000 	.word	0x47ff0000
900070a8:	40022000 	.word	0x40022000
900070ac:	58026300 	.word	0x58026300
900070b0:	58026000 	.word	0x58026000
900070b4:	cb840000 	.word	0xcb840000
900070b8:	c7520000 	.word	0xc7520000
900070bc:	cfb80000 	.word	0xcfb80000
900070c0:	40022300 	.word	0x40022300
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
900070c4:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
900070c8:	2800      	cmp	r0, #0
900070ca:	d05e      	beq.n	9000718a <HAL_ADC_ConfigChannel+0x44a>
  return __builtin_clz(value);
900070cc:	fab0 f080 	clz	r0, r0
900070d0:	3001      	adds	r0, #1
900070d2:	0680      	lsls	r0, r0, #26
900070d4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
900070d8:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
900070dc:	2d00      	cmp	r5, #0
900070de:	d052      	beq.n	90007186 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
900070e0:	fab5 f585 	clz	r5, r5
900070e4:	2601      	movs	r6, #1
900070e6:	3501      	adds	r5, #1
900070e8:	f005 051f 	and.w	r5, r5, #31
900070ec:	fa06 f505 	lsl.w	r5, r6, r5
900070f0:	4305      	orrs	r5, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
900070f2:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
900070f6:	2c00      	cmp	r4, #0
900070f8:	d042      	beq.n	90007180 <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
900070fa:	fab4 f484 	clz	r4, r4
900070fe:	3401      	adds	r4, #1
90007100:	f004 041f 	and.w	r4, r4, #31
90007104:	eb04 0444 	add.w	r4, r4, r4, lsl #1
90007108:	0520      	lsls	r0, r4, #20
9000710a:	e748      	b.n	90006f9e <HAL_ADC_ConfigChannel+0x25e>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
9000710c:	0208      	lsls	r0, r1, #8
9000710e:	f53f aec0 	bmi.w	90006e92 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
90007112:	491f      	ldr	r1, [pc, #124]	; (90007190 <HAL_ADC_ConfigChannel+0x450>)
90007114:	428a      	cmp	r2, r1
90007116:	f47f aebc 	bne.w	90006e92 <HAL_ADC_ConfigChannel+0x152>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
9000711a:	4a1e      	ldr	r2, [pc, #120]	; (90007194 <HAL_ADC_ConfigChannel+0x454>)
9000711c:	481e      	ldr	r0, [pc, #120]	; (90007198 <HAL_ADC_ConfigChannel+0x458>)
9000711e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
90007120:	68a9      	ldr	r1, [r5, #8]
90007122:	0992      	lsrs	r2, r2, #6
90007124:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
90007128:	fba0 0202 	umull	r0, r2, r0, r2
9000712c:	4331      	orrs	r1, r6
9000712e:	0992      	lsrs	r2, r2, #6
90007130:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
90007134:	3201      	adds	r2, #1
90007136:	60a9      	str	r1, [r5, #8]
90007138:	0052      	lsls	r2, r2, #1
9000713a:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
9000713c:	9a01      	ldr	r2, [sp, #4]
9000713e:	2a00      	cmp	r2, #0
90007140:	f43f aea7 	beq.w	90006e92 <HAL_ADC_ConfigChannel+0x152>
                wait_loop_index--;
90007144:	9a01      	ldr	r2, [sp, #4]
90007146:	3a01      	subs	r2, #1
90007148:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
9000714a:	9a01      	ldr	r2, [sp, #4]
9000714c:	2a00      	cmp	r2, #0
9000714e:	d1f9      	bne.n	90007144 <HAL_ADC_ConfigChannel+0x404>
90007150:	e69f      	b.n	90006e92 <HAL_ADC_ConfigChannel+0x152>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
90007152:	f011 7080 	ands.w	r0, r1, #16777216	; 0x1000000
90007156:	f47f ae9c 	bne.w	90006e92 <HAL_ADC_ConfigChannel+0x152>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
9000715a:	490d      	ldr	r1, [pc, #52]	; (90007190 <HAL_ADC_ConfigChannel+0x450>)
9000715c:	428a      	cmp	r2, r1
9000715e:	f47f ae98 	bne.w	90006e92 <HAL_ADC_ConfigChannel+0x152>
90007162:	68aa      	ldr	r2, [r5, #8]
90007164:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
90007168:	4332      	orrs	r2, r6
9000716a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
9000716e:	60aa      	str	r2, [r5, #8]
}
90007170:	e695      	b.n	90006e9e <HAL_ADC_ConfigChannel+0x15e>
90007172:	480a      	ldr	r0, [pc, #40]	; (9000719c <HAL_ADC_ConfigChannel+0x45c>)
90007174:	e713      	b.n	90006f9e <HAL_ADC_ConfigChannel+0x25e>
90007176:	2502      	movs	r5, #2
90007178:	e6fe      	b.n	90006f78 <HAL_ADC_ConfigChannel+0x238>
9000717a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
9000717e:	e6ee      	b.n	90006f5e <HAL_ADC_ConfigChannel+0x21e>
90007180:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
90007184:	e70b      	b.n	90006f9e <HAL_ADC_ConfigChannel+0x25e>
90007186:	2502      	movs	r5, #2
90007188:	e7b2      	b.n	900070f0 <HAL_ADC_ConfigChannel+0x3b0>
9000718a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
9000718e:	e7a3      	b.n	900070d8 <HAL_ADC_ConfigChannel+0x398>
90007190:	58026000 	.word	0x58026000
90007194:	24000054 	.word	0x24000054
90007198:	053e2d63 	.word	0x053e2d63
9000719c:	fe500000 	.word	0xfe500000

900071a0 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
900071a0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900071a2:	689a      	ldr	r2, [r3, #8]
900071a4:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
900071a8:	689a      	ldr	r2, [r3, #8]
{
900071aa:	b570      	push	{r4, r5, r6, lr}
900071ac:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900071ae:	d103      	bne.n	900071b8 <ADC_ConversionStop+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
900071b0:	0712      	lsls	r2, r2, #28
900071b2:	d401      	bmi.n	900071b8 <ADC_ConversionStop+0x18>
    }

  }

  /* Return HAL status */
  return HAL_OK;
900071b4:	2000      	movs	r0, #0
}
900071b6:	bd70      	pop	{r4, r5, r6, pc}
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
900071b8:	68da      	ldr	r2, [r3, #12]
900071ba:	0196      	lsls	r6, r2, #6
900071bc:	d504      	bpl.n	900071c8 <ADC_ConversionStop+0x28>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
900071be:	8aa0      	ldrh	r0, [r4, #20]
900071c0:	f240 1201 	movw	r2, #257	; 0x101
900071c4:	4290      	cmp	r0, r2
900071c6:	d01a      	beq.n	900071fe <ADC_ConversionStop+0x5e>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
900071c8:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900071ca:	689a      	ldr	r2, [r3, #8]
900071cc:	d040      	beq.n	90007250 <ADC_ConversionStop+0xb0>
900071ce:	0756      	lsls	r6, r2, #29
900071d0:	d508      	bpl.n	900071e4 <ADC_ConversionStop+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
900071d2:	689a      	ldr	r2, [r3, #8]
900071d4:	0790      	lsls	r0, r2, #30
900071d6:	d405      	bmi.n	900071e4 <ADC_ConversionStop+0x44>
  MODIFY_REG(ADCx->CR,
900071d8:	6898      	ldr	r0, [r3, #8]
900071da:	4a2d      	ldr	r2, [pc, #180]	; (90007290 <ADC_ConversionStop+0xf0>)
900071dc:	4002      	ands	r2, r0
900071de:	f042 0210 	orr.w	r2, r2, #16
900071e2:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
900071e4:	2901      	cmp	r1, #1
900071e6:	d019      	beq.n	9000721c <ADC_ConversionStop+0x7c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
900071e8:	689a      	ldr	r2, [r3, #8]
900071ea:	0712      	lsls	r2, r2, #28
900071ec:	d502      	bpl.n	900071f4 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
900071ee:	689a      	ldr	r2, [r3, #8]
900071f0:	0790      	lsls	r0, r2, #30
900071f2:	d534      	bpl.n	9000725e <ADC_ConversionStop+0xbe>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
900071f4:	2903      	cmp	r1, #3
900071f6:	bf14      	ite	ne
900071f8:	2504      	movne	r5, #4
900071fa:	250c      	moveq	r5, #12
900071fc:	e00f      	b.n	9000721e <ADC_ConversionStop+0x7e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
900071fe:	681a      	ldr	r2, [r3, #0]
90007200:	0650      	lsls	r0, r2, #25
90007202:	d406      	bmi.n	90007212 <ADC_ConversionStop+0x72>
90007204:	4a23      	ldr	r2, [pc, #140]	; (90007294 <ADC_ConversionStop+0xf4>)
90007206:	e001      	b.n	9000720c <ADC_ConversionStop+0x6c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
90007208:	3a01      	subs	r2, #1
9000720a:	d018      	beq.n	9000723e <ADC_ConversionStop+0x9e>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
9000720c:	6819      	ldr	r1, [r3, #0]
9000720e:	0649      	lsls	r1, r1, #25
90007210:	d5fa      	bpl.n	90007208 <ADC_ConversionStop+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
90007212:	2240      	movs	r2, #64	; 0x40
90007214:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90007216:	689a      	ldr	r2, [r3, #8]
90007218:	0752      	lsls	r2, r2, #29
9000721a:	d427      	bmi.n	9000726c <ADC_ConversionStop+0xcc>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
9000721c:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
9000721e:	f7ff fcf3 	bl	90006c08 <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
90007222:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
90007224:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
90007226:	689b      	ldr	r3, [r3, #8]
90007228:	421d      	tst	r5, r3
9000722a:	d0c3      	beq.n	900071b4 <ADC_ConversionStop+0x14>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
9000722c:	f7ff fcec 	bl	90006c08 <HAL_GetTick>
90007230:	1b83      	subs	r3, r0, r6
90007232:	2b05      	cmp	r3, #5
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
90007234:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
90007236:	d9f6      	bls.n	90007226 <ADC_ConversionStop+0x86>
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
90007238:	689a      	ldr	r2, [r3, #8]
9000723a:	422a      	tst	r2, r5
9000723c:	d0f3      	beq.n	90007226 <ADC_ConversionStop+0x86>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000723e:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
90007240:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
90007242:	f043 0310 	orr.w	r3, r3, #16
90007246:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
90007248:	6da3      	ldr	r3, [r4, #88]	; 0x58
9000724a:	4303      	orrs	r3, r0
9000724c:	65a3      	str	r3, [r4, #88]	; 0x58
}
9000724e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
90007250:	0715      	lsls	r5, r2, #28
90007252:	d502      	bpl.n	9000725a <ADC_ConversionStop+0xba>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
90007254:	689a      	ldr	r2, [r3, #8]
90007256:	0792      	lsls	r2, r2, #30
90007258:	d513      	bpl.n	90007282 <ADC_ConversionStop+0xe2>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
9000725a:	2508      	movs	r5, #8
        break;
9000725c:	e7df      	b.n	9000721e <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
9000725e:	6898      	ldr	r0, [r3, #8]
90007260:	4a0b      	ldr	r2, [pc, #44]	; (90007290 <ADC_ConversionStop+0xf0>)
90007262:	4002      	ands	r2, r0
90007264:	f042 0220 	orr.w	r2, r2, #32
90007268:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
9000726a:	e7c3      	b.n	900071f4 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
9000726c:	689a      	ldr	r2, [r3, #8]
9000726e:	0796      	lsls	r6, r2, #30
90007270:	d4d4      	bmi.n	9000721c <ADC_ConversionStop+0x7c>
  MODIFY_REG(ADCx->CR,
90007272:	6899      	ldr	r1, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
90007274:	2504      	movs	r5, #4
90007276:	4a06      	ldr	r2, [pc, #24]	; (90007290 <ADC_ConversionStop+0xf0>)
90007278:	400a      	ands	r2, r1
9000727a:	f042 0210 	orr.w	r2, r2, #16
9000727e:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
90007280:	e7cd      	b.n	9000721e <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
90007282:	6899      	ldr	r1, [r3, #8]
90007284:	4a02      	ldr	r2, [pc, #8]	; (90007290 <ADC_ConversionStop+0xf0>)
90007286:	400a      	ands	r2, r1
90007288:	f042 0220 	orr.w	r2, r2, #32
9000728c:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
9000728e:	e7e4      	b.n	9000725a <ADC_ConversionStop+0xba>
90007290:	7fffffc0 	.word	0x7fffffc0
90007294:	000cdc00 	.word	0x000cdc00

90007298 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
90007298:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
9000729a:	689a      	ldr	r2, [r3, #8]
9000729c:	07d1      	lsls	r1, r2, #31
9000729e:	d501      	bpl.n	900072a4 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
900072a0:	2000      	movs	r0, #0
}
900072a2:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
900072a4:	6899      	ldr	r1, [r3, #8]
900072a6:	4a21      	ldr	r2, [pc, #132]	; (9000732c <ADC_Enable+0x94>)
900072a8:	4211      	tst	r1, r2
{
900072aa:	b570      	push	{r4, r5, r6, lr}
900072ac:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
900072ae:	d12c      	bne.n	9000730a <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
900072b0:	6899      	ldr	r1, [r3, #8]
900072b2:	4a1f      	ldr	r2, [pc, #124]	; (90007330 <ADC_Enable+0x98>)
900072b4:	400a      	ands	r2, r1
900072b6:	f042 0201 	orr.w	r2, r2, #1
900072ba:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
900072bc:	f7ff fca4 	bl	90006c08 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
900072c0:	6823      	ldr	r3, [r4, #0]
900072c2:	4a1c      	ldr	r2, [pc, #112]	; (90007334 <ADC_Enable+0x9c>)
    tickstart = HAL_GetTick();
900072c4:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
900072c6:	4293      	cmp	r3, r2
900072c8:	d028      	beq.n	9000731c <ADC_Enable+0x84>
900072ca:	f502 7280 	add.w	r2, r2, #256	; 0x100
900072ce:	4293      	cmp	r3, r2
900072d0:	d024      	beq.n	9000731c <ADC_Enable+0x84>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
900072d2:	4a19      	ldr	r2, [pc, #100]	; (90007338 <ADC_Enable+0xa0>)
900072d4:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
900072d6:	681a      	ldr	r2, [r3, #0]
900072d8:	07d6      	lsls	r6, r2, #31
900072da:	d414      	bmi.n	90007306 <ADC_Enable+0x6e>
  MODIFY_REG(ADCx->CR,
900072dc:	4e14      	ldr	r6, [pc, #80]	; (90007330 <ADC_Enable+0x98>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
900072de:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
900072e0:	07d0      	lsls	r0, r2, #31
900072e2:	d404      	bmi.n	900072ee <ADC_Enable+0x56>
  MODIFY_REG(ADCx->CR,
900072e4:	689a      	ldr	r2, [r3, #8]
900072e6:	4032      	ands	r2, r6
900072e8:	f042 0201 	orr.w	r2, r2, #1
900072ec:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
900072ee:	f7ff fc8b 	bl	90006c08 <HAL_GetTick>
900072f2:	1b43      	subs	r3, r0, r5
900072f4:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
900072f6:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
900072f8:	d902      	bls.n	90007300 <ADC_Enable+0x68>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
900072fa:	681a      	ldr	r2, [r3, #0]
900072fc:	07d1      	lsls	r1, r2, #31
900072fe:	d504      	bpl.n	9000730a <ADC_Enable+0x72>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
90007300:	681a      	ldr	r2, [r3, #0]
90007302:	07d2      	lsls	r2, r2, #31
90007304:	d5eb      	bpl.n	900072de <ADC_Enable+0x46>
  return HAL_OK;
90007306:	2000      	movs	r0, #0
}
90007308:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000730a:	6d63      	ldr	r3, [r4, #84]	; 0x54
            return HAL_ERROR;
9000730c:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000730e:	f043 0310 	orr.w	r3, r3, #16
90007312:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
90007314:	6da3      	ldr	r3, [r4, #88]	; 0x58
90007316:	4303      	orrs	r3, r0
90007318:	65a3      	str	r3, [r4, #88]	; 0x58
}
9000731a:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
9000731c:	4a07      	ldr	r2, [pc, #28]	; (9000733c <ADC_Enable+0xa4>)
9000731e:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
90007320:	06d2      	lsls	r2, r2, #27
90007322:	d0d8      	beq.n	900072d6 <ADC_Enable+0x3e>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
90007324:	4a06      	ldr	r2, [pc, #24]	; (90007340 <ADC_Enable+0xa8>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
90007326:	4293      	cmp	r3, r2
90007328:	d1d5      	bne.n	900072d6 <ADC_Enable+0x3e>
9000732a:	e7ec      	b.n	90007306 <ADC_Enable+0x6e>
9000732c:	8000003f 	.word	0x8000003f
90007330:	7fffffc0 	.word	0x7fffffc0
90007334:	40022000 	.word	0x40022000
90007338:	58026300 	.word	0x58026300
9000733c:	40022300 	.word	0x40022300
90007340:	40022100 	.word	0x40022100

90007344 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
90007344:	4a39      	ldr	r2, [pc, #228]	; (9000742c <HAL_ADC_Start+0xe8>)
90007346:	6803      	ldr	r3, [r0, #0]
90007348:	4293      	cmp	r3, r2
{
9000734a:	b570      	push	{r4, r5, r6, lr}
9000734c:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
9000734e:	d046      	beq.n	900073de <HAL_ADC_Start+0x9a>
90007350:	f502 7280 	add.w	r2, r2, #256	; 0x100
90007354:	4293      	cmp	r3, r2
90007356:	d042      	beq.n	900073de <HAL_ADC_Start+0x9a>
90007358:	4a35      	ldr	r2, [pc, #212]	; (90007430 <HAL_ADC_Start+0xec>)
9000735a:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
9000735c:	689d      	ldr	r5, [r3, #8]
9000735e:	f015 0504 	ands.w	r5, r5, #4
90007362:	d142      	bne.n	900073ea <HAL_ADC_Start+0xa6>
    __HAL_LOCK(hadc);
90007364:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
90007368:	2b01      	cmp	r3, #1
9000736a:	d03e      	beq.n	900073ea <HAL_ADC_Start+0xa6>
9000736c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
9000736e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
90007370:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
90007374:	f7ff ff90 	bl	90007298 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
90007378:	2800      	cmp	r0, #0
9000737a:	d138      	bne.n	900073ee <HAL_ADC_Start+0xaa>
      ADC_STATE_CLR_SET(hadc->State,
9000737c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
9000737e:	f006 061f 	and.w	r6, r6, #31
90007382:	4a2c      	ldr	r2, [pc, #176]	; (90007434 <HAL_ADC_Start+0xf0>)
90007384:	401a      	ands	r2, r3
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
90007386:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
90007388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
9000738c:	6562      	str	r2, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
9000738e:	4a2a      	ldr	r2, [pc, #168]	; (90007438 <HAL_ADC_Start+0xf4>)
90007390:	4293      	cmp	r3, r2
90007392:	d045      	beq.n	90007420 <HAL_ADC_Start+0xdc>
90007394:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
90007396:	6d62      	ldr	r2, [r4, #84]	; 0x54
90007398:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
9000739c:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
9000739e:	6d62      	ldr	r2, [r4, #84]	; 0x54
900073a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
900073a4:	d040      	beq.n	90007428 <HAL_ADC_Start+0xe4>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
900073a6:	6da2      	ldr	r2, [r4, #88]	; 0x58
900073a8:	f022 0206 	bic.w	r2, r2, #6
900073ac:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
900073ae:	221c      	movs	r2, #28
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
900073b0:	428b      	cmp	r3, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
900073b2:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
900073b4:	f04f 0200 	mov.w	r2, #0
900073b8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
900073bc:	d020      	beq.n	90007400 <HAL_ADC_Start+0xbc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
900073be:	2e09      	cmp	r6, #9
900073c0:	d918      	bls.n	900073f4 <HAL_ADC_Start+0xb0>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
900073c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
900073c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
900073c8:	6563      	str	r3, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
900073ca:	68cb      	ldr	r3, [r1, #12]
900073cc:	019b      	lsls	r3, r3, #6
900073ce:	d505      	bpl.n	900073dc <HAL_ADC_Start+0x98>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
900073d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
900073d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
900073d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
900073da:	6563      	str	r3, [r4, #84]	; 0x54
}
900073dc:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
900073de:	4a17      	ldr	r2, [pc, #92]	; (9000743c <HAL_ADC_Start+0xf8>)
900073e0:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900073e2:	689d      	ldr	r5, [r3, #8]
900073e4:	f015 0504 	ands.w	r5, r5, #4
900073e8:	d0bc      	beq.n	90007364 <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
900073ea:	2002      	movs	r0, #2
}
900073ec:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
900073ee:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
900073f2:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
900073f4:	f240 2221 	movw	r2, #545	; 0x221
900073f8:	fa22 f606 	lsr.w	r6, r2, r6
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
900073fc:	07f5      	lsls	r5, r6, #31
900073fe:	d5e0      	bpl.n	900073c2 <HAL_ADC_Start+0x7e>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
90007400:	68da      	ldr	r2, [r3, #12]
90007402:	0192      	lsls	r2, r2, #6
90007404:	d505      	bpl.n	90007412 <HAL_ADC_Start+0xce>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
90007406:	6d62      	ldr	r2, [r4, #84]	; 0x54
90007408:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
9000740c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90007410:	6562      	str	r2, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
90007412:	6899      	ldr	r1, [r3, #8]
90007414:	4a0a      	ldr	r2, [pc, #40]	; (90007440 <HAL_ADC_Start+0xfc>)
90007416:	400a      	ands	r2, r1
90007418:	f042 0204 	orr.w	r2, r2, #4
9000741c:	609a      	str	r2, [r3, #8]
}
9000741e:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
90007420:	4902      	ldr	r1, [pc, #8]	; (9000742c <HAL_ADC_Start+0xe8>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
90007422:	2e00      	cmp	r6, #0
90007424:	d0b7      	beq.n	90007396 <HAL_ADC_Start+0x52>
90007426:	e7ba      	b.n	9000739e <HAL_ADC_Start+0x5a>
        ADC_CLEAR_ERRORCODE(hadc);
90007428:	65a2      	str	r2, [r4, #88]	; 0x58
9000742a:	e7c0      	b.n	900073ae <HAL_ADC_Start+0x6a>
9000742c:	40022000 	.word	0x40022000
90007430:	58026300 	.word	0x58026300
90007434:	fffff0fe 	.word	0xfffff0fe
90007438:	40022100 	.word	0x40022100
9000743c:	40022300 	.word	0x40022300
90007440:	7fffffc0 	.word	0x7fffffc0

90007444 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
90007444:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
90007446:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
90007448:	689a      	ldr	r2, [r3, #8]
9000744a:	0795      	lsls	r5, r2, #30
9000744c:	d502      	bpl.n	90007454 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
9000744e:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
90007450:	2000      	movs	r0, #0
}
90007452:	bd38      	pop	{r3, r4, r5, pc}
90007454:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
90007456:	07d4      	lsls	r4, r2, #31
90007458:	d529      	bpl.n	900074ae <ADC_Disable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
9000745a:	689a      	ldr	r2, [r3, #8]
9000745c:	4604      	mov	r4, r0
9000745e:	f002 020d 	and.w	r2, r2, #13
90007462:	2a01      	cmp	r2, #1
90007464:	d008      	beq.n	90007478 <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
90007466:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
90007468:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000746a:	f043 0310 	orr.w	r3, r3, #16
9000746e:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
90007470:	6da3      	ldr	r3, [r4, #88]	; 0x58
90007472:	4303      	orrs	r3, r0
90007474:	65a3      	str	r3, [r4, #88]	; 0x58
}
90007476:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
90007478:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
9000747a:	2103      	movs	r1, #3
9000747c:	4a0d      	ldr	r2, [pc, #52]	; (900074b4 <ADC_Disable+0x70>)
9000747e:	4002      	ands	r2, r0
90007480:	f042 0202 	orr.w	r2, r2, #2
90007484:	609a      	str	r2, [r3, #8]
90007486:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
90007488:	f7ff fbbe 	bl	90006c08 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
9000748c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
9000748e:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
90007490:	689b      	ldr	r3, [r3, #8]
90007492:	07d9      	lsls	r1, r3, #31
90007494:	d50b      	bpl.n	900074ae <ADC_Disable+0x6a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
90007496:	f7ff fbb7 	bl	90006c08 <HAL_GetTick>
9000749a:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
9000749c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
9000749e:	2802      	cmp	r0, #2
900074a0:	d902      	bls.n	900074a8 <ADC_Disable+0x64>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
900074a2:	689a      	ldr	r2, [r3, #8]
900074a4:	07d2      	lsls	r2, r2, #31
900074a6:	d4de      	bmi.n	90007466 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
900074a8:	689b      	ldr	r3, [r3, #8]
900074aa:	07db      	lsls	r3, r3, #31
900074ac:	d4f3      	bmi.n	90007496 <ADC_Disable+0x52>
  return HAL_OK;
900074ae:	2000      	movs	r0, #0
}
900074b0:	bd38      	pop	{r3, r4, r5, pc}
900074b2:	bf00      	nop
900074b4:	7fffffc0 	.word	0x7fffffc0

900074b8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
900074b8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
900074bc:	2b01      	cmp	r3, #1
900074be:	d01b      	beq.n	900074f8 <HAL_ADC_Stop+0x40>
900074c0:	2301      	movs	r3, #1
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
900074c2:	2103      	movs	r1, #3
{
900074c4:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
900074c6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
900074ca:	4604      	mov	r4, r0
900074cc:	f7ff fe68 	bl	900071a0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
900074d0:	b118      	cbz	r0, 900074da <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
900074d2:	2300      	movs	r3, #0
900074d4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
900074d8:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
900074da:	4620      	mov	r0, r4
900074dc:	f7ff ffb2 	bl	90007444 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
900074e0:	2800      	cmp	r0, #0
900074e2:	d1f6      	bne.n	900074d2 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
900074e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
900074e6:	4b05      	ldr	r3, [pc, #20]	; (900074fc <HAL_ADC_Stop+0x44>)
900074e8:	4013      	ands	r3, r2
900074ea:	f043 0301 	orr.w	r3, r3, #1
900074ee:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
900074f0:	2300      	movs	r3, #0
900074f2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
900074f6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
900074f8:	2002      	movs	r0, #2
}
900074fa:	4770      	bx	lr
900074fc:	ffffeefe 	.word	0xffffeefe

90007500 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
90007500:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
90007502:	4a57      	ldr	r2, [pc, #348]	; (90007660 <ADC_ConfigureBoostMode+0x160>)
{
90007504:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
90007506:	6803      	ldr	r3, [r0, #0]
90007508:	4293      	cmp	r3, r2
9000750a:	d026      	beq.n	9000755a <ADC_ConfigureBoostMode+0x5a>
9000750c:	f502 7280 	add.w	r2, r2, #256	; 0x100
90007510:	4293      	cmp	r3, r2
90007512:	d022      	beq.n	9000755a <ADC_ConfigureBoostMode+0x5a>
90007514:	4b53      	ldr	r3, [pc, #332]	; (90007664 <ADC_ConfigureBoostMode+0x164>)
90007516:	689b      	ldr	r3, [r3, #8]
90007518:	f413 3f40 	tst.w	r3, #196608	; 0x30000
9000751c:	d022      	beq.n	90007564 <ADC_ConfigureBoostMode+0x64>
  {
    freq = HAL_RCC_GetHCLKFreq();
9000751e:	f004 f835 	bl	9000b58c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
90007522:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
90007524:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
90007526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000752a:	f000 8088 	beq.w	9000763e <ADC_ConfigureBoostMode+0x13e>
9000752e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
90007532:	d06c      	beq.n	9000760e <ADC_ConfigureBoostMode+0x10e>
90007534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90007538:	f000 8081 	beq.w	9000763e <ADC_ConfigureBoostMode+0x13e>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
9000753c:	f7ff fb6a 	bl	90006c14 <HAL_GetREVID>
90007540:	f241 0303 	movw	r3, #4099	; 0x1003
90007544:	4298      	cmp	r0, r3
90007546:	d84b      	bhi.n	900075e0 <ADC_ConfigureBoostMode+0xe0>
  {
    if (freq > 20000000UL)
90007548:	4b47      	ldr	r3, [pc, #284]	; (90007668 <ADC_ConfigureBoostMode+0x168>)
9000754a:	429d      	cmp	r5, r3
9000754c:	d92a      	bls.n	900075a4 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
9000754e:	6822      	ldr	r2, [r4, #0]
90007550:	6893      	ldr	r3, [r2, #8]
90007552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90007556:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
90007558:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
9000755a:	4b44      	ldr	r3, [pc, #272]	; (9000766c <ADC_ConfigureBoostMode+0x16c>)
9000755c:	689b      	ldr	r3, [r3, #8]
9000755e:	f413 3f40 	tst.w	r3, #196608	; 0x30000
90007562:	d1dc      	bne.n	9000751e <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
90007564:	f44f 2000 	mov.w	r0, #524288	; 0x80000
90007568:	2100      	movs	r1, #0
9000756a:	f005 fa3d 	bl	9000c9e8 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
9000756e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
90007570:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
90007572:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
90007576:	d06c      	beq.n	90007652 <ADC_ConfigureBoostMode+0x152>
90007578:	d808      	bhi.n	9000758c <ADC_ConfigureBoostMode+0x8c>
9000757a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
9000757e:	d050      	beq.n	90007622 <ADC_ConfigureBoostMode+0x122>
90007580:	d916      	bls.n	900075b0 <ADC_ConfigureBoostMode+0xb0>
90007582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
90007586:	d1d9      	bne.n	9000753c <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
90007588:	0945      	lsrs	r5, r0, #5
        break;
9000758a:	e7d7      	b.n	9000753c <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
9000758c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
90007590:	d045      	beq.n	9000761e <ADC_ConfigureBoostMode+0x11e>
90007592:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
90007596:	d1d1      	bne.n	9000753c <ADC_ConfigureBoostMode+0x3c>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
90007598:	f7ff fb3c 	bl	90006c14 <HAL_GetREVID>
9000759c:	f241 0303 	movw	r3, #4099	; 0x1003
900075a0:	4298      	cmp	r0, r3
900075a2:	d840      	bhi.n	90007626 <ADC_ConfigureBoostMode+0x126>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
900075a4:	6822      	ldr	r2, [r4, #0]
900075a6:	6893      	ldr	r3, [r2, #8]
900075a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
900075ac:	6093      	str	r3, [r2, #8]
}
900075ae:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
900075b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
900075b4:	d006      	beq.n	900075c4 <ADC_ConfigureBoostMode+0xc4>
900075b6:	d90a      	bls.n	900075ce <ADC_ConfigureBoostMode+0xce>
900075b8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
900075bc:	d002      	beq.n	900075c4 <ADC_ConfigureBoostMode+0xc4>
900075be:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
900075c2:	d1bb      	bne.n	9000753c <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
900075c4:	0c9b      	lsrs	r3, r3, #18
900075c6:	005b      	lsls	r3, r3, #1
900075c8:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
900075cc:	e7b6      	b.n	9000753c <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
900075ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
900075d2:	d0f7      	beq.n	900075c4 <ADC_ConfigureBoostMode+0xc4>
900075d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
900075d8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
900075dc:	d0f2      	beq.n	900075c4 <ADC_ConfigureBoostMode+0xc4>
900075de:	e7ad      	b.n	9000753c <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
900075e0:	4b23      	ldr	r3, [pc, #140]	; (90007670 <ADC_ConfigureBoostMode+0x170>)
900075e2:	429d      	cmp	r5, r3
900075e4:	d805      	bhi.n	900075f2 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
900075e6:	6822      	ldr	r2, [r4, #0]
900075e8:	6893      	ldr	r3, [r2, #8]
900075ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
900075ee:	6093      	str	r3, [r2, #8]
}
900075f0:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
900075f2:	4b20      	ldr	r3, [pc, #128]	; (90007674 <ADC_ConfigureBoostMode+0x174>)
900075f4:	429d      	cmp	r5, r3
900075f6:	d91a      	bls.n	9000762e <ADC_ConfigureBoostMode+0x12e>
    else if (freq <= 25000000UL)
900075f8:	4b1f      	ldr	r3, [pc, #124]	; (90007678 <ADC_ConfigureBoostMode+0x178>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
900075fa:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
900075fc:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
900075fe:	6893      	ldr	r3, [r2, #8]
    else if (freq <= 25000000UL)
90007600:	d829      	bhi.n	90007656 <ADC_ConfigureBoostMode+0x156>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
90007602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90007606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
9000760a:	6093      	str	r3, [r2, #8]
}
9000760c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
9000760e:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
90007610:	f7ff fb00 	bl	90006c14 <HAL_GetREVID>
90007614:	f241 0303 	movw	r3, #4099	; 0x1003
90007618:	4298      	cmp	r0, r3
9000761a:	d8e1      	bhi.n	900075e0 <ADC_ConfigureBoostMode+0xe0>
9000761c:	e794      	b.n	90007548 <ADC_ConfigureBoostMode+0x48>
        freq /= 128UL;
9000761e:	09c5      	lsrs	r5, r0, #7
        break;
90007620:	e78c      	b.n	9000753c <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
90007622:	0905      	lsrs	r5, r0, #4
        break;
90007624:	e78a      	b.n	9000753c <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
90007626:	4b12      	ldr	r3, [pc, #72]	; (90007670 <ADC_ConfigureBoostMode+0x170>)
90007628:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
9000762c:	d2db      	bcs.n	900075e6 <ADC_ConfigureBoostMode+0xe6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
9000762e:	6822      	ldr	r2, [r4, #0]
90007630:	6893      	ldr	r3, [r2, #8]
90007632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90007636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000763a:	6093      	str	r3, [r2, #8]
}
9000763c:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
9000763e:	0c1b      	lsrs	r3, r3, #16
90007640:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
90007644:	f7ff fae6 	bl	90006c14 <HAL_GetREVID>
90007648:	f241 0303 	movw	r3, #4099	; 0x1003
9000764c:	4298      	cmp	r0, r3
9000764e:	d8c7      	bhi.n	900075e0 <ADC_ConfigureBoostMode+0xe0>
90007650:	e77a      	b.n	90007548 <ADC_ConfigureBoostMode+0x48>
        freq /= 64UL;
90007652:	0985      	lsrs	r5, r0, #6
        break;
90007654:	e772      	b.n	9000753c <ADC_ConfigureBoostMode+0x3c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
90007656:	f443 7340 	orr.w	r3, r3, #768	; 0x300
9000765a:	6093      	str	r3, [r2, #8]
}
9000765c:	bd38      	pop	{r3, r4, r5, pc}
9000765e:	bf00      	nop
90007660:	40022000 	.word	0x40022000
90007664:	58026300 	.word	0x58026300
90007668:	01312d00 	.word	0x01312d00
9000766c:	40022300 	.word	0x40022300
90007670:	00bebc21 	.word	0x00bebc21
90007674:	017d7841 	.word	0x017d7841
90007678:	02faf081 	.word	0x02faf081

9000767c <HAL_ADC_Init>:
{
9000767c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
9000767e:	2300      	movs	r3, #0
{
90007680:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
90007682:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
90007684:	2800      	cmp	r0, #0
90007686:	f000 80d1 	beq.w	9000782c <HAL_ADC_Init+0x1b0>
  if (hadc->State == HAL_ADC_STATE_RESET)
9000768a:	6d45      	ldr	r5, [r0, #84]	; 0x54
9000768c:	4604      	mov	r4, r0
9000768e:	2d00      	cmp	r5, #0
90007690:	f000 80bb 	beq.w	9000780a <HAL_ADC_Init+0x18e>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
90007694:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
90007696:	6893      	ldr	r3, [r2, #8]
90007698:	009d      	lsls	r5, r3, #2
9000769a:	d503      	bpl.n	900076a4 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
9000769c:	6891      	ldr	r1, [r2, #8]
9000769e:	4b72      	ldr	r3, [pc, #456]	; (90007868 <HAL_ADC_Init+0x1ec>)
900076a0:	400b      	ands	r3, r1
900076a2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
900076a4:	6893      	ldr	r3, [r2, #8]
900076a6:	00d8      	lsls	r0, r3, #3
900076a8:	d416      	bmi.n	900076d8 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
900076aa:	4b70      	ldr	r3, [pc, #448]	; (9000786c <HAL_ADC_Init+0x1f0>)
900076ac:	4970      	ldr	r1, [pc, #448]	; (90007870 <HAL_ADC_Init+0x1f4>)
900076ae:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
900076b0:	6890      	ldr	r0, [r2, #8]
900076b2:	099b      	lsrs	r3, r3, #6
900076b4:	fba1 1303 	umull	r1, r3, r1, r3
900076b8:	496e      	ldr	r1, [pc, #440]	; (90007874 <HAL_ADC_Init+0x1f8>)
900076ba:	099b      	lsrs	r3, r3, #6
900076bc:	4001      	ands	r1, r0
900076be:	3301      	adds	r3, #1
900076c0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
900076c4:	6091      	str	r1, [r2, #8]
900076c6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
900076c8:	9b01      	ldr	r3, [sp, #4]
900076ca:	b12b      	cbz	r3, 900076d8 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
900076cc:	9b01      	ldr	r3, [sp, #4]
900076ce:	3b01      	subs	r3, #1
900076d0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
900076d2:	9b01      	ldr	r3, [sp, #4]
900076d4:	2b00      	cmp	r3, #0
900076d6:	d1f9      	bne.n	900076cc <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
900076d8:	6893      	ldr	r3, [r2, #8]
900076da:	00d9      	lsls	r1, r3, #3
900076dc:	d424      	bmi.n	90007728 <HAL_ADC_Init+0xac>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
900076de:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
900076e0:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
900076e2:	f043 0310 	orr.w	r3, r3, #16
900076e6:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
900076e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
900076ea:	432b      	orrs	r3, r5
900076ec:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900076ee:	6893      	ldr	r3, [r2, #8]
900076f0:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
900076f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
900076f6:	d11d      	bne.n	90007734 <HAL_ADC_Init+0xb8>
900076f8:	06db      	lsls	r3, r3, #27
900076fa:	d41b      	bmi.n	90007734 <HAL_ADC_Init+0xb8>
    ADC_STATE_CLR_SET(hadc->State,
900076fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
900076fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
90007702:	f043 0302 	orr.w	r3, r3, #2
90007706:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007708:	6893      	ldr	r3, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
9000770a:	07de      	lsls	r6, r3, #31
9000770c:	d428      	bmi.n	90007760 <HAL_ADC_Init+0xe4>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
9000770e:	4b5a      	ldr	r3, [pc, #360]	; (90007878 <HAL_ADC_Init+0x1fc>)
90007710:	429a      	cmp	r2, r3
90007712:	d017      	beq.n	90007744 <HAL_ADC_Init+0xc8>
90007714:	f503 7380 	add.w	r3, r3, #256	; 0x100
90007718:	429a      	cmp	r2, r3
9000771a:	d013      	beq.n	90007744 <HAL_ADC_Init+0xc8>
9000771c:	4b57      	ldr	r3, [pc, #348]	; (9000787c <HAL_ADC_Init+0x200>)
9000771e:	689b      	ldr	r3, [r3, #8]
90007720:	07d9      	lsls	r1, r3, #31
90007722:	d41d      	bmi.n	90007760 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
90007724:	4a56      	ldr	r2, [pc, #344]	; (90007880 <HAL_ADC_Init+0x204>)
90007726:	e015      	b.n	90007754 <HAL_ADC_Init+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
90007728:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
9000772a:	2500      	movs	r5, #0
9000772c:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
90007730:	6d63      	ldr	r3, [r4, #84]	; 0x54
90007732:	d0e1      	beq.n	900076f8 <HAL_ADC_Init+0x7c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
90007734:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
90007736:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
90007738:	f043 0310 	orr.w	r3, r3, #16
}
9000773c:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
9000773e:	6563      	str	r3, [r4, #84]	; 0x54
}
90007740:	b002      	add	sp, #8
90007742:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
90007744:	4a4c      	ldr	r2, [pc, #304]	; (90007878 <HAL_ADC_Init+0x1fc>)
90007746:	4b4f      	ldr	r3, [pc, #316]	; (90007884 <HAL_ADC_Init+0x208>)
90007748:	6892      	ldr	r2, [r2, #8]
9000774a:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
9000774c:	4313      	orrs	r3, r2
9000774e:	07d8      	lsls	r0, r3, #31
90007750:	d406      	bmi.n	90007760 <HAL_ADC_Init+0xe4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
90007752:	4a4d      	ldr	r2, [pc, #308]	; (90007888 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
90007754:	6893      	ldr	r3, [r2, #8]
90007756:	6861      	ldr	r1, [r4, #4]
90007758:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
9000775c:	430b      	orrs	r3, r1
9000775e:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
90007760:	f7ff fa58 	bl	90006c14 <HAL_GetREVID>
90007764:	f241 0303 	movw	r3, #4099	; 0x1003
90007768:	68a1      	ldr	r1, [r4, #8]
9000776a:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
9000776c:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
9000776e:	d852      	bhi.n	90007816 <HAL_ADC_Init+0x19a>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
90007770:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
90007774:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
90007776:	6b20      	ldr	r0, [r4, #48]	; 0x30
90007778:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
9000777c:	4302      	orrs	r2, r0
9000777e:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
90007780:	2b01      	cmp	r3, #1
90007782:	d103      	bne.n	9000778c <HAL_ADC_Init+0x110>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
90007784:	6a23      	ldr	r3, [r4, #32]
90007786:	3b01      	subs	r3, #1
90007788:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
9000778c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000778e:	b123      	cbz	r3, 9000779a <HAL_ADC_Init+0x11e>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
90007790:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
90007794:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90007796:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
90007798:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
9000779a:	6823      	ldr	r3, [r4, #0]
9000779c:	493b      	ldr	r1, [pc, #236]	; (9000788c <HAL_ADC_Init+0x210>)
9000779e:	68d8      	ldr	r0, [r3, #12]
900077a0:	4001      	ands	r1, r0
900077a2:	430a      	orrs	r2, r1
900077a4:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900077a6:	689a      	ldr	r2, [r3, #8]
900077a8:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
900077ac:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900077ae:	d11c      	bne.n	900077ea <HAL_ADC_Init+0x16e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
900077b0:	0712      	lsls	r2, r2, #28
900077b2:	d41a      	bmi.n	900077ea <HAL_ADC_Init+0x16e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
900077b4:	68d8      	ldr	r0, [r3, #12]
900077b6:	4a36      	ldr	r2, [pc, #216]	; (90007890 <HAL_ADC_Init+0x214>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
900077b8:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
900077ba:	4002      	ands	r2, r0
900077bc:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
900077c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
900077c2:	430a      	orrs	r2, r1
900077c4:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
900077c6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
900077ca:	2a01      	cmp	r2, #1
900077cc:	d03a      	beq.n	90007844 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
900077ce:	691a      	ldr	r2, [r3, #16]
900077d0:	f022 0201 	bic.w	r2, r2, #1
900077d4:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
900077d6:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
900077d8:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
900077da:	6b61      	ldr	r1, [r4, #52]	; 0x34
900077dc:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
900077e0:	430a      	orrs	r2, r1
900077e2:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
900077e4:	f7ff fe8c 	bl	90007500 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
900077e8:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
900077ea:	68e2      	ldr	r2, [r4, #12]
900077ec:	2a01      	cmp	r2, #1
900077ee:	d021      	beq.n	90007834 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
900077f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900077f2:	f022 020f 	bic.w	r2, r2, #15
900077f6:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
900077f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
900077fa:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
900077fc:	f023 0303 	bic.w	r3, r3, #3
90007800:	f043 0301 	orr.w	r3, r3, #1
90007804:	6563      	str	r3, [r4, #84]	; 0x54
}
90007806:	b002      	add	sp, #8
90007808:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
9000780a:	f7fc fe5d 	bl	900044c8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
9000780e:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
90007810:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
90007814:	e73e      	b.n	90007694 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
90007816:	2910      	cmp	r1, #16
90007818:	d1aa      	bne.n	90007770 <HAL_ADC_Init+0xf4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
9000781a:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
9000781c:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
9000781e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
90007822:	6b21      	ldr	r1, [r4, #48]	; 0x30
90007824:	430a      	orrs	r2, r1
90007826:	f042 021c 	orr.w	r2, r2, #28
9000782a:	e7a9      	b.n	90007780 <HAL_ADC_Init+0x104>
    return HAL_ERROR;
9000782c:	2501      	movs	r5, #1
}
9000782e:	4628      	mov	r0, r5
90007830:	b002      	add	sp, #8
90007832:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
90007834:	6b19      	ldr	r1, [r3, #48]	; 0x30
90007836:	69a2      	ldr	r2, [r4, #24]
90007838:	f021 010f 	bic.w	r1, r1, #15
9000783c:	3a01      	subs	r2, #1
9000783e:	430a      	orrs	r2, r1
90007840:	631a      	str	r2, [r3, #48]	; 0x30
90007842:	e7d9      	b.n	900077f8 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
90007844:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
90007848:	6c66      	ldr	r6, [r4, #68]	; 0x44
9000784a:	3901      	subs	r1, #1
9000784c:	6918      	ldr	r0, [r3, #16]
9000784e:	4332      	orrs	r2, r6
90007850:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90007854:	6ca1      	ldr	r1, [r4, #72]	; 0x48
90007856:	430a      	orrs	r2, r1
90007858:	490e      	ldr	r1, [pc, #56]	; (90007894 <HAL_ADC_Init+0x218>)
9000785a:	4001      	ands	r1, r0
9000785c:	430a      	orrs	r2, r1
9000785e:	f042 0201 	orr.w	r2, r2, #1
90007862:	611a      	str	r2, [r3, #16]
90007864:	e7b7      	b.n	900077d6 <HAL_ADC_Init+0x15a>
90007866:	bf00      	nop
90007868:	5fffffc0 	.word	0x5fffffc0
9000786c:	24000054 	.word	0x24000054
90007870:	053e2d63 	.word	0x053e2d63
90007874:	6fffffc0 	.word	0x6fffffc0
90007878:	40022000 	.word	0x40022000
9000787c:	58026000 	.word	0x58026000
90007880:	58026300 	.word	0x58026300
90007884:	40022100 	.word	0x40022100
90007888:	40022300 	.word	0x40022300
9000788c:	fff0c003 	.word	0xfff0c003
90007890:	ffffbffc 	.word	0xffffbffc
90007894:	fc00f81e 	.word	0xfc00f81e

90007898 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
90007898:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
9000789a:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
9000789e:	b09a      	sub	sp, #104	; 0x68
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
900078a0:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
900078a2:	2a01      	cmp	r2, #1
900078a4:	d04d      	beq.n	90007942 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
900078a6:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
900078a8:	4c2b      	ldr	r4, [pc, #172]	; (90007958 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
900078aa:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
900078ac:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
900078ae:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
900078b0:	9216      	str	r2, [sp, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
900078b2:	42a5      	cmp	r5, r4
  __HAL_LOCK(hadc);
900078b4:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
900078b8:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
900078ba:	d008      	beq.n	900078ce <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
900078bc:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
900078be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
900078c2:	f041 0120 	orr.w	r1, r1, #32
900078c6:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
900078c8:	b01a      	add	sp, #104	; 0x68
900078ca:	bcf0      	pop	{r4, r5, r6, r7}
900078cc:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
900078ce:	4c23      	ldr	r4, [pc, #140]	; (9000795c <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
900078d0:	68a2      	ldr	r2, [r4, #8]
900078d2:	0752      	lsls	r2, r2, #29
900078d4:	d50b      	bpl.n	900078ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
900078d6:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
900078d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
900078da:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
900078dc:	f042 0220 	orr.w	r2, r2, #32
900078e0:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
900078e2:	2200      	movs	r2, #0
900078e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
900078e8:	b01a      	add	sp, #104	; 0x68
900078ea:	bcf0      	pop	{r4, r5, r6, r7}
900078ec:	4770      	bx	lr
900078ee:	68a8      	ldr	r0, [r5, #8]
900078f0:	f010 0004 	ands.w	r0, r0, #4
900078f4:	d1f0      	bne.n	900078d8 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
900078f6:	b1c6      	cbz	r6, 9000792a <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
900078f8:	f8df c068 	ldr.w	ip, [pc, #104]	; 90007964 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
900078fc:	684f      	ldr	r7, [r1, #4]
900078fe:	f8dc 2008 	ldr.w	r2, [ip, #8]
90007902:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
90007906:	433a      	orrs	r2, r7
90007908:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
9000790c:	68ad      	ldr	r5, [r5, #8]
9000790e:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
90007910:	432a      	orrs	r2, r5
90007912:	07d4      	lsls	r4, r2, #31
90007914:	d413      	bmi.n	9000793e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
        MODIFY_REG(tmpADC_Common->CCR,
90007916:	688a      	ldr	r2, [r1, #8]
90007918:	f8dc 1008 	ldr.w	r1, [ip, #8]
9000791c:	4316      	orrs	r6, r2
9000791e:	4a10      	ldr	r2, [pc, #64]	; (90007960 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
90007920:	400a      	ands	r2, r1
90007922:	4316      	orrs	r6, r2
90007924:	f8cc 6008 	str.w	r6, [ip, #8]
90007928:	e7db      	b.n	900078e2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
9000792a:	490e      	ldr	r1, [pc, #56]	; (90007964 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
9000792c:	688a      	ldr	r2, [r1, #8]
9000792e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
90007932:	608a      	str	r2, [r1, #8]
90007934:	68a8      	ldr	r0, [r5, #8]
90007936:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
90007938:	4302      	orrs	r2, r0
9000793a:	07d0      	lsls	r0, r2, #31
9000793c:	d505      	bpl.n	9000794a <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
9000793e:	2000      	movs	r0, #0
90007940:	e7cf      	b.n	900078e2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
90007942:	2002      	movs	r0, #2
}
90007944:	b01a      	add	sp, #104	; 0x68
90007946:	bcf0      	pop	{r4, r5, r6, r7}
90007948:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
9000794a:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
9000794c:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
9000794e:	4a04      	ldr	r2, [pc, #16]	; (90007960 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
90007950:	4022      	ands	r2, r4
90007952:	608a      	str	r2, [r1, #8]
90007954:	e7c5      	b.n	900078e2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
90007956:	bf00      	nop
90007958:	40022000 	.word	0x40022000
9000795c:	40022100 	.word	0x40022100
90007960:	fffff0e0 	.word	0xfffff0e0
90007964:	40022300 	.word	0x40022300

90007968 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90007968:	4906      	ldr	r1, [pc, #24]	; (90007984 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000796a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000796e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
90007970:	4b05      	ldr	r3, [pc, #20]	; (90007988 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90007972:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90007974:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90007978:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
9000797c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
9000797e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
90007980:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
90007982:	4770      	bx	lr
90007984:	e000ed00 	.word	0xe000ed00
90007988:	05fa0000 	.word	0x05fa0000

9000798c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
9000798c:	4b1b      	ldr	r3, [pc, #108]	; (900079fc <HAL_NVIC_SetPriority+0x70>)
9000798e:	68db      	ldr	r3, [r3, #12]
90007990:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90007994:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90007996:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000799a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
9000799e:	f1be 0f04 	cmp.w	lr, #4
900079a2:	bf28      	it	cs
900079a4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900079a8:	f1bc 0f06 	cmp.w	ip, #6
900079ac:	d91a      	bls.n	900079e4 <HAL_NVIC_SetPriority+0x58>
900079ae:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900079b0:	f04f 3cff 	mov.w	ip, #4294967295
900079b4:	fa0c fc03 	lsl.w	ip, ip, r3
900079b8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900079bc:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
900079c0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900079c2:	fa0c fc0e 	lsl.w	ip, ip, lr
900079c6:	ea21 010c 	bic.w	r1, r1, ip
900079ca:	fa01 f103 	lsl.w	r1, r1, r3
900079ce:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
900079d2:	db0a      	blt.n	900079ea <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900079d4:	0109      	lsls	r1, r1, #4
900079d6:	4b0a      	ldr	r3, [pc, #40]	; (90007a00 <HAL_NVIC_SetPriority+0x74>)
900079d8:	b2c9      	uxtb	r1, r1
900079da:	4403      	add	r3, r0
900079dc:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
900079e0:	f85d fb04 	ldr.w	pc, [sp], #4
900079e4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900079e6:	4613      	mov	r3, r2
900079e8:	e7e8      	b.n	900079bc <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900079ea:	f000 000f 	and.w	r0, r0, #15
900079ee:	0109      	lsls	r1, r1, #4
900079f0:	4b04      	ldr	r3, [pc, #16]	; (90007a04 <HAL_NVIC_SetPriority+0x78>)
900079f2:	b2c9      	uxtb	r1, r1
900079f4:	4403      	add	r3, r0
900079f6:	7619      	strb	r1, [r3, #24]
900079f8:	f85d fb04 	ldr.w	pc, [sp], #4
900079fc:	e000ed00 	.word	0xe000ed00
90007a00:	e000e100 	.word	0xe000e100
90007a04:	e000ecfc 	.word	0xe000ecfc

90007a08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90007a08:	2800      	cmp	r0, #0
90007a0a:	db07      	blt.n	90007a1c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90007a0c:	2301      	movs	r3, #1
90007a0e:	f000 011f 	and.w	r1, r0, #31
90007a12:	4a03      	ldr	r2, [pc, #12]	; (90007a20 <HAL_NVIC_EnableIRQ+0x18>)
90007a14:	0940      	lsrs	r0, r0, #5
90007a16:	408b      	lsls	r3, r1
90007a18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90007a1c:	4770      	bx	lr
90007a1e:	bf00      	nop
90007a20:	e000e100 	.word	0xe000e100

90007a24 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90007a24:	2800      	cmp	r0, #0
90007a26:	db0d      	blt.n	90007a44 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90007a28:	0943      	lsrs	r3, r0, #5
90007a2a:	2201      	movs	r2, #1
90007a2c:	f000 001f 	and.w	r0, r0, #31
90007a30:	4905      	ldr	r1, [pc, #20]	; (90007a48 <HAL_NVIC_DisableIRQ+0x24>)
90007a32:	3320      	adds	r3, #32
90007a34:	fa02 f000 	lsl.w	r0, r2, r0
90007a38:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
90007a3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90007a40:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
90007a44:	4770      	bx	lr
90007a46:	bf00      	nop
90007a48:	e000e100 	.word	0xe000e100

90007a4c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
90007a4c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90007a50:	4b04      	ldr	r3, [pc, #16]	; (90007a64 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90007a52:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90007a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90007a56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90007a5a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
90007a5c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
90007a60:	4770      	bx	lr
90007a62:	bf00      	nop
90007a64:	e000ed00 	.word	0xe000ed00

90007a68 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90007a68:	4b06      	ldr	r3, [pc, #24]	; (90007a84 <HAL_MPU_Enable+0x1c>)
90007a6a:	f040 0001 	orr.w	r0, r0, #1
90007a6e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90007a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90007a74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90007a78:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90007a7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90007a7e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90007a82:	4770      	bx	lr
90007a84:	e000ed00 	.word	0xe000ed00

90007a88 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90007a88:	4a17      	ldr	r2, [pc, #92]	; (90007ae8 <HAL_MPU_ConfigRegion+0x60>)
90007a8a:	7843      	ldrb	r3, [r0, #1]
90007a8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
90007a90:	7801      	ldrb	r1, [r0, #0]
90007a92:	b321      	cbz	r1, 90007ade <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90007a94:	6843      	ldr	r3, [r0, #4]
{
90007a96:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
90007a98:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90007a9c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90007a9e:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90007aa2:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90007aa4:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90007aa8:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90007aac:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90007ab0:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90007ab2:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90007ab4:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90007ab8:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90007abc:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90007ac0:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90007ac4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
90007ac8:	7a01      	ldrb	r1, [r0, #8]
90007aca:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
90007ace:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90007ad2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90007ad6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90007ada:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
90007ade:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
90007ae2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
90007ae6:	4770      	bx	lr
90007ae8:	e000ed00 	.word	0xe000ed00

90007aec <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
90007aec:	2800      	cmp	r0, #0
90007aee:	d036      	beq.n	90007b5e <HAL_CRC_Init+0x72>
{
90007af0:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
90007af2:	7f43      	ldrb	r3, [r0, #29]
90007af4:	4604      	mov	r4, r0
90007af6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90007afa:	b363      	cbz	r3, 90007b56 <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
90007afc:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90007afe:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
90007b00:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90007b02:	b9f3      	cbnz	r3, 90007b42 <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
90007b04:	6823      	ldr	r3, [r4, #0]
90007b06:	4a17      	ldr	r2, [pc, #92]	; (90007b64 <HAL_CRC_Init+0x78>)
90007b08:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
90007b0a:	689a      	ldr	r2, [r3, #8]
90007b0c:	f022 0218 	bic.w	r2, r2, #24
90007b10:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
90007b12:	7962      	ldrb	r2, [r4, #5]
90007b14:	b18a      	cbz	r2, 90007b3a <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
90007b16:	6922      	ldr	r2, [r4, #16]
90007b18:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90007b1a:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007b1c:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90007b20:	f021 0160 	bic.w	r1, r1, #96	; 0x60
90007b24:	4311      	orrs	r1, r2
90007b26:	6099      	str	r1, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
90007b28:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007b2a:	689a      	ldr	r2, [r3, #8]
90007b2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90007b30:	4302      	orrs	r2, r0

  /* Return function status */
  return HAL_OK;
90007b32:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007b34:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
90007b36:	7761      	strb	r1, [r4, #29]
}
90007b38:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90007b3a:	f04f 32ff 	mov.w	r2, #4294967295
90007b3e:	611a      	str	r2, [r3, #16]
90007b40:	e7eb      	b.n	90007b1a <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
90007b42:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
90007b46:	4620      	mov	r0, r4
90007b48:	f000 f80e 	bl	90007b68 <HAL_CRCEx_Polynomial_Set>
90007b4c:	b908      	cbnz	r0, 90007b52 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90007b4e:	6823      	ldr	r3, [r4, #0]
90007b50:	e7df      	b.n	90007b12 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
90007b52:	2001      	movs	r0, #1
}
90007b54:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
90007b56:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
90007b58:	f7fc fd10 	bl	9000457c <HAL_CRC_MspInit>
90007b5c:	e7ce      	b.n	90007afc <HAL_CRC_Init+0x10>
    return HAL_ERROR;
90007b5e:	2001      	movs	r0, #1
}
90007b60:	4770      	bx	lr
90007b62:	bf00      	nop
90007b64:	04c11db7 	.word	0x04c11db7

90007b68 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
90007b68:	07cb      	lsls	r3, r1, #31
90007b6a:	d51a      	bpl.n	90007ba2 <HAL_CRCEx_Polynomial_Set+0x3a>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90007b6c:	231e      	movs	r3, #30
{
90007b6e:	b410      	push	{r4}
90007b70:	e001      	b.n	90007b76 <HAL_CRCEx_Polynomial_Set+0xe>
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90007b72:	3b01      	subs	r3, #1
90007b74:	d317      	bcc.n	90007ba6 <HAL_CRCEx_Polynomial_Set+0x3e>
90007b76:	fa21 fc03 	lsr.w	ip, r1, r3
90007b7a:	f01c 0f01 	tst.w	ip, #1
90007b7e:	d0f8      	beq.n	90007b72 <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
90007b80:	2a18      	cmp	r2, #24
90007b82:	d811      	bhi.n	90007ba8 <HAL_CRCEx_Polynomial_Set+0x40>
90007b84:	e8df f002 	tbb	[pc, r2]
90007b88:	10101016 	.word	0x10101016
90007b8c:	10101010 	.word	0x10101010
90007b90:	10101024 	.word	0x10101024
90007b94:	10101010 	.word	0x10101010
90007b98:	10101021 	.word	0x10101021
90007b9c:	10101010 	.word	0x10101010
90007ba0:	14          	.byte	0x14
90007ba1:	00          	.byte	0x00
    status =  HAL_ERROR;
90007ba2:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
90007ba4:	4770      	bx	lr
    switch (PolyLength)
90007ba6:	b12a      	cbz	r2, 90007bb4 <HAL_CRCEx_Polynomial_Set+0x4c>
        status =  HAL_ERROR;
90007ba8:	2001      	movs	r0, #1
}
90007baa:	f85d 4b04 	ldr.w	r4, [sp], #4
90007bae:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
90007bb0:	2b06      	cmp	r3, #6
90007bb2:	d8f9      	bhi.n	90007ba8 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
90007bb4:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90007bb6:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
90007bb8:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90007bba:	68a3      	ldr	r3, [r4, #8]
90007bbc:	f023 0318 	bic.w	r3, r3, #24
90007bc0:	431a      	orrs	r2, r3
90007bc2:	60a2      	str	r2, [r4, #8]
}
90007bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
90007bc8:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
90007bca:	2b07      	cmp	r3, #7
90007bcc:	d9f2      	bls.n	90007bb4 <HAL_CRCEx_Polynomial_Set+0x4c>
90007bce:	e7eb      	b.n	90007ba8 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
90007bd0:	2b0f      	cmp	r3, #15
90007bd2:	d9ef      	bls.n	90007bb4 <HAL_CRCEx_Polynomial_Set+0x4c>
90007bd4:	e7e8      	b.n	90007ba8 <HAL_CRCEx_Polynomial_Set+0x40>
90007bd6:	bf00      	nop

90007bd8 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
90007bd8:	2800      	cmp	r0, #0
90007bda:	d035      	beq.n	90007c48 <HAL_DMA2D_Init+0x70>
{
90007bdc:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
90007bde:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
90007be2:	4604      	mov	r4, r0
90007be4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90007be8:	b34b      	cbz	r3, 90007c3e <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007bea:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007bec:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007bee:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007bf0:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007bf4:	69e1      	ldr	r1, [r4, #28]
90007bf6:	681d      	ldr	r5, [r3, #0]
90007bf8:	4814      	ldr	r0, [pc, #80]	; (90007c4c <HAL_DMA2D_Init+0x74>)
90007bfa:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007bfc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007bfe:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007c00:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007c02:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007c04:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007c06:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007c08:	4302      	orrs	r2, r0
90007c0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
90007c0c:	4810      	ldr	r0, [pc, #64]	; (90007c50 <HAL_DMA2D_Init+0x78>)
90007c0e:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007c10:	4910      	ldr	r1, [pc, #64]	; (90007c54 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007c12:	4302      	orrs	r2, r0
90007c14:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
90007c18:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007c1a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007c1e:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007c20:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007c22:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007c24:	6b59      	ldr	r1, [r3, #52]	; 0x34
90007c26:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90007c2a:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007c2c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
90007c30:	430a      	orrs	r2, r1
90007c32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90007c34:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
90007c36:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90007c38:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
90007c3c:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
90007c3e:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
90007c42:	f7fc fcb3 	bl	900045ac <HAL_DMA2D_MspInit>
90007c46:	e7d0      	b.n	90007bea <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
90007c48:	2001      	movs	r0, #1
}
90007c4a:	4770      	bx	lr
90007c4c:	fff8ffbf 	.word	0xfff8ffbf
90007c50:	fffffef8 	.word	0xfffffef8
90007c54:	ffff0000 	.word	0xffff0000

90007c58 <HAL_DMA2D_LineEventCallback>:
90007c58:	4770      	bx	lr
90007c5a:	bf00      	nop

90007c5c <HAL_DMA2D_CLUTLoadingCpltCallback>:
90007c5c:	4770      	bx	lr
90007c5e:	bf00      	nop

90007c60 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90007c60:	6803      	ldr	r3, [r0, #0]
{
90007c62:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90007c64:	685d      	ldr	r5, [r3, #4]
{
90007c66:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
90007c68:	681e      	ldr	r6, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
90007c6a:	07ea      	lsls	r2, r5, #31
90007c6c:	d501      	bpl.n	90007c72 <HAL_DMA2D_IRQHandler+0x12>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
90007c6e:	05f1      	lsls	r1, r6, #23
90007c70:	d456      	bmi.n	90007d20 <HAL_DMA2D_IRQHandler+0xc0>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
90007c72:	06aa      	lsls	r2, r5, #26
90007c74:	d501      	bpl.n	90007c7a <HAL_DMA2D_IRQHandler+0x1a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
90007c76:	04b3      	lsls	r3, r6, #18
90007c78:	d43b      	bmi.n	90007cf2 <HAL_DMA2D_IRQHandler+0x92>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
90007c7a:	0728      	lsls	r0, r5, #28
90007c7c:	d501      	bpl.n	90007c82 <HAL_DMA2D_IRQHandler+0x22>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
90007c7e:	0531      	lsls	r1, r6, #20
90007c80:	d421      	bmi.n	90007cc6 <HAL_DMA2D_IRQHandler+0x66>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
90007c82:	076a      	lsls	r2, r5, #29
90007c84:	d501      	bpl.n	90007c8a <HAL_DMA2D_IRQHandler+0x2a>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
90007c86:	0573      	lsls	r3, r6, #21
90007c88:	d472      	bmi.n	90007d70 <HAL_DMA2D_IRQHandler+0x110>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
90007c8a:	07a8      	lsls	r0, r5, #30
90007c8c:	d501      	bpl.n	90007c92 <HAL_DMA2D_IRQHandler+0x32>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
90007c8e:	05b1      	lsls	r1, r6, #22
90007c90:	d404      	bmi.n	90007c9c <HAL_DMA2D_IRQHandler+0x3c>
        hdma2d->XferCpltCallback(hdma2d);
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
90007c92:	06ea      	lsls	r2, r5, #27
90007c94:	d501      	bpl.n	90007c9a <HAL_DMA2D_IRQHandler+0x3a>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
90007c96:	04f3      	lsls	r3, r6, #19
90007c98:	d457      	bmi.n	90007d4a <HAL_DMA2D_IRQHandler+0xea>
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
90007c9a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
90007c9c:	6823      	ldr	r3, [r4, #0]
90007c9e:	681a      	ldr	r2, [r3, #0]
90007ca0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
90007ca4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
90007ca6:	2202      	movs	r2, #2
90007ca8:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007caa:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
90007cae:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90007cb0:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007cb2:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007cb6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
90007cba:	6a23      	ldr	r3, [r4, #32]
90007cbc:	2b00      	cmp	r3, #0
90007cbe:	d0e8      	beq.n	90007c92 <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
90007cc0:	4620      	mov	r0, r4
90007cc2:	4798      	blx	r3
90007cc4:	e7e5      	b.n	90007c92 <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
90007cc6:	6823      	ldr	r3, [r4, #0]
90007cc8:	681a      	ldr	r2, [r3, #0]
90007cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
90007cce:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
90007cd0:	2208      	movs	r2, #8
90007cd2:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007cd4:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
90007cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
90007cd8:	4313      	orrs	r3, r2
90007cda:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007cdc:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007ce0:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90007ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90007ce4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007ce8:	2b00      	cmp	r3, #0
90007cea:	d0ca      	beq.n	90007c82 <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
90007cec:	4620      	mov	r0, r4
90007cee:	4798      	blx	r3
90007cf0:	e7c7      	b.n	90007c82 <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
90007cf2:	6823      	ldr	r3, [r4, #0]
90007cf4:	681a      	ldr	r2, [r3, #0]
90007cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
90007cfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
90007cfc:	2220      	movs	r2, #32
90007cfe:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007d00:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90007d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
90007d04:	f043 0302 	orr.w	r3, r3, #2
90007d08:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007d0a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007d0e:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90007d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90007d12:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007d16:	2b00      	cmp	r3, #0
90007d18:	d0af      	beq.n	90007c7a <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
90007d1a:	4620      	mov	r0, r4
90007d1c:	4798      	blx	r3
90007d1e:	e7ac      	b.n	90007c7a <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90007d20:	681a      	ldr	r2, [r3, #0]
90007d22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90007d26:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
90007d28:	6e42      	ldr	r2, [r0, #100]	; 0x64
90007d2a:	f042 0201 	orr.w	r2, r2, #1
90007d2e:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90007d30:	2201      	movs	r2, #1
90007d32:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007d34:	2304      	movs	r3, #4
90007d36:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007d3a:	2300      	movs	r3, #0
90007d3c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007d40:	6a43      	ldr	r3, [r0, #36]	; 0x24
90007d42:	2b00      	cmp	r3, #0
90007d44:	d095      	beq.n	90007c72 <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
90007d46:	4798      	blx	r3
90007d48:	e793      	b.n	90007c72 <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90007d4a:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90007d4c:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007d4e:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
90007d50:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90007d52:	681a      	ldr	r2, [r3, #0]
90007d54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90007d58:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90007d5a:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90007d5c:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90007d60:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007d64:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007d66:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90007d6a:	f7ff ff77 	bl	90007c5c <HAL_DMA2D_CLUTLoadingCpltCallback>
}
90007d6e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90007d70:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
90007d72:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90007d74:	681a      	ldr	r2, [r3, #0]
90007d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
90007d7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
90007d7c:	2204      	movs	r2, #4
90007d7e:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
90007d80:	f7ff ff6a 	bl	90007c58 <HAL_DMA2D_LineEventCallback>
90007d84:	e781      	b.n	90007c8a <HAL_DMA2D_IRQHandler+0x2a>
90007d86:	bf00      	nop

90007d88 <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
90007d88:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
90007d8c:	2a01      	cmp	r2, #1
90007d8e:	d065      	beq.n	90007e5c <HAL_DMA2D_ConfigLayer+0xd4>
90007d90:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007d92:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007d96:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007d98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
90007d9c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
90007d9e:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007da0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
90007da4:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90007da8:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007daa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
90007dac:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
90007dae:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007db0:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007db4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
90007db8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007dba:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
90007dbe:	ea42 0204 	orr.w	r2, r2, r4
90007dc2:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007dc6:	d922      	bls.n	90007e0e <HAL_DMA2D_ConfigLayer+0x86>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
90007dc8:	6b45      	ldr	r5, [r0, #52]	; 0x34
90007dca:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90007dce:	b981      	cbnz	r1, 90007df2 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007dd0:	6818      	ldr	r0, [r3, #0]
90007dd2:	4923      	ldr	r1, [pc, #140]	; (90007e60 <HAL_DMA2D_ConfigLayer+0xd8>)
90007dd4:	6a45      	ldr	r5, [r0, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007dd6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007dd8:	4029      	ands	r1, r5
90007dda:	430a      	orrs	r2, r1
90007ddc:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007dde:	6184      	str	r4, [r0, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
90007de0:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
90007de2:	2101      	movs	r1, #1

  return HAL_OK;
90007de4:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
90007de6:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
90007dea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
90007dee:	bc70      	pop	{r4, r5, r6}
90007df0:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90007df2:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007df4:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90007df6:	d129      	bne.n	90007e4c <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007df8:	69e5      	ldr	r5, [r4, #28]
90007dfa:	491a      	ldr	r1, [pc, #104]	; (90007e64 <HAL_DMA2D_ConfigLayer+0xdc>)
90007dfc:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90007dfe:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007e00:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007e02:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
90007e06:	430a      	orrs	r2, r1
90007e08:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007e0a:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007e0c:	e7e8      	b.n	90007de0 <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90007e0e:	6b44      	ldr	r4, [r0, #52]	; 0x34
90007e10:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
90007e14:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
90007e16:	b961      	cbnz	r1, 90007e32 <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007e18:	6818      	ldr	r0, [r3, #0]
90007e1a:	4911      	ldr	r1, [pc, #68]	; (90007e60 <HAL_DMA2D_ConfigLayer+0xd8>)
90007e1c:	6a46      	ldr	r6, [r0, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007e1e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007e20:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007e22:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007e24:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007e28:	430a      	orrs	r2, r1
90007e2a:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007e2c:	6185      	str	r5, [r0, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007e2e:	6284      	str	r4, [r0, #40]	; 0x28
90007e30:	e7d6      	b.n	90007de0 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007e32:	681c      	ldr	r4, [r3, #0]
90007e34:	490a      	ldr	r1, [pc, #40]	; (90007e60 <HAL_DMA2D_ConfigLayer+0xd8>)
90007e36:	69e5      	ldr	r5, [r4, #28]
90007e38:	4029      	ands	r1, r5
90007e3a:	430a      	orrs	r2, r1
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90007e3c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007e3e:	6a80      	ldr	r0, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90007e40:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007e44:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007e46:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90007e48:	6221      	str	r1, [r4, #32]
90007e4a:	e7c9      	b.n	90007de0 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007e4c:	69e5      	ldr	r5, [r4, #28]
90007e4e:	4904      	ldr	r1, [pc, #16]	; (90007e60 <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007e50:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007e52:	4029      	ands	r1, r5
90007e54:	430a      	orrs	r2, r1
90007e56:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007e58:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007e5a:	e7c1      	b.n	90007de0 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
90007e5c:	2002      	movs	r0, #2
}
90007e5e:	4770      	bx	lr
90007e60:	00ccfff0 	.word	0x00ccfff0
90007e64:	00c0fff0 	.word	0x00c0fff0

90007e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90007e6c:	680c      	ldr	r4, [r1, #0]
{
90007e6e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90007e70:	2c00      	cmp	r4, #0
90007e72:	f000 80a6 	beq.w	90007fc2 <HAL_GPIO_Init+0x15a>
90007e76:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90007e7a:	4f8e      	ldr	r7, [pc, #568]	; (900080b4 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
90007e7c:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90007e7e:	2201      	movs	r2, #1
90007e80:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
90007e82:	ea12 0e04 	ands.w	lr, r2, r4
90007e86:	f000 8095 	beq.w	90007fb4 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90007e8a:	684d      	ldr	r5, [r1, #4]
90007e8c:	f005 0903 	and.w	r9, r5, #3
90007e90:	f109 36ff 	add.w	r6, r9, #4294967295
90007e94:	2e01      	cmp	r6, #1
90007e96:	f240 8097 	bls.w	90007fc8 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
90007e9a:	f1b9 0f03 	cmp.w	r9, #3
90007e9e:	f040 80d1 	bne.w	90008044 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90007ea2:	fa09 f20c 	lsl.w	r2, r9, ip
90007ea6:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
90007eaa:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90007eac:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90007eb0:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90007eb4:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
90007eb8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
90007eba:	d07b      	beq.n	90007fb4 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90007ebc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
90007ec0:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90007ec4:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90007ec8:	f042 0202 	orr.w	r2, r2, #2
90007ecc:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90007ed0:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
90007ed4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
90007ed8:	f508 6880 	add.w	r8, r8, #1024	; 0x400
90007edc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
90007ee0:	f002 0202 	and.w	r2, r2, #2
90007ee4:	9201      	str	r2, [sp, #4]
90007ee6:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90007ee8:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
90007eea:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90007eee:	fa02 f209 	lsl.w	r2, r2, r9
90007ef2:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90007ef6:	4e70      	ldr	r6, [pc, #448]	; (900080b8 <HAL_GPIO_Init+0x250>)
90007ef8:	42b0      	cmp	r0, r6
90007efa:	d029      	beq.n	90007f50 <HAL_GPIO_Init+0xe8>
90007efc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
90007f00:	42b0      	cmp	r0, r6
90007f02:	f000 80ac 	beq.w	9000805e <HAL_GPIO_Init+0x1f6>
90007f06:	4e6d      	ldr	r6, [pc, #436]	; (900080bc <HAL_GPIO_Init+0x254>)
90007f08:	42b0      	cmp	r0, r6
90007f0a:	f000 80ae 	beq.w	9000806a <HAL_GPIO_Init+0x202>
90007f0e:	4e6c      	ldr	r6, [pc, #432]	; (900080c0 <HAL_GPIO_Init+0x258>)
90007f10:	42b0      	cmp	r0, r6
90007f12:	f000 809e 	beq.w	90008052 <HAL_GPIO_Init+0x1ea>
90007f16:	4e6b      	ldr	r6, [pc, #428]	; (900080c4 <HAL_GPIO_Init+0x25c>)
90007f18:	42b0      	cmp	r0, r6
90007f1a:	f000 80b2 	beq.w	90008082 <HAL_GPIO_Init+0x21a>
90007f1e:	4e6a      	ldr	r6, [pc, #424]	; (900080c8 <HAL_GPIO_Init+0x260>)
90007f20:	42b0      	cmp	r0, r6
90007f22:	f000 80b4 	beq.w	9000808e <HAL_GPIO_Init+0x226>
90007f26:	4e69      	ldr	r6, [pc, #420]	; (900080cc <HAL_GPIO_Init+0x264>)
90007f28:	42b0      	cmp	r0, r6
90007f2a:	f000 80a4 	beq.w	90008076 <HAL_GPIO_Init+0x20e>
90007f2e:	4e68      	ldr	r6, [pc, #416]	; (900080d0 <HAL_GPIO_Init+0x268>)
90007f30:	42b0      	cmp	r0, r6
90007f32:	f000 80b2 	beq.w	9000809a <HAL_GPIO_Init+0x232>
90007f36:	4e67      	ldr	r6, [pc, #412]	; (900080d4 <HAL_GPIO_Init+0x26c>)
90007f38:	42b0      	cmp	r0, r6
90007f3a:	f000 80b4 	beq.w	900080a6 <HAL_GPIO_Init+0x23e>
90007f3e:	4e66      	ldr	r6, [pc, #408]	; (900080d8 <HAL_GPIO_Init+0x270>)
90007f40:	42b0      	cmp	r0, r6
90007f42:	bf0c      	ite	eq
90007f44:	2609      	moveq	r6, #9
90007f46:	260a      	movne	r6, #10
90007f48:	fa06 f909 	lsl.w	r9, r6, r9
90007f4c:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
90007f50:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90007f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
90007f58:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
90007f5a:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
90007f5e:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
90007f60:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90007f64:	bf54      	ite	pl
90007f66:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
90007f6a:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
90007f6e:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90007f70:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
90007f72:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
90007f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90007f78:	bf54      	ite	pl
90007f7a:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
90007f7e:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
90007f82:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
90007f84:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90007f88:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
90007f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90007f8e:	bf54      	ite	pl
90007f90:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
90007f94:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90007f98:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
90007f9a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
90007f9e:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
90007fa2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
90007fa6:	bf54      	ite	pl
90007fa8:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
90007fac:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
90007fb0:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
90007fb4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90007fb6:	f10c 0c02 	add.w	ip, ip, #2
90007fba:	fa34 f203 	lsrs.w	r2, r4, r3
90007fbe:	f47f af5e 	bne.w	90007e7e <HAL_GPIO_Init+0x16>
  }
}
90007fc2:	b003      	add	sp, #12
90007fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90007fc8:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
90007fcc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90007fce:	fa08 f80c 	lsl.w	r8, r8, ip
90007fd2:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90007fd6:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90007fd8:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
90007fdc:	fa06 f60c 	lsl.w	r6, r6, ip
90007fe0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
90007fe4:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90007fe6:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
90007fea:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90007fee:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90007ff0:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90007ff4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
90007ff6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
90007ff8:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90007ffa:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90007ffe:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90008000:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90008004:	fa06 f60c 	lsl.w	r6, r6, ip
90008008:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
9000800c:	fa09 f20c 	lsl.w	r2, r9, ip
90008010:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90008012:	f47f af4a 	bne.w	90007eaa <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90008016:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
9000801a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
9000801e:	ea4f 0b86 	mov.w	fp, r6, lsl #2
90008022:	260f      	movs	r6, #15
90008024:	eb00 0989 	add.w	r9, r0, r9, lsl #2
90008028:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
9000802c:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90008030:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
90008034:	690e      	ldr	r6, [r1, #16]
90008036:	fa06 f60b 	lsl.w	r6, r6, fp
9000803a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
9000803e:	f8c9 6020 	str.w	r6, [r9, #32]
90008042:	e732      	b.n	90007eaa <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90008044:	f04f 0803 	mov.w	r8, #3
90008048:	fa08 f80c 	lsl.w	r8, r8, ip
9000804c:	ea6f 0808 	mvn.w	r8, r8
90008050:	e7d2      	b.n	90007ff8 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90008052:	2603      	movs	r6, #3
90008054:	fa06 f909 	lsl.w	r9, r6, r9
90008058:	ea42 0209 	orr.w	r2, r2, r9
9000805c:	e778      	b.n	90007f50 <HAL_GPIO_Init+0xe8>
9000805e:	2601      	movs	r6, #1
90008060:	fa06 f909 	lsl.w	r9, r6, r9
90008064:	ea42 0209 	orr.w	r2, r2, r9
90008068:	e772      	b.n	90007f50 <HAL_GPIO_Init+0xe8>
9000806a:	2602      	movs	r6, #2
9000806c:	fa06 f909 	lsl.w	r9, r6, r9
90008070:	ea42 0209 	orr.w	r2, r2, r9
90008074:	e76c      	b.n	90007f50 <HAL_GPIO_Init+0xe8>
90008076:	2606      	movs	r6, #6
90008078:	fa06 f909 	lsl.w	r9, r6, r9
9000807c:	ea42 0209 	orr.w	r2, r2, r9
90008080:	e766      	b.n	90007f50 <HAL_GPIO_Init+0xe8>
90008082:	2604      	movs	r6, #4
90008084:	fa06 f909 	lsl.w	r9, r6, r9
90008088:	ea42 0209 	orr.w	r2, r2, r9
9000808c:	e760      	b.n	90007f50 <HAL_GPIO_Init+0xe8>
9000808e:	2605      	movs	r6, #5
90008090:	fa06 f909 	lsl.w	r9, r6, r9
90008094:	ea42 0209 	orr.w	r2, r2, r9
90008098:	e75a      	b.n	90007f50 <HAL_GPIO_Init+0xe8>
9000809a:	2607      	movs	r6, #7
9000809c:	fa06 f909 	lsl.w	r9, r6, r9
900080a0:	ea42 0209 	orr.w	r2, r2, r9
900080a4:	e754      	b.n	90007f50 <HAL_GPIO_Init+0xe8>
900080a6:	2608      	movs	r6, #8
900080a8:	fa06 f909 	lsl.w	r9, r6, r9
900080ac:	ea42 0209 	orr.w	r2, r2, r9
900080b0:	e74e      	b.n	90007f50 <HAL_GPIO_Init+0xe8>
900080b2:	bf00      	nop
900080b4:	58024400 	.word	0x58024400
900080b8:	58020000 	.word	0x58020000
900080bc:	58020800 	.word	0x58020800
900080c0:	58020c00 	.word	0x58020c00
900080c4:	58021000 	.word	0x58021000
900080c8:	58021400 	.word	0x58021400
900080cc:	58021800 	.word	0x58021800
900080d0:	58021c00 	.word	0x58021c00
900080d4:	58022000 	.word	0x58022000
900080d8:	58022400 	.word	0x58022400

900080dc <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
900080dc:	2900      	cmp	r1, #0
900080de:	f000 80a8 	beq.w	90008232 <HAL_GPIO_DeInit+0x156>
  uint32_t position = 0x00U;
900080e2:	2300      	movs	r3, #0
{
900080e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900080e8:	f8df 9168 	ldr.w	r9, [pc, #360]	; 90008254 <HAL_GPIO_DeInit+0x178>
900080ec:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
900080ee:	f8df 8168 	ldr.w	r8, [pc, #360]	; 90008258 <HAL_GPIO_DeInit+0x17c>
900080f2:	f8df a168 	ldr.w	sl, [pc, #360]	; 9000825c <HAL_GPIO_DeInit+0x180>
900080f6:	f8df b168 	ldr.w	fp, [pc, #360]	; 90008260 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
900080fa:	f04f 0e01 	mov.w	lr, #1
900080fe:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
90008102:	ea12 0c01 	ands.w	ip, r2, r1
90008106:	d06f      	beq.n	900081e8 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
90008108:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000810c:	f003 0403 	and.w	r4, r3, #3
90008110:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90008112:	4540      	cmp	r0, r8
90008114:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90008116:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
9000811a:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000811c:	fa06 f604 	lsl.w	r6, r6, r4
90008120:	ea07 0706 	and.w	r7, r7, r6
90008124:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90008126:	d021      	beq.n	9000816c <HAL_GPIO_DeInit+0x90>
90008128:	4550      	cmp	r0, sl
9000812a:	d066      	beq.n	900081fa <HAL_GPIO_DeInit+0x11e>
9000812c:	4558      	cmp	r0, fp
9000812e:	d067      	beq.n	90008200 <HAL_GPIO_DeInit+0x124>
90008130:	4f43      	ldr	r7, [pc, #268]	; (90008240 <HAL_GPIO_DeInit+0x164>)
90008132:	42b8      	cmp	r0, r7
90008134:	d06e      	beq.n	90008214 <HAL_GPIO_DeInit+0x138>
90008136:	4f43      	ldr	r7, [pc, #268]	; (90008244 <HAL_GPIO_DeInit+0x168>)
90008138:	42b8      	cmp	r0, r7
9000813a:	d070      	beq.n	9000821e <HAL_GPIO_DeInit+0x142>
9000813c:	4f42      	ldr	r7, [pc, #264]	; (90008248 <HAL_GPIO_DeInit+0x16c>)
9000813e:	42b8      	cmp	r0, r7
90008140:	d063      	beq.n	9000820a <HAL_GPIO_DeInit+0x12e>
90008142:	4f42      	ldr	r7, [pc, #264]	; (9000824c <HAL_GPIO_DeInit+0x170>)
90008144:	42b8      	cmp	r0, r7
90008146:	d056      	beq.n	900081f6 <HAL_GPIO_DeInit+0x11a>
90008148:	4f41      	ldr	r7, [pc, #260]	; (90008250 <HAL_GPIO_DeInit+0x174>)
9000814a:	42b8      	cmp	r0, r7
9000814c:	d072      	beq.n	90008234 <HAL_GPIO_DeInit+0x158>
9000814e:	f8df e114 	ldr.w	lr, [pc, #276]	; 90008264 <HAL_GPIO_DeInit+0x188>
90008152:	4570      	cmp	r0, lr
90008154:	d068      	beq.n	90008228 <HAL_GPIO_DeInit+0x14c>
90008156:	f8df e110 	ldr.w	lr, [pc, #272]	; 90008268 <HAL_GPIO_DeInit+0x18c>
9000815a:	4570      	cmp	r0, lr
9000815c:	bf14      	ite	ne
9000815e:	f04f 0e0a 	movne.w	lr, #10
90008162:	f04f 0e09 	moveq.w	lr, #9
90008166:	fa0e f404 	lsl.w	r4, lr, r4
9000816a:	e000      	b.n	9000816e <HAL_GPIO_DeInit+0x92>
9000816c:	2400      	movs	r4, #0
9000816e:	9f01      	ldr	r7, [sp, #4]
90008170:	42a7      	cmp	r7, r4
90008172:	d119      	bne.n	900081a8 <HAL_GPIO_DeInit+0xcc>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90008174:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
90008178:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
9000817c:	ea27 070c 	bic.w	r7, r7, ip
90008180:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90008184:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
90008188:	ea27 070c 	bic.w	r7, r7, ip
9000818c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
90008190:	6867      	ldr	r7, [r4, #4]
90008192:	ea27 070c 	bic.w	r7, r7, ip
90008196:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90008198:	6827      	ldr	r7, [r4, #0]
9000819a:	ea27 070c 	bic.w	r7, r7, ip
9000819e:	6027      	str	r7, [r4, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
900081a0:	68ac      	ldr	r4, [r5, #8]
900081a2:	ea24 0606 	bic.w	r6, r4, r6
900081a6:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900081a8:	2503      	movs	r5, #3
900081aa:	005c      	lsls	r4, r3, #1

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900081ac:	f003 0707 	and.w	r7, r3, #7
900081b0:	260f      	movs	r6, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900081b2:	fa05 f404 	lsl.w	r4, r5, r4
900081b6:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900081b8:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900081ba:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900081bc:	fa06 f707 	lsl.w	r7, r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900081c0:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900081c2:	08dd      	lsrs	r5, r3, #3
900081c4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
900081c8:	6a2e      	ldr	r6, [r5, #32]
900081ca:	ea26 0607 	bic.w	r6, r6, r7
900081ce:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
900081d0:	68c5      	ldr	r5, [r0, #12]
900081d2:	ea25 0504 	bic.w	r5, r5, r4
900081d6:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
900081d8:	6845      	ldr	r5, [r0, #4]
900081da:	ea25 0202 	bic.w	r2, r5, r2
900081de:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900081e0:	6882      	ldr	r2, [r0, #8]
900081e2:	ea22 0404 	bic.w	r4, r2, r4
900081e6:	6084      	str	r4, [r0, #8]
    }

    position++;
900081e8:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
900081ea:	fa31 f203 	lsrs.w	r2, r1, r3
900081ee:	d184      	bne.n	900080fa <HAL_GPIO_DeInit+0x1e>
  }
}
900081f0:	b003      	add	sp, #12
900081f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
900081f6:	f04f 0e06 	mov.w	lr, #6
900081fa:	fa0e f404 	lsl.w	r4, lr, r4
900081fe:	e7b6      	b.n	9000816e <HAL_GPIO_DeInit+0x92>
90008200:	f04f 0e02 	mov.w	lr, #2
90008204:	fa0e f404 	lsl.w	r4, lr, r4
90008208:	e7b1      	b.n	9000816e <HAL_GPIO_DeInit+0x92>
9000820a:	f04f 0e05 	mov.w	lr, #5
9000820e:	fa0e f404 	lsl.w	r4, lr, r4
90008212:	e7ac      	b.n	9000816e <HAL_GPIO_DeInit+0x92>
90008214:	f04f 0e03 	mov.w	lr, #3
90008218:	fa0e f404 	lsl.w	r4, lr, r4
9000821c:	e7a7      	b.n	9000816e <HAL_GPIO_DeInit+0x92>
9000821e:	f04f 0e04 	mov.w	lr, #4
90008222:	fa0e f404 	lsl.w	r4, lr, r4
90008226:	e7a2      	b.n	9000816e <HAL_GPIO_DeInit+0x92>
90008228:	f04f 0e08 	mov.w	lr, #8
9000822c:	fa0e f404 	lsl.w	r4, lr, r4
90008230:	e79d      	b.n	9000816e <HAL_GPIO_DeInit+0x92>
90008232:	4770      	bx	lr
90008234:	f04f 0e07 	mov.w	lr, #7
90008238:	fa0e f404 	lsl.w	r4, lr, r4
9000823c:	e797      	b.n	9000816e <HAL_GPIO_DeInit+0x92>
9000823e:	bf00      	nop
90008240:	58020c00 	.word	0x58020c00
90008244:	58021000 	.word	0x58021000
90008248:	58021400 	.word	0x58021400
9000824c:	58021800 	.word	0x58021800
90008250:	58021c00 	.word	0x58021c00
90008254:	58000400 	.word	0x58000400
90008258:	58020000 	.word	0x58020000
9000825c:	58020400 	.word	0x58020400
90008260:	58020800 	.word	0x58020800
90008264:	58022000 	.word	0x58022000
90008268:	58022400 	.word	0x58022400

9000826c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
9000826c:	6903      	ldr	r3, [r0, #16]
9000826e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
90008270:	bf14      	ite	ne
90008272:	2001      	movne	r0, #1
90008274:	2000      	moveq	r0, #0
90008276:	4770      	bx	lr

90008278 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90008278:	b902      	cbnz	r2, 9000827c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
9000827a:	0409      	lsls	r1, r1, #16
9000827c:	6181      	str	r1, [r0, #24]
  }
}
9000827e:	4770      	bx	lr

90008280 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
90008280:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
90008282:	ea01 0203 	and.w	r2, r1, r3
90008286:	ea21 0103 	bic.w	r1, r1, r3
9000828a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
9000828e:	6181      	str	r1, [r0, #24]
}
90008290:	4770      	bx	lr
90008292:	bf00      	nop

90008294 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90008294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90008298:	6803      	ldr	r3, [r0, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000829a:	f04f 0820 	mov.w	r8, #32
{
9000829e:	4605      	mov	r5, r0
900082a0:	460e      	mov	r6, r1
900082a2:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
900082a4:	6998      	ldr	r0, [r3, #24]
900082a6:	f010 0902 	ands.w	r9, r0, #2
900082aa:	f040 809e 	bne.w	900083ea <I2C_WaitOnTXISFlagUntilTimeout+0x156>
  uint32_t itflag   = hi2c->Instance->ISR;
900082ae:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
900082b0:	f014 0410 	ands.w	r4, r4, #16
900082b4:	d068      	beq.n	90008388 <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900082b6:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
900082b8:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
900082ba:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
900082bc:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900082be:	1c71      	adds	r1, r6, #1
900082c0:	699a      	ldr	r2, [r3, #24]
900082c2:	d163      	bne.n	9000838c <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
900082c4:	0690      	lsls	r0, r2, #26
900082c6:	f100 8093 	bmi.w	900083f0 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
900082ca:	f1ba 0f00 	cmp.w	sl, #0
900082ce:	d104      	bne.n	900082da <I2C_WaitOnTXISFlagUntilTimeout+0x46>
900082d0:	699c      	ldr	r4, [r3, #24]
900082d2:	06a1      	lsls	r1, r4, #26
900082d4:	d5fc      	bpl.n	900082d0 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900082d6:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
900082da:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
900082de:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
900082e0:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
900082e2:	05d0      	lsls	r0, r2, #23
900082e4:	d530      	bpl.n	90008348 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900082e6:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900082ea:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
900082ec:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
900082f0:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900082f2:	d504      	bpl.n	900082fe <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900082f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
900082f8:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
900082fc:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900082fe:	0591      	lsls	r1, r2, #22
90008300:	d504      	bpl.n	9000830c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90008302:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90008306:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000830a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
9000830c:	699a      	ldr	r2, [r3, #24]
9000830e:	0790      	lsls	r0, r2, #30
90008310:	d501      	bpl.n	90008316 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
90008312:	2200      	movs	r2, #0
90008314:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90008316:	699a      	ldr	r2, [r3, #24]
90008318:	07d1      	lsls	r1, r2, #31
9000831a:	d403      	bmi.n	90008324 <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
9000831c:	699a      	ldr	r2, [r3, #24]
9000831e:	f042 0201 	orr.w	r2, r2, #1
90008322:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90008324:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
90008326:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90008328:	4834      	ldr	r0, [pc, #208]	; (900083fc <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->State = HAL_I2C_STATE_READY;
9000832a:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
9000832c:	4002      	ands	r2, r0
      return HAL_ERROR;
9000832e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90008330:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
90008332:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90008334:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
90008338:	431c      	orrs	r4, r3
9000833a:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000833c:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90008340:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
90008344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90008348:	0550      	lsls	r0, r2, #21
9000834a:	d4d3      	bmi.n	900082f4 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000834c:	0592      	lsls	r2, r2, #22
9000834e:	d4d8      	bmi.n	90008302 <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
90008350:	2900      	cmp	r1, #0
90008352:	d1db      	bne.n	9000830c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
90008354:	1c72      	adds	r2, r6, #1
90008356:	d0a5      	beq.n	900082a4 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008358:	f7fe fc56 	bl	90006c08 <HAL_GetTick>
9000835c:	1bc0      	subs	r0, r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
9000835e:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008360:	42b0      	cmp	r0, r6
90008362:	d801      	bhi.n	90008368 <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
90008364:	2e00      	cmp	r6, #0
90008366:	d19d      	bne.n	900082a4 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90008368:	699a      	ldr	r2, [r3, #24]
9000836a:	f012 0202 	ands.w	r2, r2, #2
9000836e:	d199      	bne.n	900082a4 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008370:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008372:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
90008374:	2001      	movs	r0, #1
90008376:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000837a:	430b      	orrs	r3, r1
9000837c:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000837e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008382:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
90008386:	e7dd      	b.n	90008344 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
90008388:	4621      	mov	r1, r4
9000838a:	e7a9      	b.n	900082e0 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000838c:	0692      	lsls	r2, r2, #26
9000838e:	d42f      	bmi.n	900083f0 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
90008390:	f1ba 0f00 	cmp.w	sl, #0
90008394:	d1a1      	bne.n	900082da <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90008396:	f7fe fc37 	bl	90006c08 <HAL_GetTick>
9000839a:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000839c:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000839e:	4286      	cmp	r6, r0
900083a0:	d301      	bcc.n	900083a6 <I2C_WaitOnTXISFlagUntilTimeout+0x112>
900083a2:	2e00      	cmp	r6, #0
900083a4:	d18b      	bne.n	900082be <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900083a6:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
900083a8:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900083ac:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
900083ae:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
900083b0:	0409      	lsls	r1, r1, #16
900083b2:	d50b      	bpl.n	900083cc <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              (tmp1 != I2C_CR2_STOP) && \
900083b4:	0441      	lsls	r1, r0, #17
900083b6:	d409      	bmi.n	900083cc <I2C_WaitOnTXISFlagUntilTimeout+0x138>
900083b8:	2a20      	cmp	r2, #32
900083ba:	d007      	beq.n	900083cc <I2C_WaitOnTXISFlagUntilTimeout+0x138>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
900083bc:	685a      	ldr	r2, [r3, #4]
900083be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
900083c2:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
900083c4:	f7fe fc20 	bl	90006c08 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900083c8:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
900083ca:	4604      	mov	r4, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900083cc:	699a      	ldr	r2, [r3, #24]
900083ce:	0690      	lsls	r0, r2, #26
900083d0:	f53f af75 	bmi.w	900082be <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900083d4:	f7fe fc18 	bl	90006c08 <HAL_GetTick>
900083d8:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900083da:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
900083dc:	2819      	cmp	r0, #25
900083de:	d9f5      	bls.n	900083cc <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
900083e0:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
900083e4:	f04f 0a01 	mov.w	sl, #1
900083e8:	e769      	b.n	900082be <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
900083ea:	2000      	movs	r0, #0
}
900083ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
900083f0:	f1ba 0f00 	cmp.w	sl, #0
900083f4:	f43f af6f 	beq.w	900082d6 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
900083f8:	e76f      	b.n	900082da <I2C_WaitOnTXISFlagUntilTimeout+0x46>
900083fa:	bf00      	nop
900083fc:	fe00e800 	.word	0xfe00e800

90008400 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008400:	6803      	ldr	r3, [r0, #0]
{
90008402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90008406:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008408:	699a      	ldr	r2, [r3, #24]
9000840a:	0694      	lsls	r4, r2, #26
9000840c:	d465      	bmi.n	900084da <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
9000840e:	4606      	mov	r6, r0
90008410:	460f      	mov	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90008412:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
90008416:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90008418:	f014 0410 	ands.w	r4, r4, #16
9000841c:	d060      	beq.n	900084e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe0>
  uint32_t error_code = 0;
9000841e:	2500      	movs	r5, #0
  uint32_t tickstart = Tickstart;
90008420:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90008422:	f8c3 901c 	str.w	r9, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
90008426:	46aa      	mov	sl, r5
90008428:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000842a:	699a      	ldr	r2, [r3, #24]
9000842c:	d15a      	bne.n	900084e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
9000842e:	0690      	lsls	r0, r2, #26
90008430:	d47d      	bmi.n	9000852e <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
90008432:	f1ba 0f00 	cmp.w	sl, #0
90008436:	d104      	bne.n	90008442 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
90008438:	699c      	ldr	r4, [r3, #24]
9000843a:	06a1      	lsls	r1, r4, #26
9000843c:	d5fc      	bpl.n	90008438 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000843e:	2220      	movs	r2, #32
90008440:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
90008442:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
90008446:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
90008448:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
9000844a:	05d0      	lsls	r0, r2, #23
9000844c:	d530      	bpl.n	900084b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000844e:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90008452:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90008454:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90008458:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000845a:	d504      	bpl.n	90008466 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000845c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90008460:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90008464:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90008466:	0597      	lsls	r7, r2, #22
90008468:	d504      	bpl.n	90008474 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000846a:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
9000846e:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90008472:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90008474:	699a      	ldr	r2, [r3, #24]
90008476:	0790      	lsls	r0, r2, #30
90008478:	d501      	bpl.n	9000847e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    hi2c->Instance->TXDR = 0x00U;
9000847a:	2200      	movs	r2, #0
9000847c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000847e:	699a      	ldr	r2, [r3, #24]
90008480:	07d1      	lsls	r1, r2, #31
90008482:	d403      	bmi.n	9000848c <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90008484:	699a      	ldr	r2, [r3, #24]
90008486:	f042 0201 	orr.w	r2, r2, #1
9000848a:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
9000848c:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000848e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90008490:	4834      	ldr	r0, [pc, #208]	; (90008564 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>)
    hi2c->State = HAL_I2C_STATE_READY;
90008492:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
90008494:	4002      	ands	r2, r0
      return HAL_ERROR;
90008496:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90008498:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
9000849a:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
9000849c:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
900084a0:	431c      	orrs	r4, r3
900084a2:	6474      	str	r4, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
900084a4:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
900084a8:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
900084ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
900084b0:	0550      	lsls	r0, r2, #21
900084b2:	d4d3      	bmi.n	9000845c <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
900084b4:	0595      	lsls	r5, r2, #22
900084b6:	d4d8      	bmi.n	9000846a <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  if (status != HAL_OK)
900084b8:	2900      	cmp	r1, #0
900084ba:	d1db      	bne.n	90008474 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900084bc:	f7fe fba4 	bl	90006c08 <HAL_GetTick>
900084c0:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
900084c4:	6833      	ldr	r3, [r6, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900084c6:	42b8      	cmp	r0, r7
900084c8:	d800      	bhi.n	900084cc <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
900084ca:	b91f      	cbnz	r7, 900084d4 <I2C_WaitOnSTOPFlagUntilTimeout+0xd4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
900084cc:	699a      	ldr	r2, [r3, #24]
900084ce:	f012 0220 	ands.w	r2, r2, #32
900084d2:	d030      	beq.n	90008536 <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
900084d4:	699a      	ldr	r2, [r3, #24]
900084d6:	0692      	lsls	r2, r2, #26
900084d8:	d59d      	bpl.n	90008416 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
900084da:	2000      	movs	r0, #0
}
900084dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
900084e0:	4621      	mov	r1, r4
900084e2:	e7b1      	b.n	90008448 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
900084e4:	0692      	lsls	r2, r2, #26
900084e6:	d422      	bmi.n	9000852e <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
900084e8:	f1ba 0f00 	cmp.w	sl, #0
900084ec:	d1a9      	bne.n	90008442 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900084ee:	f7fe fb8b 	bl	90006c08 <HAL_GetTick>
900084f2:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900084f4:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
900084f6:	4287      	cmp	r7, r0
900084f8:	d301      	bcc.n	900084fe <I2C_WaitOnSTOPFlagUntilTimeout+0xfe>
900084fa:	2f00      	cmp	r7, #0
900084fc:	d194      	bne.n	90008428 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
900084fe:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90008500:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90008504:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90008506:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90008508:	0409      	lsls	r1, r1, #16
9000850a:	d503      	bpl.n	90008514 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
              (tmp1 != I2C_CR2_STOP) && \
9000850c:	0441      	lsls	r1, r0, #17
9000850e:	d401      	bmi.n	90008514 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
90008510:	2a20      	cmp	r2, #32
90008512:	d11d      	bne.n	90008550 <I2C_WaitOnSTOPFlagUntilTimeout+0x150>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90008514:	699a      	ldr	r2, [r3, #24]
90008516:	0690      	lsls	r0, r2, #26
90008518:	d486      	bmi.n	90008428 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000851a:	f7fe fb75 	bl	90006c08 <HAL_GetTick>
9000851e:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90008520:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90008522:	2819      	cmp	r0, #25
90008524:	d9f6      	bls.n	90008514 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90008526:	2520      	movs	r5, #32
              status = HAL_ERROR;
90008528:	f04f 0a01 	mov.w	sl, #1
9000852c:	e77c      	b.n	90008428 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (status == HAL_OK)
9000852e:	f1ba 0f00 	cmp.w	sl, #0
90008532:	d084      	beq.n	9000843e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
90008534:	e785      	b.n	90008442 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008536:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008538:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
9000853a:	2001      	movs	r0, #1
9000853c:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008540:	430b      	orrs	r3, r1
90008542:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008544:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008548:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
}
9000854c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90008550:	685a      	ldr	r2, [r3, #4]
90008552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90008556:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90008558:	f7fe fb56 	bl	90006c08 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000855c:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
9000855e:	4604      	mov	r4, r0
90008560:	e7d8      	b.n	90008514 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
90008562:	bf00      	nop
90008564:	fe00e800 	.word	0xfe00e800

90008568 <HAL_I2C_MspInit>:
}
90008568:	4770      	bx	lr
9000856a:	bf00      	nop

9000856c <HAL_I2C_Init>:
  if (hi2c == NULL)
9000856c:	2800      	cmp	r0, #0
9000856e:	d04e      	beq.n	9000860e <HAL_I2C_Init+0xa2>
{
90008570:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
90008572:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90008576:	4604      	mov	r4, r0
90008578:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000857c:	2b00      	cmp	r3, #0
9000857e:	d041      	beq.n	90008604 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
90008580:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90008582:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90008584:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
90008586:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
9000858a:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000858c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90008590:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
90008592:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90008596:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
90008598:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000859a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
9000859c:	689a      	ldr	r2, [r3, #8]
9000859e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
900085a2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
900085a4:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
900085a6:	d029      	beq.n	900085fc <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
900085a8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
900085ac:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
900085ae:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
900085b0:	d102      	bne.n	900085b8 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
900085b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
900085b6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
900085b8:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
900085ba:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
900085be:	4915      	ldr	r1, [pc, #84]	; (90008614 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900085c0:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
900085c2:	4301      	orrs	r1, r0
900085c4:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
900085c6:	68d9      	ldr	r1, [r3, #12]
900085c8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
900085cc:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
900085ce:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900085d2:	4302      	orrs	r2, r0
900085d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900085d8:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
900085dc:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900085de:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900085e0:	4301      	orrs	r1, r0
  return HAL_OK;
900085e2:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
900085e4:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
900085e6:	6819      	ldr	r1, [r3, #0]
900085e8:	f041 0101 	orr.w	r1, r1, #1
900085ec:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900085ee:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
900085f0:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
900085f4:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
900085f6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
900085fa:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
900085fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90008600:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90008602:	e7d9      	b.n	900085b8 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
90008604:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
90008608:	f7ff ffae 	bl	90008568 <HAL_I2C_MspInit>
9000860c:	e7b8      	b.n	90008580 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
9000860e:	2001      	movs	r0, #1
}
90008610:	4770      	bx	lr
90008612:	bf00      	nop
90008614:	02008000 	.word	0x02008000

90008618 <HAL_I2C_MspDeInit>:
90008618:	4770      	bx	lr
9000861a:	bf00      	nop

9000861c <HAL_I2C_DeInit>:
  if (hi2c == NULL)
9000861c:	b1b0      	cbz	r0, 9000864c <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
9000861e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90008620:	2324      	movs	r3, #36	; 0x24
{
90008622:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
90008624:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
90008628:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
9000862a:	6813      	ldr	r3, [r2, #0]
9000862c:	f023 0301 	bic.w	r3, r3, #1
90008630:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
90008632:	f7ff fff1 	bl	90008618 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008636:	2300      	movs	r3, #0
90008638:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
9000863a:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
9000863c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
90008640:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
90008644:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90008646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
9000864a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
9000864c:	2001      	movs	r0, #1
}
9000864e:	4770      	bx	lr

90008650 <HAL_I2C_Mem_Write>:
{
90008650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90008654:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
90008656:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000865a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
9000865e:	2b20      	cmp	r3, #32
{
90008660:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
90008662:	d132      	bne.n	900086ca <HAL_I2C_Mem_Write+0x7a>
    if ((pData == NULL) || (Size == 0U))
90008664:	9b08      	ldr	r3, [sp, #32]
90008666:	4604      	mov	r4, r0
90008668:	b34b      	cbz	r3, 900086be <HAL_I2C_Mem_Write+0x6e>
9000866a:	f1ba 0f00 	cmp.w	sl, #0
9000866e:	d026      	beq.n	900086be <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
90008670:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90008674:	2b01      	cmp	r3, #1
90008676:	d028      	beq.n	900086ca <HAL_I2C_Mem_Write+0x7a>
90008678:	2301      	movs	r3, #1
9000867a:	460e      	mov	r6, r1
9000867c:	4691      	mov	r9, r2
9000867e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90008682:	f7fe fac1 	bl	90006c08 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008686:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
90008688:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000868a:	699a      	ldr	r2, [r3, #24]
9000868c:	0411      	lsls	r1, r2, #16
9000868e:	d51f      	bpl.n	900086d0 <HAL_I2C_Mem_Write+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008690:	f7fe faba 	bl	90006c08 <HAL_GetTick>
90008694:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008696:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008698:	2819      	cmp	r0, #25
9000869a:	d9f6      	bls.n	9000868a <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000869c:	699a      	ldr	r2, [r3, #24]
9000869e:	0412      	lsls	r2, r2, #16
900086a0:	d5f3      	bpl.n	9000868a <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900086a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900086a4:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
900086a6:	2200      	movs	r2, #0
      return HAL_ERROR;
900086a8:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900086aa:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
900086ac:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900086b0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900086b2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900086b6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
900086ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900086be:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
900086c2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
900086c4:	6463      	str	r3, [r4, #68]	; 0x44
}
900086c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
900086ca:	2002      	movs	r0, #2
}
900086cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
900086d0:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
900086d2:	2121      	movs	r1, #33	; 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
900086d4:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900086d8:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
900086da:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900086de:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
900086e0:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900086e2:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
900086e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->XferISR   = NULL;
900086e8:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
900086ea:	6462      	str	r2, [r4, #68]	; 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
900086ec:	496d      	ldr	r1, [pc, #436]	; (900088a4 <HAL_I2C_Mem_Write+0x254>)
    hi2c->XferCount = Size;
900086ee:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
900086f2:	685a      	ldr	r2, [r3, #4]
900086f4:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
900086f6:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
900086fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
900086fe:	496a      	ldr	r1, [pc, #424]	; (900088a8 <HAL_I2C_Mem_Write+0x258>)
90008700:	4332      	orrs	r2, r6
90008702:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008704:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
90008706:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008708:	4639      	mov	r1, r7
9000870a:	f7ff fdc3 	bl	90008294 <I2C_WaitOnTXISFlagUntilTimeout>
9000870e:	2800      	cmp	r0, #0
90008710:	d175      	bne.n	900087fe <HAL_I2C_Mem_Write+0x1ae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90008712:	f1b8 0f01 	cmp.w	r8, #1
90008716:	d00a      	beq.n	9000872e <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90008718:	ea4f 2219 	mov.w	r2, r9, lsr #8
9000871c:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000871e:	4639      	mov	r1, r7
90008720:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90008722:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008724:	462a      	mov	r2, r5
90008726:	f7ff fdb5 	bl	90008294 <I2C_WaitOnTXISFlagUntilTimeout>
9000872a:	2800      	cmp	r0, #0
9000872c:	d167      	bne.n	900087fe <HAL_I2C_Mem_Write+0x1ae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000872e:	fa5f f389 	uxtb.w	r3, r9
90008732:	6822      	ldr	r2, [r4, #0]
90008734:	6293      	str	r3, [r2, #40]	; 0x28
90008736:	1c78      	adds	r0, r7, #1
90008738:	d14a      	bne.n	900087d0 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000873a:	6993      	ldr	r3, [r2, #24]
9000873c:	0619      	lsls	r1, r3, #24
9000873e:	d5fc      	bpl.n	9000873a <HAL_I2C_Mem_Write+0xea>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90008740:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90008742:	b29b      	uxth	r3, r3
90008744:	2bff      	cmp	r3, #255	; 0xff
90008746:	f240 808a 	bls.w	9000885e <HAL_I2C_Mem_Write+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, \
9000874a:	6853      	ldr	r3, [r2, #4]
9000874c:	4957      	ldr	r1, [pc, #348]	; (900088ac <HAL_I2C_Mem_Write+0x25c>)
9000874e:	400b      	ands	r3, r1
90008750:	4957      	ldr	r1, [pc, #348]	; (900088b0 <HAL_I2C_Mem_Write+0x260>)
90008752:	4333      	orrs	r3, r6
90008754:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
90008756:	23ff      	movs	r3, #255	; 0xff
90008758:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000875a:	6051      	str	r1, [r2, #4]
9000875c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 900088ac <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008760:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
90008764:	f8df 9148 	ldr.w	r9, [pc, #328]	; 900088b0 <HAL_I2C_Mem_Write+0x260>
90008768:	e004      	b.n	90008774 <HAL_I2C_Mem_Write+0x124>
    } while (hi2c->XferCount > 0U);
9000876a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000876c:	b29b      	uxth	r3, r3
9000876e:	2b00      	cmp	r3, #0
90008770:	f000 8083 	beq.w	9000887a <HAL_I2C_Mem_Write+0x22a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90008774:	462a      	mov	r2, r5
90008776:	4639      	mov	r1, r7
90008778:	4620      	mov	r0, r4
9000877a:	f7ff fd8b 	bl	90008294 <I2C_WaitOnTXISFlagUntilTimeout>
9000877e:	2800      	cmp	r0, #0
90008780:	d16b      	bne.n	9000885a <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90008782:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008784:	6821      	ldr	r1, [r4, #0]
90008786:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
9000878a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000878c:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
9000878e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
90008790:	3b01      	subs	r3, #1
      hi2c->XferCount--;
90008792:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90008794:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
90008796:	3a01      	subs	r2, #1
      hi2c->XferSize--;
90008798:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
9000879a:	b292      	uxth	r2, r2
9000879c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000879e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
900087a0:	b292      	uxth	r2, r2
900087a2:	2a00      	cmp	r2, #0
900087a4:	d0e1      	beq.n	9000876a <HAL_I2C_Mem_Write+0x11a>
900087a6:	2b00      	cmp	r3, #0
900087a8:	d1df      	bne.n	9000876a <HAL_I2C_Mem_Write+0x11a>
900087aa:	1c78      	adds	r0, r7, #1
900087ac:	d12c      	bne.n	90008808 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900087ae:	698b      	ldr	r3, [r1, #24]
900087b0:	061a      	lsls	r2, r3, #24
900087b2:	d5fc      	bpl.n	900087ae <HAL_I2C_Mem_Write+0x15e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
900087b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
900087b6:	b29b      	uxth	r3, r3
900087b8:	2bff      	cmp	r3, #255	; 0xff
900087ba:	d940      	bls.n	9000883e <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
900087bc:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
900087be:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900087c2:	ea03 0308 	and.w	r3, r3, r8
900087c6:	4333      	orrs	r3, r6
900087c8:	ea43 0309 	orr.w	r3, r3, r9
900087cc:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
900087ce:	e7cc      	b.n	9000876a <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900087d0:	6993      	ldr	r3, [r2, #24]
900087d2:	061b      	lsls	r3, r3, #24
900087d4:	d4b4      	bmi.n	90008740 <HAL_I2C_Mem_Write+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900087d6:	f7fe fa17 	bl	90006c08 <HAL_GetTick>
900087da:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900087dc:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900087de:	4287      	cmp	r7, r0
900087e0:	d301      	bcc.n	900087e6 <HAL_I2C_Mem_Write+0x196>
900087e2:	2f00      	cmp	r7, #0
900087e4:	d1a7      	bne.n	90008736 <HAL_I2C_Mem_Write+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900087e6:	6993      	ldr	r3, [r2, #24]
900087e8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
900087ec:	d1a3      	bne.n	90008736 <HAL_I2C_Mem_Write+0xe6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900087ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900087f0:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900087f2:	430a      	orrs	r2, r1
900087f4:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900087f6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900087fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
900087fe:	2300      	movs	r3, #0
      return HAL_ERROR;
90008800:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
90008802:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90008806:	e75e      	b.n	900086c6 <HAL_I2C_Mem_Write+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008808:	698b      	ldr	r3, [r1, #24]
9000880a:	061b      	lsls	r3, r3, #24
9000880c:	d4d2      	bmi.n	900087b4 <HAL_I2C_Mem_Write+0x164>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000880e:	f7fe f9fb 	bl	90006c08 <HAL_GetTick>
90008812:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008814:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008816:	4287      	cmp	r7, r0
90008818:	d301      	bcc.n	9000881e <HAL_I2C_Mem_Write+0x1ce>
9000881a:	2f00      	cmp	r7, #0
9000881c:	d1c5      	bne.n	900087aa <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000881e:	698b      	ldr	r3, [r1, #24]
90008820:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90008824:	d1c1      	bne.n	900087aa <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008826:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008828:	2120      	movs	r1, #32
          return HAL_ERROR;
9000882a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
9000882c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008830:	430a      	orrs	r2, r1
90008832:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008834:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
9000883c:	e743      	b.n	900086c6 <HAL_I2C_Mem_Write+0x76>
          hi2c->XferSize = hi2c->XferCount;
9000883e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90008840:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008842:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
90008844:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008846:	684b      	ldr	r3, [r1, #4]
90008848:	ea03 0308 	and.w	r3, r3, r8
9000884c:	4333      	orrs	r3, r6
9000884e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90008856:	604b      	str	r3, [r1, #4]
}
90008858:	e787      	b.n	9000876a <HAL_I2C_Mem_Write+0x11a>
        return HAL_ERROR;
9000885a:	2001      	movs	r0, #1
9000885c:	e733      	b.n	900086c6 <HAL_I2C_Mem_Write+0x76>
      hi2c->XferSize = hi2c->XferCount;
9000885e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90008860:	4812      	ldr	r0, [pc, #72]	; (900088ac <HAL_I2C_Mem_Write+0x25c>)
      hi2c->XferSize = hi2c->XferCount;
90008862:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008864:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
90008866:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008868:	6853      	ldr	r3, [r2, #4]
9000886a:	4003      	ands	r3, r0
9000886c:	4333      	orrs	r3, r6
9000886e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90008872:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90008876:	6053      	str	r3, [r2, #4]
}
90008878:	e770      	b.n	9000875c <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000887a:	462a      	mov	r2, r5
9000887c:	4639      	mov	r1, r7
9000887e:	4620      	mov	r0, r4
90008880:	f7ff fdbe 	bl	90008400 <I2C_WaitOnSTOPFlagUntilTimeout>
90008884:	2800      	cmp	r0, #0
90008886:	d1e8      	bne.n	9000885a <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90008888:	6823      	ldr	r3, [r4, #0]
9000888a:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000888c:	4d09      	ldr	r5, [pc, #36]	; (900088b4 <HAL_I2C_Mem_Write+0x264>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000888e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90008890:	685a      	ldr	r2, [r3, #4]
90008892:	402a      	ands	r2, r5
90008894:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90008896:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000889a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000889e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
900088a2:	e710      	b.n	900086c6 <HAL_I2C_Mem_Write+0x76>
900088a4:	fc009800 	.word	0xfc009800
900088a8:	01002000 	.word	0x01002000
900088ac:	fc009c00 	.word	0xfc009c00
900088b0:	01ff0000 	.word	0x01ff0000
900088b4:	fe00e800 	.word	0xfe00e800

900088b8 <HAL_I2C_Mem_Read>:
{
900088b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900088bc:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
900088be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
900088c2:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
900088c6:	2b20      	cmp	r3, #32
{
900088c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
900088ca:	d137      	bne.n	9000893c <HAL_I2C_Mem_Read+0x84>
    if ((pData == NULL) || (Size == 0U))
900088cc:	9b08      	ldr	r3, [sp, #32]
900088ce:	4682      	mov	sl, r0
900088d0:	b36b      	cbz	r3, 9000892e <HAL_I2C_Mem_Read+0x76>
900088d2:	f1b9 0f00 	cmp.w	r9, #0
900088d6:	d02a      	beq.n	9000892e <HAL_I2C_Mem_Read+0x76>
    __HAL_LOCK(hi2c);
900088d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
900088dc:	2b01      	cmp	r3, #1
900088de:	d02d      	beq.n	9000893c <HAL_I2C_Mem_Read+0x84>
900088e0:	2301      	movs	r3, #1
900088e2:	460e      	mov	r6, r1
900088e4:	4690      	mov	r8, r2
900088e6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
900088ea:	f7fe f98d 	bl	90006c08 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900088ee:	f8da 3000 	ldr.w	r3, [sl]
    tickstart = HAL_GetTick();
900088f2:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900088f4:	699a      	ldr	r2, [r3, #24]
900088f6:	0412      	lsls	r2, r2, #16
900088f8:	d523      	bpl.n	90008942 <HAL_I2C_Mem_Read+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900088fa:	f7fe f985 	bl	90006c08 <HAL_GetTick>
900088fe:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008900:	f8da 3000 	ldr.w	r3, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008904:	2819      	cmp	r0, #25
90008906:	d9f5      	bls.n	900088f4 <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008908:	699a      	ldr	r2, [r3, #24]
9000890a:	0410      	lsls	r0, r2, #16
9000890c:	d5f2      	bpl.n	900088f4 <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000890e:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008912:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008914:	2200      	movs	r2, #0
      return HAL_ERROR;
90008916:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008918:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000891a:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000891e:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008922:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008926:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
}
9000892a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000892e:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
90008932:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90008934:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
}
90008938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
9000893c:	2002      	movs	r0, #2
}
9000893e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
90008942:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90008944:	2122      	movs	r1, #34	; 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90008946:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000894a:	4650      	mov	r0, sl
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000894c:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90008950:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
90008952:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008956:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90008958:	f88a 1042 	strb.w	r1, [sl, #66]	; 0x42
    hi2c->XferISR   = NULL;
9000895c:	f8ca 2034 	str.w	r2, [sl, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008960:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
90008964:	4981      	ldr	r1, [pc, #516]	; (90008b6c <HAL_I2C_Mem_Read+0x2b4>)
    hi2c->XferCount = Size;
90008966:	f8aa 902a 	strh.w	r9, [sl, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000896a:	685a      	ldr	r2, [r3, #4]
9000896c:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000896e:	b2f9      	uxtb	r1, r7
  MODIFY_REG(hi2c->Instance->CR2, \
90008970:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008974:	4621      	mov	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
90008976:	4332      	orrs	r2, r6
90008978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
9000897c:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000897e:	462a      	mov	r2, r5
90008980:	f7ff fc88 	bl	90008294 <I2C_WaitOnTXISFlagUntilTimeout>
90008984:	2800      	cmp	r0, #0
90008986:	f040 8090 	bne.w	90008aaa <HAL_I2C_Mem_Read+0x1f2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000898a:	2f01      	cmp	r7, #1
9000898c:	d00c      	beq.n	900089a8 <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000898e:	ea4f 2218 	mov.w	r2, r8, lsr #8
90008992:	f8da 3000 	ldr.w	r3, [sl]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90008996:	4621      	mov	r1, r4
90008998:	4650      	mov	r0, sl
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000899a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000899c:	462a      	mov	r2, r5
9000899e:	f7ff fc79 	bl	90008294 <I2C_WaitOnTXISFlagUntilTimeout>
900089a2:	2800      	cmp	r0, #0
900089a4:	f040 8081 	bne.w	90008aaa <HAL_I2C_Mem_Read+0x1f2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900089a8:	fa5f f388 	uxtb.w	r3, r8
900089ac:	f8da 2000 	ldr.w	r2, [sl]
900089b0:	6293      	str	r3, [r2, #40]	; 0x28
900089b2:	1c61      	adds	r1, r4, #1
900089b4:	d15f      	bne.n	90008a76 <HAL_I2C_Mem_Read+0x1be>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900089b6:	6993      	ldr	r3, [r2, #24]
900089b8:	065b      	lsls	r3, r3, #25
900089ba:	d5fc      	bpl.n	900089b6 <HAL_I2C_Mem_Read+0xfe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900089bc:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
900089c0:	b29b      	uxth	r3, r3
900089c2:	2bff      	cmp	r3, #255	; 0xff
900089c4:	f240 80ab 	bls.w	90008b1e <HAL_I2C_Mem_Read+0x266>
  MODIFY_REG(hi2c->Instance->CR2, \
900089c8:	6853      	ldr	r3, [r2, #4]
900089ca:	4968      	ldr	r1, [pc, #416]	; (90008b6c <HAL_I2C_Mem_Read+0x2b4>)
900089cc:	400b      	ands	r3, r1
900089ce:	4968      	ldr	r1, [pc, #416]	; (90008b70 <HAL_I2C_Mem_Read+0x2b8>)
900089d0:	4333      	orrs	r3, r6
900089d2:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
900089d4:	23ff      	movs	r3, #255	; 0xff
900089d6:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
900089da:	6051      	str	r1, [r2, #4]
900089dc:	4f65      	ldr	r7, [pc, #404]	; (90008b74 <HAL_I2C_Mem_Read+0x2bc>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
900089de:	f04f 09ff 	mov.w	r9, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
900089e2:	f8df 819c 	ldr.w	r8, [pc, #412]	; 90008b80 <HAL_I2C_Mem_Read+0x2c8>
900089e6:	1c60      	adds	r0, r4, #1
900089e8:	d127      	bne.n	90008a3a <HAL_I2C_Mem_Read+0x182>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900089ea:	6993      	ldr	r3, [r2, #24]
900089ec:	0759      	lsls	r1, r3, #29
900089ee:	d5fc      	bpl.n	900089ea <HAL_I2C_Mem_Read+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
900089f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
900089f2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
900089f6:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
900089f8:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
      hi2c->pBuffPtr++;
900089fc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
      hi2c->XferCount--;
90008a00:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
90008a02:	3301      	adds	r3, #1
      hi2c->XferCount--;
90008a04:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
90008a06:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      hi2c->XferSize--;
90008a0a:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
      hi2c->XferCount--;
90008a0e:	f8aa 202a 	strh.w	r2, [sl, #42]	; 0x2a
      hi2c->XferSize--;
90008a12:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008a14:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
      hi2c->XferSize--;
90008a18:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008a1a:	b292      	uxth	r2, r2
      hi2c->XferSize--;
90008a1c:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008a20:	b10a      	cbz	r2, 90008a26 <HAL_I2C_Mem_Read+0x16e>
90008a22:	2b00      	cmp	r3, #0
90008a24:	d046      	beq.n	90008ab4 <HAL_I2C_Mem_Read+0x1fc>
    } while (hi2c->XferCount > 0U);
90008a26:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
90008a2a:	b29b      	uxth	r3, r3
90008a2c:	2b00      	cmp	r3, #0
90008a2e:	f000 8086 	beq.w	90008b3e <HAL_I2C_Mem_Read+0x286>
90008a32:	1c60      	adds	r0, r4, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008a34:	f8da 2000 	ldr.w	r2, [sl]
90008a38:	d0d7      	beq.n	900089ea <HAL_I2C_Mem_Read+0x132>
90008a3a:	6993      	ldr	r3, [r2, #24]
90008a3c:	075b      	lsls	r3, r3, #29
90008a3e:	d4d7      	bmi.n	900089f0 <HAL_I2C_Mem_Read+0x138>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008a40:	f7fe f8e2 	bl	90006c08 <HAL_GetTick>
90008a44:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008a46:	f8da 2000 	ldr.w	r2, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008a4a:	4284      	cmp	r4, r0
90008a4c:	d301      	bcc.n	90008a52 <HAL_I2C_Mem_Read+0x19a>
90008a4e:	2c00      	cmp	r4, #0
90008a50:	d1c9      	bne.n	900089e6 <HAL_I2C_Mem_Read+0x12e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008a52:	6993      	ldr	r3, [r2, #24]
90008a54:	f013 0304 	ands.w	r3, r3, #4
90008a58:	d1c5      	bne.n	900089e6 <HAL_I2C_Mem_Read+0x12e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008a5a:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008a5e:	2120      	movs	r1, #32
          return HAL_ERROR;
90008a60:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
90008a62:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008a66:	430a      	orrs	r2, r1
90008a68:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008a6c:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008a70:	f88a 3042 	strb.w	r3, [sl, #66]	; 0x42
          return HAL_ERROR;
90008a74:	e760      	b.n	90008938 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008a76:	6993      	ldr	r3, [r2, #24]
90008a78:	065f      	lsls	r7, r3, #25
90008a7a:	d49f      	bmi.n	900089bc <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008a7c:	f7fe f8c4 	bl	90006c08 <HAL_GetTick>
90008a80:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008a82:	f8da 2000 	ldr.w	r2, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008a86:	4284      	cmp	r4, r0
90008a88:	d301      	bcc.n	90008a8e <HAL_I2C_Mem_Read+0x1d6>
90008a8a:	2c00      	cmp	r4, #0
90008a8c:	d191      	bne.n	900089b2 <HAL_I2C_Mem_Read+0xfa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008a8e:	6993      	ldr	r3, [r2, #24]
90008a90:	f013 0340 	ands.w	r3, r3, #64	; 0x40
90008a94:	d18d      	bne.n	900089b2 <HAL_I2C_Mem_Read+0xfa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008a96:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008a9a:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008a9c:	430a      	orrs	r2, r1
90008a9e:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008aa2:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008aa6:	f88a 3042 	strb.w	r3, [sl, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
90008aaa:	2300      	movs	r3, #0
      return HAL_ERROR;
90008aac:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
90008aae:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
      return HAL_ERROR;
90008ab2:	e741      	b.n	90008938 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008ab4:	f8da 2000 	ldr.w	r2, [sl]
90008ab8:	1c60      	adds	r0, r4, #1
90008aba:	d110      	bne.n	90008ade <HAL_I2C_Mem_Read+0x226>
90008abc:	6993      	ldr	r3, [r2, #24]
90008abe:	0619      	lsls	r1, r3, #24
90008ac0:	d5fc      	bpl.n	90008abc <HAL_I2C_Mem_Read+0x204>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90008ac2:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
90008ac6:	b29b      	uxth	r3, r3
90008ac8:	2bff      	cmp	r3, #255	; 0xff
90008aca:	d919      	bls.n	90008b00 <HAL_I2C_Mem_Read+0x248>
  MODIFY_REG(hi2c->Instance->CR2, \
90008acc:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008ace:	f8aa 9028 	strh.w	r9, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008ad2:	403b      	ands	r3, r7
90008ad4:	4333      	orrs	r3, r6
90008ad6:	ea43 0308 	orr.w	r3, r3, r8
90008ada:	6053      	str	r3, [r2, #4]
}
90008adc:	e7a3      	b.n	90008a26 <HAL_I2C_Mem_Read+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008ade:	6993      	ldr	r3, [r2, #24]
90008ae0:	061b      	lsls	r3, r3, #24
90008ae2:	d4ee      	bmi.n	90008ac2 <HAL_I2C_Mem_Read+0x20a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008ae4:	f7fe f890 	bl	90006c08 <HAL_GetTick>
90008ae8:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008aea:	f8da 2000 	ldr.w	r2, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008aee:	4284      	cmp	r4, r0
90008af0:	d301      	bcc.n	90008af6 <HAL_I2C_Mem_Read+0x23e>
90008af2:	2c00      	cmp	r4, #0
90008af4:	d1e0      	bne.n	90008ab8 <HAL_I2C_Mem_Read+0x200>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008af6:	6993      	ldr	r3, [r2, #24]
90008af8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90008afc:	d1dc      	bne.n	90008ab8 <HAL_I2C_Mem_Read+0x200>
90008afe:	e7ac      	b.n	90008a5a <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = hi2c->XferCount;
90008b00:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
90008b04:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008b06:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
90008b08:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008b0c:	6853      	ldr	r3, [r2, #4]
90008b0e:	403b      	ands	r3, r7
90008b10:	4333      	orrs	r3, r6
90008b12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90008b16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90008b1a:	6053      	str	r3, [r2, #4]
}
90008b1c:	e783      	b.n	90008a26 <HAL_I2C_Mem_Read+0x16e>
      hi2c->XferSize = hi2c->XferCount;
90008b1e:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90008b22:	4812      	ldr	r0, [pc, #72]	; (90008b6c <HAL_I2C_Mem_Read+0x2b4>)
      hi2c->XferSize = hi2c->XferCount;
90008b24:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008b26:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
90008b28:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008b2c:	6853      	ldr	r3, [r2, #4]
90008b2e:	4003      	ands	r3, r0
90008b30:	4333      	orrs	r3, r6
90008b32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
90008b36:	4910      	ldr	r1, [pc, #64]	; (90008b78 <HAL_I2C_Mem_Read+0x2c0>)
90008b38:	4319      	orrs	r1, r3
90008b3a:	6051      	str	r1, [r2, #4]
}
90008b3c:	e74e      	b.n	900089dc <HAL_I2C_Mem_Read+0x124>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90008b3e:	462a      	mov	r2, r5
90008b40:	4621      	mov	r1, r4
90008b42:	4650      	mov	r0, sl
90008b44:	f7ff fc5c 	bl	90008400 <I2C_WaitOnSTOPFlagUntilTimeout>
90008b48:	b970      	cbnz	r0, 90008b68 <HAL_I2C_Mem_Read+0x2b0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90008b4a:	f8da 3000 	ldr.w	r3, [sl]
90008b4e:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
90008b50:	4c0a      	ldr	r4, [pc, #40]	; (90008b7c <HAL_I2C_Mem_Read+0x2c4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90008b52:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
90008b54:	685a      	ldr	r2, [r3, #4]
90008b56:	4022      	ands	r2, r4
90008b58:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90008b5a:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008b5e:	f88a 0040 	strb.w	r0, [sl, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90008b62:	f88a 0042 	strb.w	r0, [sl, #66]	; 0x42
    return HAL_OK;
90008b66:	e6e7      	b.n	90008938 <HAL_I2C_Mem_Read+0x80>
      return HAL_ERROR;
90008b68:	2001      	movs	r0, #1
90008b6a:	e6e5      	b.n	90008938 <HAL_I2C_Mem_Read+0x80>
90008b6c:	fc009800 	.word	0xfc009800
90008b70:	01ff2400 	.word	0x01ff2400
90008b74:	fc009c00 	.word	0xfc009c00
90008b78:	02002400 	.word	0x02002400
90008b7c:	fe00e800 	.word	0xfe00e800
90008b80:	01ff0000 	.word	0x01ff0000

90008b84 <HAL_I2C_GetState>:
  return hi2c->State;
90008b84:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
90008b88:	4770      	bx	lr
90008b8a:	bf00      	nop

90008b8c <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
90008b8c:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
90008b8e:	4770      	bx	lr

90008b90 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90008b90:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90008b94:	2a20      	cmp	r2, #32
90008b96:	d123      	bne.n	90008be0 <HAL_I2CEx_ConfigAnalogFilter+0x50>
90008b98:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90008b9c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90008ba0:	4603      	mov	r3, r0
90008ba2:	2a01      	cmp	r2, #1
90008ba4:	d01c      	beq.n	90008be0 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90008ba6:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90008ba8:	2024      	movs	r0, #36	; 0x24
{
90008baa:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
90008bac:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90008bb0:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
90008bb4:	6810      	ldr	r0, [r2, #0]
90008bb6:	f020 0001 	bic.w	r0, r0, #1
90008bba:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
90008bbc:	6810      	ldr	r0, [r2, #0]
90008bbe:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
90008bc2:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
90008bc4:	6810      	ldr	r0, [r2, #0]
90008bc6:	4301      	orrs	r1, r0

    return HAL_OK;
90008bc8:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
90008bca:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90008bcc:	6811      	ldr	r1, [r2, #0]
90008bce:	f041 0101 	orr.w	r1, r1, #1
90008bd2:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
90008bd4:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008bd8:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90008bdc:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
90008be0:	2002      	movs	r0, #2
}
90008be2:	4770      	bx	lr

90008be4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
90008be4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90008be8:	2a20      	cmp	r2, #32
90008bea:	d122      	bne.n	90008c32 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
90008bec:	4603      	mov	r3, r0
{
90008bee:	b500      	push	{lr}
90008bf0:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
90008bf4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90008bf8:	2a01      	cmp	r2, #1
90008bfa:	d01c      	beq.n	90008c36 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90008bfc:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90008bfe:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90008c00:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
90008c04:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
90008c08:	6810      	ldr	r0, [r2, #0]
90008c0a:	f020 0001 	bic.w	r0, r0, #1
90008c0e:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
90008c10:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
90008c12:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
90008c16:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
90008c1a:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
90008c1c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90008c1e:	6811      	ldr	r1, [r2, #0]
90008c20:	f041 0101 	orr.w	r1, r1, #1
90008c24:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
90008c26:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008c2a:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90008c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
90008c32:	2002      	movs	r0, #2
}
90008c34:	4770      	bx	lr
    return HAL_BUSY;
90008c36:	2002      	movs	r0, #2
}
90008c38:	f85d fb04 	ldr.w	pc, [sp], #4

90008c3c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
90008c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90008c40:	460d      	mov	r5, r1
90008c42:	4614      	mov	r4, r2
90008c44:	469a      	mov	sl, r3

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
90008c46:	7806      	ldrb	r6, [r0, #0]
    if ((p + i) > 256UL)
90008c48:	4681      	mov	r9, r0
    i = (uint32_t)Bits[l];
90008c4a:	2701      	movs	r7, #1
  p = 0;
90008c4c:	f04f 0800 	mov.w	r8, #0
90008c50:	e006      	b.n	90008c60 <JPEG_Bits_To_SizeCodes+0x24>
    i = (uint32_t)Bits[l];
90008c52:	f819 6f01 	ldrb.w	r6, [r9, #1]!
    if ((p + i) > 256UL)
90008c56:	eb06 0308 	add.w	r3, r6, r8
90008c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90008c5e:	d837      	bhi.n	90008cd0 <JPEG_Bits_To_SizeCodes+0x94>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
90008c60:	eb05 0008 	add.w	r0, r5, r8
90008c64:	4632      	mov	r2, r6
90008c66:	4639      	mov	r1, r7
    while (i != 0UL)
90008c68:	b116      	cbz	r6, 90008c70 <JPEG_Bits_To_SizeCodes+0x34>
      p++;
90008c6a:	44b0      	add	r8, r6
      Huffsize[p] = (uint8_t) l + 1U;
90008c6c:	f01a f8e4 	bl	90022e38 <memset>
  for (l = 0; l < 16UL; l++)
90008c70:	2f10      	cmp	r7, #16
    if ((p + i) > 256UL)
90008c72:	f107 0701 	add.w	r7, r7, #1
  for (l = 0; l < 16UL; l++)
90008c76:	d1ec      	bne.n	90008c52 <JPEG_Bits_To_SizeCodes+0x16>
      i--;
    }
  }
  Huffsize[p] = 0;
90008c78:	2300      	movs	r3, #0
90008c7a:	f805 3008 	strb.w	r3, [r5, r8]
  *LastK = p;
90008c7e:	f8ca 8000 	str.w	r8, [sl]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
90008c82:	7828      	ldrb	r0, [r5, #0]
90008c84:	4601      	mov	r1, r0
  p = 0;
  while (Huffsize[p] != 0U)
90008c86:	b300      	cbz	r0, 90008cca <JPEG_Bits_To_SizeCodes+0x8e>
90008c88:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
90008c8c:	2701      	movs	r7, #1
  p = 0;
90008c8e:	461a      	mov	r2, r3
    while (((uint32_t) Huffsize[p]) == si)
90008c90:	4288      	cmp	r0, r1
90008c92:	d10f      	bne.n	90008cb4 <JPEG_Bits_To_SizeCodes+0x78>
90008c94:	eb02 0008 	add.w	r0, r2, r8
90008c98:	1c56      	adds	r6, r2, #1
90008c9a:	eb05 0c02 	add.w	ip, r5, r2
90008c9e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
90008ca2:	1af6      	subs	r6, r6, r3
      Huffcode[p] = code;
90008ca4:	f840 3f04 	str.w	r3, [r0, #4]!
      p++;
90008ca8:	18f2      	adds	r2, r6, r3
    while (((uint32_t) Huffsize[p]) == si)
90008caa:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
90008cae:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
90008cb0:	458e      	cmp	lr, r1
90008cb2:	d0f7      	beq.n	90008ca4 <JPEG_Bits_To_SizeCodes+0x68>
    if(si > 31UL)
90008cb4:	291f      	cmp	r1, #31
90008cb6:	d80b      	bhi.n	90008cd0 <JPEG_Bits_To_SizeCodes+0x94>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
90008cb8:	fa07 f001 	lsl.w	r0, r7, r1
90008cbc:	4298      	cmp	r0, r3
90008cbe:	d907      	bls.n	90008cd0 <JPEG_Bits_To_SizeCodes+0x94>
  while (Huffsize[p] != 0U)
90008cc0:	5ca8      	ldrb	r0, [r5, r2]
    {
      return HAL_ERROR;
    }
    code <<= 1;
90008cc2:	005b      	lsls	r3, r3, #1
    si++;
90008cc4:	3101      	adds	r1, #1
  while (Huffsize[p] != 0U)
90008cc6:	2800      	cmp	r0, #0
90008cc8:	d1e2      	bne.n	90008c90 <JPEG_Bits_To_SizeCodes+0x54>
  }
  /* Return function status */
  return HAL_OK;
90008cca:	2000      	movs	r0, #0
}
90008ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
90008cd0:	2001      	movs	r0, #1
}
90008cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90008cd6:	bf00      	nop

90008cd8 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
90008cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
90008cda:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
90008cde:	460d      	mov	r5, r1
90008ce0:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
90008ce2:	ab01      	add	r3, sp, #4
90008ce4:	aa43      	add	r2, sp, #268	; 0x10c
90008ce6:	a902      	add	r1, sp, #8
90008ce8:	f7ff ffa8 	bl	90008c3c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90008cec:	b9d0      	cbnz	r0, 90008d24 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
90008cee:	9f01      	ldr	r7, [sp, #4]
90008cf0:	b1c7      	cbz	r7, 90008d24 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
90008cf2:	370f      	adds	r7, #15
90008cf4:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
90008cf8:	a902      	add	r1, sp, #8
90008cfa:	f104 0c0f 	add.w	ip, r4, #15
90008cfe:	4427      	add	r7, r4
90008d00:	e009      	b.n	90008d16 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008d02:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
90008d06:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008d08:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008d0c:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008d10:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008d12:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
90008d14:	d006      	beq.n	90008d24 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
90008d16:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
90008d1a:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008d1c:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
90008d20:	d9ef      	bls.n	90008d02 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
90008d22:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008d24:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
90008d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
90008d2a:	bf00      	nop

90008d2c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
90008d2c:	b510      	push	{r4, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
90008d2e:	6804      	ldr	r4, [r0, #0]
{
90008d30:	4608      	mov	r0, r1
90008d32:	b090      	sub	sp, #64	; 0x40
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
90008d34:	f504 61f8 	add.w	r1, r4, #1984	; 0x7c0
90008d38:	428a      	cmp	r2, r1
90008d3a:	f000 808c 	beq.w	90008e56 <JPEG_Set_HuffDC_Mem+0x12a>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
90008d3e:	f504 61fc 	add.w	r1, r4, #2016	; 0x7e0
90008d42:	428a      	cmp	r2, r1
90008d44:	d002      	beq.n	90008d4c <JPEG_Set_HuffDC_Mem+0x20>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
90008d46:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008d48:	b010      	add	sp, #64	; 0x40
90008d4a:	bd10      	pop	{r4, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
90008d4c:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
90008d50:	a901      	add	r1, sp, #4
90008d52:	f7ff ffc1 	bl	90008cd8 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
90008d56:	2800      	cmp	r0, #0
90008d58:	d1f6      	bne.n	90008d48 <JPEG_Set_HuffDC_Mem+0x1c>
    *addressDef = 0x0FFF0FFF;
90008d5a:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
90008d5e:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
90008d60:	6063      	str	r3, [r4, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d62:	f89d 200f 	ldrb.w	r2, [sp, #15]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d66:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d6a:	0212      	lsls	r2, r2, #8
90008d6c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d70:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d72:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d76:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d7a:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d7c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
90008d80:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
90008d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008d86:	f844 3c04 	str.w	r3, [r4, #-4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d8a:	f89d 200d 	ldrb.w	r2, [sp, #13]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d8e:	f89d 300c 	ldrb.w	r3, [sp, #12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d92:	0212      	lsls	r2, r2, #8
90008d94:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d98:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d9a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008d9e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008da2:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008da4:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
90008da8:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
90008daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008dae:	f844 3c08 	str.w	r3, [r4, #-8]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008db2:	f89d 200b 	ldrb.w	r2, [sp, #11]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008db6:	f89d 300a 	ldrb.w	r3, [sp, #10]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008dba:	0212      	lsls	r2, r2, #8
90008dbc:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008dc0:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008dc2:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008dc6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008dca:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008dcc:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
90008dd0:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
90008dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008dd6:	f844 3c0c 	str.w	r3, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008dda:	f89d 2009 	ldrb.w	r2, [sp, #9]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008dde:	f89d 3008 	ldrb.w	r3, [sp, #8]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008de2:	0212      	lsls	r2, r2, #8
90008de4:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008de8:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008dea:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008dee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008df2:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008df4:	f89d 1020 	ldrb.w	r1, [sp, #32]
90008df8:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
90008dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008dfe:	f844 3c10 	str.w	r3, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e02:	f89d 2007 	ldrb.w	r2, [sp, #7]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e06:	f89d 3006 	ldrb.w	r3, [sp, #6]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e0a:	0212      	lsls	r2, r2, #8
90008e0c:	f89d 101c 	ldrb.w	r1, [sp, #28]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e10:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e12:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e16:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e1a:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e1c:	f89d 1018 	ldrb.w	r1, [sp, #24]
90008e20:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
90008e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008e26:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e2a:	f89d 2005 	ldrb.w	r2, [sp, #5]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e32:	0212      	lsls	r2, r2, #8
90008e34:	f89d 1014 	ldrb.w	r1, [sp, #20]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e38:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e3a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e3e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e42:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008e44:	f89d 1010 	ldrb.w	r1, [sp, #16]
90008e48:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
90008e4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008e4e:	f844 3c18 	str.w	r3, [r4, #-24]
}
90008e52:	b010      	add	sp, #64	; 0x40
90008e54:	bd10      	pop	{r4, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
90008e56:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
90008e5a:	e779      	b.n	90008d50 <JPEG_Set_HuffDC_Mem+0x24>

90008e5c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
90008e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
90008e60:	6804      	ldr	r4, [r0, #0]
{
90008e62:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
90008e66:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
90008e68:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
90008e6c:	429a      	cmp	r2, r3
90008e6e:	d041      	beq.n	90008ef4 <JPEG_Set_HuffAC_Mem+0x98>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
90008e70:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
90008e74:	429a      	cmp	r2, r3
90008e76:	d004      	beq.n	90008e82 <JPEG_Set_HuffAC_Mem+0x26>
      return HAL_ERROR; /* Huffman Table overflow error*/
90008e78:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008e7a:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
90008e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
90008e82:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
90008e86:	4628      	mov	r0, r5
90008e88:	466b      	mov	r3, sp
90008e8a:	f20d 4234 	addw	r2, sp, #1076	; 0x434
90008e8e:	a901      	add	r1, sp, #4
90008e90:	f7ff fed4 	bl	90008c3c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90008e94:	2800      	cmp	r0, #0
90008e96:	d1f0      	bne.n	90008e7a <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
90008e98:	9b00      	ldr	r3, [sp, #0]
90008e9a:	b373      	cbz	r3, 90008efa <JPEG_Set_HuffAC_Mem+0x9e>
90008e9c:	330f      	adds	r3, #15
90008e9e:	f20d 4734 	addw	r7, sp, #1076	; 0x434
90008ea2:	f10d 0c04 	add.w	ip, sp, #4
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008ea6:	ae42      	add	r6, sp, #264	; 0x108
90008ea8:	eb05 0e03 	add.w	lr, r5, r3
90008eac:	350f      	adds	r5, #15
90008eae:	e011      	b.n	90008ed4 <JPEG_Set_HuffAC_Mem+0x78>
      l = (msb * 10UL) + lsb - 1UL;
90008eb0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
90008eb4:	2ba1      	cmp	r3, #161	; 0xa1
90008eb6:	d8df      	bhi.n	90008e78 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008eb8:	f81c 2b01 	ldrb.w	r2, [ip], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008ebc:	eb06 0883 	add.w	r8, r6, r3, lsl #2
90008ec0:	f857 9b04 	ldr.w	r9, [r7], #4
  while (k < lastK)
90008ec4:	45ae      	cmp	lr, r5
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008ec6:	f102 32ff 	add.w	r2, r2, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008eca:	4631      	mov	r1, r6
90008ecc:	f8c8 90a4 	str.w	r9, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008ed0:	54f2      	strb	r2, [r6, r3]
  while (k < lastK)
90008ed2:	d013      	beq.n	90008efc <JPEG_Set_HuffAC_Mem+0xa0>
    l = AC_BitsValsTable->HuffVal[k];
90008ed4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
      l = 160; /*l = 0x00 EOB code*/
90008ed8:	23a0      	movs	r3, #160	; 0xa0
    if (l == 0UL)
90008eda:	2900      	cmp	r1, #0
90008edc:	d0ec      	beq.n	90008eb8 <JPEG_Set_HuffAC_Mem+0x5c>
      msb = (l & 0xF0UL) >> 4;
90008ede:	090b      	lsrs	r3, r1, #4
      lsb = (l & 0x0FUL);
90008ee0:	f001 020f 	and.w	r2, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
90008ee4:	29f0      	cmp	r1, #240	; 0xf0
      l = (msb * 10UL) + lsb - 1UL;
90008ee6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90008eea:	f102 32ff 	add.w	r2, r2, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
90008eee:	d1df      	bne.n	90008eb0 <JPEG_Set_HuffAC_Mem+0x54>
      l = 161;
90008ef0:	23a1      	movs	r3, #161	; 0xa1
90008ef2:	e7e1      	b.n	90008eb8 <JPEG_Set_HuffAC_Mem+0x5c>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
90008ef4:	f204 6444 	addw	r4, r4, #1604	; 0x644
90008ef8:	e7c5      	b.n	90008e86 <JPEG_Set_HuffAC_Mem+0x2a>
90008efa:	a942      	add	r1, sp, #264	; 0x108
      *addressDef = 0x0FFF0FFF;
90008efc:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
    *addressDef = 0x0FD10FD0;
90008f00:	4a19      	ldr	r2, [pc, #100]	; (90008f68 <JPEG_Set_HuffAC_Mem+0x10c>)
90008f02:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
90008f06:	f10d 0566 	add.w	r5, sp, #102	; 0x66
      *addressDef = 0x0FFF0FFF;
90008f0a:	6023      	str	r3, [r4, #0]
90008f0c:	6063      	str	r3, [r4, #4]
90008f0e:	f50c 7e4a 	add.w	lr, ip, #808	; 0x328
90008f12:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
90008f14:	f103 33d3 	add.w	r3, r3, #3553874899	; 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
90008f18:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
90008f1a:	f50c 7c49 	add.w	ip, ip, #804	; 0x324
90008f1e:	f103 232c 	add.w	r3, r3, #738208768	; 0x2c002c00
90008f22:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
90008f24:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
90008f28:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
90008f2a:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
90008f2e:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008f30:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008f34:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008f38:	0212      	lsls	r2, r2, #8
90008f3a:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008f3e:	021b      	lsls	r3, r3, #8
90008f40:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008f44:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    while (i > 1UL)
90008f48:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008f4a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008f4e:	433a      	orrs	r2, r7
    while (i > 1UL)
90008f50:	428d      	cmp	r5, r1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008f52:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
90008f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008f5a:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
90008f5e:	d1e7      	bne.n	90008f30 <JPEG_Set_HuffAC_Mem+0xd4>
}
90008f60:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
90008f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90008f68:	0fd10fd0 	.word	0x0fd10fd0

90008f6c <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
90008f6c:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008f6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
90008f72:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008f74:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008f76:	f003 0303 	and.w	r3, r3, #3
90008f7a:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
90008f7c:	6803      	ldr	r3, [r0, #0]
90008f7e:	685a      	ldr	r2, [r3, #4]
90008f80:	bf0c      	ite	eq
90008f82:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
90008f86:	f022 0208 	bicne.w	r2, r2, #8
90008f8a:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008f8c:	681a      	ldr	r2, [r3, #0]
90008f8e:	f022 0201 	bic.w	r2, r2, #1
90008f92:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008f96:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90008f9a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
90008f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008f9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
90008fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
90008fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90008faa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90008fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90008fae:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90008fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
90008fb4:	681a      	ldr	r2, [r3, #0]
90008fb6:	f042 0201 	orr.w	r2, r2, #1
90008fba:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008fbc:	6d42      	ldr	r2, [r0, #84]	; 0x54
90008fbe:	f002 020c 	and.w	r2, r2, #12
90008fc2:	2a08      	cmp	r2, #8
90008fc4:	d00a      	beq.n	90008fdc <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008fc6:	6d42      	ldr	r2, [r0, #84]	; 0x54
90008fc8:	f002 020c 	and.w	r2, r2, #12
90008fcc:	2a0c      	cmp	r2, #12
90008fce:	d000      	beq.n	90008fd2 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
90008fd0:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90008fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008fd4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90008fd8:	631a      	str	r2, [r3, #48]	; 0x30
}
90008fda:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
90008fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008fde:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
90008fe2:	631a      	str	r2, [r3, #48]	; 0x30
90008fe4:	4770      	bx	lr
90008fe6:	bf00      	nop

90008fe8 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008fe8:	6b01      	ldr	r1, [r0, #48]	; 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90008fea:	6a82      	ldr	r2, [r0, #40]	; 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008fec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90008fee:	429a      	cmp	r2, r3
90008ff0:	d332      	bcc.n	90009058 <JPEG_DMA_StartProcess+0x70>
{
90008ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
90008ff4:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90008ff6:	6b40      	ldr	r0, [r0, #52]	; 0x34
{
90008ff8:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90008ffa:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90008ffc:	6a86      	ldr	r6, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90008ffe:	42b5      	cmp	r5, r6
90009000:	d327      	bcc.n	90009052 <JPEG_DMA_StartProcess+0x6a>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
90009002:	4f1c      	ldr	r7, [pc, #112]	; (90009074 <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
90009004:	f8df c078 	ldr.w	ip, [pc, #120]	; 90009080 <JPEG_DMA_StartProcess+0x98>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
90009008:	654f      	str	r7, [r1, #84]	; 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000900a:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000900e:	491a      	ldr	r1, [pc, #104]	; (90009078 <JPEG_DMA_StartProcess+0x90>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
90009010:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
90009012:	6441      	str	r1, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
90009014:	4919      	ldr	r1, [pc, #100]	; (9000907c <JPEG_DMA_StartProcess+0x94>)
90009016:	6581      	str	r1, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
90009018:	b1a3      	cbz	r3, 90009044 <JPEG_DMA_StartProcess+0x5c>
9000901a:	b19e      	cbz	r6, 90009044 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000901c:	fbb2 f1f3 	udiv	r1, r2, r3
90009020:	fb03 2311 	mls	r3, r3, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009024:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90009026:	1ad2      	subs	r2, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009028:	3144      	adds	r1, #68	; 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
9000902a:	fbb5 f3f6 	udiv	r3, r5, r6
9000902e:	fb06 5313 	mls	r3, r6, r3, r5
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90009032:	62a2      	str	r2, [r4, #40]	; 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
90009034:	1aeb      	subs	r3, r5, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009036:	2501      	movs	r5, #1
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
90009038:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000903a:	9500      	str	r5, [sp, #0]
9000903c:	69e2      	ldr	r2, [r4, #28]
9000903e:	f001 fbdd 	bl	9000a7fc <HAL_MDMA_Start_IT>
90009042:	b158      	cbz	r0, 9000905c <JPEG_DMA_StartProcess+0x74>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009044:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
90009046:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009048:	f043 0304 	orr.w	r3, r3, #4
9000904c:	6523      	str	r3, [r4, #80]	; 0x50
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
9000904e:	b003      	add	sp, #12
90009050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
90009052:	2001      	movs	r0, #1
}
90009054:	b003      	add	sp, #12
90009056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
90009058:	2001      	movs	r0, #1
}
9000905a:	4770      	bx	lr
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000905c:	6822      	ldr	r2, [r4, #0]
9000905e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90009060:	69a1      	ldr	r1, [r4, #24]
90009062:	3240      	adds	r2, #64	; 0x40
90009064:	9500      	str	r5, [sp, #0]
90009066:	6b20      	ldr	r0, [r4, #48]	; 0x30
90009068:	f001 fbc8 	bl	9000a7fc <HAL_MDMA_Start_IT>
9000906c:	2800      	cmp	r0, #0
9000906e:	d0f1      	beq.n	90009054 <JPEG_DMA_StartProcess+0x6c>
90009070:	e7e8      	b.n	90009044 <JPEG_DMA_StartProcess+0x5c>
90009072:	bf00      	nop
90009074:	900095ad 	.word	0x900095ad
90009078:	90009829 	.word	0x90009829
9000907c:	900098ad 	.word	0x900098ad
90009080:	900095d9 	.word	0x900095d9

90009084 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
90009084:	6803      	ldr	r3, [r0, #0]
90009086:	685a      	ldr	r2, [r3, #4]
90009088:	f002 0203 	and.w	r2, r2, #3
9000908c:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
9000908e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90009092:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
90009094:	f000 809d 	beq.w	900091d2 <HAL_JPEG_GetInfo.part.0+0x14e>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
90009098:	685a      	ldr	r2, [r3, #4]
9000909a:	f012 0203 	ands.w	r2, r2, #3
9000909e:	d174      	bne.n	9000918a <HAL_JPEG_GetInfo.part.0+0x106>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900090a0:	685c      	ldr	r4, [r3, #4]
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
900090a2:	600a      	str	r2, [r1, #0]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900090a4:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900090a6:	0c24      	lsrs	r4, r4, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900090a8:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900090aa:	608c      	str	r4, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900090ac:	60ca      	str	r2, [r1, #12]
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
900090ae:	2200      	movs	r2, #0
900090b0:	f8c9 2004 	str.w	r2, [r9, #4]
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
900090b4:	4a5f      	ldr	r2, [pc, #380]	; (90009234 <HAL_JPEG_GetInfo.part.0+0x1b0>)
900090b6:	f103 0c50 	add.w	ip, r3, #80	; 0x50
  uint32_t quality = 0;
900090ba:	2600      	movs	r6, #0
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
900090bc:	f04f 0e64 	mov.w	lr, #100	; 0x64
900090c0:	f102 0540 	add.w	r5, r2, #64	; 0x40
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
900090c4:	f241 3488 	movw	r4, #5000	; 0x1388
900090c8:	e033      	b.n	90009132 <HAL_JPEG_GetInfo.part.0+0xae>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
900090ca:	f892 8001 	ldrb.w	r8, [r2, #1]
900090ce:	fb0e f707 	mul.w	r7, lr, r7
900090d2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
900090d4:	f811 8008 	ldrb.w	r8, [r1, r8]
900090d8:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
900090dc:	2f64      	cmp	r7, #100	; 0x64
900090de:	d969      	bls.n	900091b4 <HAL_JPEG_GetInfo.part.0+0x130>
          quality += 5000UL / scale;
900090e0:	fbb4 f7f7 	udiv	r7, r4, r7
900090e4:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900090e6:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
900090ea:	2f01      	cmp	r7, #1
900090ec:	d03d      	beq.n	9000916a <HAL_JPEG_GetInfo.part.0+0xe6>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
900090ee:	f892 8002 	ldrb.w	r8, [r2, #2]
900090f2:	fb0e f707 	mul.w	r7, lr, r7
900090f6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
900090f8:	f811 8008 	ldrb.w	r8, [r1, r8]
900090fc:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
90009100:	2f64      	cmp	r7, #100	; 0x64
90009102:	d952      	bls.n	900091aa <HAL_JPEG_GetInfo.part.0+0x126>
          quality += 5000UL / scale;
90009104:	fbb4 f7f7 	udiv	r7, r4, r7
90009108:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000910a:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
9000910c:	2b01      	cmp	r3, #1
9000910e:	d030      	beq.n	90009172 <HAL_JPEG_GetInfo.part.0+0xee>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90009110:	78d7      	ldrb	r7, [r2, #3]
90009112:	fb0e f303 	mul.w	r3, lr, r3
90009116:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90009118:	5dcf      	ldrb	r7, [r1, r7]
9000911a:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
9000911e:	2b64      	cmp	r3, #100	; 0x64
90009120:	d952      	bls.n	900091c8 <HAL_JPEG_GetInfo.part.0+0x144>
          quality += 5000UL / scale;
90009122:	fbb4 f3f3 	udiv	r3, r4, r3
90009126:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
90009128:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
9000912a:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000912e:	4295      	cmp	r5, r2
90009130:	d025      	beq.n	9000917e <HAL_JPEG_GetInfo.part.0+0xfa>
    quantRow = *tableAddress;
90009132:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90009136:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
90009138:	2f01      	cmp	r7, #1
9000913a:	d034      	beq.n	900091a6 <HAL_JPEG_GetInfo.part.0+0x122>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000913c:	f892 8000 	ldrb.w	r8, [r2]
90009140:	fb0e f707 	mul.w	r7, lr, r7
90009144:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90009146:	f811 8008 	ldrb.w	r8, [r1, r8]
9000914a:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000914e:	2f64      	cmp	r7, #100	; 0x64
90009150:	d935      	bls.n	900091be <HAL_JPEG_GetInfo.part.0+0x13a>
          quality += 5000UL / scale;
90009152:	fbb4 f7f7 	udiv	r7, r4, r7
90009156:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90009158:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
9000915c:	2f01      	cmp	r7, #1
9000915e:	d1b4      	bne.n	900090ca <HAL_JPEG_GetInfo.part.0+0x46>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90009160:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
90009164:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
90009166:	2f01      	cmp	r7, #1
90009168:	d1c1      	bne.n	900090ee <HAL_JPEG_GetInfo.part.0+0x6a>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000916a:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
9000916c:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
9000916e:	2b01      	cmp	r3, #1
90009170:	d1ce      	bne.n	90009110 <HAL_JPEG_GetInfo.part.0+0x8c>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
90009172:	3204      	adds	r2, #4
        quality += 100UL;
90009174:	3664      	adds	r6, #100	; 0x64
    tableAddress ++;
90009176:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000917a:	4295      	cmp	r5, r2
9000917c:	d1d9      	bne.n	90009132 <HAL_JPEG_GetInfo.part.0+0xae>
  }

  return (quality / 64UL);
9000917e:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
90009180:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
90009182:	f8c9 6010 	str.w	r6, [r9, #16]
}
90009186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
9000918a:	685a      	ldr	r2, [r3, #4]
9000918c:	f002 0203 	and.w	r2, r2, #3
90009190:	2a03      	cmp	r2, #3
90009192:	d14b      	bne.n	9000922c <HAL_JPEG_GetInfo.part.0+0x1a8>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90009194:	685c      	ldr	r4, [r3, #4]
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
90009196:	2530      	movs	r5, #48	; 0x30
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90009198:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000919a:	0c24      	lsrs	r4, r4, #16
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
9000919c:	600d      	str	r5, [r1, #0]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000919e:	0c12      	lsrs	r2, r2, #16
900091a0:	e9c1 4202 	strd	r4, r2, [r1, #8]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
900091a4:	e01d      	b.n	900091e2 <HAL_JPEG_GetInfo.part.0+0x15e>
        quality += 100UL;
900091a6:	3664      	adds	r6, #100	; 0x64
900091a8:	e7d6      	b.n	90009158 <HAL_JPEG_GetInfo.part.0+0xd4>
          quality += (200UL - scale) / 2UL;
900091aa:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
900091ae:	eb06 0657 	add.w	r6, r6, r7, lsr #1
900091b2:	e7aa      	b.n	9000910a <HAL_JPEG_GetInfo.part.0+0x86>
900091b4:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
900091b8:	eb06 0657 	add.w	r6, r6, r7, lsr #1
900091bc:	e793      	b.n	900090e6 <HAL_JPEG_GetInfo.part.0+0x62>
900091be:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
900091c2:	eb06 0657 	add.w	r6, r6, r7, lsr #1
900091c6:	e7c7      	b.n	90009158 <HAL_JPEG_GetInfo.part.0+0xd4>
900091c8:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
900091cc:	eb06 0653 	add.w	r6, r6, r3, lsr #1
900091d0:	e7aa      	b.n	90009128 <HAL_JPEG_GetInfo.part.0+0xa4>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900091d2:	685c      	ldr	r4, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
900091d4:	2510      	movs	r5, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900091d6:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900091d8:	40ec      	lsrs	r4, r5
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
900091da:	600d      	str	r5, [r1, #0]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
900091dc:	40ea      	lsrs	r2, r5
900091de:	e9c1 4202 	strd	r4, r2, [r1, #8]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
900091e2:	691a      	ldr	r2, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
900091e4:	695d      	ldr	r5, [r3, #20]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
900091e6:	699c      	ldr	r4, [r3, #24]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
900091e8:	0916      	lsrs	r6, r2, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
900091ea:	f015 0ff0 	tst.w	r5, #240	; 0xf0
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
900091ee:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
900091f2:	ea4f 1414 	mov.w	r4, r4, lsr #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
900091f6:	ea4f 1715 	mov.w	r7, r5, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
900091fa:	d108      	bne.n	9000920e <HAL_JPEG_GetInfo.part.0+0x18a>
900091fc:	2a01      	cmp	r2, #1
900091fe:	d106      	bne.n	9000920e <HAL_JPEG_GetInfo.part.0+0x18a>
90009200:	0726      	lsls	r6, r4, #28
90009202:	f47f af54 	bne.w	900090ae <HAL_JPEG_GetInfo.part.0+0x2a>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
90009206:	2202      	movs	r2, #2
90009208:	f8c9 2004 	str.w	r2, [r9, #4]
9000920c:	e752      	b.n	900090b4 <HAL_JPEG_GetInfo.part.0+0x30>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000920e:	433e      	orrs	r6, r7
90009210:	0735      	lsls	r5, r6, #28
90009212:	f43f af4c 	beq.w	900090ae <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90009216:	433c      	orrs	r4, r7
90009218:	0721      	lsls	r1, r4, #28
9000921a:	f47f af48 	bne.w	900090ae <HAL_JPEG_GetInfo.part.0+0x2a>
9000921e:	2a03      	cmp	r2, #3
90009220:	f47f af45 	bne.w	900090ae <HAL_JPEG_GetInfo.part.0+0x2a>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
90009224:	2201      	movs	r2, #1
90009226:	f8c9 2004 	str.w	r2, [r9, #4]
9000922a:	e743      	b.n	900090b4 <HAL_JPEG_GetInfo.part.0+0x30>
    return HAL_ERROR;
9000922c:	2001      	movs	r0, #1
}
9000922e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90009232:	bf00      	nop
90009234:	900266f0 	.word	0x900266f0

90009238 <HAL_JPEG_Init>:
  if (hjpeg == NULL)
90009238:	2800      	cmp	r0, #0
9000923a:	f000 810b 	beq.w	90009454 <HAL_JPEG_Init+0x21c>
{
9000923e:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
90009240:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
90009244:	4604      	mov	r4, r0
90009246:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000924a:	2b00      	cmp	r3, #0
9000924c:	f000 80fd 	beq.w	9000944a <HAL_JPEG_Init+0x212>
  __HAL_JPEG_ENABLE(hjpeg);
90009250:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
90009252:	2102      	movs	r1, #2
  hjpeg->QuantTable2 = NULL;
90009254:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
90009256:	4880      	ldr	r0, [pc, #512]	; (90009458 <HAL_JPEG_Init+0x220>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
90009258:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
9000925c:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000925e:	f041 0101 	orr.w	r1, r1, #1
90009262:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009264:	6811      	ldr	r1, [r2, #0]
90009266:	f021 0101 	bic.w	r1, r1, #1
9000926a:	6011      	str	r1, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000926c:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000926e:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
90009272:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
90009274:	6b11      	ldr	r1, [r2, #48]	; 0x30
90009276:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
9000927a:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
9000927c:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000927e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
90009282:	6311      	str	r1, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90009284:	6b91      	ldr	r1, [r2, #56]	; 0x38
90009286:	f041 0160 	orr.w	r1, r1, #96	; 0x60
9000928a:	6391      	str	r1, [r2, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000928c:	4973      	ldr	r1, [pc, #460]	; (9000945c <HAL_JPEG_Init+0x224>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000928e:	63e0      	str	r0, [r4, #60]	; 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90009290:	2001      	movs	r0, #1
  hjpeg->QuantTable3 = NULL;
90009292:	64a3      	str	r3, [r4, #72]	; 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
90009294:	e9c4 1310 	strd	r1, r3, [r4, #64]	; 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90009298:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
9000929c:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
900092a0:	4b6f      	ldr	r3, [pc, #444]	; (90009460 <HAL_JPEG_Init+0x228>)
900092a2:	f8c2 0368 	str.w	r0, [r2, #872]	; 0x368
900092a6:	f8c2 1364 	str.w	r1, [r2, #868]	; 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900092aa:	486e      	ldr	r0, [pc, #440]	; (90009464 <HAL_JPEG_Init+0x22c>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
900092ac:	f8c2 3360 	str.w	r3, [r2, #864]	; 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900092b0:	4b6d      	ldr	r3, [pc, #436]	; (90009468 <HAL_JPEG_Init+0x230>)
900092b2:	f8c2 0378 	str.w	r0, [r2, #888]	; 0x378
900092b6:	496d      	ldr	r1, [pc, #436]	; (9000946c <HAL_JPEG_Init+0x234>)
900092b8:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
900092bc:	4b6c      	ldr	r3, [pc, #432]	; (90009470 <HAL_JPEG_Init+0x238>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900092be:	f8c2 1370 	str.w	r1, [r2, #880]	; 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
900092c2:	486c      	ldr	r0, [pc, #432]	; (90009474 <HAL_JPEG_Init+0x23c>)
900092c4:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
900092c8:	496b      	ldr	r1, [pc, #428]	; (90009478 <HAL_JPEG_Init+0x240>)
900092ca:	4b6c      	ldr	r3, [pc, #432]	; (9000947c <HAL_JPEG_Init+0x244>)
900092cc:	f8c2 0384 	str.w	r0, [r2, #900]	; 0x384
900092d0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
900092d4:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
900092d8:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
  value = *address & 0xFFFF0000U;
900092dc:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
900092e0:	4967      	ldr	r1, [pc, #412]	; (90009480 <HAL_JPEG_Init+0x248>)
900092e2:	4001      	ands	r1, r0
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
900092e4:	f502 6085 	add.w	r0, r2, #1064	; 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
900092e8:	430b      	orrs	r3, r1
  *address = value;
900092ea:	4966      	ldr	r1, [pc, #408]	; (90009484 <HAL_JPEG_Init+0x24c>)
900092ec:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
900092f0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
900092f4:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
900092f8:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
900092fa:	f891 e0b3 	ldrb.w	lr, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
900092fe:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
90009300:	f891 c0b0 	ldrb.w	ip, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
90009304:	f891 50b1 	ldrb.w	r5, [r1, #177]	; 0xb1
  while (index > 3UL)
90009308:	428e      	cmp	r6, r1
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000930a:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000930e:	ea43 030c 	orr.w	r3, r3, ip
90009312:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90009316:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000931a:	d1eb      	bne.n	900092f4 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
9000931c:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90009320:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  value = *address & 0xFFFF0000U;
90009324:	4856      	ldr	r0, [pc, #344]	; (90009480 <HAL_JPEG_Init+0x248>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90009326:	2501      	movs	r5, #1
  value = *address & 0x0000FFFFU;
90009328:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
9000932a:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
9000932e:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
90009332:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
90009336:	4003      	ands	r3, r0
  *address = value;
90009338:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000933c:	f8c2 5438 	str.w	r5, [r2, #1080]	; 0x438
90009340:	f8c2 1434 	str.w	r1, [r2, #1076]	; 0x434
90009344:	f8c2 1430 	str.w	r1, [r2, #1072]	; 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
90009348:	f640 310a 	movw	r1, #2826	; 0xb0a
  value = *address & 0x0000FFFFUL;
9000934c:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
90009350:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
90009352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
90009356:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
9000935a:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000935e:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
90009360:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90009362:	4b49      	ldr	r3, [pc, #292]	; (90009488 <HAL_JPEG_Init+0x250>)
  *address = value;
90009364:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
90009368:	f247 7102 	movw	r1, #30466	; 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000936c:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
90009370:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
90009374:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
90009378:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000937c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
9000937e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
90009382:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
90009386:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
9000938a:	4003      	ands	r3, r0
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000938c:	483f      	ldr	r0, [pc, #252]	; (9000948c <HAL_JPEG_Init+0x254>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000938e:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90009390:	4b3f      	ldr	r3, [pc, #252]	; (90009490 <HAL_JPEG_Init+0x258>)
  *address = value;
90009392:	f8c2 1458 	str.w	r1, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90009396:	493f      	ldr	r1, [pc, #252]	; (90009494 <HAL_JPEG_Init+0x25c>)
90009398:	f8c2 0454 	str.w	r0, [r2, #1108]	; 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
9000939c:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
900093a0:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
900093a4:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
900093a8:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
900093ac:	493a      	ldr	r1, [pc, #232]	; (90009498 <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFUL;
900093ae:	b29b      	uxth	r3, r3
900093b0:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
900093b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
900093b8:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
900093bc:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
900093c0:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
900093c2:	f891 50b5 	ldrb.w	r5, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
900093c6:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
900093c8:	f891 e0b2 	ldrb.w	lr, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
900093cc:	f891 c0b3 	ldrb.w	ip, [r1, #179]	; 0xb3
  while (index > 3UL)
900093d0:	42b1      	cmp	r1, r6
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
900093d2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
900093d6:	ea43 030e 	orr.w	r3, r3, lr
900093da:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
900093de:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
900093e2:	d1eb      	bne.n	900093bc <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
900093e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
900093e8:	4926      	ldr	r1, [pc, #152]	; (90009484 <HAL_JPEG_Init+0x24c>)
900093ea:	4620      	mov	r0, r4
900093ec:	f7ff fd36 	bl	90008e5c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
900093f0:	b118      	cbz	r0, 900093fa <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
900093f2:	2301      	movs	r3, #1
    return HAL_ERROR;
900093f4:	4618      	mov	r0, r3
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
900093f6:	6523      	str	r3, [r4, #80]	; 0x50
}
900093f8:	bd70      	pop	{r4, r5, r6, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
900093fa:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
900093fc:	4620      	mov	r0, r4
900093fe:	4926      	ldr	r1, [pc, #152]	; (90009498 <HAL_JPEG_Init+0x260>)
90009400:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
90009404:	f7ff fd2a 	bl	90008e5c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
90009408:	2800      	cmp	r0, #0
9000940a:	d1f2      	bne.n	900093f2 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC0);
9000940c:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
9000940e:	4620      	mov	r0, r4
90009410:	4922      	ldr	r1, [pc, #136]	; (9000949c <HAL_JPEG_Init+0x264>)
90009412:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
90009416:	f7ff fc89 	bl	90008d2c <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
9000941a:	2800      	cmp	r0, #0
9000941c:	d1e9      	bne.n	900093f2 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC1);
9000941e:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
90009420:	4620      	mov	r0, r4
90009422:	491f      	ldr	r1, [pc, #124]	; (900094a0 <HAL_JPEG_Init+0x268>)
90009424:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
90009428:	f7ff fc80 	bl	90008d2c <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
9000942c:	2800      	cmp	r0, #0
9000942e:	d1e0      	bne.n	900093f2 <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
90009430:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_READY;
90009432:	2101      	movs	r1, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
90009434:	6853      	ldr	r3, [r2, #4]
90009436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000943a:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
9000943c:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
9000943e:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
90009440:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
90009444:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
90009446:	6560      	str	r0, [r4, #84]	; 0x54
}
90009448:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
9000944a:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
9000944e:	f7fb f8d1 	bl	900045f4 <HAL_JPEG_MspInit>
90009452:	e6fd      	b.n	90009250 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
90009454:	2001      	movs	r0, #1
}
90009456:	4770      	bx	lr
90009458:	900266b0 	.word	0x900266b0
9000945c:	90026638 	.word	0x90026638
90009460:	01050100 	.word	0x01050100
90009464:	0b0a0908 	.word	0x0b0a0908
90009468:	07060504 	.word	0x07060504
9000946c:	03020100 	.word	0x03020100
90009470:	7d010000 	.word	0x7d010000
90009474:	04040505 	.word	0x04040505
90009478:	03040203 	.word	0x03040203
9000947c:	03010200 	.word	0x03010200
90009480:	ffff0000 	.word	0xffff0000
90009484:	90026584 	.word	0x90026584
90009488:	09080706 	.word	0x09080706
9000948c:	01000404 	.word	0x01000404
90009490:	04040201 	.word	0x04040201
90009494:	05070403 	.word	0x05070403
90009498:	900264d0 	.word	0x900264d0
9000949c:	90026694 	.word	0x90026694
900094a0:	90026678 	.word	0x90026678

900094a4 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
900094a4:	2b00      	cmp	r3, #0
900094a6:	bf18      	it	ne
900094a8:	2900      	cmpne	r1, #0
900094aa:	d03b      	beq.n	90009524 <HAL_JPEG_Decode_DMA+0x80>
{
900094ac:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
900094ae:	fab0 f580 	clz	r5, r0
900094b2:	4604      	mov	r4, r0
900094b4:	096d      	lsrs	r5, r5, #5
900094b6:	b330      	cbz	r0, 90009506 <HAL_JPEG_Decode_DMA+0x62>
  __HAL_LOCK(hjpeg);
900094b8:	f890 c04c 	ldrb.w	ip, [r0, #76]	; 0x4c
900094bc:	f1bc 0f01 	cmp.w	ip, #1
900094c0:	d02e      	beq.n	90009520 <HAL_JPEG_Decode_DMA+0x7c>
  if (hjpeg->State == HAL_JPEG_STATE_READY)
900094c2:	f890 c04d 	ldrb.w	ip, [r0, #77]	; 0x4d
  __HAL_LOCK(hjpeg);
900094c6:	f04f 0e01 	mov.w	lr, #1
  if (hjpeg->State == HAL_JPEG_STATE_READY)
900094ca:	45f4      	cmp	ip, lr
900094cc:	fa5f f68c 	uxtb.w	r6, ip
  __HAL_LOCK(hjpeg);
900094d0:	f880 e04c 	strb.w	lr, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
900094d4:	d119      	bne.n	9000950a <HAL_JPEG_Decode_DMA+0x66>
    hjpeg->InDataLength = InDataLength;
900094d6:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
900094d8:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
900094dc:	9b04      	ldr	r3, [sp, #16]
900094de:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
900094e0:	2304      	movs	r3, #4
900094e2:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
900094e6:	6d43      	ldr	r3, [r0, #84]	; 0x54
900094e8:	f023 030f 	bic.w	r3, r3, #15
900094ec:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
900094ee:	6d43      	ldr	r3, [r0, #84]	; 0x54
900094f0:	f043 030e 	orr.w	r3, r3, #14
900094f4:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
900094f6:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
900094f8:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
900094fa:	f7ff fd37 	bl	90008f6c <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
900094fe:	f7ff fd73 	bl	90008fe8 <JPEG_DMA_StartProcess>
90009502:	b930      	cbnz	r0, 90009512 <HAL_JPEG_Decode_DMA+0x6e>
}
90009504:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90009506:	2001      	movs	r0, #1
}
90009508:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
9000950a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hjpeg);
9000950c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
90009510:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
90009512:	2306      	movs	r3, #6
      return HAL_ERROR;
90009514:	4630      	mov	r0, r6
      __HAL_UNLOCK(hjpeg);
90009516:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000951a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
9000951e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
90009520:	2002      	movs	r0, #2
}
90009522:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90009524:	2001      	movs	r0, #1
}
90009526:	4770      	bx	lr

90009528 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009528:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000952a:	f003 030c 	and.w	r3, r3, #12
9000952e:	2b0c      	cmp	r3, #12
90009530:	d01a      	beq.n	90009568 <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009532:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009534:	f003 030c 	and.w	r3, r3, #12
90009538:	2b08      	cmp	r3, #8
9000953a:	d001      	beq.n	90009540 <HAL_JPEG_Pause+0x18>
}
9000953c:	2000      	movs	r0, #0
9000953e:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90009540:	07ca      	lsls	r2, r1, #31
90009542:	d41f      	bmi.n	90009584 <HAL_JPEG_Pause+0x5c>
90009544:	f06f 0228 	mvn.w	r2, #40	; 0x28
90009548:	f04f 3cff 	mov.w	ip, #4294967295
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000954c:	078b      	lsls	r3, r1, #30
9000954e:	d504      	bpl.n	9000955a <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
90009550:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009552:	4694      	mov	ip, r2
90009554:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
90009558:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000955a:	6802      	ldr	r2, [r0, #0]
}
9000955c:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000955e:	6b13      	ldr	r3, [r2, #48]	; 0x30
90009560:	ea03 030c 	and.w	r3, r3, ip
90009564:	6313      	str	r3, [r2, #48]	; 0x30
}
90009566:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90009568:	07cb      	lsls	r3, r1, #31
9000956a:	d503      	bpl.n	90009574 <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000956c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000956e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90009572:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90009574:	0789      	lsls	r1, r1, #30
90009576:	d5e1      	bpl.n	9000953c <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
90009578:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000957a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000957e:	6543      	str	r3, [r0, #84]	; 0x54
}
90009580:	2000      	movs	r0, #0
90009582:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009584:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009586:	f06f 022e 	mvn.w	r2, #46	; 0x2e
9000958a:	f06f 0c06 	mvn.w	ip, #6
9000958e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90009592:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
90009594:	e7da      	b.n	9000954c <HAL_JPEG_Pause+0x24>
90009596:	bf00      	nop

90009598 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
90009598:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
9000959a:	6282      	str	r2, [r0, #40]	; 0x28
}
9000959c:	4770      	bx	lr
9000959e:	bf00      	nop

900095a0 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
900095a0:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
900095a2:	62c2      	str	r2, [r0, #44]	; 0x2c
}
900095a4:	4770      	bx	lr
900095a6:	bf00      	nop

900095a8 <HAL_JPEG_EncodeCpltCallback>:
900095a8:	4770      	bx	lr
900095aa:	bf00      	nop

900095ac <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
900095ac:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
900095ae:	2101      	movs	r1, #1
{
900095b0:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900095b2:	6803      	ldr	r3, [r0, #0]
900095b4:	681a      	ldr	r2, [r3, #0]
900095b6:	f022 0201 	bic.w	r2, r2, #1
900095ba:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900095bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900095be:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
900095c2:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
900095c4:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900095c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
900095ca:	f043 0304 	orr.w	r3, r3, #4
900095ce:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
900095d0:	f7f8 f940 	bl	90001854 <HAL_JPEG_ErrorCallback>
}
900095d4:	bd08      	pop	{r3, pc}
900095d6:	bf00      	nop

900095d8 <JPEG_MDMAInCpltCallback>:
{
900095d8:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
900095da:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
900095dc:	f248 0c0c 	movw	ip, #32780	; 0x800c
{
900095e0:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900095e2:	6821      	ldr	r1, [r4, #0]
900095e4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
900095e6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
900095ea:	630a      	str	r2, [r1, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
900095ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
900095ee:	ea03 030c 	and.w	r3, r3, ip
900095f2:	2b0c      	cmp	r3, #12
900095f4:	d001      	beq.n	900095fa <JPEG_MDMAInCpltCallback+0x22>
}
900095f6:	b003      	add	sp, #12
900095f8:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900095fa:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
900095fc:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900095fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90009600:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90009602:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009604:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90009608:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000960a:	1a9b      	subs	r3, r3, r2
9000960c:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000960e:	6a21      	ldr	r1, [r4, #32]
90009610:	f7f8 f8b8 	bl	90001784 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
90009614:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90009616:	42ab      	cmp	r3, r5
90009618:	d311      	bcc.n	9000963e <JPEG_MDMAInCpltCallback+0x66>
      if (inXfrSize == 0UL)
9000961a:	b305      	cbz	r5, 9000965e <JPEG_MDMAInCpltCallback+0x86>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000961c:	fbb3 f2f5 	udiv	r2, r3, r5
90009620:	fb05 3512 	mls	r5, r5, r2, r3
90009624:	1b5b      	subs	r3, r3, r5
90009626:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90009628:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000962a:	04d1      	lsls	r1, r2, #19
9000962c:	d400      	bmi.n	90009630 <JPEG_MDMAInCpltCallback+0x58>
9000962e:	b963      	cbnz	r3, 9000964a <JPEG_MDMAInCpltCallback+0x72>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90009630:	6822      	ldr	r2, [r4, #0]
90009632:	6b13      	ldr	r3, [r2, #48]	; 0x30
90009634:	f043 0360 	orr.w	r3, r3, #96	; 0x60
90009638:	6313      	str	r3, [r2, #48]	; 0x30
}
9000963a:	b003      	add	sp, #12
9000963c:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
9000963e:	b1cb      	cbz	r3, 90009674 <JPEG_MDMAInCpltCallback+0x9c>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
90009640:	0798      	lsls	r0, r3, #30
90009642:	d119      	bne.n	90009678 <JPEG_MDMAInCpltCallback+0xa0>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90009644:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009646:	04d2      	lsls	r2, r2, #19
90009648:	d4f2      	bmi.n	90009630 <JPEG_MDMAInCpltCallback+0x58>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000964a:	6822      	ldr	r2, [r4, #0]
9000964c:	2501      	movs	r5, #1
9000964e:	69a1      	ldr	r1, [r4, #24]
90009650:	6b20      	ldr	r0, [r4, #48]	; 0x30
90009652:	3240      	adds	r2, #64	; 0x40
90009654:	9500      	str	r5, [sp, #0]
90009656:	f001 f8d1 	bl	9000a7fc <HAL_MDMA_Start_IT>
9000965a:	2800      	cmp	r0, #0
9000965c:	d0e8      	beq.n	90009630 <JPEG_MDMAInCpltCallback+0x58>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000965e:	6d23      	ldr	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
90009660:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
90009662:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009664:	f043 0304 	orr.w	r3, r3, #4
90009668:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
9000966a:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
9000966e:	f7f8 f8f1 	bl	90001854 <HAL_JPEG_ErrorCallback>
        return;
90009672:	e7c0      	b.n	900095f6 <JPEG_MDMAInCpltCallback+0x1e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90009674:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009676:	e7db      	b.n	90009630 <JPEG_MDMAInCpltCallback+0x58>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
90009678:	f023 0303 	bic.w	r3, r3, #3
9000967c:	3304      	adds	r3, #4
9000967e:	62a3      	str	r3, [r4, #40]	; 0x28
90009680:	e7d2      	b.n	90009628 <JPEG_MDMAInCpltCallback+0x50>
90009682:	bf00      	nop

90009684 <JPEG_DMA_PollResidualData>:
{
90009684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90009686:	6802      	ldr	r2, [r0, #0]
90009688:	2610      	movs	r6, #16
{
9000968a:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000968c:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000968e:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
90009692:	d11d      	bne.n	900096d0 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90009694:	6b53      	ldr	r3, [r2, #52]	; 0x34
90009696:	06df      	lsls	r7, r3, #27
90009698:	d51a      	bpl.n	900096d0 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
9000969a:	6c53      	ldr	r3, [r2, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000969c:	69e7      	ldr	r7, [r4, #28]
9000969e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
900096a0:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
900096a2:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
900096a4:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
900096a6:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
900096a8:	6a67      	ldr	r7, [r4, #36]	; 0x24
900096aa:	69e2      	ldr	r2, [r4, #28]
900096ac:	443a      	add	r2, r7
900096ae:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
900096b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
900096b2:	69e2      	ldr	r2, [r4, #28]
900096b4:	4402      	add	r2, r0
900096b6:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
900096b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
900096ba:	69e2      	ldr	r2, [r4, #28]
900096bc:	440a      	add	r2, r1
900096be:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
900096c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
900096c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hjpeg->JpegOutCount += 4UL;
900096c4:	3304      	adds	r3, #4
900096c6:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
900096c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
900096ca:	4293      	cmp	r3, r2
900096cc:	d021      	beq.n	90009712 <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
900096ce:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
900096d0:	3e01      	subs	r6, #1
900096d2:	d1db      	bne.n	9000968c <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
900096d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
900096d6:	6b53      	ldr	r3, [r2, #52]	; 0x34
900096d8:	06d8      	lsls	r0, r3, #27
900096da:	d501      	bpl.n	900096e0 <JPEG_DMA_PollResidualData+0x5c>
900096dc:	048b      	lsls	r3, r1, #18
900096de:	d417      	bmi.n	90009710 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900096e0:	6813      	ldr	r3, [r2, #0]
900096e2:	f023 0301 	bic.w	r3, r3, #1
900096e6:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
900096e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
900096ea:	b9eb      	cbnz	r3, 90009728 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
900096ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
900096ee:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900096f0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
900096f2:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900096f4:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
900096f8:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900096fc:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009700:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009702:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009704:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90009706:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000970a:	d00a      	beq.n	90009722 <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000970c:	f7ff ff4c 	bl	900095a8 <HAL_JPEG_EncodeCpltCallback>
}
90009710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009712:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009714:	4620      	mov	r0, r4
90009716:	69e1      	ldr	r1, [r4, #28]
90009718:	f7f8 f854 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000971c:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
9000971e:	6265      	str	r5, [r4, #36]	; 0x24
90009720:	e7d6      	b.n	900096d0 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009722:	f7f8 f899 	bl	90001858 <HAL_JPEG_DecodeCpltCallback>
}
90009726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009728:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000972a:	4620      	mov	r0, r4
9000972c:	69e1      	ldr	r1, [r4, #28]
9000972e:	f7f8 f849 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90009732:	2300      	movs	r3, #0
90009734:	6263      	str	r3, [r4, #36]	; 0x24
90009736:	e7d9      	b.n	900096ec <JPEG_DMA_PollResidualData+0x68>

90009738 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
90009738:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000973a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
9000973e:	d028      	beq.n	90009792 <HAL_JPEG_Resume+0x5a>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009740:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009742:	f003 030c 	and.w	r3, r3, #12
90009746:	2b0c      	cmp	r3, #12
{
90009748:	b570      	push	{r4, r5, r6, lr}
9000974a:	4604      	mov	r4, r0
9000974c:	b082      	sub	sp, #8
9000974e:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009750:	d007      	beq.n	90009762 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009752:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009754:	f003 030c 	and.w	r3, r3, #12
90009758:	2b08      	cmp	r3, #8
9000975a:	d037      	beq.n	900097cc <HAL_JPEG_Resume+0x94>
  return HAL_OK;
9000975c:	2000      	movs	r0, #0
}
9000975e:	b002      	add	sp, #8
90009760:	bd70      	pop	{r4, r5, r6, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90009762:	07c8      	lsls	r0, r1, #31
90009764:	d417      	bmi.n	90009796 <HAL_JPEG_Resume+0x5e>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90009766:	07a9      	lsls	r1, r5, #30
90009768:	d5f8      	bpl.n	9000975c <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000976a:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000976c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
90009770:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
90009772:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009774:	041a      	lsls	r2, r3, #16
90009776:	d453      	bmi.n	90009820 <HAL_JPEG_Resume+0xe8>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90009778:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000977a:	6a82      	ldr	r2, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
9000977c:	2a00      	cmp	r2, #0
9000977e:	d13e      	bne.n	900097fe <HAL_JPEG_Resume+0xc6>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009780:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90009782:	2206      	movs	r2, #6
          return HAL_ERROR;
90009784:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009786:	f043 0304 	orr.w	r3, r3, #4
9000978a:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000978c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          return HAL_ERROR;
90009790:	e7e5      	b.n	9000975e <HAL_JPEG_Resume+0x26>
    return HAL_ERROR;
90009792:	2001      	movs	r0, #1
}
90009794:	4770      	bx	lr
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90009796:	6d62      	ldr	r2, [r4, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90009798:	6b20      	ldr	r0, [r4, #48]	; 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000979a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000979e:	6a81      	ldr	r1, [r0, #40]	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
900097a0:	6562      	str	r2, [r4, #84]	; 0x54
      if (xfrSize == 0UL)
900097a2:	2900      	cmp	r1, #0
900097a4:	d0ec      	beq.n	90009780 <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
900097a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900097a8:	fbb3 f2f1 	udiv	r2, r3, r1
900097ac:	fb01 3112 	mls	r1, r1, r2, r3
900097b0:	1a5b      	subs	r3, r3, r1
900097b2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
900097b4:	2b00      	cmp	r3, #0
900097b6:	d0d6      	beq.n	90009766 <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
900097b8:	6822      	ldr	r2, [r4, #0]
900097ba:	2601      	movs	r6, #1
900097bc:	3240      	adds	r2, #64	; 0x40
900097be:	9600      	str	r6, [sp, #0]
900097c0:	69a1      	ldr	r1, [r4, #24]
900097c2:	f001 f81b 	bl	9000a7fc <HAL_MDMA_Start_IT>
900097c6:	2800      	cmp	r0, #0
900097c8:	d0cd      	beq.n	90009766 <HAL_JPEG_Resume+0x2e>
900097ca:	e7d9      	b.n	90009780 <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
900097cc:	f011 0101 	ands.w	r1, r1, #1
900097d0:	d013      	beq.n	900097fa <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
900097d2:	6d43      	ldr	r3, [r0, #84]	; 0x54
900097d4:	222e      	movs	r2, #46	; 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
900097d6:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
900097d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
900097dc:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
900097de:	07ab      	lsls	r3, r5, #30
900097e0:	d504      	bpl.n	900097ec <HAL_JPEG_Resume+0xb4>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
900097e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
900097e4:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
900097e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
900097ea:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
900097ec:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
900097ee:	2000      	movs	r0, #0
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
900097f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
900097f2:	430b      	orrs	r3, r1
900097f4:	6313      	str	r3, [r2, #48]	; 0x30
}
900097f6:	b002      	add	sp, #8
900097f8:	bd70      	pop	{r4, r5, r6, pc}
900097fa:	2228      	movs	r2, #40	; 0x28
900097fc:	e7ef      	b.n	900097de <HAL_JPEG_Resume+0xa6>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
900097fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009800:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90009802:	fbb3 f1f2 	udiv	r1, r3, r2
90009806:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000980a:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000980c:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000980e:	3144      	adds	r1, #68	; 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90009810:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009812:	9500      	str	r5, [sp, #0]
90009814:	69e2      	ldr	r2, [r4, #28]
90009816:	f000 fff1 	bl	9000a7fc <HAL_MDMA_Start_IT>
9000981a:	2800      	cmp	r0, #0
9000981c:	d09e      	beq.n	9000975c <HAL_JPEG_Resume+0x24>
9000981e:	e7af      	b.n	90009780 <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
90009820:	4620      	mov	r0, r4
90009822:	f7ff ff2f 	bl	90009684 <JPEG_DMA_PollResidualData>
90009826:	e799      	b.n	9000975c <HAL_JPEG_Resume+0x24>

90009828 <JPEG_MDMAOutCpltCallback>:
{
90009828:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000982a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000982c:	f248 0c0c 	movw	ip, #32780	; 0x800c
{
90009830:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90009832:	6823      	ldr	r3, [r4, #0]
90009834:	6b19      	ldr	r1, [r3, #48]	; 0x30
90009836:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
9000983a:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000983c:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000983e:	ea02 020c 	and.w	r2, r2, ip
90009842:	2a0c      	cmp	r2, #12
90009844:	d001      	beq.n	9000984a <JPEG_MDMAOutCpltCallback+0x22>
}
90009846:	b003      	add	sp, #12
90009848:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
9000984a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000984c:	0692      	lsls	r2, r2, #26
9000984e:	d505      	bpl.n	9000985c <JPEG_MDMAOutCpltCallback+0x34>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90009850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009852:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90009856:	631a      	str	r2, [r3, #48]	; 0x30
}
90009858:	b003      	add	sp, #12
9000985a:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000985c:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000985e:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90009862:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009864:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009866:	f3c2 0210 	ubfx	r2, r2, #0, #17
9000986a:	1a9b      	subs	r3, r3, r2
9000986c:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000986e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009870:	f7f7 ffa8 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90009874:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009876:	049b      	lsls	r3, r3, #18
90009878:	d501      	bpl.n	9000987e <JPEG_MDMAOutCpltCallback+0x56>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000987a:	6823      	ldr	r3, [r4, #0]
9000987c:	e7e8      	b.n	90009850 <JPEG_MDMAOutCpltCallback+0x28>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000987e:	6821      	ldr	r1, [r4, #0]
90009880:	2501      	movs	r5, #1
90009882:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90009884:	69e2      	ldr	r2, [r4, #28]
90009886:	3144      	adds	r1, #68	; 0x44
90009888:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000988a:	9500      	str	r5, [sp, #0]
9000988c:	f000 ffb6 	bl	9000a7fc <HAL_MDMA_Start_IT>
90009890:	2800      	cmp	r0, #0
90009892:	d0f2      	beq.n	9000987a <JPEG_MDMAOutCpltCallback+0x52>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90009894:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90009896:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
90009898:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000989a:	f043 0304 	orr.w	r3, r3, #4
9000989e:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
900098a0:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
900098a4:	f7f7 ffd6 	bl	90001854 <HAL_JPEG_ErrorCallback>
          return;
900098a8:	e7cd      	b.n	90009846 <JPEG_MDMAOutCpltCallback+0x1e>
900098aa:	bf00      	nop

900098ac <JPEG_MDMAOutAbortCallback>:
{
900098ac:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
900098ae:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
900098b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
900098b2:	041a      	lsls	r2, r3, #16
900098b4:	d400      	bmi.n	900098b8 <JPEG_MDMAOutAbortCallback+0xc>
}
900098b6:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900098b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
900098ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900098bc:	681b      	ldr	r3, [r3, #0]
900098be:	695b      	ldr	r3, [r3, #20]
900098c0:	f3c3 0310 	ubfx	r3, r3, #0, #17
900098c4:	1ad3      	subs	r3, r2, r3
900098c6:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
900098c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
900098ca:	429a      	cmp	r2, r3
900098cc:	d025      	beq.n	9000991a <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
900098ce:	6822      	ldr	r2, [r4, #0]
900098d0:	6b55      	ldr	r5, [r2, #52]	; 0x34
900098d2:	f015 0510 	ands.w	r5, r5, #16
900098d6:	d118      	bne.n	9000990a <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
900098d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
900098da:	bb4b      	cbnz	r3, 90009930 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900098dc:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
900098de:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
900098e0:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900098e2:	f023 0301 	bic.w	r3, r3, #1
900098e6:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
900098e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900098ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900098ec:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
900098f0:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900098f4:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900098f8:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900098fa:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900098fc:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
900098fe:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009902:	d012      	beq.n	9000992a <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90009904:	f7ff fe50 	bl	900095a8 <HAL_JPEG_EncodeCpltCallback>
}
90009908:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000990a:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000990c:	049b      	lsls	r3, r3, #18
9000990e:	d4d2      	bmi.n	900098b6 <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
90009910:	4620      	mov	r0, r4
}
90009912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
90009916:	f7ff beb5 	b.w	90009684 <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000991a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000991c:	4620      	mov	r0, r4
9000991e:	69e1      	ldr	r1, [r4, #28]
90009920:	f7f7 ff50 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
90009924:	2300      	movs	r3, #0
90009926:	6263      	str	r3, [r4, #36]	; 0x24
90009928:	e7d1      	b.n	900098ce <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000992a:	f7f7 ff95 	bl	90001858 <HAL_JPEG_DecodeCpltCallback>
}
9000992e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009930:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009932:	4620      	mov	r0, r4
90009934:	69e1      	ldr	r1, [r4, #28]
90009936:	f7f7 ff45 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000993a:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000993c:	6265      	str	r5, [r4, #36]	; 0x24
9000993e:	e7cd      	b.n	900098dc <JPEG_MDMAOutAbortCallback+0x30>

90009940 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009940:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009942:	f003 0303 	and.w	r3, r3, #3
90009946:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009948:	6803      	ldr	r3, [r0, #0]
{
9000994a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000994e:	4604      	mov	r4, r0
90009950:	b082      	sub	sp, #8
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009952:	d01f      	beq.n	90009994 <JPEG_Process+0x54>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
90009954:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009956:	04d7      	lsls	r7, r2, #19
90009958:	d407      	bmi.n	9000996a <JPEG_Process+0x2a>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
9000995a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000995c:	0796      	lsls	r6, r2, #30
9000995e:	f100 811d 	bmi.w	90009b9c <JPEG_Process+0x25c>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
90009962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009964:	0750      	lsls	r0, r2, #29
90009966:	f100 81b1 	bmi.w	90009ccc <JPEG_Process+0x38c>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000996a:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000996c:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
90009970:	d107      	bne.n	90009982 <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
90009972:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90009974:	f016 0608 	ands.w	r6, r6, #8
90009978:	d14c      	bne.n	90009a14 <JPEG_Process+0xd4>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000997a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000997c:	06d2      	lsls	r2, r2, #27
9000997e:	f100 81e3 	bmi.w	90009d48 <JPEG_Process+0x408>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009984:	f002 0238 	and.w	r2, r2, #56	; 0x38
90009988:	2a20      	cmp	r2, #32
9000998a:	d01a      	beq.n	900099c2 <JPEG_Process+0x82>
  return JPEG_PROCESS_ONGOING;
9000998c:	2000      	movs	r0, #0
}
9000998e:	b002      	add	sp, #8
90009990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009996:	0652      	lsls	r2, r2, #25
90009998:	d5dc      	bpl.n	90009954 <JPEG_Process+0x14>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000999a:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000999c:	9101      	str	r1, [sp, #4]
9000999e:	f7ff fb71 	bl	90009084 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
900099a2:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
900099a4:	9901      	ldr	r1, [sp, #4]
900099a6:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
900099a8:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
900099aa:	f7f7 fe99 	bl	900016e0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
900099ae:	6823      	ldr	r3, [r4, #0]
900099b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900099b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
900099b6:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
900099b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900099ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
900099be:	639a      	str	r2, [r3, #56]	; 0x38
900099c0:	e7c8      	b.n	90009954 <JPEG_Process+0x14>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900099c2:	681a      	ldr	r2, [r3, #0]
900099c4:	f022 0201 	bic.w	r2, r2, #1
900099c8:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900099ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
900099cc:	f002 020c 	and.w	r2, r2, #12
900099d0:	2a08      	cmp	r2, #8
900099d2:	f000 81e6 	beq.w	90009da2 <JPEG_Process+0x462>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
900099d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900099d8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
900099dc:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
900099de:	6a63      	ldr	r3, [r4, #36]	; 0x24
900099e0:	2b00      	cmp	r3, #0
900099e2:	f040 81e3 	bne.w	90009dac <JPEG_Process+0x46c>
    tmpContext = hjpeg->Context;
900099e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
900099e8:	2100      	movs	r1, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900099ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
900099ec:	2501      	movs	r5, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900099ee:	f003 0303 	and.w	r3, r3, #3
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900099f2:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900099f4:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    __HAL_UNLOCK(hjpeg);
900099f8:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900099fc:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
900099fe:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90009a00:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009a04:	f000 81c9 	beq.w	90009d9a <JPEG_Process+0x45a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90009a08:	f7ff fdce 	bl	900095a8 <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
90009a0c:	4628      	mov	r0, r5
}
90009a0e:	b002      	add	sp, #8
90009a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90009a14:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009a16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90009a18:	3220      	adds	r2, #32
90009a1a:	4296      	cmp	r6, r2
90009a1c:	f0c0 81e4 	bcc.w	90009de8 <JPEG_Process+0x4a8>
      dataword = hjpeg->Instance->DOR;
90009a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009a22:	69e1      	ldr	r1, [r4, #28]
90009a24:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009a26:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009a28:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009a2a:	69e2      	ldr	r2, [r4, #28]
90009a2c:	440a      	add	r2, r1
90009a2e:	0a19      	lsrs	r1, r3, #8
90009a30:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009a32:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009a34:	69e2      	ldr	r2, [r4, #28]
90009a36:	440a      	add	r2, r1
90009a38:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009a3a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009a3c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009a3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009a40:	69e2      	ldr	r2, [r4, #28]
90009a42:	440a      	add	r2, r1
90009a44:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009a48:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009a4a:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009a4c:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009a4e:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009a50:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009a52:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009a54:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009a56:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009a58:	69e2      	ldr	r2, [r4, #28]
90009a5a:	440a      	add	r2, r1
90009a5c:	0a19      	lsrs	r1, r3, #8
90009a5e:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009a60:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009a62:	69e2      	ldr	r2, [r4, #28]
90009a64:	440a      	add	r2, r1
90009a66:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009a68:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009a6a:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009a6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009a6e:	69e2      	ldr	r2, [r4, #28]
90009a70:	440a      	add	r2, r1
90009a72:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009a76:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009a78:	3304      	adds	r3, #4
90009a7a:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009a7c:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009a7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009a80:	69e1      	ldr	r1, [r4, #28]
90009a82:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009a84:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009a86:	69e2      	ldr	r2, [r4, #28]
90009a88:	440a      	add	r2, r1
90009a8a:	0a19      	lsrs	r1, r3, #8
90009a8c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009a8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009a90:	69e2      	ldr	r2, [r4, #28]
90009a92:	440a      	add	r2, r1
90009a94:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009a96:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009a98:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009a9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009a9c:	69e2      	ldr	r2, [r4, #28]
90009a9e:	440a      	add	r2, r1
90009aa0:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009aa4:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009aa6:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009aa8:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009aaa:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009aac:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009aae:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009ab0:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009ab2:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009ab4:	69e2      	ldr	r2, [r4, #28]
90009ab6:	440a      	add	r2, r1
90009ab8:	0a19      	lsrs	r1, r3, #8
90009aba:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009abc:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009abe:	69e2      	ldr	r2, [r4, #28]
90009ac0:	440a      	add	r2, r1
90009ac2:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009ac4:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009ac6:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009ac8:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009aca:	69e2      	ldr	r2, [r4, #28]
90009acc:	440a      	add	r2, r1
90009ace:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009ad2:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009ad4:	3304      	adds	r3, #4
90009ad6:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009ad8:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009ada:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009adc:	69e1      	ldr	r1, [r4, #28]
90009ade:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009ae0:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009ae2:	69e2      	ldr	r2, [r4, #28]
90009ae4:	440a      	add	r2, r1
90009ae6:	0a19      	lsrs	r1, r3, #8
90009ae8:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009aea:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009aec:	69e2      	ldr	r2, [r4, #28]
90009aee:	440a      	add	r2, r1
90009af0:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009af2:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009af4:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009af6:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009af8:	69e2      	ldr	r2, [r4, #28]
90009afa:	440a      	add	r2, r1
90009afc:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009b00:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009b02:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009b04:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009b06:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009b08:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009b0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009b0c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009b0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b10:	69e2      	ldr	r2, [r4, #28]
90009b12:	440a      	add	r2, r1
90009b14:	0a19      	lsrs	r1, r3, #8
90009b16:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009b18:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b1a:	69e2      	ldr	r2, [r4, #28]
90009b1c:	440a      	add	r2, r1
90009b1e:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009b20:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009b22:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009b24:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b26:	69e2      	ldr	r2, [r4, #28]
90009b28:	440a      	add	r2, r1
90009b2a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009b2e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009b30:	3304      	adds	r3, #4
90009b32:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009b34:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009b36:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009b38:	69e1      	ldr	r1, [r4, #28]
90009b3a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009b3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b3e:	69e2      	ldr	r2, [r4, #28]
90009b40:	440a      	add	r2, r1
90009b42:	0a19      	lsrs	r1, r3, #8
90009b44:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009b46:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b48:	69e2      	ldr	r2, [r4, #28]
90009b4a:	440a      	add	r2, r1
90009b4c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009b4e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009b50:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009b52:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b54:	69e2      	ldr	r2, [r4, #28]
90009b56:	440a      	add	r2, r1
90009b58:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009b5c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009b5e:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009b60:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009b62:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009b64:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009b66:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009b68:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009b6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b6c:	69e2      	ldr	r2, [r4, #28]
90009b6e:	440a      	add	r2, r1
90009b70:	0a19      	lsrs	r1, r3, #8
90009b72:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009b74:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b76:	69e2      	ldr	r2, [r4, #28]
90009b78:	440a      	add	r2, r1
90009b7a:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009b7c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009b7e:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009b80:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009b82:	69e2      	ldr	r2, [r4, #28]
90009b84:	440a      	add	r2, r1
90009b86:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009b8a:	3304      	adds	r3, #4
90009b8c:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009b90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90009b92:	429a      	cmp	r2, r3
90009b94:	f000 82c7 	beq.w	9000a126 <JPEG_Process+0x7e6>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009b98:	6823      	ldr	r3, [r4, #0]
90009b9a:	e6f2      	b.n	90009982 <JPEG_Process+0x42>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
90009b9c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009b9e:	2a00      	cmp	r2, #0
90009ba0:	f000 810c 	beq.w	90009dbc <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009ba4:	6a21      	ldr	r1, [r4, #32]
90009ba6:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009ba8:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009baa:	f240 81a1 	bls.w	90009ef0 <JPEG_Process+0x5b0>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009bae:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009bb0:	6d61      	ldr	r1, [r4, #84]	; 0x54
90009bb2:	04cd      	lsls	r5, r1, #19
90009bb4:	f53f aed9 	bmi.w	9000996a <JPEG_Process+0x2a>
90009bb8:	2a00      	cmp	r2, #0
90009bba:	f43f aed6 	beq.w	9000996a <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
90009bbe:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
90009bc0:	ea4f 0192 	mov.w	r1, r2, lsr #2
    if (nb_words >= nbRequestWords)
90009bc4:	f240 821d 	bls.w	9000a002 <JPEG_Process+0x6c2>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009bc8:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
90009bca:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009bcc:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009bce:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009bd0:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009bd2:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009bd4:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009bd6:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009bd8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009bdc:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009bde:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009be2:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009be4:	6a21      	ldr	r1, [r4, #32]
90009be6:	3104      	adds	r1, #4
90009be8:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009bea:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009bec:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009bee:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009bf0:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009bf2:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009bf4:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009bf6:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009bf8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009bfc:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009bfe:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009c02:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009c04:	6a21      	ldr	r1, [r4, #32]
90009c06:	3104      	adds	r1, #4
90009c08:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009c0a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c0c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009c0e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c10:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c12:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c14:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009c16:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c18:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009c1c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c1e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009c22:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009c24:	6a21      	ldr	r1, [r4, #32]
90009c26:	3104      	adds	r1, #4
90009c28:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009c2a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c2c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009c2e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c30:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c32:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c34:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009c36:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c38:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009c3c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c3e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009c42:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009c44:	6a21      	ldr	r1, [r4, #32]
90009c46:	3104      	adds	r1, #4
90009c48:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009c4a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c4c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009c4e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c50:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c52:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c54:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009c56:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c58:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009c5c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c5e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009c62:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009c64:	6a21      	ldr	r1, [r4, #32]
90009c66:	3104      	adds	r1, #4
90009c68:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009c6a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c6c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009c6e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c70:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c72:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c74:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009c76:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c78:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009c7c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c7e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009c82:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009c84:	6a21      	ldr	r1, [r4, #32]
90009c86:	3104      	adds	r1, #4
90009c88:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009c8a:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c8c:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009c8e:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c90:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c92:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c94:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009c96:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009c98:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009c9c:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009c9e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009ca2:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009ca4:	6a21      	ldr	r1, [r4, #32]
90009ca6:	3104      	adds	r1, #4
90009ca8:	6221      	str	r1, [r4, #32]
          input_count = hjpeg->JpegInCount;
90009caa:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009cac:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009cae:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009cb0:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009cb2:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009cb4:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009cb6:	7849      	ldrb	r1, [r1, #1]
90009cb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90009cbc:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009cbe:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009cc2:	641a      	str	r2, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009cc4:	6a22      	ldr	r2, [r4, #32]
90009cc6:	3204      	adds	r2, #4
90009cc8:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
90009cca:	e64e      	b.n	9000996a <JPEG_Process+0x2a>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
90009ccc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009cce:	2a00      	cmp	r2, #0
90009cd0:	d074      	beq.n	90009dbc <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009cd2:	6a21      	ldr	r1, [r4, #32]
90009cd4:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009cd6:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009cd8:	f200 817e 	bhi.w	90009fd8 <JPEG_Process+0x698>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
90009cdc:	428a      	cmp	r2, r1
90009cde:	f040 8109 	bne.w	90009ef4 <JPEG_Process+0x5b4>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90009ce2:	6a21      	ldr	r1, [r4, #32]
90009ce4:	4620      	mov	r0, r4
90009ce6:	f7f7 fd4d 	bl	90001784 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
90009cea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009cec:	2a04      	cmp	r2, #4
90009cee:	d902      	bls.n	90009cf6 <JPEG_Process+0x3b6>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
90009cf0:	f022 0203 	bic.w	r2, r2, #3
90009cf4:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
90009cf6:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009cf8:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
90009cfa:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009cfc:	6d61      	ldr	r1, [r4, #84]	; 0x54
90009cfe:	04c9      	lsls	r1, r1, #19
90009d00:	f53f ae33 	bmi.w	9000996a <JPEG_Process+0x2a>
90009d04:	2a00      	cmp	r2, #0
90009d06:	f43f ae30 	beq.w	9000996a <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
90009d0a:	0891      	lsrs	r1, r2, #2
90009d0c:	f040 821c 	bne.w	9000a148 <JPEG_Process+0x808>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009d10:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009d12:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
90009d14:	6a21      	ldr	r1, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009d16:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
90009d18:	f101 0101 	add.w	r1, r1, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009d1c:	5c28      	ldrb	r0, [r5, r0]
          hjpeg->JpegInCount++;
90009d1e:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009d20:	d010      	beq.n	90009d44 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009d22:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009d24:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009d26:	5c69      	ldrb	r1, [r5, r1]
90009d28:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
          hjpeg->JpegInCount++;
90009d2c:	6a21      	ldr	r1, [r4, #32]
90009d2e:	f101 0101 	add.w	r1, r1, #1
90009d32:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009d34:	d106      	bne.n	90009d44 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009d36:	6a22      	ldr	r2, [r4, #32]
90009d38:	5ca9      	ldrb	r1, [r5, r2]
          hjpeg->JpegInCount++;
90009d3a:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009d3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
          hjpeg->JpegInCount++;
90009d40:	3201      	adds	r2, #1
90009d42:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
90009d44:	6418      	str	r0, [r3, #64]	; 0x40
90009d46:	e610      	b.n	9000996a <JPEG_Process+0x2a>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90009d48:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009d4a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
90009d4c:	3204      	adds	r2, #4
90009d4e:	4295      	cmp	r5, r2
90009d50:	f0c0 80d2 	bcc.w	90009ef8 <JPEG_Process+0x5b8>
      dataword = hjpeg->Instance->DOR;
90009d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009d56:	69e1      	ldr	r1, [r4, #28]
90009d58:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009d5a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009d5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009d5e:	69e2      	ldr	r2, [r4, #28]
90009d60:	440a      	add	r2, r1
90009d62:	0a19      	lsrs	r1, r3, #8
90009d64:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009d66:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009d68:	69e2      	ldr	r2, [r4, #28]
90009d6a:	440a      	add	r2, r1
90009d6c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009d6e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009d70:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009d72:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009d74:	69e2      	ldr	r2, [r4, #28]
90009d76:	440a      	add	r2, r1
90009d78:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009d7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hjpeg->JpegOutCount += 4UL;
90009d7e:	3304      	adds	r3, #4
90009d80:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009d84:	429a      	cmp	r2, r3
90009d86:	f47f af07 	bne.w	90009b98 <JPEG_Process+0x258>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009d8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009d8c:	4620      	mov	r0, r4
90009d8e:	69e1      	ldr	r1, [r4, #28]
90009d90:	f7f7 fd18 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009d94:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009d96:	6266      	str	r6, [r4, #36]	; 0x24
90009d98:	e5f3      	b.n	90009982 <JPEG_Process+0x42>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009d9a:	f7f7 fd5d 	bl	90001858 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
90009d9e:	4628      	mov	r0, r5
90009da0:	e5f5      	b.n	9000998e <JPEG_Process+0x4e>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90009da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009da4:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90009da8:	631a      	str	r2, [r3, #48]	; 0x30
90009daa:	e614      	b.n	900099d6 <JPEG_Process+0x96>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009dac:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009dae:	4620      	mov	r0, r4
90009db0:	69e1      	ldr	r1, [r4, #28]
90009db2:	f7f7 fd07 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90009db6:	2300      	movs	r3, #0
90009db8:	6263      	str	r3, [r4, #36]	; 0x24
90009dba:	e614      	b.n	900099e6 <JPEG_Process+0xa6>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009dbc:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009dbe:	f002 020c 	and.w	r2, r2, #12
90009dc2:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009dc4:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009dc6:	f000 8117 	beq.w	90009ff8 <JPEG_Process+0x6b8>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009dca:	f002 020c 	and.w	r2, r2, #12
90009dce:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009dd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009dd2:	f47f adca 	bne.w	9000996a <JPEG_Process+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009dd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90009dda:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
90009ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009dde:	f022 0206 	bic.w	r2, r2, #6
90009de2:	631a      	str	r2, [r3, #48]	; 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009de4:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009de6:	e5c0      	b.n	9000996a <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
90009de8:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009dea:	4296      	cmp	r6, r2
90009dec:	f67f adc9 	bls.w	90009982 <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
90009df0:	6a60      	ldr	r0, [r4, #36]	; 0x24
90009df2:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
90009df4:	0880      	lsrs	r0, r0, #2
90009df6:	d020      	beq.n	90009e3a <JPEG_Process+0x4fa>
90009df8:	4629      	mov	r1, r5
90009dfa:	e000      	b.n	90009dfe <JPEG_Process+0x4be>
      dataword = hjpeg->Instance->DOR;
90009dfc:	6823      	ldr	r3, [r4, #0]
90009dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
90009e00:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009e02:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009e04:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
90009e06:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009e08:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009e0a:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009e0c:	69e2      	ldr	r2, [r4, #28]
90009e0e:	4432      	add	r2, r6
90009e10:	ea4f 2613 	mov.w	r6, r3, lsr #8
90009e14:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009e16:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009e18:	69e2      	ldr	r2, [r4, #28]
90009e1a:	4432      	add	r2, r6
90009e1c:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009e20:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009e24:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009e26:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009e28:	69e2      	ldr	r2, [r4, #28]
90009e2a:	4432      	add	r2, r6
90009e2c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009e30:	f103 0304 	add.w	r3, r3, #4
90009e34:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
90009e36:	d1e1      	bne.n	90009dfc <JPEG_Process+0x4bc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90009e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009e3c:	42b3      	cmp	r3, r6
90009e3e:	f000 817a 	beq.w	9000a136 <JPEG_Process+0x7f6>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
90009e42:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009e46:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
90009e48:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
90009e4c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
90009e4e:	d00e      	beq.n	90009e6e <JPEG_Process+0x52e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009e50:	f005 0303 	and.w	r3, r5, #3
90009e54:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009e56:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
90009e58:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009e5a:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
90009e5c:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009e5e:	fa27 f303 	lsr.w	r3, r7, r3
90009e62:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
90009e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009e66:	f103 0301 	add.w	r3, r3, #1
90009e6a:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
90009e6c:	d1f0      	bne.n	90009e50 <JPEG_Process+0x510>
      nb_bytes = 4UL - nb_bytes;
90009e6e:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009e72:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009e74:	69e1      	ldr	r1, [r4, #28]
90009e76:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
90009e78:	eba8 0606 	sub.w	r6, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009e7c:	f7f7 fca2 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90009e80:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
90009e82:	2e03      	cmp	r6, #3
      hjpeg->JpegOutCount = 0;
90009e84:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009e86:	f63f ae87 	bhi.w	90009b98 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009e8a:	00f3      	lsls	r3, r6, #3
90009e8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009e8e:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90009e90:	2e03      	cmp	r6, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009e92:	fa27 f303 	lsr.w	r3, r7, r3
90009e96:	548b      	strb	r3, [r1, r2]
      for (index = nb_bytes; index < 4UL; index++)
90009e98:	f106 0301 	add.w	r3, r6, #1
        hjpeg->JpegOutCount++;
90009e9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009e9e:	f102 0201 	add.w	r2, r2, #1
90009ea2:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009ea4:	f43f ae78 	beq.w	90009b98 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009ea8:	00db      	lsls	r3, r3, #3
90009eaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009eac:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90009eae:	2e02      	cmp	r6, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009eb0:	fa27 f303 	lsr.w	r3, r7, r3
90009eb4:	548b      	strb	r3, [r1, r2]
      for (index = nb_bytes; index < 4UL; index++)
90009eb6:	f106 0202 	add.w	r2, r6, #2
        hjpeg->JpegOutCount++;
90009eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009ebc:	f103 0301 	add.w	r3, r3, #1
90009ec0:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009ec2:	f43f ae69 	beq.w	90009b98 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009ec6:	00d3      	lsls	r3, r2, #3
90009ec8:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009eca:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90009ecc:	2a02      	cmp	r2, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009ece:	fa27 f303 	lsr.w	r3, r7, r3
90009ed2:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
90009ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009ed6:	f103 0301 	add.w	r3, r3, #1
90009eda:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009edc:	f47f ae5c 	bne.w	90009b98 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009ee2:	0e3f      	lsrs	r7, r7, #24
90009ee4:	69e2      	ldr	r2, [r4, #28]
90009ee6:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
90009ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009eea:	3301      	adds	r3, #1
90009eec:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009eee:	e653      	b.n	90009b98 <JPEG_Process+0x258>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
90009ef0:	428a      	cmp	r2, r1
90009ef2:	d073      	beq.n	90009fdc <JPEG_Process+0x69c>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009ef4:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009ef6:	e538      	b.n	9000996a <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
90009ef8:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009efa:	4295      	cmp	r5, r2
90009efc:	f67f ad41 	bls.w	90009982 <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
90009f00:	6a60      	ldr	r0, [r4, #36]	; 0x24
90009f02:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
90009f04:	0880      	lsrs	r0, r0, #2
90009f06:	d020      	beq.n	90009f4a <JPEG_Process+0x60a>
90009f08:	4631      	mov	r1, r6
90009f0a:	e000      	b.n	90009f0e <JPEG_Process+0x5ce>
      dataword = hjpeg->Instance->DOR;
90009f0c:	6823      	ldr	r3, [r4, #0]
90009f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
90009f10:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009f12:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009f14:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
90009f16:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009f18:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009f1a:	6a65      	ldr	r5, [r4, #36]	; 0x24
90009f1c:	69e2      	ldr	r2, [r4, #28]
90009f1e:	442a      	add	r2, r5
90009f20:	ea4f 2513 	mov.w	r5, r3, lsr #8
90009f24:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009f26:	6a65      	ldr	r5, [r4, #36]	; 0x24
90009f28:	69e2      	ldr	r2, [r4, #28]
90009f2a:	442a      	add	r2, r5
90009f2c:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009f30:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009f34:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009f36:	6a65      	ldr	r5, [r4, #36]	; 0x24
90009f38:	69e2      	ldr	r2, [r4, #28]
90009f3a:	442a      	add	r2, r5
90009f3c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009f40:	f103 0304 	add.w	r3, r3, #4
90009f44:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
90009f46:	d1e1      	bne.n	90009f0c <JPEG_Process+0x5cc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009f48:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
90009f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009f4c:	429d      	cmp	r5, r3
90009f4e:	f000 80f2 	beq.w	9000a136 <JPEG_Process+0x7f6>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
90009f52:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009f56:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
90009f58:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
90009f5c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
90009f5e:	d00e      	beq.n	90009f7e <JPEG_Process+0x63e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009f60:	f006 0303 	and.w	r3, r6, #3
90009f64:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009f66:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
90009f68:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009f6a:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
90009f6c:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
90009f6e:	fa27 f303 	lsr.w	r3, r7, r3
90009f72:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
90009f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009f76:	f103 0301 	add.w	r3, r3, #1
90009f7a:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
90009f7c:	d1f0      	bne.n	90009f60 <JPEG_Process+0x620>
      nb_bytes = 4UL - nb_bytes;
90009f7e:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009f82:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009f84:	69e1      	ldr	r1, [r4, #28]
90009f86:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
90009f88:	eba8 0505 	sub.w	r5, r8, r5
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009f8c:	f7f7 fc1a 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90009f90:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
90009f92:	2d03      	cmp	r5, #3
      hjpeg->JpegOutCount = 0;
90009f94:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009f96:	f63f adff 	bhi.w	90009b98 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009f9a:	00eb      	lsls	r3, r5, #3
90009f9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009f9e:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90009fa0:	2d03      	cmp	r5, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009fa2:	fa27 f303 	lsr.w	r3, r7, r3
90009fa6:	548b      	strb	r3, [r1, r2]
      for (index = nb_bytes; index < 4UL; index++)
90009fa8:	f105 0301 	add.w	r3, r5, #1
        hjpeg->JpegOutCount++;
90009fac:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009fae:	f102 0201 	add.w	r2, r2, #1
90009fb2:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009fb4:	f43f adf0 	beq.w	90009b98 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009fb8:	00db      	lsls	r3, r3, #3
90009fba:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009fbc:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
90009fbe:	2d02      	cmp	r5, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009fc0:	fa27 f303 	lsr.w	r3, r7, r3
90009fc4:	548b      	strb	r3, [r1, r2]
      for (index = nb_bytes; index < 4UL; index++)
90009fc6:	f105 0202 	add.w	r2, r5, #2
        hjpeg->JpegOutCount++;
90009fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009fcc:	f103 0301 	add.w	r3, r3, #1
90009fd0:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009fd2:	f47f af78 	bne.w	90009ec6 <JPEG_Process+0x586>
90009fd6:	e5df      	b.n	90009b98 <JPEG_Process+0x258>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009fd8:	1a52      	subs	r2, r2, r1
90009fda:	e68f      	b.n	90009cfc <JPEG_Process+0x3bc>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90009fdc:	6a21      	ldr	r1, [r4, #32]
90009fde:	4620      	mov	r0, r4
90009fe0:	f7f7 fbd0 	bl	90001784 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
90009fe4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009fe6:	2a04      	cmp	r2, #4
90009fe8:	d902      	bls.n	90009ff0 <JPEG_Process+0x6b0>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
90009fea:	f022 0203 	bic.w	r2, r2, #3
90009fee:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
90009ff0:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009ff2:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
90009ff4:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
90009ff6:	e5db      	b.n	90009bb0 <JPEG_Process+0x270>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009ff8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90009ffc:	6562      	str	r2, [r4, #84]	; 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009ffe:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000a000:	e4b3      	b.n	9000996a <JPEG_Process+0x2a>
      if (nb_words > 0UL)
9000a002:	2a03      	cmp	r2, #3
9000a004:	f240 80a3 	bls.w	9000a14e <JPEG_Process+0x80e>
        for (index = 0; index < nb_words; index++)
9000a008:	2900      	cmp	r1, #0
9000a00a:	f43f acae 	beq.w	9000996a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a00e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a010:	2901      	cmp	r1, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a012:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a014:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a018:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a01a:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a01c:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a01e:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a022:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a024:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a028:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a02c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a030:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a032:	6a20      	ldr	r0, [r4, #32]
9000a034:	f100 0004 	add.w	r0, r0, #4
9000a038:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a03a:	f43f ac96 	beq.w	9000996a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a03e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a040:	2902      	cmp	r1, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a042:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a046:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a048:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a04a:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a04c:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a050:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a052:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a056:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a05a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a05e:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a060:	6a20      	ldr	r0, [r4, #32]
9000a062:	f100 0004 	add.w	r0, r0, #4
9000a066:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a068:	f43f ac7f 	beq.w	9000996a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a06c:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a06e:	2903      	cmp	r1, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a070:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a074:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a076:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a078:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a07a:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a07e:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a080:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a084:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a088:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a08c:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a08e:	6a20      	ldr	r0, [r4, #32]
9000a090:	f100 0004 	add.w	r0, r0, #4
9000a094:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a096:	f43f ac68 	beq.w	9000996a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a09a:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a09c:	2904      	cmp	r1, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a09e:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a0a2:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a0a4:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a0a6:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a0a8:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a0ac:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a0ae:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a0b2:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a0b6:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a0ba:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a0bc:	6a20      	ldr	r0, [r4, #32]
9000a0be:	f100 0004 	add.w	r0, r0, #4
9000a0c2:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a0c4:	f43f ac51 	beq.w	9000996a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a0c8:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a0ca:	2905      	cmp	r1, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a0cc:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a0d0:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a0d2:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a0d4:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a0d6:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a0da:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a0dc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a0e0:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a0e4:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a0e8:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a0ea:	6a20      	ldr	r0, [r4, #32]
9000a0ec:	f100 0004 	add.w	r0, r0, #4
9000a0f0:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a0f2:	f43f ac3a 	beq.w	9000996a <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000a0f6:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a0f8:	2907      	cmp	r1, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a0fa:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a0fe:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a100:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a102:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a104:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000a108:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000a10a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000a10e:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000a112:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a116:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000a118:	6a20      	ldr	r0, [r4, #32]
9000a11a:	f100 0004 	add.w	r0, r0, #4
9000a11e:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000a120:	f43f adc3 	beq.w	90009caa <JPEG_Process+0x36a>
9000a124:	e421      	b.n	9000996a <JPEG_Process+0x2a>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a126:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a128:	4620      	mov	r0, r4
9000a12a:	69e1      	ldr	r1, [r4, #28]
9000a12c:	f7f7 fb4a 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000a130:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000a132:	6265      	str	r5, [r4, #36]	; 0x24
9000a134:	e425      	b.n	90009982 <JPEG_Process+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a136:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a138:	4620      	mov	r0, r4
9000a13a:	69e1      	ldr	r1, [r4, #28]
9000a13c:	f7f7 fb42 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000a140:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000a142:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000a144:	6262      	str	r2, [r4, #36]	; 0x24
9000a146:	e41c      	b.n	90009982 <JPEG_Process+0x42>
        input_count = hjpeg->JpegInCount;
9000a148:	6a22      	ldr	r2, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000a14a:	69a0      	ldr	r0, [r4, #24]
9000a14c:	e5ae      	b.n	90009cac <JPEG_Process+0x36c>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a14e:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000a150:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000a152:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a154:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000a156:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a15a:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
9000a15c:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000a15e:	d010      	beq.n	9000a182 <JPEG_Process+0x842>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a160:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000a162:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a164:	5c28      	ldrb	r0, [r5, r0]
9000a166:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
9000a16a:	6a20      	ldr	r0, [r4, #32]
9000a16c:	f100 0001 	add.w	r0, r0, #1
9000a170:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000a172:	d106      	bne.n	9000a182 <JPEG_Process+0x842>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a174:	6a22      	ldr	r2, [r4, #32]
9000a176:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
9000a178:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000a17a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
9000a17e:	3201      	adds	r2, #1
9000a180:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000a182:	6419      	str	r1, [r3, #64]	; 0x40
9000a184:	f7ff bbf1 	b.w	9000996a <JPEG_Process+0x2a>

9000a188 <HAL_JPEG_IRQHandler>:
  switch (hjpeg->State)
9000a188:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000a18c:	3b03      	subs	r3, #3
9000a18e:	2b01      	cmp	r3, #1
9000a190:	d900      	bls.n	9000a194 <HAL_JPEG_IRQHandler+0xc>
9000a192:	4770      	bx	lr
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000a194:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000a196:	f003 030c 	and.w	r3, r3, #12
9000a19a:	2b08      	cmp	r3, #8
{
9000a19c:	b530      	push	{r4, r5, lr}
9000a19e:	4604      	mov	r4, r0
9000a1a0:	b083      	sub	sp, #12
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000a1a2:	d006      	beq.n	9000a1b2 <HAL_JPEG_IRQHandler+0x2a>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000a1a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000a1a6:	f003 030c 	and.w	r3, r3, #12
9000a1aa:	2b0c      	cmp	r3, #12
9000a1ac:	d006      	beq.n	9000a1bc <HAL_JPEG_IRQHandler+0x34>
}
9000a1ae:	b003      	add	sp, #12
9000a1b0:	bd30      	pop	{r4, r5, pc}
9000a1b2:	b003      	add	sp, #12
9000a1b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        (void) JPEG_Process(hjpeg);
9000a1b8:	f7ff bbc2 	b.w	90009940 <JPEG_Process>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a1bc:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000a1be:	f003 0303 	and.w	r3, r3, #3
9000a1c2:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000a1c4:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a1c6:	d045      	beq.n	9000a254 <HAL_JPEG_IRQHandler+0xcc>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
9000a1c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a1ca:	0692      	lsls	r2, r2, #26
9000a1cc:	d5ef      	bpl.n	9000a1ae <HAL_JPEG_IRQHandler+0x26>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000a1ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000a1d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000a1d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000a1d6:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000a1d8:	681a      	ldr	r2, [r3, #0]
9000a1da:	f022 0201 	bic.w	r2, r2, #1
9000a1de:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000a1e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000a1e2:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000a1e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000a1e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000a1ea:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000a1ee:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000a1f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000a1f4:	2b02      	cmp	r3, #2
9000a1f6:	d052      	beq.n	9000a29e <HAL_JPEG_IRQHandler+0x116>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
9000a1f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000a1fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000a1fe:	2b02      	cmp	r3, #2
9000a200:	d03f      	beq.n	9000a282 <HAL_JPEG_IRQHandler+0xfa>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000a202:	6803      	ldr	r3, [r0, #0]
9000a204:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000a206:	695b      	ldr	r3, [r3, #20]
9000a208:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000a20c:	1ad3      	subs	r3, r2, r3
9000a20e:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000a210:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a212:	429a      	cmp	r2, r3
9000a214:	d046      	beq.n	9000a2a4 <HAL_JPEG_IRQHandler+0x11c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000a216:	6822      	ldr	r2, [r4, #0]
9000a218:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000a21a:	f015 0510 	ands.w	r5, r5, #16
9000a21e:	d135      	bne.n	9000a28c <HAL_JPEG_IRQHandler+0x104>
    if (hjpeg->JpegOutCount > 0UL)
9000a220:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000a222:	2b00      	cmp	r3, #0
9000a224:	d149      	bne.n	9000a2ba <HAL_JPEG_IRQHandler+0x132>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000a226:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000a228:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000a22a:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000a22c:	f023 0301 	bic.w	r3, r3, #1
9000a230:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000a232:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000a234:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a236:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000a23a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000a23e:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000a242:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a244:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000a246:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000a248:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000a24c:	d032      	beq.n	9000a2b4 <HAL_JPEG_IRQHandler+0x12c>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000a24e:	f7ff f9ab 	bl	900095a8 <HAL_JPEG_EncodeCpltCallback>
9000a252:	e7ac      	b.n	9000a1ae <HAL_JPEG_IRQHandler+0x26>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000a254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a256:	0651      	lsls	r1, r2, #25
9000a258:	d5b6      	bpl.n	9000a1c8 <HAL_JPEG_IRQHandler+0x40>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000a25a:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000a25c:	9101      	str	r1, [sp, #4]
9000a25e:	f7fe ff11 	bl	90009084 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000a262:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000a264:	9901      	ldr	r1, [sp, #4]
9000a266:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000a268:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000a26a:	f7f7 fa39 	bl	900016e0 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000a26e:	6823      	ldr	r3, [r4, #0]
9000a270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000a272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000a276:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000a278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000a27a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000a27e:	639a      	str	r2, [r3, #56]	; 0x38
9000a280:	e7a2      	b.n	9000a1c8 <HAL_JPEG_IRQHandler+0x40>
}
9000a282:	b003      	add	sp, #12
9000a284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
9000a288:	f000 bb34 	b.w	9000a8f4 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000a28c:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000a28e:	049b      	lsls	r3, r3, #18
9000a290:	d48d      	bmi.n	9000a1ae <HAL_JPEG_IRQHandler+0x26>
    JPEG_DMA_PollResidualData(hjpeg);
9000a292:	4620      	mov	r0, r4
}
9000a294:	b003      	add	sp, #12
9000a296:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000a29a:	f7ff b9f3 	b.w	90009684 <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
9000a29e:	f000 fb29 	bl	9000a8f4 <HAL_MDMA_Abort_IT>
9000a2a2:	e7a9      	b.n	9000a1f8 <HAL_JPEG_IRQHandler+0x70>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a2a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a2a6:	4620      	mov	r0, r4
9000a2a8:	69e1      	ldr	r1, [r4, #28]
9000a2aa:	f7f7 fa8b 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000a2ae:	2300      	movs	r3, #0
9000a2b0:	6263      	str	r3, [r4, #36]	; 0x24
9000a2b2:	e7b0      	b.n	9000a216 <HAL_JPEG_IRQHandler+0x8e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000a2b4:	f7f7 fad0 	bl	90001858 <HAL_JPEG_DecodeCpltCallback>
9000a2b8:	e779      	b.n	9000a1ae <HAL_JPEG_IRQHandler+0x26>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000a2ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000a2bc:	4620      	mov	r0, r4
9000a2be:	69e1      	ldr	r1, [r4, #28]
9000a2c0:	f7f7 fa80 	bl	900017c4 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000a2c4:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000a2c6:	6265      	str	r5, [r4, #36]	; 0x24
9000a2c8:	e7ad      	b.n	9000a226 <HAL_JPEG_IRQHandler+0x9e>
9000a2ca:	bf00      	nop

9000a2cc <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
9000a2cc:	2800      	cmp	r0, #0
9000a2ce:	d067      	beq.n	9000a3a0 <HAL_LTDC_Init+0xd4>
{
9000a2d0:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000a2d2:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000a2d6:	4604      	mov	r4, r0
9000a2d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000a2dc:	2b00      	cmp	r3, #0
9000a2de:	d05a      	beq.n	9000a396 <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a2e0:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a2e2:	2102      	movs	r1, #2
  tmp = (hltdc->Init.HorizontalSync << 16U);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000a2e4:	69e5      	ldr	r5, [r4, #28]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a2e6:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a2ea:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000a2ee:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a2f0:	4302      	orrs	r2, r0
9000a2f2:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000a2f4:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a2f8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000a2fa:	6920      	ldr	r0, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000a2fc:	6199      	str	r1, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000a2fe:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a300:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000a302:	4828      	ldr	r0, [pc, #160]	; (9000a3a4 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000a304:	430a      	orrs	r2, r1
9000a306:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000a308:	689a      	ldr	r2, [r3, #8]
9000a30a:	4002      	ands	r2, r0
9000a30c:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000a30e:	6962      	ldr	r2, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000a310:	6899      	ldr	r1, [r3, #8]
9000a312:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
9000a316:	69a2      	ldr	r2, [r4, #24]
9000a318:	4311      	orrs	r1, r2
9000a31a:	6099      	str	r1, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000a31c:	68d9      	ldr	r1, [r3, #12]
9000a31e:	4001      	ands	r1, r0
9000a320:	60d9      	str	r1, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000a322:	68da      	ldr	r2, [r3, #12]
9000a324:	6a21      	ldr	r1, [r4, #32]
9000a326:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000a32a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000a32c:	430a      	orrs	r2, r1
9000a32e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000a330:	691a      	ldr	r2, [r3, #16]
9000a332:	4002      	ands	r2, r0
9000a334:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000a336:	6919      	ldr	r1, [r3, #16]
9000a338:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000a33a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
9000a33e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000a340:	4311      	orrs	r1, r2
9000a342:	6119      	str	r1, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
9000a344:	6959      	ldr	r1, [r3, #20]
9000a346:	4008      	ands	r0, r1
9000a348:	6158      	str	r0, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
9000a34a:	695a      	ldr	r2, [r3, #20]
9000a34c:	6b21      	ldr	r1, [r4, #48]	; 0x30
9000a34e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
9000a352:	430a      	orrs	r2, r1
9000a354:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000a356:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000a358:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000a35c:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000a360:	f894 c036 	ldrb.w	ip, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000a364:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000a366:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
9000a368:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
9000a36c:	430a      	orrs	r2, r1
9000a36e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000a372:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000a374:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
9000a378:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000a37a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a37c:	f042 0206 	orr.w	r2, r2, #6
9000a380:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
9000a382:	699a      	ldr	r2, [r3, #24]
9000a384:	f042 0201 	orr.w	r2, r2, #1
9000a388:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000a38a:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000a38c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
9000a390:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
9000a394:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
9000a396:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
9000a39a:	f7fa f9b7 	bl	9000470c <HAL_LTDC_MspInit>
9000a39e:	e79f      	b.n	9000a2e0 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
9000a3a0:	2001      	movs	r0, #1
}
9000a3a2:	4770      	bx	lr
9000a3a4:	f000f800 	.word	0xf000f800

9000a3a8 <HAL_LTDC_ErrorCallback>:
9000a3a8:	4770      	bx	lr
9000a3aa:	bf00      	nop

9000a3ac <HAL_LTDC_ReloadEventCallback>:
9000a3ac:	4770      	bx	lr
9000a3ae:	bf00      	nop

9000a3b0 <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000a3b0:	6803      	ldr	r3, [r0, #0]
{
9000a3b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000a3b4:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
9000a3b6:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
9000a3b8:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
9000a3ba:	076a      	lsls	r2, r5, #29
9000a3bc:	d501      	bpl.n	9000a3c2 <HAL_LTDC_IRQHandler+0x12>
9000a3be:	0771      	lsls	r1, r6, #29
9000a3c0:	d41d      	bmi.n	9000a3fe <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
9000a3c2:	07aa      	lsls	r2, r5, #30
9000a3c4:	d501      	bpl.n	9000a3ca <HAL_LTDC_IRQHandler+0x1a>
9000a3c6:	07b3      	lsls	r3, r6, #30
9000a3c8:	d42d      	bmi.n	9000a426 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
9000a3ca:	07e8      	lsls	r0, r5, #31
9000a3cc:	d501      	bpl.n	9000a3d2 <HAL_LTDC_IRQHandler+0x22>
9000a3ce:	07f1      	lsls	r1, r6, #31
9000a3d0:	d440      	bmi.n	9000a454 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
9000a3d2:	072a      	lsls	r2, r5, #28
9000a3d4:	d501      	bpl.n	9000a3da <HAL_LTDC_IRQHandler+0x2a>
9000a3d6:	0733      	lsls	r3, r6, #28
9000a3d8:	d400      	bmi.n	9000a3dc <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
9000a3da:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000a3dc:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000a3de:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
9000a3e0:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
9000a3e2:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000a3e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a3e6:	f022 0208 	bic.w	r2, r2, #8
9000a3ea:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000a3ec:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
9000a3ee:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
9000a3f0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000a3f4:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
9000a3f8:	f7ff ffd8 	bl	9000a3ac <HAL_LTDC_ReloadEventCallback>
}
9000a3fc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
9000a3fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a400:	f022 0204 	bic.w	r2, r2, #4
9000a404:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
9000a406:	2204      	movs	r2, #4
9000a408:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
9000a40a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
9000a40e:	f043 0301 	orr.w	r3, r3, #1
9000a412:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000a416:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000a418:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000a41c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000a420:	f7ff ffc2 	bl	9000a3a8 <HAL_LTDC_ErrorCallback>
9000a424:	e7cd      	b.n	9000a3c2 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000a426:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
9000a428:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000a42a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a42c:	f022 0202 	bic.w	r2, r2, #2
9000a430:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
9000a432:	2202      	movs	r2, #2
9000a434:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000a436:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
9000a438:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
9000a43c:	f043 0302 	orr.w	r3, r3, #2
9000a440:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000a444:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000a446:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000a44a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000a44e:	f7ff ffab 	bl	9000a3a8 <HAL_LTDC_ErrorCallback>
9000a452:	e7ba      	b.n	9000a3ca <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a454:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
9000a456:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000a45a:	f022 0201 	bic.w	r2, r2, #1
9000a45e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
9000a460:	2201      	movs	r2, #1
9000a462:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
9000a464:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
9000a466:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000a46a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
9000a46e:	f7f8 f9cb 	bl	90002808 <HAL_LTDC_LineEventCallback>
9000a472:	e7ae      	b.n	9000a3d2 <HAL_LTDC_IRQHandler+0x22>

9000a474 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000a474:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
9000a478:	2b01      	cmp	r3, #1
9000a47a:	f000 80c6 	beq.w	9000a60a <HAL_LTDC_ConfigLayer+0x196>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a47e:	2302      	movs	r3, #2
{
9000a480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a484:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a488:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a48c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
9000a490:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a492:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a496:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a498:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a49c:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a49e:	f102 0684 	add.w	r6, r2, #132	; 0x84
9000a4a2:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a4a4:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
9000a4a8:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a4aa:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a4ae:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000a4b2:	f8df a164 	ldr.w	sl, [pc, #356]	; 9000a618 <HAL_LTDC_ConfigLayer+0x1a4>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a4b6:	f8dc 3004 	ldr.w	r3, [ip, #4]
9000a4ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
9000a4be:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a4c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000a4c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000a4c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a4c8:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a4ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000a4ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000a4d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000a4d4:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000a4d6:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000a4d8:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a4dc:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000a4de:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000a4e0:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000a4e4:	f8d9 300c 	ldr.w	r3, [r9, #12]
9000a4e8:	1c51      	adds	r1, r2, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000a4ea:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000a4ee:	f3c3 430b 	ubfx	r3, r3, #16, #12
9000a4f2:	440b      	add	r3, r1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000a4f4:	68e9      	ldr	r1, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000a4f6:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000a4fa:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000a4fe:	f8d9 300c 	ldr.w	r3, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000a502:	f8dc 0008 	ldr.w	r0, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000a506:	f3c3 030a 	ubfx	r3, r3, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000a50a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000a50e:	4419      	add	r1, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000a510:	68ab      	ldr	r3, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000a512:	f8cc 0008 	str.w	r0, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000a516:	f8d9 000c 	ldr.w	r0, [r9, #12]
9000a51a:	3301      	adds	r3, #1
9000a51c:	f3c0 000a 	ubfx	r0, r0, #0, #11
9000a520:	4403      	add	r3, r0
9000a522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000a526:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000a528:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000a52c:	f8dc 3010 	ldr.w	r3, [ip, #16]
9000a530:	f023 0307 	bic.w	r3, r3, #7
9000a534:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000a538:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000a53c:	f8dc 3018 	ldr.w	r3, [ip, #24]
9000a540:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000a542:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000a546:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000a54a:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000a54e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
9000a552:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
9000a556:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000a55a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
9000a55e:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000a562:	f8dc 3014 	ldr.w	r3, [ip, #20]
9000a566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
9000a56a:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000a56e:	696b      	ldr	r3, [r5, #20]
9000a570:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000a574:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000a578:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000a57a:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000a57e:	6a28      	ldr	r0, [r5, #32]
9000a580:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000a582:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000a586:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
9000a58a:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
9000a58e:	2300      	movs	r3, #0
9000a590:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
9000a594:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000a596:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000a59a:	bb59      	cbnz	r1, 9000a5f4 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
9000a59c:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000a59e:	1abf      	subs	r7, r7, r2
9000a5a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
9000a5a2:	fb03 f707 	mul.w	r7, r3, r7
9000a5a6:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000a5aa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000a5ac:	3707      	adds	r7, #7
9000a5ae:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000a5b2:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
9000a5b6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
9000a5ba:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000a5be:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000a5c2:	4b14      	ldr	r3, [pc, #80]	; (9000a614 <HAL_LTDC_ConfigLayer+0x1a0>)
9000a5c4:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
9000a5c8:	400b      	ands	r3, r1
9000a5ca:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000a5ce:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000a5d2:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000a5d4:	f859 3006 	ldr.w	r3, [r9, r6]
9000a5d8:	4313      	orrs	r3, r2
9000a5da:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
9000a5de:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000a5e0:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
9000a5e4:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
9000a5e6:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
9000a5ea:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
9000a5ee:	b003      	add	sp, #12
9000a5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000a5f4:	2901      	cmp	r1, #1
9000a5f6:	d00a      	beq.n	9000a60e <HAL_LTDC_ConfigLayer+0x19a>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
9000a5f8:	1e8b      	subs	r3, r1, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
9000a5fa:	2b02      	cmp	r3, #2
9000a5fc:	d903      	bls.n	9000a606 <HAL_LTDC_ConfigLayer+0x192>
9000a5fe:	2907      	cmp	r1, #7
9000a600:	d001      	beq.n	9000a606 <HAL_LTDC_ConfigLayer+0x192>
    tmp = 1U;
9000a602:	2301      	movs	r3, #1
9000a604:	e7cb      	b.n	9000a59e <HAL_LTDC_ConfigLayer+0x12a>
    tmp = 2U;
9000a606:	2302      	movs	r3, #2
9000a608:	e7c9      	b.n	9000a59e <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
9000a60a:	2002      	movs	r0, #2
}
9000a60c:	4770      	bx	lr
    tmp = 3U;
9000a60e:	2303      	movs	r3, #3
9000a610:	e7c5      	b.n	9000a59e <HAL_LTDC_ConfigLayer+0x12a>
9000a612:	bf00      	nop
9000a614:	fffff800 	.word	0xfffff800
9000a618:	fffff8f8 	.word	0xfffff8f8

9000a61c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
9000a61c:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
9000a620:	2a01      	cmp	r2, #1
9000a622:	d019      	beq.n	9000a658 <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a624:	6802      	ldr	r2, [r0, #0]
9000a626:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a628:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
9000a62a:	f04f 0c00 	mov.w	ip, #0
{
9000a62e:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000a630:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a634:	6b50      	ldr	r0, [r2, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
9000a636:	4c09      	ldr	r4, [pc, #36]	; (9000a65c <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000a638:	f020 0001 	bic.w	r0, r0, #1
9000a63c:	6350      	str	r0, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000a63e:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
9000a640:	6421      	str	r1, [r4, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
9000a642:	6b51      	ldr	r1, [r2, #52]	; 0x34
9000a644:	4301      	orrs	r1, r0
9000a646:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000a648:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  return HAL_OK;
9000a64c:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
9000a64e:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
9000a652:	f85d 4b04 	ldr.w	r4, [sp], #4
9000a656:	4770      	bx	lr
  __HAL_LOCK(hltdc);
9000a658:	2002      	movs	r0, #2
}
9000a65a:	4770      	bx	lr
9000a65c:	50001000 	.word	0x50001000

9000a660 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
9000a660:	b538      	push	{r3, r4, r5, lr}
9000a662:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
9000a664:	f7fc fad0 	bl	90006c08 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
9000a668:	2c00      	cmp	r4, #0
9000a66a:	d05a      	beq.n	9000a722 <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
9000a66c:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000a66e:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
9000a670:	2100      	movs	r1, #0
9000a672:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000a674:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
9000a678:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
9000a67c:	68da      	ldr	r2, [r3, #12]
9000a67e:	f022 0201 	bic.w	r2, r2, #1
9000a682:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000a684:	e005      	b.n	9000a692 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
9000a686:	f7fc fabf 	bl	90006c08 <HAL_GetTick>
9000a68a:	1b43      	subs	r3, r0, r5
9000a68c:	2b05      	cmp	r3, #5
9000a68e:	d841      	bhi.n	9000a714 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000a690:	6823      	ldr	r3, [r4, #0]
9000a692:	68da      	ldr	r2, [r3, #12]
9000a694:	07d2      	lsls	r2, r2, #31
9000a696:	d4f6      	bmi.n	9000a686 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000a698:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
9000a69c:	69e0      	ldr	r0, [r4, #28]
9000a69e:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000a6a0:	68e1      	ldr	r1, [r4, #12]
9000a6a2:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000a6a4:	4302      	orrs	r2, r0
9000a6a6:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000a6a8:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000a6aa:	4302      	orrs	r2, r0
9000a6ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000a6ae:	4302      	orrs	r2, r0
9000a6b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000a6b2:	4302      	orrs	r2, r0
9000a6b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000a6b6:	4302      	orrs	r2, r0
9000a6b8:	68a0      	ldr	r0, [r4, #8]
9000a6ba:	4302      	orrs	r2, r0
9000a6bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000a6be:	3801      	subs	r0, #1
9000a6c0:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a6c4:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000a6c6:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a6c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
9000a6cc:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a6ce:	d103      	bne.n	9000a6d8 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
9000a6d0:	691a      	ldr	r2, [r3, #16]
9000a6d2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
9000a6d6:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
9000a6d8:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000a6da:	6b62      	ldr	r2, [r4, #52]	; 0x34
9000a6dc:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
9000a6de:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000a6e0:	db30      	blt.n	9000a744 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
9000a6e2:	b292      	uxth	r2, r2
9000a6e4:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
9000a6e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000a6e8:	2a00      	cmp	r2, #0
9000a6ea:	db1c      	blt.n	9000a726 <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000a6ec:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000a6ee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000a6f2:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000a6f6:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000a6f8:	d021      	beq.n	9000a73e <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
9000a6fa:	b2c0      	uxtb	r0, r0
9000a6fc:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
9000a6fe:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
9000a700:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
9000a702:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
9000a704:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a706:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
9000a708:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
9000a70a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
9000a70e:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
9000a712:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000a714:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000a716:	2303      	movs	r3, #3
      return HAL_ERROR;
9000a718:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000a71a:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000a71c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000a720:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
9000a722:	2001      	movs	r0, #1
}
9000a724:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000a726:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
9000a728:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000a72a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000a72e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
9000a732:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000a734:	6a19      	ldr	r1, [r3, #32]
9000a736:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000a73a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000a73c:	d1dd      	bne.n	9000a6fa <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
9000a73e:	2200      	movs	r2, #0
9000a740:	629a      	str	r2, [r3, #40]	; 0x28
9000a742:	e7dc      	b.n	9000a6fe <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000a744:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
9000a746:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000a748:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000a74c:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000a74e:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000a750:	621a      	str	r2, [r3, #32]
9000a752:	e7c8      	b.n	9000a6e6 <HAL_MDMA_Init+0x86>

9000a754 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
9000a754:	b1f8      	cbz	r0, 9000a796 <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
9000a756:	6802      	ldr	r2, [r0, #0]
9000a758:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
9000a75a:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
9000a75c:	68d0      	ldr	r0, [r2, #12]
{
9000a75e:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
9000a760:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000a764:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
9000a766:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
9000a768:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
9000a76a:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
9000a76c:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
9000a76e:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
9000a770:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
9000a772:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
9000a774:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
9000a776:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
9000a778:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
9000a77a:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
9000a77c:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000a77e:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a780:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
9000a782:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
9000a786:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
}
9000a78a:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
9000a78e:	664b      	str	r3, [r1, #100]	; 0x64
  hmdma->LastLinkedListNodeAddress   = 0;
9000a790:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
9000a794:	4770      	bx	lr
    return HAL_ERROR;
9000a796:	2001      	movs	r0, #1
}
9000a798:	4770      	bx	lr
9000a79a:	bf00      	nop

9000a79c <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
9000a79c:	b310      	cbz	r0, 9000a7e4 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
9000a79e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
9000a7a2:	2b01      	cmp	r3, #1
9000a7a4:	d021      	beq.n	9000a7ea <HAL_MDMA_ConfigPostRequestMask+0x4e>
{
9000a7a6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
9000a7a8:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000a7ac:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
9000a7b0:	45f4      	cmp	ip, lr
9000a7b2:	fa5f f38c 	uxtb.w	r3, ip
  __HAL_LOCK(hmdma);
9000a7b6:	f880 e03c 	strb.w	lr, [r0, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000a7ba:	d005      	beq.n	9000a7c8 <HAL_MDMA_ConfigPostRequestMask+0x2c>
    status =  HAL_ERROR;
9000a7bc:	4673      	mov	r3, lr
  __HAL_UNLOCK(hmdma);
9000a7be:	2200      	movs	r2, #0
9000a7c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
9000a7c4:	4618      	mov	r0, r3
9000a7c6:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
9000a7c8:	6805      	ldr	r5, [r0, #0]
9000a7ca:	692c      	ldr	r4, [r5, #16]
9000a7cc:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
9000a7d0:	d1f5      	bne.n	9000a7be <HAL_MDMA_ConfigPostRequestMask+0x22>
      hmdma->Instance->CMAR = MaskAddress;
9000a7d2:	6329      	str	r1, [r5, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
9000a7d4:	636a      	str	r2, [r5, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000a7d6:	692a      	ldr	r2, [r5, #16]
      if(MaskAddress == 0U)
9000a7d8:	b951      	cbnz	r1, 9000a7f0 <HAL_MDMA_ConfigPostRequestMask+0x54>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000a7da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000a7de:	460b      	mov	r3, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000a7e0:	612a      	str	r2, [r5, #16]
9000a7e2:	e7ec      	b.n	9000a7be <HAL_MDMA_ConfigPostRequestMask+0x22>
    return HAL_ERROR;
9000a7e4:	2301      	movs	r3, #1
}
9000a7e6:	4618      	mov	r0, r3
9000a7e8:	4770      	bx	lr
  __HAL_LOCK(hmdma);
9000a7ea:	2302      	movs	r3, #2
}
9000a7ec:	4618      	mov	r0, r3
9000a7ee:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000a7f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000a7f4:	4623      	mov	r3, r4
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000a7f6:	612a      	str	r2, [r5, #16]
9000a7f8:	e7e1      	b.n	9000a7be <HAL_MDMA_ConfigPostRequestMask+0x22>
9000a7fa:	bf00      	nop

9000a7fc <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
9000a7fc:	2800      	cmp	r0, #0
9000a7fe:	d06e      	beq.n	9000a8de <HAL_MDMA_Start_IT+0xe2>
9000a800:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
9000a802:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000a806:	2801      	cmp	r0, #1
9000a808:	d071      	beq.n	9000a8ee <HAL_MDMA_Start_IT+0xf2>
9000a80a:	2001      	movs	r0, #1
9000a80c:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000a810:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
9000a814:	2801      	cmp	r0, #1
9000a816:	d004      	beq.n	9000a822 <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
9000a818:	2300      	movs	r3, #0
    return HAL_BUSY;
9000a81a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
9000a81c:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
9000a820:	4770      	bx	lr
{
9000a822:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000a824:	f3c3 0010 	ubfx	r0, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000a828:	2402      	movs	r4, #2
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a82a:	2300      	movs	r3, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000a82c:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000a82e:	f88c 403d 	strb.w	r4, [ip, #61]	; 0x3d
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000a832:	f1a4 1402 	sub.w	r4, r4, #131074	; 0x20002
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a836:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000a83a:	f105 3eff 	add.w	lr, r5, #4294967295
    __HAL_MDMA_DISABLE(hmdma);
9000a83e:	f8dc 3000 	ldr.w	r3, [ip]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000a842:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
    __HAL_MDMA_DISABLE(hmdma);
9000a846:	68dd      	ldr	r5, [r3, #12]
9000a848:	f025 0501 	bic.w	r5, r5, #1
9000a84c:	60dd      	str	r5, [r3, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000a84e:	695d      	ldr	r5, [r3, #20]
9000a850:	ea04 0405 	and.w	r4, r4, r5
9000a854:	ea44 0400 	orr.w	r4, r4, r0
9000a858:	615c      	str	r4, [r3, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000a85a:	6958      	ldr	r0, [r3, #20]
9000a85c:	f3c0 0013 	ubfx	r0, r0, #0, #20
9000a860:	ea40 500e 	orr.w	r0, r0, lr, lsl #20
9000a864:	6158      	str	r0, [r3, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
9000a866:	f04f 001f 	mov.w	r0, #31
9000a86a:	6058      	str	r0, [r3, #4]
  hmdma->Instance->CDAR = DstAddress;
9000a86c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CSAR = SrcAddress;
9000a86e:	6199      	str	r1, [r3, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
9000a870:	6a99      	ldr	r1, [r3, #40]	; 0x28
9000a872:	bf0c      	ite	eq
9000a874:	f441 3180 	orreq.w	r1, r1, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000a878:	f421 3180 	bicne.w	r1, r1, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000a87c:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000a880:	6299      	str	r1, [r3, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000a882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if(hmdma->XferBlockCpltCallback != NULL)
9000a884:	f8dc 104c 	ldr.w	r1, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000a888:	bf0c      	ite	eq
9000a88a:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
9000a88e:	f422 3200 	bicne.w	r2, r2, #131072	; 0x20000
9000a892:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
9000a894:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
9000a898:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
9000a89a:	68da      	ldr	r2, [r3, #12]
9000a89c:	f042 0206 	orr.w	r2, r2, #6
9000a8a0:	60da      	str	r2, [r3, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
9000a8a2:	b119      	cbz	r1, 9000a8ac <HAL_MDMA_Start_IT+0xb0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
9000a8a4:	68da      	ldr	r2, [r3, #12]
9000a8a6:	f042 0210 	orr.w	r2, r2, #16
9000a8aa:	60da      	str	r2, [r3, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000a8ac:	f8dc 2050 	ldr.w	r2, [ip, #80]	; 0x50
9000a8b0:	b11a      	cbz	r2, 9000a8ba <HAL_MDMA_Start_IT+0xbe>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
9000a8b2:	68da      	ldr	r2, [r3, #12]
9000a8b4:	f042 0208 	orr.w	r2, r2, #8
9000a8b8:	60da      	str	r2, [r3, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
9000a8ba:	f8dc 2048 	ldr.w	r2, [ip, #72]	; 0x48
9000a8be:	b11a      	cbz	r2, 9000a8c8 <HAL_MDMA_Start_IT+0xcc>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
9000a8c0:	68da      	ldr	r2, [r3, #12]
9000a8c2:	f042 0220 	orr.w	r2, r2, #32
9000a8c6:	60da      	str	r2, [r3, #12]
    __HAL_MDMA_ENABLE(hmdma);
9000a8c8:	68da      	ldr	r2, [r3, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a8ca:	f8dc 1004 	ldr.w	r1, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
9000a8ce:	f042 0201 	orr.w	r2, r2, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a8d2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
9000a8d6:	60da      	str	r2, [r3, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a8d8:	d003      	beq.n	9000a8e2 <HAL_MDMA_Start_IT+0xe6>
  return HAL_OK;
9000a8da:	2000      	movs	r0, #0
}
9000a8dc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
9000a8de:	2001      	movs	r0, #1
9000a8e0:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000a8e2:	68da      	ldr	r2, [r3, #12]
  return HAL_OK;
9000a8e4:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000a8e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000a8ea:	60da      	str	r2, [r3, #12]
}
9000a8ec:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
9000a8ee:	2002      	movs	r0, #2
}
9000a8f0:	4770      	bx	lr
9000a8f2:	bf00      	nop

9000a8f4 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
9000a8f4:	4603      	mov	r3, r0
9000a8f6:	b188      	cbz	r0, 9000a91c <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
9000a8f8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
9000a8fc:	2a02      	cmp	r2, #2
9000a8fe:	d003      	beq.n	9000a908 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000a900:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
9000a902:	2001      	movs	r0, #1
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000a904:	669a      	str	r2, [r3, #104]	; 0x68
    return HAL_ERROR;
9000a906:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
9000a908:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000a90a:	2104      	movs	r1, #4
  return HAL_OK;
9000a90c:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000a90e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
9000a912:	68d3      	ldr	r3, [r2, #12]
9000a914:	f023 0301 	bic.w	r3, r3, #1
9000a918:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
9000a91a:	4770      	bx	lr
    return HAL_ERROR;
9000a91c:	2001      	movs	r0, #1
}
9000a91e:	4770      	bx	lr

9000a920 <HAL_MDMA_IRQHandler>:
{
9000a920:	b530      	push	{r4, r5, lr}
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000a922:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
{
9000a926:	4604      	mov	r4, r0
9000a928:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
9000a92a:	2500      	movs	r5, #0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000a92c:	4a58      	ldr	r2, [pc, #352]	; (9000aa90 <HAL_MDMA_IRQHandler+0x170>)
9000a92e:	2101      	movs	r1, #1
  __IO uint32_t count = 0;
9000a930:	9501      	str	r5, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000a932:	6818      	ldr	r0, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000a934:	6823      	ldr	r3, [r4, #0]
9000a936:	441a      	add	r2, r3
9000a938:	f3c2 1284 	ubfx	r2, r2, #6, #5
9000a93c:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000a940:	4202      	tst	r2, r0
9000a942:	f000 80a2 	beq.w	9000aa8a <HAL_MDMA_IRQHandler+0x16a>
  uint32_t timeout = SystemCoreClock / 9600U;
9000a946:	4953      	ldr	r1, [pc, #332]	; (9000aa94 <HAL_MDMA_IRQHandler+0x174>)
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
9000a948:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
9000a94a:	680d      	ldr	r5, [r1, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
9000a94c:	07d1      	lsls	r1, r2, #31
9000a94e:	d529      	bpl.n	9000a9a4 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
9000a950:	68da      	ldr	r2, [r3, #12]
9000a952:	0792      	lsls	r2, r2, #30
9000a954:	d526      	bpl.n	9000a9a4 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
9000a956:	68da      	ldr	r2, [r3, #12]
9000a958:	f022 0202 	bic.w	r2, r2, #2
9000a95c:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
9000a95e:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000a960:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
9000a962:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000a964:	bf54      	ite	pl
9000a966:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
9000a96a:	f041 0102 	orrmi.w	r1, r1, #2
9000a96e:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
9000a970:	0591      	lsls	r1, r2, #22
9000a972:	d503      	bpl.n	9000a97c <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
9000a974:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000a976:	f041 0104 	orr.w	r1, r1, #4
9000a97a:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
9000a97c:	05d0      	lsls	r0, r2, #23
9000a97e:	d503      	bpl.n	9000a988 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
9000a980:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000a982:	f041 0108 	orr.w	r1, r1, #8
9000a986:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
9000a988:	0551      	lsls	r1, r2, #21
9000a98a:	d503      	bpl.n	9000a994 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
9000a98c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000a98e:	f041 0110 	orr.w	r1, r1, #16
9000a992:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
9000a994:	0510      	lsls	r0, r2, #20
9000a996:	d503      	bpl.n	9000a9a0 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
9000a998:	6ea2      	ldr	r2, [r4, #104]	; 0x68
9000a99a:	f042 0220 	orr.w	r2, r2, #32
9000a99e:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
9000a9a0:	2201      	movs	r2, #1
9000a9a2:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
9000a9a4:	681a      	ldr	r2, [r3, #0]
9000a9a6:	06d1      	lsls	r1, r2, #27
9000a9a8:	d509      	bpl.n	9000a9be <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
9000a9aa:	68da      	ldr	r2, [r3, #12]
9000a9ac:	0692      	lsls	r2, r2, #26
9000a9ae:	d506      	bpl.n	9000a9be <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000a9b0:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
9000a9b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000a9b4:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
9000a9b6:	b112      	cbz	r2, 9000a9be <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
9000a9b8:	4620      	mov	r0, r4
9000a9ba:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
9000a9bc:	6823      	ldr	r3, [r4, #0]
9000a9be:	681a      	ldr	r2, [r3, #0]
9000a9c0:	0710      	lsls	r0, r2, #28
9000a9c2:	d509      	bpl.n	9000a9d8 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
9000a9c4:	68da      	ldr	r2, [r3, #12]
9000a9c6:	06d1      	lsls	r1, r2, #27
9000a9c8:	d506      	bpl.n	9000a9d8 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000a9ca:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
9000a9cc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000a9ce:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
9000a9d0:	b112      	cbz	r2, 9000a9d8 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
9000a9d2:	4620      	mov	r0, r4
9000a9d4:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
9000a9d6:	6823      	ldr	r3, [r4, #0]
9000a9d8:	681a      	ldr	r2, [r3, #0]
9000a9da:	0752      	lsls	r2, r2, #29
9000a9dc:	d509      	bpl.n	9000a9f2 <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
9000a9de:	68da      	ldr	r2, [r3, #12]
9000a9e0:	0710      	lsls	r0, r2, #28
9000a9e2:	d506      	bpl.n	9000a9f2 <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000a9e4:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000a9e6:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000a9e8:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000a9ea:	b112      	cbz	r2, 9000a9f2 <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
9000a9ec:	4620      	mov	r0, r4
9000a9ee:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
9000a9f0:	6823      	ldr	r3, [r4, #0]
9000a9f2:	681a      	ldr	r2, [r3, #0]
9000a9f4:	0791      	lsls	r1, r2, #30
9000a9f6:	d516      	bpl.n	9000aa26 <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
9000a9f8:	68da      	ldr	r2, [r3, #12]
9000a9fa:	0752      	lsls	r2, r2, #29
9000a9fc:	d513      	bpl.n	9000aa26 <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
9000a9fe:	68da      	ldr	r2, [r3, #12]
9000aa00:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
9000aa04:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
9000aa06:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
9000aa0a:	2a04      	cmp	r2, #4
9000aa0c:	d034      	beq.n	9000aa78 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000aa0e:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
9000aa10:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000aa12:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
9000aa14:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
9000aa16:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
9000aa18:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
9000aa1c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
9000aa20:	b10b      	cbz	r3, 9000aa26 <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
9000aa22:	4620      	mov	r0, r4
9000aa24:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
9000aa26:	6ea3      	ldr	r3, [r4, #104]	; 0x68
9000aa28:	2b00      	cmp	r3, #0
9000aa2a:	d02e      	beq.n	9000aa8a <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
9000aa2c:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000aa2e:	2304      	movs	r3, #4
  uint32_t timeout = SystemCoreClock / 9600U;
9000aa30:	4a19      	ldr	r2, [pc, #100]	; (9000aa98 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000aa32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
9000aa36:	68cb      	ldr	r3, [r1, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
9000aa38:	fba2 0205 	umull	r0, r2, r2, r5
    __HAL_MDMA_DISABLE(hmdma);
9000aa3c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000aa40:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
9000aa42:	60cb      	str	r3, [r1, #12]
9000aa44:	e002      	b.n	9000aa4c <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
9000aa46:	68cb      	ldr	r3, [r1, #12]
9000aa48:	07d8      	lsls	r0, r3, #31
9000aa4a:	d504      	bpl.n	9000aa56 <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
9000aa4c:	9b01      	ldr	r3, [sp, #4]
9000aa4e:	3301      	adds	r3, #1
9000aa50:	4293      	cmp	r3, r2
9000aa52:	9301      	str	r3, [sp, #4]
9000aa54:	d9f7      	bls.n	9000aa46 <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
9000aa56:	2300      	movs	r3, #0
9000aa58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000aa5c:	68cb      	ldr	r3, [r1, #12]
9000aa5e:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000aa60:	bf4c      	ite	mi
9000aa62:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
9000aa64:	2301      	movpl	r3, #1
9000aa66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
9000aa6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000aa6c:	b16b      	cbz	r3, 9000aa8a <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
9000aa6e:	4620      	mov	r0, r4
}
9000aa70:	b003      	add	sp, #12
9000aa72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
9000aa76:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
9000aa78:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
9000aa7a:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
9000aa7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
9000aa7e:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
9000aa82:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
9000aa86:	2b00      	cmp	r3, #0
9000aa88:	d1f1      	bne.n	9000aa6e <HAL_MDMA_IRQHandler+0x14e>
}
9000aa8a:	b003      	add	sp, #12
9000aa8c:	bd30      	pop	{r4, r5, pc}
9000aa8e:	bf00      	nop
9000aa90:	adffffc0 	.word	0xadffffc0
9000aa94:	24000054 	.word	0x24000054
9000aa98:	1b4e81b5 	.word	0x1b4e81b5

9000aa9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
9000aa9c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000aa9e:	4c10      	ldr	r4, [pc, #64]	; (9000aae0 <HAL_PWREx_ConfigSupply+0x44>)
9000aaa0:	68e3      	ldr	r3, [r4, #12]
9000aaa2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000aaa6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000aaa8:	d105      	bne.n	9000aab6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000aaaa:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
9000aaae:	1a18      	subs	r0, r3, r0
9000aab0:	bf18      	it	ne
9000aab2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
9000aab4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000aab6:	f023 0307 	bic.w	r3, r3, #7
9000aaba:	4318      	orrs	r0, r3
9000aabc:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
9000aabe:	f7fc f8a3 	bl	90006c08 <HAL_GetTick>
9000aac2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000aac4:	e005      	b.n	9000aad2 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000aac6:	f7fc f89f 	bl	90006c08 <HAL_GetTick>
9000aaca:	1b40      	subs	r0, r0, r5
9000aacc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
9000aad0:	d804      	bhi.n	9000aadc <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000aad2:	6863      	ldr	r3, [r4, #4]
9000aad4:	049b      	lsls	r3, r3, #18
9000aad6:	d5f6      	bpl.n	9000aac6 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
9000aad8:	2000      	movs	r0, #0
}
9000aada:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
9000aadc:	2001      	movs	r0, #1
}
9000aade:	bd38      	pop	{r3, r4, r5, pc}
9000aae0:	58024800 	.word	0x58024800

9000aae4 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000aae4:	4b45      	ldr	r3, [pc, #276]	; (9000abfc <HAL_RCC_GetSysClockFreq.part.0+0x118>)
uint32_t HAL_RCC_GetSysClockFreq(void)
9000aae6:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000aae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000aaea:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000aaec:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
9000aaee:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000aaf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000aaf4:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000aaf8:	d038      	beq.n	9000ab6c <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000aafa:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000aafe:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ab02:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000ab06:	fb05 f101 	mul.w	r1, r5, r1
9000ab0a:	2a01      	cmp	r2, #1
9000ab0c:	ee07 1a90 	vmov	s15, r1
9000ab10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
9000ab14:	d002      	beq.n	9000ab1c <HAL_RCC_GetSysClockFreq.part.0+0x38>
9000ab16:	2a02      	cmp	r2, #2
9000ab18:	d04e      	beq.n	9000abb8 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
9000ab1a:	b34a      	cbz	r2, 9000ab70 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ab1c:	ee07 0a90 	vmov	s15, r0
9000ab20:	eddf 6a37 	vldr	s13, [pc, #220]	; 9000ac00 <HAL_RCC_GetSysClockFreq.part.0+0x11c>
9000ab24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ab28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000ab2a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
9000ab2e:	ed9f 5a35 	vldr	s10, [pc, #212]	; 9000ac04 <HAL_RCC_GetSysClockFreq.part.0+0x120>
9000ab32:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000ab36:	ee06 3a90 	vmov	s13, r3
9000ab3a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000ab3e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000ab42:	eee7 6a05 	vfma.f32	s13, s14, s10
9000ab46:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000ab4a:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000ab4e:	4b2b      	ldr	r3, [pc, #172]	; (9000abfc <HAL_RCC_GetSysClockFreq.part.0+0x118>)
9000ab50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000ab52:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000ab56:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000ab58:	ee07 3a90 	vmov	s15, r3
9000ab5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000ab60:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000ab64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000ab68:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
9000ab6c:	bc30      	pop	{r4, r5}
9000ab6e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000ab70:	681a      	ldr	r2, [r3, #0]
9000ab72:	0692      	lsls	r2, r2, #26
9000ab74:	d527      	bpl.n	9000abc6 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ab76:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ab78:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ab7c:	4a22      	ldr	r2, [pc, #136]	; (9000ac08 <HAL_RCC_GetSysClockFreq.part.0+0x124>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ab7e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000ab82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ab84:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ab88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ab8c:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 9000ac04 <HAL_RCC_GetSysClockFreq.part.0+0x120>
9000ab90:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ab94:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000ab96:	ee06 3a90 	vmov	s13, r3
9000ab9a:	ee06 2a10 	vmov	s12, r2
9000ab9e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000aba2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000aba6:	eee7 6a05 	vfma.f32	s13, s14, s10
9000abaa:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000abae:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000abb2:	ee66 6a87 	vmul.f32	s13, s13, s14
9000abb6:	e7ca      	b.n	9000ab4e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000abb8:	ee07 0a90 	vmov	s15, r0
9000abbc:	eddf 6a13 	vldr	s13, [pc, #76]	; 9000ac0c <HAL_RCC_GetSysClockFreq.part.0+0x128>
9000abc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000abc4:	e7b0      	b.n	9000ab28 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000abc6:	ee07 0a90 	vmov	s15, r0
9000abca:	ed9f 5a11 	vldr	s10, [pc, #68]	; 9000ac10 <HAL_RCC_GetSysClockFreq.part.0+0x12c>
9000abce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000abd0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000abd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000abd8:	eddf 5a0a 	vldr	s11, [pc, #40]	; 9000ac04 <HAL_RCC_GetSysClockFreq.part.0+0x120>
9000abdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000abe0:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000abe4:	ee07 3a90 	vmov	s15, r3
9000abe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000abec:	eee7 7a25 	vfma.f32	s15, s14, s11
9000abf0:	ee77 7a86 	vadd.f32	s15, s15, s12
9000abf4:	ee66 6aa7 	vmul.f32	s13, s13, s15
9000abf8:	e7a9      	b.n	9000ab4e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
9000abfa:	bf00      	nop
9000abfc:	58024400 	.word	0x58024400
9000ac00:	4a742400 	.word	0x4a742400
9000ac04:	39000000 	.word	0x39000000
9000ac08:	03d09000 	.word	0x03d09000
9000ac0c:	4bbebc20 	.word	0x4bbebc20
9000ac10:	4c742400 	.word	0x4c742400

9000ac14 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
9000ac14:	2800      	cmp	r0, #0
9000ac16:	f000 81e8 	beq.w	9000afea <HAL_RCC_OscConfig+0x3d6>
{
9000ac1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000ac1c:	6803      	ldr	r3, [r0, #0]
9000ac1e:	4604      	mov	r4, r0
9000ac20:	07d9      	lsls	r1, r3, #31
9000ac22:	d52e      	bpl.n	9000ac82 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000ac24:	49a4      	ldr	r1, [pc, #656]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
9000ac26:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000ac28:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000ac2a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000ac2e:	2a10      	cmp	r2, #16
9000ac30:	f000 8107 	beq.w	9000ae42 <HAL_RCC_OscConfig+0x22e>
9000ac34:	2a18      	cmp	r2, #24
9000ac36:	f000 80ff 	beq.w	9000ae38 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000ac3a:	6863      	ldr	r3, [r4, #4]
9000ac3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000ac40:	f000 812a 	beq.w	9000ae98 <HAL_RCC_OscConfig+0x284>
9000ac44:	2b00      	cmp	r3, #0
9000ac46:	f000 8168 	beq.w	9000af1a <HAL_RCC_OscConfig+0x306>
9000ac4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000ac4e:	4b9a      	ldr	r3, [pc, #616]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
9000ac50:	681a      	ldr	r2, [r3, #0]
9000ac52:	f000 8289 	beq.w	9000b168 <HAL_RCC_OscConfig+0x554>
9000ac56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000ac5a:	601a      	str	r2, [r3, #0]
9000ac5c:	681a      	ldr	r2, [r3, #0]
9000ac5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
9000ac62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000ac64:	f7fb ffd0 	bl	90006c08 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ac68:	4e93      	ldr	r6, [pc, #588]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
9000ac6a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ac6c:	e005      	b.n	9000ac7a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000ac6e:	f7fb ffcb 	bl	90006c08 <HAL_GetTick>
9000ac72:	1b40      	subs	r0, r0, r5
9000ac74:	2864      	cmp	r0, #100	; 0x64
9000ac76:	f200 814e 	bhi.w	9000af16 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ac7a:	6833      	ldr	r3, [r6, #0]
9000ac7c:	039b      	lsls	r3, r3, #14
9000ac7e:	d5f6      	bpl.n	9000ac6e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000ac80:	6823      	ldr	r3, [r4, #0]
9000ac82:	079d      	lsls	r5, r3, #30
9000ac84:	f100 808a 	bmi.w	9000ad9c <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000ac88:	06d9      	lsls	r1, r3, #27
9000ac8a:	d533      	bpl.n	9000acf4 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000ac8c:	4a8a      	ldr	r2, [pc, #552]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
9000ac8e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000ac90:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000ac92:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000ac96:	2b08      	cmp	r3, #8
9000ac98:	f000 80e3 	beq.w	9000ae62 <HAL_RCC_OscConfig+0x24e>
9000ac9c:	2b18      	cmp	r3, #24
9000ac9e:	f000 80db 	beq.w	9000ae58 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000aca2:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
9000aca4:	4d84      	ldr	r5, [pc, #528]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000aca6:	2b00      	cmp	r3, #0
9000aca8:	f000 816f 	beq.w	9000af8a <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
9000acac:	682b      	ldr	r3, [r5, #0]
9000acae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000acb2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000acb4:	f7fb ffa8 	bl	90006c08 <HAL_GetTick>
9000acb8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000acba:	e005      	b.n	9000acc8 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000acbc:	f7fb ffa4 	bl	90006c08 <HAL_GetTick>
9000acc0:	1b80      	subs	r0, r0, r6
9000acc2:	2802      	cmp	r0, #2
9000acc4:	f200 8127 	bhi.w	9000af16 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000acc8:	682b      	ldr	r3, [r5, #0]
9000acca:	05db      	lsls	r3, r3, #23
9000accc:	d5f6      	bpl.n	9000acbc <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000acce:	f7fb ffa1 	bl	90006c14 <HAL_GetREVID>
9000acd2:	f241 0303 	movw	r3, #4099	; 0x1003
9000acd6:	4298      	cmp	r0, r3
9000acd8:	f200 826d 	bhi.w	9000b1b6 <HAL_RCC_OscConfig+0x5a2>
9000acdc:	6a22      	ldr	r2, [r4, #32]
9000acde:	686b      	ldr	r3, [r5, #4]
9000ace0:	2a20      	cmp	r2, #32
9000ace2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000ace6:	bf0c      	ite	eq
9000ace8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
9000acec:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
9000acf0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000acf2:	6823      	ldr	r3, [r4, #0]
9000acf4:	071d      	lsls	r5, r3, #28
9000acf6:	d516      	bpl.n	9000ad26 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000acf8:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
9000acfa:	4d6f      	ldr	r5, [pc, #444]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000acfc:	2b00      	cmp	r3, #0
9000acfe:	f000 8122 	beq.w	9000af46 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
9000ad02:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000ad04:	f043 0301 	orr.w	r3, r3, #1
9000ad08:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000ad0a:	f7fb ff7d 	bl	90006c08 <HAL_GetTick>
9000ad0e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000ad10:	e005      	b.n	9000ad1e <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000ad12:	f7fb ff79 	bl	90006c08 <HAL_GetTick>
9000ad16:	1b80      	subs	r0, r0, r6
9000ad18:	2802      	cmp	r0, #2
9000ad1a:	f200 80fc 	bhi.w	9000af16 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000ad1e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000ad20:	0798      	lsls	r0, r3, #30
9000ad22:	d5f6      	bpl.n	9000ad12 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000ad24:	6823      	ldr	r3, [r4, #0]
9000ad26:	069a      	lsls	r2, r3, #26
9000ad28:	d516      	bpl.n	9000ad58 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000ad2a:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
9000ad2c:	4d62      	ldr	r5, [pc, #392]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000ad2e:	2b00      	cmp	r3, #0
9000ad30:	f000 811a 	beq.w	9000af68 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
9000ad34:	682b      	ldr	r3, [r5, #0]
9000ad36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000ad3a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000ad3c:	f7fb ff64 	bl	90006c08 <HAL_GetTick>
9000ad40:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000ad42:	e005      	b.n	9000ad50 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000ad44:	f7fb ff60 	bl	90006c08 <HAL_GetTick>
9000ad48:	1b80      	subs	r0, r0, r6
9000ad4a:	2802      	cmp	r0, #2
9000ad4c:	f200 80e3 	bhi.w	9000af16 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000ad50:	682b      	ldr	r3, [r5, #0]
9000ad52:	049f      	lsls	r7, r3, #18
9000ad54:	d5f6      	bpl.n	9000ad44 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000ad56:	6823      	ldr	r3, [r4, #0]
9000ad58:	0759      	lsls	r1, r3, #29
9000ad5a:	f100 80a3 	bmi.w	9000aea4 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000ad5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000ad60:	b1d0      	cbz	r0, 9000ad98 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000ad62:	4d55      	ldr	r5, [pc, #340]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
9000ad64:	692b      	ldr	r3, [r5, #16]
9000ad66:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000ad6a:	2b18      	cmp	r3, #24
9000ad6c:	f000 81ae 	beq.w	9000b0cc <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
9000ad70:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000ad72:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
9000ad74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000ad78:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000ad7a:	f000 8142 	beq.w	9000b002 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
9000ad7e:	f7fb ff43 	bl	90006c08 <HAL_GetTick>
9000ad82:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000ad84:	e005      	b.n	9000ad92 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000ad86:	f7fb ff3f 	bl	90006c08 <HAL_GetTick>
9000ad8a:	1b00      	subs	r0, r0, r4
9000ad8c:	2802      	cmp	r0, #2
9000ad8e:	f200 80c2 	bhi.w	9000af16 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000ad92:	682b      	ldr	r3, [r5, #0]
9000ad94:	019b      	lsls	r3, r3, #6
9000ad96:	d4f6      	bmi.n	9000ad86 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
9000ad98:	2000      	movs	r0, #0
}
9000ad9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000ad9c:	4a46      	ldr	r2, [pc, #280]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
9000ad9e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000ada0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000ada2:	f013 0338 	ands.w	r3, r3, #56	; 0x38
9000ada6:	d12d      	bne.n	9000ae04 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000ada8:	4b43      	ldr	r3, [pc, #268]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
9000adaa:	68e2      	ldr	r2, [r4, #12]
9000adac:	681b      	ldr	r3, [r3, #0]
9000adae:	0759      	lsls	r1, r3, #29
9000adb0:	d501      	bpl.n	9000adb6 <HAL_RCC_OscConfig+0x1a2>
9000adb2:	2a00      	cmp	r2, #0
9000adb4:	d04e      	beq.n	9000ae54 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000adb6:	4d40      	ldr	r5, [pc, #256]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
9000adb8:	682b      	ldr	r3, [r5, #0]
9000adba:	f023 0319 	bic.w	r3, r3, #25
9000adbe:	4313      	orrs	r3, r2
9000adc0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000adc2:	f7fb ff21 	bl	90006c08 <HAL_GetTick>
9000adc6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000adc8:	e005      	b.n	9000add6 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000adca:	f7fb ff1d 	bl	90006c08 <HAL_GetTick>
9000adce:	1b80      	subs	r0, r0, r6
9000add0:	2802      	cmp	r0, #2
9000add2:	f200 80a0 	bhi.w	9000af16 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000add6:	682b      	ldr	r3, [r5, #0]
9000add8:	075b      	lsls	r3, r3, #29
9000adda:	d5f6      	bpl.n	9000adca <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000addc:	f7fb ff1a 	bl	90006c14 <HAL_GetREVID>
9000ade0:	f241 0303 	movw	r3, #4099	; 0x1003
9000ade4:	4298      	cmp	r0, r3
9000ade6:	f200 80f7 	bhi.w	9000afd8 <HAL_RCC_OscConfig+0x3c4>
9000adea:	6922      	ldr	r2, [r4, #16]
9000adec:	686b      	ldr	r3, [r5, #4]
9000adee:	2a40      	cmp	r2, #64	; 0x40
9000adf0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000adf4:	bf0c      	ite	eq
9000adf6:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
9000adfa:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
9000adfe:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000ae00:	6823      	ldr	r3, [r4, #0]
9000ae02:	e741      	b.n	9000ac88 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000ae04:	2b18      	cmp	r3, #24
9000ae06:	f000 80e3 	beq.w	9000afd0 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000ae0a:	4d2b      	ldr	r5, [pc, #172]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000ae0c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000ae0e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000ae10:	2a00      	cmp	r2, #0
9000ae12:	f000 80cc 	beq.w	9000afae <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000ae16:	f023 0319 	bic.w	r3, r3, #25
9000ae1a:	4313      	orrs	r3, r2
9000ae1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000ae1e:	f7fb fef3 	bl	90006c08 <HAL_GetTick>
9000ae22:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000ae24:	e004      	b.n	9000ae30 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000ae26:	f7fb feef 	bl	90006c08 <HAL_GetTick>
9000ae2a:	1b80      	subs	r0, r0, r6
9000ae2c:	2802      	cmp	r0, #2
9000ae2e:	d872      	bhi.n	9000af16 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000ae30:	682b      	ldr	r3, [r5, #0]
9000ae32:	075f      	lsls	r7, r3, #29
9000ae34:	d5f7      	bpl.n	9000ae26 <HAL_RCC_OscConfig+0x212>
9000ae36:	e7d1      	b.n	9000addc <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000ae38:	f001 0103 	and.w	r1, r1, #3
9000ae3c:	2902      	cmp	r1, #2
9000ae3e:	f47f aefc 	bne.w	9000ac3a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000ae42:	4a1d      	ldr	r2, [pc, #116]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
9000ae44:	6812      	ldr	r2, [r2, #0]
9000ae46:	0392      	lsls	r2, r2, #14
9000ae48:	f57f af1b 	bpl.w	9000ac82 <HAL_RCC_OscConfig+0x6e>
9000ae4c:	6862      	ldr	r2, [r4, #4]
9000ae4e:	2a00      	cmp	r2, #0
9000ae50:	f47f af17 	bne.w	9000ac82 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
9000ae54:	2001      	movs	r0, #1
}
9000ae56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000ae58:	f002 0203 	and.w	r2, r2, #3
9000ae5c:	2a01      	cmp	r2, #1
9000ae5e:	f47f af20 	bne.w	9000aca2 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000ae62:	4b15      	ldr	r3, [pc, #84]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
9000ae64:	681b      	ldr	r3, [r3, #0]
9000ae66:	05da      	lsls	r2, r3, #23
9000ae68:	d502      	bpl.n	9000ae70 <HAL_RCC_OscConfig+0x25c>
9000ae6a:	69e3      	ldr	r3, [r4, #28]
9000ae6c:	2b80      	cmp	r3, #128	; 0x80
9000ae6e:	d1f1      	bne.n	9000ae54 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000ae70:	f7fb fed0 	bl	90006c14 <HAL_GetREVID>
9000ae74:	f241 0303 	movw	r3, #4099	; 0x1003
9000ae78:	4298      	cmp	r0, r3
9000ae7a:	f200 80b8 	bhi.w	9000afee <HAL_RCC_OscConfig+0x3da>
9000ae7e:	6a22      	ldr	r2, [r4, #32]
9000ae80:	2a20      	cmp	r2, #32
9000ae82:	f000 81a7 	beq.w	9000b1d4 <HAL_RCC_OscConfig+0x5c0>
9000ae86:	490c      	ldr	r1, [pc, #48]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
9000ae88:	684b      	ldr	r3, [r1, #4]
9000ae8a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000ae8e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
9000ae92:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000ae94:	6823      	ldr	r3, [r4, #0]
9000ae96:	e72d      	b.n	9000acf4 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000ae98:	4a07      	ldr	r2, [pc, #28]	; (9000aeb8 <HAL_RCC_OscConfig+0x2a4>)
9000ae9a:	6813      	ldr	r3, [r2, #0]
9000ae9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000aea0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000aea2:	e6df      	b.n	9000ac64 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
9000aea4:	4d05      	ldr	r5, [pc, #20]	; (9000aebc <HAL_RCC_OscConfig+0x2a8>)
9000aea6:	682b      	ldr	r3, [r5, #0]
9000aea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000aeac:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
9000aeae:	f7fb feab 	bl	90006c08 <HAL_GetTick>
9000aeb2:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000aeb4:	e009      	b.n	9000aeca <HAL_RCC_OscConfig+0x2b6>
9000aeb6:	bf00      	nop
9000aeb8:	58024400 	.word	0x58024400
9000aebc:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000aec0:	f7fb fea2 	bl	90006c08 <HAL_GetTick>
9000aec4:	1b80      	subs	r0, r0, r6
9000aec6:	2864      	cmp	r0, #100	; 0x64
9000aec8:	d825      	bhi.n	9000af16 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000aeca:	682b      	ldr	r3, [r5, #0]
9000aecc:	05da      	lsls	r2, r3, #23
9000aece:	d5f7      	bpl.n	9000aec0 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000aed0:	68a3      	ldr	r3, [r4, #8]
9000aed2:	2b01      	cmp	r3, #1
9000aed4:	f000 8178 	beq.w	9000b1c8 <HAL_RCC_OscConfig+0x5b4>
9000aed8:	2b00      	cmp	r3, #0
9000aeda:	f000 8153 	beq.w	9000b184 <HAL_RCC_OscConfig+0x570>
9000aede:	2b05      	cmp	r3, #5
9000aee0:	4ba5      	ldr	r3, [pc, #660]	; (9000b178 <HAL_RCC_OscConfig+0x564>)
9000aee2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000aee4:	f000 817f 	beq.w	9000b1e6 <HAL_RCC_OscConfig+0x5d2>
9000aee8:	f022 0201 	bic.w	r2, r2, #1
9000aeec:	671a      	str	r2, [r3, #112]	; 0x70
9000aeee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000aef0:	f022 0204 	bic.w	r2, r2, #4
9000aef4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
9000aef6:	f7fb fe87 	bl	90006c08 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000aefa:	4e9f      	ldr	r6, [pc, #636]	; (9000b178 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000aefc:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
9000af00:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000af02:	e004      	b.n	9000af0e <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000af04:	f7fb fe80 	bl	90006c08 <HAL_GetTick>
9000af08:	1b40      	subs	r0, r0, r5
9000af0a:	42b8      	cmp	r0, r7
9000af0c:	d803      	bhi.n	9000af16 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000af0e:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000af10:	079b      	lsls	r3, r3, #30
9000af12:	d5f7      	bpl.n	9000af04 <HAL_RCC_OscConfig+0x2f0>
9000af14:	e723      	b.n	9000ad5e <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
9000af16:	2003      	movs	r0, #3
}
9000af18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000af1a:	4d97      	ldr	r5, [pc, #604]	; (9000b178 <HAL_RCC_OscConfig+0x564>)
9000af1c:	682b      	ldr	r3, [r5, #0]
9000af1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000af22:	602b      	str	r3, [r5, #0]
9000af24:	682b      	ldr	r3, [r5, #0]
9000af26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000af2a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000af2c:	f7fb fe6c 	bl	90006c08 <HAL_GetTick>
9000af30:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000af32:	e004      	b.n	9000af3e <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000af34:	f7fb fe68 	bl	90006c08 <HAL_GetTick>
9000af38:	1b80      	subs	r0, r0, r6
9000af3a:	2864      	cmp	r0, #100	; 0x64
9000af3c:	d8eb      	bhi.n	9000af16 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000af3e:	682b      	ldr	r3, [r5, #0]
9000af40:	039f      	lsls	r7, r3, #14
9000af42:	d4f7      	bmi.n	9000af34 <HAL_RCC_OscConfig+0x320>
9000af44:	e69c      	b.n	9000ac80 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
9000af46:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000af48:	f023 0301 	bic.w	r3, r3, #1
9000af4c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000af4e:	f7fb fe5b 	bl	90006c08 <HAL_GetTick>
9000af52:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000af54:	e004      	b.n	9000af60 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000af56:	f7fb fe57 	bl	90006c08 <HAL_GetTick>
9000af5a:	1b80      	subs	r0, r0, r6
9000af5c:	2802      	cmp	r0, #2
9000af5e:	d8da      	bhi.n	9000af16 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000af60:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000af62:	0799      	lsls	r1, r3, #30
9000af64:	d4f7      	bmi.n	9000af56 <HAL_RCC_OscConfig+0x342>
9000af66:	e6dd      	b.n	9000ad24 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
9000af68:	682b      	ldr	r3, [r5, #0]
9000af6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000af6e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000af70:	f7fb fe4a 	bl	90006c08 <HAL_GetTick>
9000af74:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000af76:	e004      	b.n	9000af82 <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000af78:	f7fb fe46 	bl	90006c08 <HAL_GetTick>
9000af7c:	1b80      	subs	r0, r0, r6
9000af7e:	2802      	cmp	r0, #2
9000af80:	d8c9      	bhi.n	9000af16 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000af82:	682b      	ldr	r3, [r5, #0]
9000af84:	0498      	lsls	r0, r3, #18
9000af86:	d4f7      	bmi.n	9000af78 <HAL_RCC_OscConfig+0x364>
9000af88:	e6e5      	b.n	9000ad56 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
9000af8a:	682b      	ldr	r3, [r5, #0]
9000af8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000af90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000af92:	f7fb fe39 	bl	90006c08 <HAL_GetTick>
9000af96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000af98:	e004      	b.n	9000afa4 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000af9a:	f7fb fe35 	bl	90006c08 <HAL_GetTick>
9000af9e:	1b80      	subs	r0, r0, r6
9000afa0:	2802      	cmp	r0, #2
9000afa2:	d8b8      	bhi.n	9000af16 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000afa4:	682b      	ldr	r3, [r5, #0]
9000afa6:	05df      	lsls	r7, r3, #23
9000afa8:	d4f7      	bmi.n	9000af9a <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000afaa:	6823      	ldr	r3, [r4, #0]
9000afac:	e6a2      	b.n	9000acf4 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
9000afae:	f023 0301 	bic.w	r3, r3, #1
9000afb2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000afb4:	f7fb fe28 	bl	90006c08 <HAL_GetTick>
9000afb8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000afba:	e004      	b.n	9000afc6 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000afbc:	f7fb fe24 	bl	90006c08 <HAL_GetTick>
9000afc0:	1b80      	subs	r0, r0, r6
9000afc2:	2802      	cmp	r0, #2
9000afc4:	d8a7      	bhi.n	9000af16 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000afc6:	682b      	ldr	r3, [r5, #0]
9000afc8:	0758      	lsls	r0, r3, #29
9000afca:	d4f7      	bmi.n	9000afbc <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000afcc:	6823      	ldr	r3, [r4, #0]
9000afce:	e65b      	b.n	9000ac88 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000afd0:	0790      	lsls	r0, r2, #30
9000afd2:	f47f af1a 	bne.w	9000ae0a <HAL_RCC_OscConfig+0x1f6>
9000afd6:	e6e7      	b.n	9000ada8 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000afd8:	686b      	ldr	r3, [r5, #4]
9000afda:	6922      	ldr	r2, [r4, #16]
9000afdc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
9000afe0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000afe4:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000afe6:	6823      	ldr	r3, [r4, #0]
9000afe8:	e64e      	b.n	9000ac88 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
9000afea:	2001      	movs	r0, #1
}
9000afec:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000afee:	4a62      	ldr	r2, [pc, #392]	; (9000b178 <HAL_RCC_OscConfig+0x564>)
9000aff0:	6a21      	ldr	r1, [r4, #32]
9000aff2:	68d3      	ldr	r3, [r2, #12]
9000aff4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000aff8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000affc:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000affe:	6823      	ldr	r3, [r4, #0]
9000b000:	e678      	b.n	9000acf4 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
9000b002:	f7fb fe01 	bl	90006c08 <HAL_GetTick>
9000b006:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000b008:	e004      	b.n	9000b014 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000b00a:	f7fb fdfd 	bl	90006c08 <HAL_GetTick>
9000b00e:	1b80      	subs	r0, r0, r6
9000b010:	2802      	cmp	r0, #2
9000b012:	d880      	bhi.n	9000af16 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000b014:	682b      	ldr	r3, [r5, #0]
9000b016:	0199      	lsls	r1, r3, #6
9000b018:	d4f7      	bmi.n	9000b00a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000b01a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
9000b01c:	4b57      	ldr	r3, [pc, #348]	; (9000b17c <HAL_RCC_OscConfig+0x568>)
9000b01e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000b020:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000b022:	4957      	ldr	r1, [pc, #348]	; (9000b180 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000b024:	4e54      	ldr	r6, [pc, #336]	; (9000b178 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000b026:	4313      	orrs	r3, r2
9000b028:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b02a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
9000b02e:	62ab      	str	r3, [r5, #40]	; 0x28
9000b030:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
9000b034:	3b01      	subs	r3, #1
9000b036:	3a01      	subs	r2, #1
9000b038:	025b      	lsls	r3, r3, #9
9000b03a:	0412      	lsls	r2, r2, #16
9000b03c:	b29b      	uxth	r3, r3
9000b03e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000b042:	4313      	orrs	r3, r2
9000b044:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000b046:	3a01      	subs	r2, #1
9000b048:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000b04c:	4313      	orrs	r3, r2
9000b04e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000b050:	3a01      	subs	r2, #1
9000b052:	0612      	lsls	r2, r2, #24
9000b054:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000b058:	4313      	orrs	r3, r2
9000b05a:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
9000b05c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b05e:	f023 0301 	bic.w	r3, r3, #1
9000b062:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000b064:	6b6a      	ldr	r2, [r5, #52]	; 0x34
9000b066:	6ca3      	ldr	r3, [r4, #72]	; 0x48
9000b068:	4011      	ands	r1, r2
9000b06a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000b06e:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000b070:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b072:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000b074:	f023 030c 	bic.w	r3, r3, #12
9000b078:	4313      	orrs	r3, r2
9000b07a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000b07c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b07e:	6c62      	ldr	r2, [r4, #68]	; 0x44
9000b080:	f023 0302 	bic.w	r3, r3, #2
9000b084:	4313      	orrs	r3, r2
9000b086:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000b088:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b08a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000b08e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b090:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000b096:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000b098:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b09a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000b09e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000b0a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000b0a2:	f043 0301 	orr.w	r3, r3, #1
9000b0a6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
9000b0a8:	682b      	ldr	r3, [r5, #0]
9000b0aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000b0ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000b0b0:	f7fb fdaa 	bl	90006c08 <HAL_GetTick>
9000b0b4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000b0b6:	e005      	b.n	9000b0c4 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000b0b8:	f7fb fda6 	bl	90006c08 <HAL_GetTick>
9000b0bc:	1b00      	subs	r0, r0, r4
9000b0be:	2802      	cmp	r0, #2
9000b0c0:	f63f af29 	bhi.w	9000af16 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000b0c4:	6833      	ldr	r3, [r6, #0]
9000b0c6:	019a      	lsls	r2, r3, #6
9000b0c8:	d5f6      	bpl.n	9000b0b8 <HAL_RCC_OscConfig+0x4a4>
9000b0ca:	e665      	b.n	9000ad98 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000b0cc:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000b0ce:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000b0d0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000b0d2:	f43f ae62 	beq.w	9000ad9a <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000b0d6:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000b0da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000b0dc:	428b      	cmp	r3, r1
9000b0de:	f47f aeb9 	bne.w	9000ae54 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000b0e2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000b0e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b0e8:	429a      	cmp	r2, r3
9000b0ea:	f47f aeb3 	bne.w	9000ae54 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000b0ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000b0f0:	f3c6 0208 	ubfx	r2, r6, #0, #9
9000b0f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000b0f6:	429a      	cmp	r2, r3
9000b0f8:	f47f aeac 	bne.w	9000ae54 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000b0fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000b0fe:	f3c6 2246 	ubfx	r2, r6, #9, #7
9000b102:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000b104:	429a      	cmp	r2, r3
9000b106:	f47f aea5 	bne.w	9000ae54 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000b10a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000b10c:	f3c6 4206 	ubfx	r2, r6, #16, #7
9000b110:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000b112:	429a      	cmp	r2, r3
9000b114:	f47f ae9e 	bne.w	9000ae54 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000b118:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000b11a:	f3c6 6606 	ubfx	r6, r6, #24, #7
9000b11e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000b120:	429e      	cmp	r6, r3
9000b122:	f47f ae97 	bne.w	9000ae54 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000b126:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000b128:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000b12a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000b12e:	429a      	cmp	r2, r3
9000b130:	f43f ae32 	beq.w	9000ad98 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
9000b134:	4a10      	ldr	r2, [pc, #64]	; (9000b178 <HAL_RCC_OscConfig+0x564>)
9000b136:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000b138:	f023 0301 	bic.w	r3, r3, #1
9000b13c:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
9000b13e:	f7fb fd63 	bl	90006c08 <HAL_GetTick>
9000b142:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000b144:	f7fb fd60 	bl	90006c08 <HAL_GetTick>
9000b148:	42a8      	cmp	r0, r5
9000b14a:	d0fb      	beq.n	9000b144 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000b14c:	4a0a      	ldr	r2, [pc, #40]	; (9000b178 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
9000b14e:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000b150:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000b152:	4b0b      	ldr	r3, [pc, #44]	; (9000b180 <HAL_RCC_OscConfig+0x56c>)
9000b154:	6b54      	ldr	r4, [r2, #52]	; 0x34
9000b156:	4023      	ands	r3, r4
9000b158:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000b15c:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000b15e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000b160:	f043 0301 	orr.w	r3, r3, #1
9000b164:	62d3      	str	r3, [r2, #44]	; 0x2c
}
9000b166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000b168:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
9000b16c:	601a      	str	r2, [r3, #0]
9000b16e:	681a      	ldr	r2, [r3, #0]
9000b170:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000b174:	601a      	str	r2, [r3, #0]
9000b176:	e575      	b.n	9000ac64 <HAL_RCC_OscConfig+0x50>
9000b178:	58024400 	.word	0x58024400
9000b17c:	fffffc0c 	.word	0xfffffc0c
9000b180:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000b184:	4d1c      	ldr	r5, [pc, #112]	; (9000b1f8 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b186:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000b18a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000b18c:	f023 0301 	bic.w	r3, r3, #1
9000b190:	672b      	str	r3, [r5, #112]	; 0x70
9000b192:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000b194:	f023 0304 	bic.w	r3, r3, #4
9000b198:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000b19a:	f7fb fd35 	bl	90006c08 <HAL_GetTick>
9000b19e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000b1a0:	e005      	b.n	9000b1ae <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000b1a2:	f7fb fd31 	bl	90006c08 <HAL_GetTick>
9000b1a6:	1b80      	subs	r0, r0, r6
9000b1a8:	42b8      	cmp	r0, r7
9000b1aa:	f63f aeb4 	bhi.w	9000af16 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000b1ae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000b1b0:	0798      	lsls	r0, r3, #30
9000b1b2:	d4f6      	bmi.n	9000b1a2 <HAL_RCC_OscConfig+0x58e>
9000b1b4:	e5d3      	b.n	9000ad5e <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000b1b6:	68eb      	ldr	r3, [r5, #12]
9000b1b8:	6a22      	ldr	r2, [r4, #32]
9000b1ba:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000b1be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000b1c2:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000b1c4:	6823      	ldr	r3, [r4, #0]
9000b1c6:	e595      	b.n	9000acf4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000b1c8:	4a0b      	ldr	r2, [pc, #44]	; (9000b1f8 <HAL_RCC_OscConfig+0x5e4>)
9000b1ca:	6f13      	ldr	r3, [r2, #112]	; 0x70
9000b1cc:	f043 0301 	orr.w	r3, r3, #1
9000b1d0:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000b1d2:	e690      	b.n	9000aef6 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000b1d4:	4a08      	ldr	r2, [pc, #32]	; (9000b1f8 <HAL_RCC_OscConfig+0x5e4>)
9000b1d6:	6853      	ldr	r3, [r2, #4]
9000b1d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000b1dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000b1e0:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000b1e2:	6823      	ldr	r3, [r4, #0]
9000b1e4:	e586      	b.n	9000acf4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000b1e6:	f042 0204 	orr.w	r2, r2, #4
9000b1ea:	671a      	str	r2, [r3, #112]	; 0x70
9000b1ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000b1ee:	f042 0201 	orr.w	r2, r2, #1
9000b1f2:	671a      	str	r2, [r3, #112]	; 0x70
9000b1f4:	e67f      	b.n	9000aef6 <HAL_RCC_OscConfig+0x2e2>
9000b1f6:	bf00      	nop
9000b1f8:	58024400 	.word	0x58024400

9000b1fc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b1fc:	4a47      	ldr	r2, [pc, #284]	; (9000b31c <HAL_RCC_GetSysClockFreq+0x120>)
9000b1fe:	6913      	ldr	r3, [r2, #16]
9000b200:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b204:	2b10      	cmp	r3, #16
9000b206:	d004      	beq.n	9000b212 <HAL_RCC_GetSysClockFreq+0x16>
9000b208:	2b18      	cmp	r3, #24
9000b20a:	d00d      	beq.n	9000b228 <HAL_RCC_GetSysClockFreq+0x2c>
9000b20c:	b11b      	cbz	r3, 9000b216 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000b20e:	4844      	ldr	r0, [pc, #272]	; (9000b320 <HAL_RCC_GetSysClockFreq+0x124>)
9000b210:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b212:	4844      	ldr	r0, [pc, #272]	; (9000b324 <HAL_RCC_GetSysClockFreq+0x128>)
9000b214:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b216:	6813      	ldr	r3, [r2, #0]
9000b218:	0699      	lsls	r1, r3, #26
9000b21a:	d54a      	bpl.n	9000b2b2 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b21c:	6813      	ldr	r3, [r2, #0]
9000b21e:	4842      	ldr	r0, [pc, #264]	; (9000b328 <HAL_RCC_GetSysClockFreq+0x12c>)
9000b220:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000b224:	40d8      	lsrs	r0, r3
9000b226:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000b228:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
9000b22a:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000b22c:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000b22e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
9000b230:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000b234:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000b236:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000b23a:	d038      	beq.n	9000b2ae <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000b23c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000b240:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000b244:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000b248:	fb05 f101 	mul.w	r1, r5, r1
9000b24c:	2b01      	cmp	r3, #1
9000b24e:	ee07 1a90 	vmov	s15, r1
9000b252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
9000b256:	d002      	beq.n	9000b25e <HAL_RCC_GetSysClockFreq+0x62>
9000b258:	2b02      	cmp	r3, #2
9000b25a:	d02c      	beq.n	9000b2b6 <HAL_RCC_GetSysClockFreq+0xba>
9000b25c:	b393      	cbz	r3, 9000b2c4 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b25e:	ee07 0a90 	vmov	s15, r0
9000b262:	ed9f 5a32 	vldr	s10, [pc, #200]	; 9000b32c <HAL_RCC_GetSysClockFreq+0x130>
9000b266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b26a:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000b26c:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000b270:	eddf 5a2f 	vldr	s11, [pc, #188]	; 9000b330 <HAL_RCC_GetSysClockFreq+0x134>
9000b274:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000b278:	ee07 3a90 	vmov	s15, r3
9000b27c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000b280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b284:	eee7 7a25 	vfma.f32	s15, s14, s11
9000b288:	ee77 7a86 	vadd.f32	s15, s15, s12
9000b28c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000b290:	4b22      	ldr	r3, [pc, #136]	; (9000b31c <HAL_RCC_GetSysClockFreq+0x120>)
9000b292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000b294:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000b298:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000b29a:	ee07 3a90 	vmov	s15, r3
9000b29e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000b2a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000b2a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000b2aa:	ee17 0a90 	vmov	r0, s15
}
9000b2ae:	bc30      	pop	{r4, r5}
9000b2b0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000b2b2:	481d      	ldr	r0, [pc, #116]	; (9000b328 <HAL_RCC_GetSysClockFreq+0x12c>)
}
9000b2b4:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b2b6:	ee07 0a90 	vmov	s15, r0
9000b2ba:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 9000b334 <HAL_RCC_GetSysClockFreq+0x138>
9000b2be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b2c2:	e7d2      	b.n	9000b26a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b2c4:	6813      	ldr	r3, [r2, #0]
9000b2c6:	069b      	lsls	r3, r3, #26
9000b2c8:	d520      	bpl.n	9000b30c <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b2ca:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b2cc:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b2d0:	4915      	ldr	r1, [pc, #84]	; (9000b328 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b2d2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000b2d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b2d8:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b2dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b2e0:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000b330 <HAL_RCC_GetSysClockFreq+0x134>
9000b2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b2e8:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b2ea:	ee06 3a90 	vmov	s13, r3
9000b2ee:	ee06 1a10 	vmov	s12, r1
9000b2f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000b2f6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000b2fa:	eee7 6a05 	vfma.f32	s13, s14, s10
9000b2fe:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000b302:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000b306:	ee66 6a87 	vmul.f32	s13, s13, s14
9000b30a:	e7c1      	b.n	9000b290 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000b30c:	ee07 0a90 	vmov	s15, r0
9000b310:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000b338 <HAL_RCC_GetSysClockFreq+0x13c>
9000b314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000b318:	e7a7      	b.n	9000b26a <HAL_RCC_GetSysClockFreq+0x6e>
9000b31a:	bf00      	nop
9000b31c:	58024400 	.word	0x58024400
9000b320:	003d0900 	.word	0x003d0900
9000b324:	017d7840 	.word	0x017d7840
9000b328:	03d09000 	.word	0x03d09000
9000b32c:	4a742400 	.word	0x4a742400
9000b330:	39000000 	.word	0x39000000
9000b334:	4bbebc20 	.word	0x4bbebc20
9000b338:	4c742400 	.word	0x4c742400

9000b33c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000b33c:	2800      	cmp	r0, #0
9000b33e:	f000 810c 	beq.w	9000b55a <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000b342:	4a8c      	ldr	r2, [pc, #560]	; (9000b574 <HAL_RCC_ClockConfig+0x238>)
9000b344:	6813      	ldr	r3, [r2, #0]
9000b346:	f003 030f 	and.w	r3, r3, #15
9000b34a:	428b      	cmp	r3, r1
{
9000b34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000b350:	4604      	mov	r4, r0
9000b352:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000b354:	d20c      	bcs.n	9000b370 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000b356:	6813      	ldr	r3, [r2, #0]
9000b358:	f023 030f 	bic.w	r3, r3, #15
9000b35c:	430b      	orrs	r3, r1
9000b35e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000b360:	6813      	ldr	r3, [r2, #0]
9000b362:	f003 030f 	and.w	r3, r3, #15
9000b366:	428b      	cmp	r3, r1
9000b368:	d002      	beq.n	9000b370 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000b36a:	2001      	movs	r0, #1
}
9000b36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000b370:	6823      	ldr	r3, [r4, #0]
9000b372:	075f      	lsls	r7, r3, #29
9000b374:	d50b      	bpl.n	9000b38e <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000b376:	4980      	ldr	r1, [pc, #512]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
9000b378:	6920      	ldr	r0, [r4, #16]
9000b37a:	698a      	ldr	r2, [r1, #24]
9000b37c:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b380:	4290      	cmp	r0, r2
9000b382:	d904      	bls.n	9000b38e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000b384:	698a      	ldr	r2, [r1, #24]
9000b386:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b38a:	4302      	orrs	r2, r0
9000b38c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000b38e:	071e      	lsls	r6, r3, #28
9000b390:	d50b      	bpl.n	9000b3aa <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000b392:	4979      	ldr	r1, [pc, #484]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
9000b394:	6960      	ldr	r0, [r4, #20]
9000b396:	69ca      	ldr	r2, [r1, #28]
9000b398:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b39c:	4290      	cmp	r0, r2
9000b39e:	d904      	bls.n	9000b3aa <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000b3a0:	69ca      	ldr	r2, [r1, #28]
9000b3a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b3a6:	4302      	orrs	r2, r0
9000b3a8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000b3aa:	06d8      	lsls	r0, r3, #27
9000b3ac:	d50b      	bpl.n	9000b3c6 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000b3ae:	4972      	ldr	r1, [pc, #456]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
9000b3b0:	69a0      	ldr	r0, [r4, #24]
9000b3b2:	69ca      	ldr	r2, [r1, #28]
9000b3b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000b3b8:	4290      	cmp	r0, r2
9000b3ba:	d904      	bls.n	9000b3c6 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000b3bc:	69ca      	ldr	r2, [r1, #28]
9000b3be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000b3c2:	4302      	orrs	r2, r0
9000b3c4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000b3c6:	0699      	lsls	r1, r3, #26
9000b3c8:	d50b      	bpl.n	9000b3e2 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000b3ca:	496b      	ldr	r1, [pc, #428]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
9000b3cc:	69e0      	ldr	r0, [r4, #28]
9000b3ce:	6a0a      	ldr	r2, [r1, #32]
9000b3d0:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b3d4:	4290      	cmp	r0, r2
9000b3d6:	d904      	bls.n	9000b3e2 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000b3d8:	6a0a      	ldr	r2, [r1, #32]
9000b3da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b3de:	4302      	orrs	r2, r0
9000b3e0:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000b3e2:	079a      	lsls	r2, r3, #30
9000b3e4:	f140 80ab 	bpl.w	9000b53e <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000b3e8:	4863      	ldr	r0, [pc, #396]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
9000b3ea:	68e1      	ldr	r1, [r4, #12]
9000b3ec:	6982      	ldr	r2, [r0, #24]
9000b3ee:	f002 020f 	and.w	r2, r2, #15
9000b3f2:	4291      	cmp	r1, r2
9000b3f4:	d904      	bls.n	9000b400 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000b3f6:	6982      	ldr	r2, [r0, #24]
9000b3f8:	f022 020f 	bic.w	r2, r2, #15
9000b3fc:	430a      	orrs	r2, r1
9000b3fe:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000b400:	07d8      	lsls	r0, r3, #31
9000b402:	d530      	bpl.n	9000b466 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000b404:	4a5c      	ldr	r2, [pc, #368]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
9000b406:	68a1      	ldr	r1, [r4, #8]
9000b408:	6993      	ldr	r3, [r2, #24]
9000b40a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000b40e:	430b      	orrs	r3, r1
9000b410:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000b412:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000b414:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000b416:	2902      	cmp	r1, #2
9000b418:	f000 80a1 	beq.w	9000b55e <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000b41c:	2903      	cmp	r1, #3
9000b41e:	f000 8098 	beq.w	9000b552 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000b422:	2901      	cmp	r1, #1
9000b424:	f000 80a1 	beq.w	9000b56a <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000b428:	0758      	lsls	r0, r3, #29
9000b42a:	d59e      	bpl.n	9000b36a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000b42c:	4e52      	ldr	r6, [pc, #328]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000b42e:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000b432:	6933      	ldr	r3, [r6, #16]
9000b434:	f023 0307 	bic.w	r3, r3, #7
9000b438:	430b      	orrs	r3, r1
9000b43a:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000b43c:	f7fb fbe4 	bl	90006c08 <HAL_GetTick>
9000b440:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000b442:	e005      	b.n	9000b450 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000b444:	f7fb fbe0 	bl	90006c08 <HAL_GetTick>
9000b448:	1bc0      	subs	r0, r0, r7
9000b44a:	4540      	cmp	r0, r8
9000b44c:	f200 808b 	bhi.w	9000b566 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000b450:	6933      	ldr	r3, [r6, #16]
9000b452:	6862      	ldr	r2, [r4, #4]
9000b454:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b458:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000b45c:	d1f2      	bne.n	9000b444 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000b45e:	6823      	ldr	r3, [r4, #0]
9000b460:	0799      	lsls	r1, r3, #30
9000b462:	d506      	bpl.n	9000b472 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000b464:	68e1      	ldr	r1, [r4, #12]
9000b466:	4844      	ldr	r0, [pc, #272]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
9000b468:	6982      	ldr	r2, [r0, #24]
9000b46a:	f002 020f 	and.w	r2, r2, #15
9000b46e:	428a      	cmp	r2, r1
9000b470:	d869      	bhi.n	9000b546 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000b472:	4940      	ldr	r1, [pc, #256]	; (9000b574 <HAL_RCC_ClockConfig+0x238>)
9000b474:	680a      	ldr	r2, [r1, #0]
9000b476:	f002 020f 	and.w	r2, r2, #15
9000b47a:	42aa      	cmp	r2, r5
9000b47c:	d90a      	bls.n	9000b494 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000b47e:	680a      	ldr	r2, [r1, #0]
9000b480:	f022 020f 	bic.w	r2, r2, #15
9000b484:	432a      	orrs	r2, r5
9000b486:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000b488:	680a      	ldr	r2, [r1, #0]
9000b48a:	f002 020f 	and.w	r2, r2, #15
9000b48e:	42aa      	cmp	r2, r5
9000b490:	f47f af6b 	bne.w	9000b36a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000b494:	075a      	lsls	r2, r3, #29
9000b496:	d50b      	bpl.n	9000b4b0 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000b498:	4937      	ldr	r1, [pc, #220]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
9000b49a:	6920      	ldr	r0, [r4, #16]
9000b49c:	698a      	ldr	r2, [r1, #24]
9000b49e:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b4a2:	4290      	cmp	r0, r2
9000b4a4:	d204      	bcs.n	9000b4b0 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000b4a6:	698a      	ldr	r2, [r1, #24]
9000b4a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b4ac:	4302      	orrs	r2, r0
9000b4ae:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000b4b0:	071f      	lsls	r7, r3, #28
9000b4b2:	d50b      	bpl.n	9000b4cc <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000b4b4:	4930      	ldr	r1, [pc, #192]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
9000b4b6:	6960      	ldr	r0, [r4, #20]
9000b4b8:	69ca      	ldr	r2, [r1, #28]
9000b4ba:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b4be:	4290      	cmp	r0, r2
9000b4c0:	d204      	bcs.n	9000b4cc <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000b4c2:	69ca      	ldr	r2, [r1, #28]
9000b4c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000b4c8:	4302      	orrs	r2, r0
9000b4ca:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000b4cc:	06de      	lsls	r6, r3, #27
9000b4ce:	d50b      	bpl.n	9000b4e8 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000b4d0:	4929      	ldr	r1, [pc, #164]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
9000b4d2:	69a0      	ldr	r0, [r4, #24]
9000b4d4:	69ca      	ldr	r2, [r1, #28]
9000b4d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000b4da:	4290      	cmp	r0, r2
9000b4dc:	d204      	bcs.n	9000b4e8 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000b4de:	69ca      	ldr	r2, [r1, #28]
9000b4e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000b4e4:	4302      	orrs	r2, r0
9000b4e6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000b4e8:	069d      	lsls	r5, r3, #26
9000b4ea:	d50b      	bpl.n	9000b504 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000b4ec:	4a22      	ldr	r2, [pc, #136]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
9000b4ee:	69e1      	ldr	r1, [r4, #28]
9000b4f0:	6a13      	ldr	r3, [r2, #32]
9000b4f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000b4f6:	4299      	cmp	r1, r3
9000b4f8:	d204      	bcs.n	9000b504 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000b4fa:	6a13      	ldr	r3, [r2, #32]
9000b4fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000b500:	430b      	orrs	r3, r1
9000b502:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b504:	f7ff fe7a 	bl	9000b1fc <HAL_RCC_GetSysClockFreq>
9000b508:	4a1b      	ldr	r2, [pc, #108]	; (9000b578 <HAL_RCC_ClockConfig+0x23c>)
9000b50a:	4603      	mov	r3, r0
9000b50c:	481b      	ldr	r0, [pc, #108]	; (9000b57c <HAL_RCC_ClockConfig+0x240>)
9000b50e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b510:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b512:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000b516:	4d1a      	ldr	r5, [pc, #104]	; (9000b580 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b518:	f002 020f 	and.w	r2, r2, #15
9000b51c:	4c19      	ldr	r4, [pc, #100]	; (9000b584 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b51e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b520:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b522:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000b526:	4818      	ldr	r0, [pc, #96]	; (9000b588 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b528:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000b52c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000b52e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000b530:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b532:	40d3      	lsrs	r3, r2
9000b534:	6023      	str	r3, [r4, #0]
}
9000b536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000b53a:	f7f9 ba4b 	b.w	900049d4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000b53e:	07da      	lsls	r2, r3, #31
9000b540:	f53f af60 	bmi.w	9000b404 <HAL_RCC_ClockConfig+0xc8>
9000b544:	e795      	b.n	9000b472 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000b546:	6982      	ldr	r2, [r0, #24]
9000b548:	f022 020f 	bic.w	r2, r2, #15
9000b54c:	4311      	orrs	r1, r2
9000b54e:	6181      	str	r1, [r0, #24]
9000b550:	e78f      	b.n	9000b472 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000b552:	019f      	lsls	r7, r3, #6
9000b554:	f53f af6a 	bmi.w	9000b42c <HAL_RCC_ClockConfig+0xf0>
9000b558:	e707      	b.n	9000b36a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000b55a:	2001      	movs	r0, #1
}
9000b55c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000b55e:	039b      	lsls	r3, r3, #14
9000b560:	f53f af64 	bmi.w	9000b42c <HAL_RCC_ClockConfig+0xf0>
9000b564:	e701      	b.n	9000b36a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000b566:	2003      	movs	r0, #3
9000b568:	e700      	b.n	9000b36c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000b56a:	05de      	lsls	r6, r3, #23
9000b56c:	f53f af5e 	bmi.w	9000b42c <HAL_RCC_ClockConfig+0xf0>
9000b570:	e6fb      	b.n	9000b36a <HAL_RCC_ClockConfig+0x2e>
9000b572:	bf00      	nop
9000b574:	52002000 	.word	0x52002000
9000b578:	58024400 	.word	0x58024400
9000b57c:	900264c0 	.word	0x900264c0
9000b580:	24000054 	.word	0x24000054
9000b584:	24000058 	.word	0x24000058
9000b588:	24000060 	.word	0x24000060

9000b58c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b58c:	4a18      	ldr	r2, [pc, #96]	; (9000b5f0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
9000b58e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b590:	6913      	ldr	r3, [r2, #16]
9000b592:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b596:	2b10      	cmp	r3, #16
9000b598:	d01a      	beq.n	9000b5d0 <HAL_RCC_GetHCLKFreq+0x44>
9000b59a:	2b18      	cmp	r3, #24
9000b59c:	d023      	beq.n	9000b5e6 <HAL_RCC_GetHCLKFreq+0x5a>
9000b59e:	b1cb      	cbz	r3, 9000b5d4 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
9000b5a0:	4814      	ldr	r0, [pc, #80]	; (9000b5f4 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b5a2:	4b13      	ldr	r3, [pc, #76]	; (9000b5f0 <HAL_RCC_GetHCLKFreq+0x64>)
9000b5a4:	4914      	ldr	r1, [pc, #80]	; (9000b5f8 <HAL_RCC_GetHCLKFreq+0x6c>)
9000b5a6:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b5a8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b5aa:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b5ae:	4c13      	ldr	r4, [pc, #76]	; (9000b5fc <HAL_RCC_GetHCLKFreq+0x70>)
9000b5b0:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000b5b4:	4d12      	ldr	r5, [pc, #72]	; (9000b600 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b5b6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b5b8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b5ba:	f002 021f 	and.w	r2, r2, #31
9000b5be:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b5c2:	f003 001f 	and.w	r0, r3, #31
9000b5c6:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
9000b5ca:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b5cc:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
9000b5ce:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b5d0:	480c      	ldr	r0, [pc, #48]	; (9000b604 <HAL_RCC_GetHCLKFreq+0x78>)
9000b5d2:	e7e6      	b.n	9000b5a2 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b5d4:	6813      	ldr	r3, [r2, #0]
9000b5d6:	069b      	lsls	r3, r3, #26
9000b5d8:	d508      	bpl.n	9000b5ec <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b5da:	6812      	ldr	r2, [r2, #0]
9000b5dc:	480a      	ldr	r0, [pc, #40]	; (9000b608 <HAL_RCC_GetHCLKFreq+0x7c>)
9000b5de:	f3c2 02c1 	ubfx	r2, r2, #3, #2
9000b5e2:	40d0      	lsrs	r0, r2
9000b5e4:	e7dd      	b.n	9000b5a2 <HAL_RCC_GetHCLKFreq+0x16>
9000b5e6:	f7ff fa7d 	bl	9000aae4 <HAL_RCC_GetSysClockFreq.part.0>
9000b5ea:	e7da      	b.n	9000b5a2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000b5ec:	4806      	ldr	r0, [pc, #24]	; (9000b608 <HAL_RCC_GetHCLKFreq+0x7c>)
9000b5ee:	e7d8      	b.n	9000b5a2 <HAL_RCC_GetHCLKFreq+0x16>
9000b5f0:	58024400 	.word	0x58024400
9000b5f4:	003d0900 	.word	0x003d0900
9000b5f8:	900264c0 	.word	0x900264c0
9000b5fc:	24000058 	.word	0x24000058
9000b600:	24000054 	.word	0x24000054
9000b604:	017d7840 	.word	0x017d7840
9000b608:	03d09000 	.word	0x03d09000

9000b60c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b60c:	4a1c      	ldr	r2, [pc, #112]	; (9000b680 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000b60e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b610:	6913      	ldr	r3, [r2, #16]
9000b612:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b616:	2b10      	cmp	r3, #16
9000b618:	d021      	beq.n	9000b65e <HAL_RCC_GetPCLK1Freq+0x52>
9000b61a:	2b18      	cmp	r3, #24
9000b61c:	d02b      	beq.n	9000b676 <HAL_RCC_GetPCLK1Freq+0x6a>
9000b61e:	b303      	cbz	r3, 9000b662 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000b620:	4818      	ldr	r0, [pc, #96]	; (9000b684 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b622:	4a17      	ldr	r2, [pc, #92]	; (9000b680 <HAL_RCC_GetPCLK1Freq+0x74>)
9000b624:	4918      	ldr	r1, [pc, #96]	; (9000b688 <HAL_RCC_GetPCLK1Freq+0x7c>)
9000b626:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
9000b628:	4d18      	ldr	r5, [pc, #96]	; (9000b68c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b62a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b62e:	4c18      	ldr	r4, [pc, #96]	; (9000b690 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b630:	5ccb      	ldrb	r3, [r1, r3]
9000b632:	f003 031f 	and.w	r3, r3, #31
9000b636:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b63a:	6990      	ldr	r0, [r2, #24]
9000b63c:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
9000b640:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b642:	5c08      	ldrb	r0, [r1, r0]
9000b644:	f000 001f 	and.w	r0, r0, #31
9000b648:	40c3      	lsrs	r3, r0
9000b64a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000b64c:	69d2      	ldr	r2, [r2, #28]
9000b64e:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000b652:	5c88      	ldrb	r0, [r1, r2]
9000b654:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000b658:	fa23 f000 	lsr.w	r0, r3, r0
9000b65c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b65e:	480d      	ldr	r0, [pc, #52]	; (9000b694 <HAL_RCC_GetPCLK1Freq+0x88>)
9000b660:	e7df      	b.n	9000b622 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b662:	6813      	ldr	r3, [r2, #0]
9000b664:	069b      	lsls	r3, r3, #26
9000b666:	d509      	bpl.n	9000b67c <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b668:	6810      	ldr	r0, [r2, #0]
9000b66a:	4b0b      	ldr	r3, [pc, #44]	; (9000b698 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000b66c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
9000b670:	fa23 f000 	lsr.w	r0, r3, r0
9000b674:	e7d5      	b.n	9000b622 <HAL_RCC_GetPCLK1Freq+0x16>
9000b676:	f7ff fa35 	bl	9000aae4 <HAL_RCC_GetSysClockFreq.part.0>
9000b67a:	e7d2      	b.n	9000b622 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000b67c:	4806      	ldr	r0, [pc, #24]	; (9000b698 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000b67e:	e7d0      	b.n	9000b622 <HAL_RCC_GetPCLK1Freq+0x16>
9000b680:	58024400 	.word	0x58024400
9000b684:	003d0900 	.word	0x003d0900
9000b688:	900264c0 	.word	0x900264c0
9000b68c:	24000054 	.word	0x24000054
9000b690:	24000058 	.word	0x24000058
9000b694:	017d7840 	.word	0x017d7840
9000b698:	03d09000 	.word	0x03d09000

9000b69c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b69c:	4a1c      	ldr	r2, [pc, #112]	; (9000b710 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000b69e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b6a0:	6913      	ldr	r3, [r2, #16]
9000b6a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000b6a6:	2b10      	cmp	r3, #16
9000b6a8:	d021      	beq.n	9000b6ee <HAL_RCC_GetPCLK2Freq+0x52>
9000b6aa:	2b18      	cmp	r3, #24
9000b6ac:	d02b      	beq.n	9000b706 <HAL_RCC_GetPCLK2Freq+0x6a>
9000b6ae:	b303      	cbz	r3, 9000b6f2 <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000b6b0:	4818      	ldr	r0, [pc, #96]	; (9000b714 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b6b2:	4a17      	ldr	r2, [pc, #92]	; (9000b710 <HAL_RCC_GetPCLK2Freq+0x74>)
9000b6b4:	4918      	ldr	r1, [pc, #96]	; (9000b718 <HAL_RCC_GetPCLK2Freq+0x7c>)
9000b6b6:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
9000b6b8:	4d18      	ldr	r5, [pc, #96]	; (9000b71c <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b6ba:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b6be:	4c18      	ldr	r4, [pc, #96]	; (9000b720 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000b6c0:	5ccb      	ldrb	r3, [r1, r3]
9000b6c2:	f003 031f 	and.w	r3, r3, #31
9000b6c6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b6ca:	6990      	ldr	r0, [r2, #24]
9000b6cc:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
9000b6d0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000b6d2:	5c08      	ldrb	r0, [r1, r0]
9000b6d4:	f000 001f 	and.w	r0, r0, #31
9000b6d8:	40c3      	lsrs	r3, r0
9000b6da:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000b6dc:	69d2      	ldr	r2, [r2, #28]
9000b6de:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000b6e2:	5c88      	ldrb	r0, [r1, r2]
9000b6e4:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000b6e8:	fa23 f000 	lsr.w	r0, r3, r0
9000b6ec:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000b6ee:	480d      	ldr	r0, [pc, #52]	; (9000b724 <HAL_RCC_GetPCLK2Freq+0x88>)
9000b6f0:	e7df      	b.n	9000b6b2 <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000b6f2:	6813      	ldr	r3, [r2, #0]
9000b6f4:	069b      	lsls	r3, r3, #26
9000b6f6:	d509      	bpl.n	9000b70c <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000b6f8:	6810      	ldr	r0, [r2, #0]
9000b6fa:	4b0b      	ldr	r3, [pc, #44]	; (9000b728 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000b6fc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
9000b700:	fa23 f000 	lsr.w	r0, r3, r0
9000b704:	e7d5      	b.n	9000b6b2 <HAL_RCC_GetPCLK2Freq+0x16>
9000b706:	f7ff f9ed 	bl	9000aae4 <HAL_RCC_GetSysClockFreq.part.0>
9000b70a:	e7d2      	b.n	9000b6b2 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000b70c:	4806      	ldr	r0, [pc, #24]	; (9000b728 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000b70e:	e7d0      	b.n	9000b6b2 <HAL_RCC_GetPCLK2Freq+0x16>
9000b710:	58024400 	.word	0x58024400
9000b714:	003d0900 	.word	0x003d0900
9000b718:	900264c0 	.word	0x900264c0
9000b71c:	24000054 	.word	0x24000054
9000b720:	24000058 	.word	0x24000058
9000b724:	017d7840 	.word	0x017d7840
9000b728:	03d09000 	.word	0x03d09000

9000b72c <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000b72c:	4b13      	ldr	r3, [pc, #76]	; (9000b77c <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000b72e:	223f      	movs	r2, #63	; 0x3f
9000b730:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000b732:	691a      	ldr	r2, [r3, #16]
9000b734:	f002 0207 	and.w	r2, r2, #7
9000b738:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000b73a:	699a      	ldr	r2, [r3, #24]
9000b73c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
9000b740:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000b742:	699a      	ldr	r2, [r3, #24]
9000b744:	f002 020f 	and.w	r2, r2, #15
9000b748:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000b74a:	699a      	ldr	r2, [r3, #24]
9000b74c:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b750:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000b752:	69da      	ldr	r2, [r3, #28]
9000b754:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000b758:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000b75a:	69da      	ldr	r2, [r3, #28]
9000b75c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000b760:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000b762:	6a1b      	ldr	r3, [r3, #32]
{
9000b764:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000b766:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000b76a:	4c05      	ldr	r4, [pc, #20]	; (9000b780 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000b76c:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000b76e:	6823      	ldr	r3, [r4, #0]
}
9000b770:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000b774:	f003 030f 	and.w	r3, r3, #15
9000b778:	600b      	str	r3, [r1, #0]
}
9000b77a:	4770      	bx	lr
9000b77c:	58024400 	.word	0x58024400
9000b780:	52002000 	.word	0x52002000

9000b784 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b786:	4c3a      	ldr	r4, [pc, #232]	; (9000b870 <RCCEx_PLL2_Config+0xec>)
9000b788:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b78a:	f003 0303 	and.w	r3, r3, #3
9000b78e:	2b03      	cmp	r3, #3
9000b790:	d067      	beq.n	9000b862 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000b792:	6823      	ldr	r3, [r4, #0]
9000b794:	4606      	mov	r6, r0
9000b796:	460f      	mov	r7, r1
9000b798:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000b79c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b79e:	f7fb fa33 	bl	90006c08 <HAL_GetTick>
9000b7a2:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000b7a4:	e004      	b.n	9000b7b0 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000b7a6:	f7fb fa2f 	bl	90006c08 <HAL_GetTick>
9000b7aa:	1b43      	subs	r3, r0, r5
9000b7ac:	2b02      	cmp	r3, #2
9000b7ae:	d856      	bhi.n	9000b85e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000b7b0:	6823      	ldr	r3, [r4, #0]
9000b7b2:	011a      	lsls	r2, r3, #4
9000b7b4:	d4f7      	bmi.n	9000b7a6 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000b7b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b7b8:	6832      	ldr	r2, [r6, #0]
9000b7ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000b7be:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000b7c2:	62a3      	str	r3, [r4, #40]	; 0x28
9000b7c4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000b7c8:	3b01      	subs	r3, #1
9000b7ca:	3a01      	subs	r2, #1
9000b7cc:	025b      	lsls	r3, r3, #9
9000b7ce:	0412      	lsls	r2, r2, #16
9000b7d0:	b29b      	uxth	r3, r3
9000b7d2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000b7d6:	4313      	orrs	r3, r2
9000b7d8:	6872      	ldr	r2, [r6, #4]
9000b7da:	3a01      	subs	r2, #1
9000b7dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000b7e0:	4313      	orrs	r3, r2
9000b7e2:	6932      	ldr	r2, [r6, #16]
9000b7e4:	3a01      	subs	r2, #1
9000b7e6:	0612      	lsls	r2, r2, #24
9000b7e8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000b7ec:	4313      	orrs	r3, r2
9000b7ee:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000b7f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b7f2:	6972      	ldr	r2, [r6, #20]
9000b7f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000b7f8:	4313      	orrs	r3, r2
9000b7fa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000b7fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b7fe:	69b3      	ldr	r3, [r6, #24]
9000b800:	f022 0220 	bic.w	r2, r2, #32
9000b804:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000b806:	4b1b      	ldr	r3, [pc, #108]	; (9000b874 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000b808:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000b80a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b80c:	f022 0210 	bic.w	r2, r2, #16
9000b810:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000b812:	6be1      	ldr	r1, [r4, #60]	; 0x3c
9000b814:	69f2      	ldr	r2, [r6, #28]
9000b816:	400b      	ands	r3, r1
9000b818:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000b81c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000b81e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b820:	f043 0310 	orr.w	r3, r3, #16
9000b824:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000b826:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000b828:	b1ef      	cbz	r7, 9000b866 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000b82a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000b82c:	bf0c      	ite	eq
9000b82e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000b832:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
9000b836:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000b838:	4c0d      	ldr	r4, [pc, #52]	; (9000b870 <RCCEx_PLL2_Config+0xec>)
9000b83a:	6823      	ldr	r3, [r4, #0]
9000b83c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000b840:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b842:	f7fb f9e1 	bl	90006c08 <HAL_GetTick>
9000b846:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000b848:	e004      	b.n	9000b854 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000b84a:	f7fb f9dd 	bl	90006c08 <HAL_GetTick>
9000b84e:	1b40      	subs	r0, r0, r5
9000b850:	2802      	cmp	r0, #2
9000b852:	d804      	bhi.n	9000b85e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000b854:	6823      	ldr	r3, [r4, #0]
9000b856:	011b      	lsls	r3, r3, #4
9000b858:	d5f7      	bpl.n	9000b84a <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
9000b85a:	2000      	movs	r0, #0
}
9000b85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000b85e:	2003      	movs	r0, #3
}
9000b860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000b862:	2001      	movs	r0, #1
}
9000b864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000b866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000b86a:	62e3      	str	r3, [r4, #44]	; 0x2c
9000b86c:	e7e4      	b.n	9000b838 <RCCEx_PLL2_Config+0xb4>
9000b86e:	bf00      	nop
9000b870:	58024400 	.word	0x58024400
9000b874:	ffff0007 	.word	0xffff0007

9000b878 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000b87a:	4c3a      	ldr	r4, [pc, #232]	; (9000b964 <RCCEx_PLL3_Config+0xec>)
9000b87c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b87e:	f003 0303 	and.w	r3, r3, #3
9000b882:	2b03      	cmp	r3, #3
9000b884:	d067      	beq.n	9000b956 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000b886:	6823      	ldr	r3, [r4, #0]
9000b888:	4606      	mov	r6, r0
9000b88a:	460f      	mov	r7, r1
9000b88c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000b890:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b892:	f7fb f9b9 	bl	90006c08 <HAL_GetTick>
9000b896:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000b898:	e004      	b.n	9000b8a4 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000b89a:	f7fb f9b5 	bl	90006c08 <HAL_GetTick>
9000b89e:	1b43      	subs	r3, r0, r5
9000b8a0:	2b02      	cmp	r3, #2
9000b8a2:	d856      	bhi.n	9000b952 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000b8a4:	6823      	ldr	r3, [r4, #0]
9000b8a6:	009a      	lsls	r2, r3, #2
9000b8a8:	d4f7      	bmi.n	9000b89a <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000b8aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b8ac:	6832      	ldr	r2, [r6, #0]
9000b8ae:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
9000b8b2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000b8b6:	62a3      	str	r3, [r4, #40]	; 0x28
9000b8b8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000b8bc:	3b01      	subs	r3, #1
9000b8be:	3a01      	subs	r2, #1
9000b8c0:	025b      	lsls	r3, r3, #9
9000b8c2:	0412      	lsls	r2, r2, #16
9000b8c4:	b29b      	uxth	r3, r3
9000b8c6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000b8ca:	4313      	orrs	r3, r2
9000b8cc:	6872      	ldr	r2, [r6, #4]
9000b8ce:	3a01      	subs	r2, #1
9000b8d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000b8d4:	4313      	orrs	r3, r2
9000b8d6:	6932      	ldr	r2, [r6, #16]
9000b8d8:	3a01      	subs	r2, #1
9000b8da:	0612      	lsls	r2, r2, #24
9000b8dc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000b8e0:	4313      	orrs	r3, r2
9000b8e2:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000b8e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b8e6:	6972      	ldr	r2, [r6, #20]
9000b8e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
9000b8ec:	4313      	orrs	r3, r2
9000b8ee:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000b8f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b8f2:	69b3      	ldr	r3, [r6, #24]
9000b8f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000b8f8:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000b8fa:	4b1b      	ldr	r3, [pc, #108]	; (9000b968 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000b8fc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000b8fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000b904:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000b906:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000b908:	69f2      	ldr	r2, [r6, #28]
9000b90a:	400b      	ands	r3, r1
9000b90c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000b910:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000b912:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000b918:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000b91a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000b91c:	b1ef      	cbz	r7, 9000b95a <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000b91e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000b920:	bf0c      	ite	eq
9000b922:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000b926:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
9000b92a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000b92c:	4c0d      	ldr	r4, [pc, #52]	; (9000b964 <RCCEx_PLL3_Config+0xec>)
9000b92e:	6823      	ldr	r3, [r4, #0]
9000b930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000b934:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b936:	f7fb f967 	bl	90006c08 <HAL_GetTick>
9000b93a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000b93c:	e004      	b.n	9000b948 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000b93e:	f7fb f963 	bl	90006c08 <HAL_GetTick>
9000b942:	1b40      	subs	r0, r0, r5
9000b944:	2802      	cmp	r0, #2
9000b946:	d804      	bhi.n	9000b952 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000b948:	6823      	ldr	r3, [r4, #0]
9000b94a:	009b      	lsls	r3, r3, #2
9000b94c:	d5f7      	bpl.n	9000b93e <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
9000b94e:	2000      	movs	r0, #0
}
9000b950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000b952:	2003      	movs	r0, #3
}
9000b954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000b956:	2001      	movs	r0, #1
}
9000b958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000b95a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000b95e:	62e3      	str	r3, [r4, #44]	; 0x2c
9000b960:	e7e4      	b.n	9000b92c <RCCEx_PLL3_Config+0xb4>
9000b962:	bf00      	nop
9000b964:	58024400 	.word	0x58024400
9000b968:	ffff0007 	.word	0xffff0007

9000b96c <HAL_RCCEx_PeriphCLKConfig>:
{
9000b96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000b970:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000b974:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000b976:	011d      	lsls	r5, r3, #4
9000b978:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
9000b97c:	d523      	bpl.n	9000b9c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000b97e:	6e81      	ldr	r1, [r0, #104]	; 0x68
9000b980:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000b984:	f000 854f 	beq.w	9000c426 <HAL_RCCEx_PeriphCLKConfig+0xaba>
9000b988:	d812      	bhi.n	9000b9b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
9000b98a:	2900      	cmp	r1, #0
9000b98c:	f000 85a5 	beq.w	9000c4da <HAL_RCCEx_PeriphCLKConfig+0xb6e>
9000b990:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000b994:	f040 859e 	bne.w	9000c4d4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b998:	2102      	movs	r1, #2
9000b99a:	3008      	adds	r0, #8
9000b99c:	f7ff fef2 	bl	9000b784 <RCCEx_PLL2_Config>
9000b9a0:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000b9a2:	2e00      	cmp	r6, #0
9000b9a4:	f040 851e 	bne.w	9000c3e4 <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000b9a8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000b9aa:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b9ae:	e003      	b.n	9000b9b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000b9b0:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000b9b4:	f040 858e 	bne.w	9000c4d4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000b9b8:	4dae      	ldr	r5, [pc, #696]	; (9000bc74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000b9ba:	2600      	movs	r6, #0
9000b9bc:	6d28      	ldr	r0, [r5, #80]	; 0x50
9000b9be:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
9000b9c2:	4301      	orrs	r1, r0
9000b9c4:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000b9c6:	05d8      	lsls	r0, r3, #23
9000b9c8:	d50a      	bpl.n	9000b9e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
9000b9ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
9000b9cc:	2904      	cmp	r1, #4
9000b9ce:	d806      	bhi.n	9000b9de <HAL_RCCEx_PeriphCLKConfig+0x72>
9000b9d0:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b9d4:	05390532 	.word	0x05390532
9000b9d8:	03100516 	.word	0x03100516
9000b9dc:	0310      	.short	0x0310
9000b9de:	2601      	movs	r6, #1
9000b9e0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000b9e2:	0599      	lsls	r1, r3, #22
9000b9e4:	d51d      	bpl.n	9000ba22 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
9000b9e6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000b9e8:	2980      	cmp	r1, #128	; 0x80
9000b9ea:	f000 8512 	beq.w	9000c412 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
9000b9ee:	f200 80f9 	bhi.w	9000bbe4 <HAL_RCCEx_PeriphCLKConfig+0x278>
9000b9f2:	2900      	cmp	r1, #0
9000b9f4:	f000 8420 	beq.w	9000c238 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
9000b9f8:	2940      	cmp	r1, #64	; 0x40
9000b9fa:	f040 80fa 	bne.w	9000bbf2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b9fe:	2100      	movs	r1, #0
9000ba00:	f104 0008 	add.w	r0, r4, #8
9000ba04:	f7ff febe 	bl	9000b784 <RCCEx_PLL2_Config>
9000ba08:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000ba0a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ba0e:	2d00      	cmp	r5, #0
9000ba10:	f040 83eb 	bne.w	9000c1ea <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000ba14:	4f97      	ldr	r7, [pc, #604]	; (9000bc74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ba16:	6de0      	ldr	r0, [r4, #92]	; 0x5c
9000ba18:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000ba1a:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
9000ba1e:	4301      	orrs	r1, r0
9000ba20:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000ba22:	055f      	lsls	r7, r3, #21
9000ba24:	d521      	bpl.n	9000ba6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
9000ba26:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
9000ba2a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
9000ba2e:	f000 851d 	beq.w	9000c46c <HAL_RCCEx_PeriphCLKConfig+0xb00>
9000ba32:	f200 80e1 	bhi.w	9000bbf8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
9000ba36:	2900      	cmp	r1, #0
9000ba38:	f000 8405 	beq.w	9000c246 <HAL_RCCEx_PeriphCLKConfig+0x8da>
9000ba3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000ba40:	f040 80e2 	bne.w	9000bc08 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ba44:	2100      	movs	r1, #0
9000ba46:	f104 0008 	add.w	r0, r4, #8
9000ba4a:	f7ff fe9b 	bl	9000b784 <RCCEx_PLL2_Config>
9000ba4e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000ba50:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ba54:	2d00      	cmp	r5, #0
9000ba56:	f040 83cf 	bne.w	9000c1f8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000ba5a:	4f86      	ldr	r7, [pc, #536]	; (9000bc74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000ba5c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
9000ba60:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000ba62:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
9000ba66:	4301      	orrs	r1, r0
9000ba68:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000ba6a:	0518      	lsls	r0, r3, #20
9000ba6c:	d521      	bpl.n	9000bab2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
9000ba6e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
9000ba72:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
9000ba76:	f000 84b9 	beq.w	9000c3ec <HAL_RCCEx_PeriphCLKConfig+0xa80>
9000ba7a:	f200 80c8 	bhi.w	9000bc0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
9000ba7e:	2900      	cmp	r1, #0
9000ba80:	f000 83d4 	beq.w	9000c22c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
9000ba84:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
9000ba88:	f040 80c9 	bne.w	9000bc1e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ba8c:	2100      	movs	r1, #0
9000ba8e:	f104 0008 	add.w	r0, r4, #8
9000ba92:	f7ff fe77 	bl	9000b784 <RCCEx_PLL2_Config>
9000ba96:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000ba98:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ba9c:	2d00      	cmp	r5, #0
9000ba9e:	f040 83a2 	bne.w	9000c1e6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000baa2:	4f74      	ldr	r7, [pc, #464]	; (9000bc74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000baa4:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
9000baa8:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000baaa:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
9000baae:	4301      	orrs	r1, r0
9000bab0:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000bab2:	0199      	lsls	r1, r3, #6
9000bab4:	d518      	bpl.n	9000bae8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
9000bab6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
9000bab8:	2920      	cmp	r1, #32
9000baba:	f000 841e 	beq.w	9000c2fa <HAL_RCCEx_PeriphCLKConfig+0x98e>
9000babe:	f200 80b1 	bhi.w	9000bc24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000bac2:	b139      	cbz	r1, 9000bad4 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000bac4:	2910      	cmp	r1, #16
9000bac6:	f040 80b0 	bne.w	9000bc2a <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000baca:	486a      	ldr	r0, [pc, #424]	; (9000bc74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bacc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000bace:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000bad2:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000bad4:	2d00      	cmp	r5, #0
9000bad6:	f040 83d3 	bne.w	9000c280 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000bada:	4f66      	ldr	r7, [pc, #408]	; (9000bc74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000badc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000bade:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000bae0:	f021 0130 	bic.w	r1, r1, #48	; 0x30
9000bae4:	4301      	orrs	r1, r0
9000bae6:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000bae8:	04df      	lsls	r7, r3, #19
9000baea:	d51f      	bpl.n	9000bb2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
9000baec:	6e21      	ldr	r1, [r4, #96]	; 0x60
9000baee:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000baf2:	f000 84b1 	beq.w	9000c458 <HAL_RCCEx_PeriphCLKConfig+0xaec>
9000baf6:	f200 809b 	bhi.w	9000bc30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000bafa:	2900      	cmp	r1, #0
9000bafc:	f000 8390 	beq.w	9000c220 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
9000bb00:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
9000bb04:	f040 809c 	bne.w	9000bc40 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bb08:	2100      	movs	r1, #0
9000bb0a:	f104 0008 	add.w	r0, r4, #8
9000bb0e:	f7ff fe39 	bl	9000b784 <RCCEx_PLL2_Config>
9000bb12:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000bb14:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bb18:	2d00      	cmp	r5, #0
9000bb1a:	f040 8368 	bne.w	9000c1ee <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000bb1e:	4f55      	ldr	r7, [pc, #340]	; (9000bc74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bb20:	6e20      	ldr	r0, [r4, #96]	; 0x60
9000bb22:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000bb24:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
9000bb28:	4301      	orrs	r1, r0
9000bb2a:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000bb2c:	0498      	lsls	r0, r3, #18
9000bb2e:	d51d      	bpl.n	9000bb6c <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
9000bb30:	6e61      	ldr	r1, [r4, #100]	; 0x64
9000bb32:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000bb36:	f000 840f 	beq.w	9000c358 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
9000bb3a:	f200 8084 	bhi.w	9000bc46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000bb3e:	b159      	cbz	r1, 9000bb58 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000bb40:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000bb44:	f040 8087 	bne.w	9000bc56 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000bb48:	2101      	movs	r1, #1
9000bb4a:	f104 0008 	add.w	r0, r4, #8
9000bb4e:	f7ff fe19 	bl	9000b784 <RCCEx_PLL2_Config>
9000bb52:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000bb54:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bb58:	2d00      	cmp	r5, #0
9000bb5a:	f040 839b 	bne.w	9000c294 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000bb5e:	4f45      	ldr	r7, [pc, #276]	; (9000bc74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bb60:	6e60      	ldr	r0, [r4, #100]	; 0x64
9000bb62:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000bb64:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
9000bb68:	4301      	orrs	r1, r0
9000bb6a:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000bb6c:	0459      	lsls	r1, r3, #17
9000bb6e:	d51d      	bpl.n	9000bbac <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
9000bb70:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
9000bb74:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000bb78:	f000 83fa 	beq.w	9000c370 <HAL_RCCEx_PeriphCLKConfig+0xa04>
9000bb7c:	d86e      	bhi.n	9000bc5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
9000bb7e:	b151      	cbz	r1, 9000bb96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000bb80:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000bb84:	d172      	bne.n	9000bc6c <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000bb86:	2101      	movs	r1, #1
9000bb88:	f104 0008 	add.w	r0, r4, #8
9000bb8c:	f7ff fdfa 	bl	9000b784 <RCCEx_PLL2_Config>
9000bb90:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000bb92:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bb96:	2d00      	cmp	r5, #0
9000bb98:	f040 8380 	bne.w	9000c29c <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000bb9c:	4f35      	ldr	r7, [pc, #212]	; (9000bc74 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000bb9e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
9000bba2:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bba4:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000bba8:	4301      	orrs	r1, r0
9000bbaa:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000bbac:	041f      	lsls	r7, r3, #16
9000bbae:	d50d      	bpl.n	9000bbcc <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
9000bbb0:	6f21      	ldr	r1, [r4, #112]	; 0x70
9000bbb2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000bbb6:	f000 83c7 	beq.w	9000c348 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
9000bbba:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000bbbe:	f000 8225 	beq.w	9000c00c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
9000bbc2:	2900      	cmp	r1, #0
9000bbc4:	f000 822a 	beq.w	9000c01c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
9000bbc8:	2601      	movs	r6, #1
9000bbca:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000bbcc:	01d8      	lsls	r0, r3, #7
9000bbce:	d55f      	bpl.n	9000bc90 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->FmcClockSelection)
9000bbd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000bbd2:	2903      	cmp	r1, #3
9000bbd4:	f200 84bb 	bhi.w	9000c54e <HAL_RCCEx_PeriphCLKConfig+0xbe2>
9000bbd8:	e8df f011 	tbh	[pc, r1, lsl #1]
9000bbdc:	03e10056 	.word	0x03e10056
9000bbe0:	0056004e 	.word	0x0056004e
    switch (PeriphClkInit->Sai23ClockSelection)
9000bbe4:	29c0      	cmp	r1, #192	; 0xc0
9000bbe6:	f43f af12 	beq.w	9000ba0e <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000bbea:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000bbee:	f43f af0e 	beq.w	9000ba0e <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000bbf2:	2601      	movs	r6, #1
9000bbf4:	4635      	mov	r5, r6
9000bbf6:	e714      	b.n	9000ba22 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
9000bbf8:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
9000bbfc:	f43f af2a 	beq.w	9000ba54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000bc00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
9000bc04:	f43f af26 	beq.w	9000ba54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000bc08:	2601      	movs	r6, #1
9000bc0a:	4635      	mov	r5, r6
9000bc0c:	e72d      	b.n	9000ba6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
9000bc0e:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
9000bc12:	f43f af43 	beq.w	9000ba9c <HAL_RCCEx_PeriphCLKConfig+0x130>
9000bc16:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
9000bc1a:	f43f af3f 	beq.w	9000ba9c <HAL_RCCEx_PeriphCLKConfig+0x130>
9000bc1e:	2601      	movs	r6, #1
9000bc20:	4635      	mov	r5, r6
9000bc22:	e746      	b.n	9000bab2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
9000bc24:	2930      	cmp	r1, #48	; 0x30
9000bc26:	f43f af55 	beq.w	9000bad4 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000bc2a:	2601      	movs	r6, #1
9000bc2c:	4635      	mov	r5, r6
9000bc2e:	e75b      	b.n	9000bae8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
9000bc30:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
9000bc34:	f43f af70 	beq.w	9000bb18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000bc38:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000bc3c:	f43f af6c 	beq.w	9000bb18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000bc40:	2601      	movs	r6, #1
9000bc42:	4635      	mov	r5, r6
9000bc44:	e772      	b.n	9000bb2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
9000bc46:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
9000bc4a:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
9000bc4e:	d083      	beq.n	9000bb58 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000bc50:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
9000bc54:	d080      	beq.n	9000bb58 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000bc56:	2601      	movs	r6, #1
9000bc58:	4635      	mov	r5, r6
9000bc5a:	e787      	b.n	9000bb6c <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
9000bc5c:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000bc60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000bc64:	d097      	beq.n	9000bb96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000bc66:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000bc6a:	d094      	beq.n	9000bb96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000bc6c:	2601      	movs	r6, #1
9000bc6e:	4635      	mov	r5, r6
9000bc70:	e79c      	b.n	9000bbac <HAL_RCCEx_PeriphCLKConfig+0x240>
9000bc72:	bf00      	nop
9000bc74:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000bc78:	2102      	movs	r1, #2
9000bc7a:	f104 0008 	add.w	r0, r4, #8
9000bc7e:	f7ff fd81 	bl	9000b784 <RCCEx_PLL2_Config>
9000bc82:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000bc84:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bc88:	2d00      	cmp	r5, #0
9000bc8a:	f000 82fb 	beq.w	9000c284 <HAL_RCCEx_PeriphCLKConfig+0x918>
9000bc8e:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000bc90:	0259      	lsls	r1, r3, #9
9000bc92:	f100 825a 	bmi.w	9000c14a <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000bc96:	07d8      	lsls	r0, r3, #31
9000bc98:	d52f      	bpl.n	9000bcfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart16ClockSelection)
9000bc9a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
9000bc9c:	2928      	cmp	r1, #40	; 0x28
9000bc9e:	d82a      	bhi.n	9000bcf6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
9000bca0:	e8df f011 	tbh	[pc, r1, lsl #1]
9000bca4:	002901fa 	.word	0x002901fa
9000bca8:	00290029 	.word	0x00290029
9000bcac:	00290029 	.word	0x00290029
9000bcb0:	00290029 	.word	0x00290029
9000bcb4:	00290406 	.word	0x00290406
9000bcb8:	00290029 	.word	0x00290029
9000bcbc:	00290029 	.word	0x00290029
9000bcc0:	00290029 	.word	0x00290029
9000bcc4:	002901f2 	.word	0x002901f2
9000bcc8:	00290029 	.word	0x00290029
9000bccc:	00290029 	.word	0x00290029
9000bcd0:	00290029 	.word	0x00290029
9000bcd4:	002901fa 	.word	0x002901fa
9000bcd8:	00290029 	.word	0x00290029
9000bcdc:	00290029 	.word	0x00290029
9000bce0:	00290029 	.word	0x00290029
9000bce4:	002901fa 	.word	0x002901fa
9000bce8:	00290029 	.word	0x00290029
9000bcec:	00290029 	.word	0x00290029
9000bcf0:	00290029 	.word	0x00290029
9000bcf4:	01fa      	.short	0x01fa
9000bcf6:	2601      	movs	r6, #1
9000bcf8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000bcfa:	0799      	lsls	r1, r3, #30
9000bcfc:	d517      	bpl.n	9000bd2e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000bcfe:	6fa1      	ldr	r1, [r4, #120]	; 0x78
9000bd00:	2905      	cmp	r1, #5
9000bd02:	f200 8420 	bhi.w	9000c546 <HAL_RCCEx_PeriphCLKConfig+0xbda>
9000bd06:	e8df f011 	tbh	[pc, r1, lsl #1]
9000bd0a:	000e      	.short	0x000e
9000bd0c:	000603bb 	.word	0x000603bb
9000bd10:	000e000e 	.word	0x000e000e
9000bd14:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000bd16:	2101      	movs	r1, #1
9000bd18:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bd1c:	f7ff fdac 	bl	9000b878 <RCCEx_PLL3_Config>
9000bd20:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000bd22:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bd26:	2d00      	cmp	r5, #0
9000bd28:	f000 8299 	beq.w	9000c25e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
9000bd2c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000bd2e:	075f      	lsls	r7, r3, #29
9000bd30:	d518      	bpl.n	9000bd64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000bd32:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
9000bd36:	2905      	cmp	r1, #5
9000bd38:	f200 840d 	bhi.w	9000c556 <HAL_RCCEx_PeriphCLKConfig+0xbea>
9000bd3c:	e8df f011 	tbh	[pc, r1, lsl #1]
9000bd40:	03ac000e 	.word	0x03ac000e
9000bd44:	000e0006 	.word	0x000e0006
9000bd48:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000bd4c:	2101      	movs	r1, #1
9000bd4e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bd52:	f7ff fd91 	bl	9000b878 <RCCEx_PLL3_Config>
9000bd56:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000bd58:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bd5c:	2d00      	cmp	r5, #0
9000bd5e:	f000 8286 	beq.w	9000c26e <HAL_RCCEx_PeriphCLKConfig+0x902>
9000bd62:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000bd64:	0698      	lsls	r0, r3, #26
9000bd66:	d51f      	bpl.n	9000bda8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000bd68:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
9000bd6c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000bd70:	f000 8309 	beq.w	9000c386 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
9000bd74:	f200 810b 	bhi.w	9000bf8e <HAL_RCCEx_PeriphCLKConfig+0x622>
9000bd78:	b159      	cbz	r1, 9000bd92 <HAL_RCCEx_PeriphCLKConfig+0x426>
9000bd7a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000bd7e:	f040 8110 	bne.w	9000bfa2 <HAL_RCCEx_PeriphCLKConfig+0x636>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bd82:	2100      	movs	r1, #0
9000bd84:	f104 0008 	add.w	r0, r4, #8
9000bd88:	f7ff fcfc 	bl	9000b784 <RCCEx_PLL2_Config>
9000bd8c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000bd8e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bd92:	2d00      	cmp	r5, #0
9000bd94:	f040 825f 	bne.w	9000c256 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000bd98:	4fa6      	ldr	r7, [pc, #664]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bd9a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000bd9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000bda0:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000bda4:	4301      	orrs	r1, r0
9000bda6:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000bda8:	0659      	lsls	r1, r3, #25
9000bdaa:	d51f      	bpl.n	9000bdec <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000bdac:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000bdb0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000bdb4:	f000 82b2 	beq.w	9000c31c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
9000bdb8:	f200 80f6 	bhi.w	9000bfa8 <HAL_RCCEx_PeriphCLKConfig+0x63c>
9000bdbc:	b159      	cbz	r1, 9000bdd6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
9000bdbe:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
9000bdc2:	f040 80fb 	bne.w	9000bfbc <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bdc6:	2100      	movs	r1, #0
9000bdc8:	f104 0008 	add.w	r0, r4, #8
9000bdcc:	f7ff fcda 	bl	9000b784 <RCCEx_PLL2_Config>
9000bdd0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000bdd2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bdd6:	2d00      	cmp	r5, #0
9000bdd8:	f040 8262 	bne.w	9000c2a0 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000bddc:	4f95      	ldr	r7, [pc, #596]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bdde:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
9000bde2:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000bde4:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
9000bde8:	4301      	orrs	r1, r0
9000bdea:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000bdec:	061f      	lsls	r7, r3, #24
9000bdee:	d51f      	bpl.n	9000be30 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000bdf0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
9000bdf4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000bdf8:	f000 829b 	beq.w	9000c332 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
9000bdfc:	f200 80e1 	bhi.w	9000bfc2 <HAL_RCCEx_PeriphCLKConfig+0x656>
9000be00:	b159      	cbz	r1, 9000be1a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
9000be02:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000be06:	f040 80e6 	bne.w	9000bfd6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000be0a:	2100      	movs	r1, #0
9000be0c:	f104 0008 	add.w	r0, r4, #8
9000be10:	f7ff fcb8 	bl	9000b784 <RCCEx_PLL2_Config>
9000be14:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000be16:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000be1a:	2d00      	cmp	r5, #0
9000be1c:	f040 823c 	bne.w	9000c298 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000be20:	4f84      	ldr	r7, [pc, #528]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000be22:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
9000be26:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000be28:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
9000be2c:	4301      	orrs	r1, r0
9000be2e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000be30:	0718      	lsls	r0, r3, #28
9000be32:	d50b      	bpl.n	9000be4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000be34:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
9000be38:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000be3c:	f000 82b8 	beq.w	9000c3b0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000be40:	4f7c      	ldr	r7, [pc, #496]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000be42:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000be44:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
9000be48:	4301      	orrs	r1, r0
9000be4a:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000be4c:	06d9      	lsls	r1, r3, #27
9000be4e:	d50b      	bpl.n	9000be68 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000be50:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
9000be54:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9000be58:	f000 82b7 	beq.w	9000c3ca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000be5c:	4f75      	ldr	r7, [pc, #468]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000be5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000be60:	f421 7140 	bic.w	r1, r1, #768	; 0x300
9000be64:	4301      	orrs	r1, r0
9000be66:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000be68:	031f      	lsls	r7, r3, #12
9000be6a:	d50e      	bpl.n	9000be8a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->AdcClockSelection)
9000be6c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
9000be70:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000be74:	f000 80f4 	beq.w	9000c060 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
9000be78:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000be7c:	f000 80f8 	beq.w	9000c070 <HAL_RCCEx_PeriphCLKConfig+0x704>
9000be80:	2900      	cmp	r1, #0
9000be82:	f000 822e 	beq.w	9000c2e2 <HAL_RCCEx_PeriphCLKConfig+0x976>
9000be86:	2601      	movs	r6, #1
9000be88:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000be8a:	0358      	lsls	r0, r3, #13
9000be8c:	d50f      	bpl.n	9000beae <HAL_RCCEx_PeriphCLKConfig+0x542>
    switch (PeriphClkInit->UsbClockSelection)
9000be8e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
9000be92:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000be96:	f000 80cf 	beq.w	9000c038 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
9000be9a:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000be9e:	f000 80d3 	beq.w	9000c048 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
9000bea2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000bea6:	f000 8214 	beq.w	9000c2d2 <HAL_RCCEx_PeriphCLKConfig+0x966>
9000beaa:	2601      	movs	r6, #1
9000beac:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000beae:	03d9      	lsls	r1, r3, #15
9000beb0:	d509      	bpl.n	9000bec6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->SdmmcClockSelection)
9000beb2:	6d21      	ldr	r1, [r4, #80]	; 0x50
9000beb4:	2900      	cmp	r1, #0
9000beb6:	f000 8203 	beq.w	9000c2c0 <HAL_RCCEx_PeriphCLKConfig+0x954>
9000beba:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000bebe:	f000 819d 	beq.w	9000c1fc <HAL_RCCEx_PeriphCLKConfig+0x890>
9000bec2:	2601      	movs	r6, #1
9000bec4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000bec6:	009f      	lsls	r7, r3, #2
9000bec8:	f100 80f1 	bmi.w	9000c0ae <HAL_RCCEx_PeriphCLKConfig+0x742>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000becc:	0398      	lsls	r0, r3, #14
9000bece:	d50c      	bpl.n	9000beea <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->RngClockSelection)
9000bed0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
9000bed4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000bed8:	f000 81ea 	beq.w	9000c2b0 <HAL_RCCEx_PeriphCLKConfig+0x944>
9000bedc:	d97e      	bls.n	9000bfdc <HAL_RCCEx_PeriphCLKConfig+0x670>
9000bede:	f421 7080 	bic.w	r0, r1, #256	; 0x100
9000bee2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000bee6:	d07b      	beq.n	9000bfe0 <HAL_RCCEx_PeriphCLKConfig+0x674>
9000bee8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000beea:	02d9      	lsls	r1, r3, #11
9000beec:	d506      	bpl.n	9000befc <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000beee:	4851      	ldr	r0, [pc, #324]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bef0:	6f65      	ldr	r5, [r4, #116]	; 0x74
9000bef2:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000bef4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
9000bef8:	4329      	orrs	r1, r5
9000befa:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000befc:	00df      	lsls	r7, r3, #3
9000befe:	d507      	bpl.n	9000bf10 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000bf00:	484c      	ldr	r0, [pc, #304]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bf02:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
9000bf06:	6901      	ldr	r1, [r0, #16]
9000bf08:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
9000bf0c:	4329      	orrs	r1, r5
9000bf0e:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000bf10:	029d      	lsls	r5, r3, #10
9000bf12:	d506      	bpl.n	9000bf22 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000bf14:	4847      	ldr	r0, [pc, #284]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bf16:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
9000bf18:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000bf1a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000bf1e:	4329      	orrs	r1, r5
9000bf20:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000bf22:	0058      	lsls	r0, r3, #1
9000bf24:	d509      	bpl.n	9000bf3a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000bf26:	4943      	ldr	r1, [pc, #268]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bf28:	6908      	ldr	r0, [r1, #16]
9000bf2a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
9000bf2e:	6108      	str	r0, [r1, #16]
9000bf30:	6908      	ldr	r0, [r1, #16]
9000bf32:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
9000bf36:	4328      	orrs	r0, r5
9000bf38:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000bf3a:	2b00      	cmp	r3, #0
9000bf3c:	da06      	bge.n	9000bf4c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000bf3e:	483d      	ldr	r0, [pc, #244]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bf40:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000bf42:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000bf44:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000bf48:	4329      	orrs	r1, r5
9000bf4a:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000bf4c:	0219      	lsls	r1, r3, #8
9000bf4e:	d507      	bpl.n	9000bf60 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000bf50:	4938      	ldr	r1, [pc, #224]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bf52:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
9000bf56:	6d4b      	ldr	r3, [r1, #84]	; 0x54
9000bf58:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
9000bf5c:	4303      	orrs	r3, r0
9000bf5e:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000bf60:	07d3      	lsls	r3, r2, #31
9000bf62:	f100 80b0 	bmi.w	9000c0c6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000bf66:	0797      	lsls	r7, r2, #30
9000bf68:	f100 80ba 	bmi.w	9000c0e0 <HAL_RCCEx_PeriphCLKConfig+0x774>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000bf6c:	0755      	lsls	r5, r2, #29
9000bf6e:	f100 80c4 	bmi.w	9000c0fa <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000bf72:	0710      	lsls	r0, r2, #28
9000bf74:	f100 80ce 	bmi.w	9000c114 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000bf78:	06d1      	lsls	r1, r2, #27
9000bf7a:	f100 80d8 	bmi.w	9000c12e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000bf7e:	0692      	lsls	r2, r2, #26
9000bf80:	f100 8125 	bmi.w	9000c1ce <HAL_RCCEx_PeriphCLKConfig+0x862>
    return HAL_OK;
9000bf84:	1e30      	subs	r0, r6, #0
9000bf86:	bf18      	it	ne
9000bf88:	2001      	movne	r0, #1
}
9000bf8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
9000bf8e:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000bf92:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000bf96:	f43f aefc 	beq.w	9000bd92 <HAL_RCCEx_PeriphCLKConfig+0x426>
9000bf9a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000bf9e:	f43f aef8 	beq.w	9000bd92 <HAL_RCCEx_PeriphCLKConfig+0x426>
9000bfa2:	2601      	movs	r6, #1
9000bfa4:	4635      	mov	r5, r6
9000bfa6:	e6ff      	b.n	9000bda8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000bfa8:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
9000bfac:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000bfb0:	f43f af11 	beq.w	9000bdd6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
9000bfb4:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
9000bfb8:	f43f af0d 	beq.w	9000bdd6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
9000bfbc:	2601      	movs	r6, #1
9000bfbe:	4635      	mov	r5, r6
9000bfc0:	e714      	b.n	9000bdec <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000bfc2:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
9000bfc6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000bfca:	f43f af26 	beq.w	9000be1a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
9000bfce:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
9000bfd2:	f43f af22 	beq.w	9000be1a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
9000bfd6:	2601      	movs	r6, #1
9000bfd8:	4635      	mov	r5, r6
9000bfda:	e729      	b.n	9000be30 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->RngClockSelection)
9000bfdc:	2900      	cmp	r1, #0
9000bfde:	d183      	bne.n	9000bee8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    if (ret == HAL_OK)
9000bfe0:	2d00      	cmp	r5, #0
9000bfe2:	f040 8163 	bne.w	9000c2ac <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000bfe6:	4d13      	ldr	r5, [pc, #76]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bfe8:	6d68      	ldr	r0, [r5, #84]	; 0x54
9000bfea:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000bfee:	4301      	orrs	r1, r0
9000bff0:	6569      	str	r1, [r5, #84]	; 0x54
9000bff2:	e77a      	b.n	9000beea <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Sai1ClockSelection)
9000bff4:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000bff6:	2d00      	cmp	r5, #0
9000bff8:	f040 80fb 	bne.w	9000c1f2 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000bffc:	4f0d      	ldr	r7, [pc, #52]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000bffe:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000c000:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000c002:	f021 0107 	bic.w	r1, r1, #7
9000c006:	4301      	orrs	r1, r0
9000c008:	6539      	str	r1, [r7, #80]	; 0x50
9000c00a:	e4ea      	b.n	9000b9e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000c00c:	2101      	movs	r1, #1
9000c00e:	f104 0008 	add.w	r0, r4, #8
9000c012:	f7ff fbb7 	bl	9000b784 <RCCEx_PLL2_Config>
9000c016:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000c018:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c01c:	2d00      	cmp	r5, #0
9000c01e:	f040 811c 	bne.w	9000c25a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000c022:	4f04      	ldr	r7, [pc, #16]	; (9000c034 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000c024:	6f20      	ldr	r0, [r4, #112]	; 0x70
9000c026:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000c028:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000c02c:	4301      	orrs	r1, r0
9000c02e:	6539      	str	r1, [r7, #80]	; 0x50
9000c030:	e5cc      	b.n	9000bbcc <HAL_RCCEx_PeriphCLKConfig+0x260>
9000c032:	bf00      	nop
9000c034:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c038:	2101      	movs	r1, #1
9000c03a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c03e:	f7ff fc1b 	bl	9000b878 <RCCEx_PLL3_Config>
9000c042:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000c044:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c048:	2d00      	cmp	r5, #0
9000c04a:	f040 812d 	bne.w	9000c2a8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000c04e:	4fb1      	ldr	r7, [pc, #708]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c050:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9000c054:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000c056:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000c05a:	4301      	orrs	r1, r0
9000c05c:	6579      	str	r1, [r7, #84]	; 0x54
9000c05e:	e726      	b.n	9000beae <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c060:	2102      	movs	r1, #2
9000c062:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c066:	f7ff fc07 	bl	9000b878 <RCCEx_PLL3_Config>
9000c06a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000c06c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c070:	2d00      	cmp	r5, #0
9000c072:	f040 8117 	bne.w	9000c2a4 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000c076:	4fa7      	ldr	r7, [pc, #668]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c078:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
9000c07c:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000c07e:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
9000c082:	4301      	orrs	r1, r0
9000c084:	65b9      	str	r1, [r7, #88]	; 0x58
9000c086:	e700      	b.n	9000be8a <HAL_RCCEx_PeriphCLKConfig+0x51e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c088:	2101      	movs	r1, #1
9000c08a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c08e:	f7ff fbf3 	bl	9000b878 <RCCEx_PLL3_Config>
9000c092:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000c094:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c098:	2d00      	cmp	r5, #0
9000c09a:	f040 80da 	bne.w	9000c252 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000c09e:	4f9d      	ldr	r7, [pc, #628]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c0a0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
9000c0a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000c0a4:	f021 0138 	bic.w	r1, r1, #56	; 0x38
9000c0a8:	4301      	orrs	r1, r0
9000c0aa:	6579      	str	r1, [r7, #84]	; 0x54
9000c0ac:	e625      	b.n	9000bcfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000c0ae:	2102      	movs	r1, #2
9000c0b0:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c0b4:	f7ff fbe0 	bl	9000b878 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000c0b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000c0bc:	2800      	cmp	r0, #0
9000c0be:	f43f af05 	beq.w	9000becc <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = HAL_ERROR;
9000c0c2:	2601      	movs	r6, #1
9000c0c4:	e702      	b.n	9000becc <HAL_RCCEx_PeriphCLKConfig+0x560>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000c0c6:	2100      	movs	r1, #0
9000c0c8:	f104 0008 	add.w	r0, r4, #8
9000c0cc:	f7ff fb5a 	bl	9000b784 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000c0d0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000c0d2:	2800      	cmp	r0, #0
9000c0d4:	f43f af47 	beq.w	9000bf66 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000c0d8:	0797      	lsls	r7, r2, #30
9000c0da:	4606      	mov	r6, r0
9000c0dc:	f57f af46 	bpl.w	9000bf6c <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000c0e0:	2101      	movs	r1, #1
9000c0e2:	f104 0008 	add.w	r0, r4, #8
9000c0e6:	f7ff fb4d 	bl	9000b784 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000c0ea:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000c0ec:	2800      	cmp	r0, #0
9000c0ee:	f43f af3d 	beq.w	9000bf6c <HAL_RCCEx_PeriphCLKConfig+0x600>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000c0f2:	0755      	lsls	r5, r2, #29
9000c0f4:	4606      	mov	r6, r0
9000c0f6:	f57f af3c 	bpl.w	9000bf72 <HAL_RCCEx_PeriphCLKConfig+0x606>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000c0fa:	2102      	movs	r1, #2
9000c0fc:	f104 0008 	add.w	r0, r4, #8
9000c100:	f7ff fb40 	bl	9000b784 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000c104:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000c106:	2800      	cmp	r0, #0
9000c108:	f43f af33 	beq.w	9000bf72 <HAL_RCCEx_PeriphCLKConfig+0x606>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000c10c:	4606      	mov	r6, r0
9000c10e:	0710      	lsls	r0, r2, #28
9000c110:	f57f af32 	bpl.w	9000bf78 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c114:	2100      	movs	r1, #0
9000c116:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c11a:	f7ff fbad 	bl	9000b878 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000c11e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000c120:	2800      	cmp	r0, #0
9000c122:	f43f af29 	beq.w	9000bf78 <HAL_RCCEx_PeriphCLKConfig+0x60c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000c126:	06d1      	lsls	r1, r2, #27
9000c128:	4606      	mov	r6, r0
9000c12a:	f57f af28 	bpl.w	9000bf7e <HAL_RCCEx_PeriphCLKConfig+0x612>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c12e:	f104 0528 	add.w	r5, r4, #40	; 0x28
9000c132:	2101      	movs	r1, #1
9000c134:	4628      	mov	r0, r5
9000c136:	f7ff fb9f 	bl	9000b878 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000c13a:	2800      	cmp	r0, #0
9000c13c:	f000 80db 	beq.w	9000c2f6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000c140:	6863      	ldr	r3, [r4, #4]
9000c142:	069b      	lsls	r3, r3, #26
9000c144:	d54c      	bpl.n	9000c1e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
9000c146:	4606      	mov	r6, r0
9000c148:	e043      	b.n	9000c1d2 <HAL_RCCEx_PeriphCLKConfig+0x866>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000c14a:	4f73      	ldr	r7, [pc, #460]	; (9000c318 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
9000c14c:	683b      	ldr	r3, [r7, #0]
9000c14e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000c152:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000c154:	f7fa fd58 	bl	90006c08 <HAL_GetTick>
9000c158:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000c15a:	e006      	b.n	9000c16a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000c15c:	f7fa fd54 	bl	90006c08 <HAL_GetTick>
9000c160:	eba0 0008 	sub.w	r0, r0, r8
9000c164:	2864      	cmp	r0, #100	; 0x64
9000c166:	f200 81af 	bhi.w	9000c4c8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000c16a:	683b      	ldr	r3, [r7, #0]
9000c16c:	05da      	lsls	r2, r3, #23
9000c16e:	d5f5      	bpl.n	9000c15c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if (ret == HAL_OK)
9000c170:	2d00      	cmp	r5, #0
9000c172:	f040 81e3 	bne.w	9000c53c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000c176:	4a67      	ldr	r2, [pc, #412]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c178:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000c17c:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000c17e:	4059      	eors	r1, r3
9000c180:	f411 7f40 	tst.w	r1, #768	; 0x300
9000c184:	d00b      	beq.n	9000c19e <HAL_RCCEx_PeriphCLKConfig+0x832>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000c186:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000c188:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000c18a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000c18e:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
9000c192:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000c194:	6f10      	ldr	r0, [r2, #112]	; 0x70
9000c196:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
9000c19a:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
9000c19c:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000c19e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000c1a2:	f000 81ad 	beq.w	9000c500 <HAL_RCCEx_PeriphCLKConfig+0xb94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000c1a6:	f403 7240 	and.w	r2, r3, #768	; 0x300
9000c1aa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000c1ae:	f000 81bb 	beq.w	9000c528 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
9000c1b2:	4958      	ldr	r1, [pc, #352]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c1b4:	690a      	ldr	r2, [r1, #16]
9000c1b6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
9000c1ba:	610a      	str	r2, [r1, #16]
9000c1bc:	4855      	ldr	r0, [pc, #340]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c1be:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000c1c2:	6f07      	ldr	r7, [r0, #112]	; 0x70
9000c1c4:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000c1c6:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000c1ca:	6701      	str	r1, [r0, #112]	; 0x70
9000c1cc:	e563      	b.n	9000bc96 <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c1ce:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c1d2:	2102      	movs	r1, #2
9000c1d4:	4628      	mov	r0, r5
9000c1d6:	f7ff fb4f 	bl	9000b878 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000c1da:	2800      	cmp	r0, #0
9000c1dc:	f43f aed2 	beq.w	9000bf84 <HAL_RCCEx_PeriphCLKConfig+0x618>
  return HAL_ERROR;
9000c1e0:	2001      	movs	r0, #1
}
9000c1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000c1e6:	462e      	mov	r6, r5
9000c1e8:	e463      	b.n	9000bab2 <HAL_RCCEx_PeriphCLKConfig+0x146>
9000c1ea:	462e      	mov	r6, r5
9000c1ec:	e419      	b.n	9000ba22 <HAL_RCCEx_PeriphCLKConfig+0xb6>
9000c1ee:	462e      	mov	r6, r5
9000c1f0:	e49c      	b.n	9000bb2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
9000c1f2:	462e      	mov	r6, r5
9000c1f4:	f7ff bbf5 	b.w	9000b9e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
9000c1f8:	462e      	mov	r6, r5
9000c1fa:	e436      	b.n	9000ba6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000c1fc:	2102      	movs	r1, #2
9000c1fe:	f104 0008 	add.w	r0, r4, #8
9000c202:	f7ff fabf 	bl	9000b784 <RCCEx_PLL2_Config>
9000c206:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000c208:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c20c:	2d00      	cmp	r5, #0
9000c20e:	d15e      	bne.n	9000c2ce <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000c210:	4f40      	ldr	r7, [pc, #256]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c212:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000c214:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000c216:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
9000c21a:	4301      	orrs	r1, r0
9000c21c:	64f9      	str	r1, [r7, #76]	; 0x4c
9000c21e:	e652      	b.n	9000bec6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c220:	483c      	ldr	r0, [pc, #240]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c222:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c224:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c228:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c22a:	e475      	b.n	9000bb18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c22c:	4839      	ldr	r0, [pc, #228]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c22e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c230:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c234:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c236:	e431      	b.n	9000ba9c <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c238:	4836      	ldr	r0, [pc, #216]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c23a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c23c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c240:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c242:	f7ff bbe4 	b.w	9000ba0e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c246:	4833      	ldr	r0, [pc, #204]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c248:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c24a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c24e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c250:	e400      	b.n	9000ba54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000c252:	462e      	mov	r6, r5
9000c254:	e551      	b.n	9000bcfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
9000c256:	462e      	mov	r6, r5
9000c258:	e5a6      	b.n	9000bda8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
9000c25a:	462e      	mov	r6, r5
9000c25c:	e4b6      	b.n	9000bbcc <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000c25e:	4f2d      	ldr	r7, [pc, #180]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c260:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000c262:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000c264:	f021 0107 	bic.w	r1, r1, #7
9000c268:	4301      	orrs	r1, r0
9000c26a:	6579      	str	r1, [r7, #84]	; 0x54
9000c26c:	e55f      	b.n	9000bd2e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000c26e:	4f29      	ldr	r7, [pc, #164]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c270:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
9000c274:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000c276:	f021 0107 	bic.w	r1, r1, #7
9000c27a:	4301      	orrs	r1, r0
9000c27c:	65b9      	str	r1, [r7, #88]	; 0x58
9000c27e:	e571      	b.n	9000bd64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
9000c280:	462e      	mov	r6, r5
9000c282:	e431      	b.n	9000bae8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000c284:	4f23      	ldr	r7, [pc, #140]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c286:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000c288:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000c28a:	f021 0103 	bic.w	r1, r1, #3
9000c28e:	4301      	orrs	r1, r0
9000c290:	64f9      	str	r1, [r7, #76]	; 0x4c
9000c292:	e4fd      	b.n	9000bc90 <HAL_RCCEx_PeriphCLKConfig+0x324>
9000c294:	462e      	mov	r6, r5
9000c296:	e469      	b.n	9000bb6c <HAL_RCCEx_PeriphCLKConfig+0x200>
9000c298:	462e      	mov	r6, r5
9000c29a:	e5c9      	b.n	9000be30 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
9000c29c:	462e      	mov	r6, r5
9000c29e:	e485      	b.n	9000bbac <HAL_RCCEx_PeriphCLKConfig+0x240>
9000c2a0:	462e      	mov	r6, r5
9000c2a2:	e5a3      	b.n	9000bdec <HAL_RCCEx_PeriphCLKConfig+0x480>
9000c2a4:	462e      	mov	r6, r5
9000c2a6:	e5f0      	b.n	9000be8a <HAL_RCCEx_PeriphCLKConfig+0x51e>
9000c2a8:	462e      	mov	r6, r5
9000c2aa:	e600      	b.n	9000beae <HAL_RCCEx_PeriphCLKConfig+0x542>
9000c2ac:	462e      	mov	r6, r5
9000c2ae:	e61c      	b.n	9000beea <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c2b0:	4f18      	ldr	r7, [pc, #96]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c2b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000c2b4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000c2b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
9000c2ba:	2d00      	cmp	r5, #0
9000c2bc:	d1f6      	bne.n	9000c2ac <HAL_RCCEx_PeriphCLKConfig+0x940>
9000c2be:	e692      	b.n	9000bfe6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c2c0:	4814      	ldr	r0, [pc, #80]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c2c2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c2c4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c2c8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000c2ca:	2d00      	cmp	r5, #0
9000c2cc:	d0a0      	beq.n	9000c210 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
9000c2ce:	462e      	mov	r6, r5
9000c2d0:	e5f9      	b.n	9000bec6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c2d2:	4810      	ldr	r0, [pc, #64]	; (9000c314 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000c2d4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c2d6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c2da:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000c2dc:	2d00      	cmp	r5, #0
9000c2de:	d1e3      	bne.n	9000c2a8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
9000c2e0:	e6b5      	b.n	9000c04e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000c2e2:	f104 0008 	add.w	r0, r4, #8
9000c2e6:	f7ff fa4d 	bl	9000b784 <RCCEx_PLL2_Config>
9000c2ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000c2ec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c2f0:	2d00      	cmp	r5, #0
9000c2f2:	d1d7      	bne.n	9000c2a4 <HAL_RCCEx_PeriphCLKConfig+0x938>
9000c2f4:	e6bf      	b.n	9000c076 <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000c2f6:	6862      	ldr	r2, [r4, #4]
9000c2f8:	e641      	b.n	9000bf7e <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000c2fa:	2102      	movs	r1, #2
9000c2fc:	f104 0008 	add.w	r0, r4, #8
9000c300:	f7ff fa40 	bl	9000b784 <RCCEx_PLL2_Config>
9000c304:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000c306:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c30a:	2d00      	cmp	r5, #0
9000c30c:	d1b8      	bne.n	9000c280 <HAL_RCCEx_PeriphCLKConfig+0x914>
9000c30e:	f7ff bbe4 	b.w	9000bada <HAL_RCCEx_PeriphCLKConfig+0x16e>
9000c312:	bf00      	nop
9000c314:	58024400 	.word	0x58024400
9000c318:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c31c:	2102      	movs	r1, #2
9000c31e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c322:	f7ff faa9 	bl	9000b878 <RCCEx_PLL3_Config>
9000c326:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000c328:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c32c:	2d00      	cmp	r5, #0
9000c32e:	d1b7      	bne.n	9000c2a0 <HAL_RCCEx_PeriphCLKConfig+0x934>
9000c330:	e554      	b.n	9000bddc <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c332:	2102      	movs	r1, #2
9000c334:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c338:	f7ff fa9e 	bl	9000b878 <RCCEx_PLL3_Config>
9000c33c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000c33e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c342:	2d00      	cmp	r5, #0
9000c344:	d1a8      	bne.n	9000c298 <HAL_RCCEx_PeriphCLKConfig+0x92c>
9000c346:	e56b      	b.n	9000be20 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c348:	4884      	ldr	r0, [pc, #528]	; (9000c55c <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
9000c34a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c34c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c350:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000c352:	2d00      	cmp	r5, #0
9000c354:	d181      	bne.n	9000c25a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
9000c356:	e664      	b.n	9000c022 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c358:	2101      	movs	r1, #1
9000c35a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c35e:	f7ff fa8b 	bl	9000b878 <RCCEx_PLL3_Config>
9000c362:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000c364:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c368:	2d00      	cmp	r5, #0
9000c36a:	d193      	bne.n	9000c294 <HAL_RCCEx_PeriphCLKConfig+0x928>
9000c36c:	f7ff bbf7 	b.w	9000bb5e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000c370:	2101      	movs	r1, #1
9000c372:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c376:	f7ff fa7f 	bl	9000b878 <RCCEx_PLL3_Config>
9000c37a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000c37c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c380:	2d00      	cmp	r5, #0
9000c382:	d18b      	bne.n	9000c29c <HAL_RCCEx_PeriphCLKConfig+0x930>
9000c384:	e40a      	b.n	9000bb9c <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c386:	2102      	movs	r1, #2
9000c388:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c38c:	f7ff fa74 	bl	9000b878 <RCCEx_PLL3_Config>
9000c390:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000c392:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c396:	2d00      	cmp	r5, #0
9000c398:	f47f af5d 	bne.w	9000c256 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
9000c39c:	e4fc      	b.n	9000bd98 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c39e:	486f      	ldr	r0, [pc, #444]	; (9000c55c <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
9000c3a0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c3a2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c3a6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000c3a8:	2d00      	cmp	r5, #0
9000c3aa:	f47f ac70 	bne.w	9000bc8e <HAL_RCCEx_PeriphCLKConfig+0x322>
9000c3ae:	e769      	b.n	9000c284 <HAL_RCCEx_PeriphCLKConfig+0x918>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000c3b0:	2102      	movs	r1, #2
9000c3b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c3b6:	f7ff fa5f 	bl	9000b878 <RCCEx_PLL3_Config>
9000c3ba:	2800      	cmp	r0, #0
9000c3bc:	f040 8094 	bne.w	9000c4e8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000c3c0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000c3c4:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c3c8:	e53a      	b.n	9000be40 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000c3ca:	2102      	movs	r1, #2
9000c3cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c3d0:	f7ff fa52 	bl	9000b878 <RCCEx_PLL3_Config>
9000c3d4:	2800      	cmp	r0, #0
9000c3d6:	f040 808d 	bne.w	9000c4f4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000c3da:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000c3de:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c3e2:	e53b      	b.n	9000be5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000c3e4:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c3e8:	f7ff baed 	b.w	9000b9c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c3ec:	2100      	movs	r1, #0
9000c3ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c3f2:	f7ff fa41 	bl	9000b878 <RCCEx_PLL3_Config>
9000c3f6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000c3f8:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c3fc:	f7ff bb4e 	b.w	9000ba9c <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c400:	2100      	movs	r1, #0
9000c402:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c406:	f7ff fa37 	bl	9000b878 <RCCEx_PLL3_Config>
9000c40a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000c40c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c410:	e5f1      	b.n	9000bff6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c412:	2100      	movs	r1, #0
9000c414:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c418:	f7ff fa2e 	bl	9000b878 <RCCEx_PLL3_Config>
9000c41c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000c41e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c422:	f7ff baf4 	b.w	9000ba0e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000c426:	2102      	movs	r1, #2
9000c428:	3028      	adds	r0, #40	; 0x28
9000c42a:	f7ff fa25 	bl	9000b878 <RCCEx_PLL3_Config>
9000c42e:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000c430:	2e00      	cmp	r6, #0
9000c432:	f43f aab9 	beq.w	9000b9a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
9000c436:	e7d5      	b.n	9000c3e4 <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c438:	4848      	ldr	r0, [pc, #288]	; (9000c55c <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
        break;
9000c43a:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c43c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000c43e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000c442:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000c444:	e5d7      	b.n	9000bff6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000c446:	2100      	movs	r1, #0
9000c448:	f104 0008 	add.w	r0, r4, #8
9000c44c:	f7ff f99a 	bl	9000b784 <RCCEx_PLL2_Config>
9000c450:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000c452:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c456:	e5ce      	b.n	9000bff6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c458:	2100      	movs	r1, #0
9000c45a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c45e:	f7ff fa0b 	bl	9000b878 <RCCEx_PLL3_Config>
9000c462:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000c464:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c468:	f7ff bb56 	b.w	9000bb18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000c46c:	2100      	movs	r1, #0
9000c46e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000c472:	f7ff fa01 	bl	9000b878 <RCCEx_PLL3_Config>
9000c476:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000c478:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000c47c:	f7ff baea 	b.w	9000ba54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000c480:	2101      	movs	r1, #1
9000c482:	f104 0008 	add.w	r0, r4, #8
9000c486:	f7ff f97d 	bl	9000b784 <RCCEx_PLL2_Config>
9000c48a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000c48c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c490:	2d00      	cmp	r5, #0
9000c492:	f47f ac4b 	bne.w	9000bd2c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
9000c496:	e6e2      	b.n	9000c25e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000c498:	2101      	movs	r1, #1
9000c49a:	f104 0008 	add.w	r0, r4, #8
9000c49e:	f7ff f971 	bl	9000b784 <RCCEx_PLL2_Config>
9000c4a2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000c4a4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c4a8:	2d00      	cmp	r5, #0
9000c4aa:	f47f ac5a 	bne.w	9000bd62 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
9000c4ae:	e6de      	b.n	9000c26e <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000c4b0:	2101      	movs	r1, #1
9000c4b2:	f104 0008 	add.w	r0, r4, #8
9000c4b6:	f7ff f965 	bl	9000b784 <RCCEx_PLL2_Config>
9000c4ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000c4bc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000c4c0:	2d00      	cmp	r5, #0
9000c4c2:	f47f aec6 	bne.w	9000c252 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
9000c4c6:	e5ea      	b.n	9000c09e <HAL_RCCEx_PeriphCLKConfig+0x732>
            ret = HAL_TIMEOUT;
9000c4c8:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000c4ca:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
9000c4ce:	4635      	mov	r5, r6
9000c4d0:	f7ff bbe1 	b.w	9000bc96 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000c4d4:	2601      	movs	r6, #1
9000c4d6:	f7ff ba76 	b.w	9000b9c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000c4da:	4d20      	ldr	r5, [pc, #128]	; (9000c55c <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
9000c4dc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000c4de:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000c4e2:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
9000c4e4:	f7ff ba68 	b.w	9000b9b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000c4e8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
9000c4ec:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000c4ee:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c4f2:	e4a5      	b.n	9000be40 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000c4f4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
9000c4f8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000c4fa:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c4fe:	e4ad      	b.n	9000be5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        tickstart = HAL_GetTick();
9000c500:	f7fa fb82 	bl	90006c08 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c504:	f8df 8054 	ldr.w	r8, [pc, #84]	; 9000c55c <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        tickstart = HAL_GetTick();
9000c508:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000c50a:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c50e:	e004      	b.n	9000c51a <HAL_RCCEx_PeriphCLKConfig+0xbae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000c510:	f7fa fb7a 	bl	90006c08 <HAL_GetTick>
9000c514:	1bc0      	subs	r0, r0, r7
9000c516:	4548      	cmp	r0, r9
9000c518:	d8d6      	bhi.n	9000c4c8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000c51a:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
9000c51e:	079b      	lsls	r3, r3, #30
9000c520:	d5f6      	bpl.n	9000c510 <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000c522:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000c526:	e63e      	b.n	9000c1a6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
9000c528:	480c      	ldr	r0, [pc, #48]	; (9000c55c <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
9000c52a:	4a0d      	ldr	r2, [pc, #52]	; (9000c560 <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
9000c52c:	6901      	ldr	r1, [r0, #16]
9000c52e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000c532:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
9000c536:	430a      	orrs	r2, r1
9000c538:	6102      	str	r2, [r0, #16]
9000c53a:	e63f      	b.n	9000c1bc <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000c53c:	e9d4 3200 	ldrd	r3, r2, [r4]
9000c540:	462e      	mov	r6, r5
9000c542:	f7ff bba8 	b.w	9000bc96 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000c546:	2601      	movs	r6, #1
9000c548:	4635      	mov	r5, r6
9000c54a:	f7ff bbf0 	b.w	9000bd2e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->FmcClockSelection)
9000c54e:	2601      	movs	r6, #1
9000c550:	4635      	mov	r5, r6
9000c552:	f7ff bb9d 	b.w	9000bc90 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000c556:	2601      	movs	r6, #1
9000c558:	4635      	mov	r5, r6
9000c55a:	e403      	b.n	9000bd64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
9000c55c:	58024400 	.word	0x58024400
9000c560:	00ffffcf 	.word	0x00ffffcf

9000c564 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c564:	4b58      	ldr	r3, [pc, #352]	; (9000c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
{
9000c566:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c568:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
9000c56a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000c56c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
9000c56e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
9000c572:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000c576:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
9000c578:	d05c      	beq.n	9000c634 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000c57a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000c57e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c582:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000c586:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000c58a:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000c58c:	ee07 4a90 	vmov	s15, r4
9000c590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000c594:	d003      	beq.n	9000c59e <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
9000c596:	2902      	cmp	r1, #2
9000c598:	d075      	beq.n	9000c686 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
9000c59a:	2900      	cmp	r1, #0
9000c59c:	d04f      	beq.n	9000c63e <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c59e:	ee07 2a90 	vmov	s15, r2
9000c5a2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 9000c6cc <HAL_RCCEx_GetPLL2ClockFreq+0x168>
9000c5a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000c5ac:	ee86 6aa7 	vdiv.f32	s12, s13, s15
9000c5b0:	ed9f 5a47 	vldr	s10, [pc, #284]	; 9000c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
9000c5b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c5b8:	ee06 3a90 	vmov	s13, r3
9000c5bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c5c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c5c4:	eee7 6a05 	vfma.f32	s13, s14, s10
9000c5c8:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000c5cc:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000c5d0:	4a3d      	ldr	r2, [pc, #244]	; (9000c6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
9000c5d2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c5d6:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000c5d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000c5dc:	ee07 3a10 	vmov	s14, r3
9000c5e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
9000c5e4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000c5e6:	ee37 7a06 	vadd.f32	s14, s14, s12
9000c5ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c5ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c5f2:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
9000c5f6:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000c5f8:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000c5fc:	ee07 3a10 	vmov	s14, r3
9000c600:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000c604:	ee37 7a06 	vadd.f32	s14, s14, s12
9000c608:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c60c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c610:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
9000c614:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000c616:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000c61a:	ee07 3a90 	vmov	s15, r3
9000c61e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c622:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c62a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c62e:	ed80 7a02 	vstr	s14, [r0, #8]
}
9000c632:	4770      	bx	lr
9000c634:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
9000c636:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
9000c63a:	6082      	str	r2, [r0, #8]
}
9000c63c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000c63e:	6819      	ldr	r1, [r3, #0]
9000c640:	0689      	lsls	r1, r1, #26
9000c642:	d527      	bpl.n	9000c694 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c644:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c646:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c64a:	4922      	ldr	r1, [pc, #136]	; (9000c6d4 <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c64c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c652:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c65a:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 9000c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
9000c65e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c662:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c664:	ee06 3a90 	vmov	s13, r3
9000c668:	ee06 1a10 	vmov	s12, r1
9000c66c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c670:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000c674:	eee7 6a05 	vfma.f32	s13, s14, s10
9000c678:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000c67c:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000c680:	ee66 6a87 	vmul.f32	s13, s13, s14
9000c684:	e7a4      	b.n	9000c5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c686:	ee07 2a90 	vmov	s15, r2
9000c68a:	eddf 6a13 	vldr	s13, [pc, #76]	; 9000c6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
9000c68e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c692:	e78a      	b.n	9000c5aa <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000c694:	ee07 2a90 	vmov	s15, r2
9000c698:	ed9f 5a10 	vldr	s10, [pc, #64]	; 9000c6dc <HAL_RCCEx_GetPLL2ClockFreq+0x178>
9000c69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000c69e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c6a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c6a6:	eddf 5a0a 	vldr	s11, [pc, #40]	; 9000c6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
9000c6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c6ae:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000c6b2:	ee07 3a90 	vmov	s15, r3
9000c6b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c6ba:	eee7 7a25 	vfma.f32	s15, s14, s11
9000c6be:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c6c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
9000c6c6:	e783      	b.n	9000c5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
9000c6c8:	58024400 	.word	0x58024400
9000c6cc:	4a742400 	.word	0x4a742400
9000c6d0:	39000000 	.word	0x39000000
9000c6d4:	03d09000 	.word	0x03d09000
9000c6d8:	4bbebc20 	.word	0x4bbebc20
9000c6dc:	4c742400 	.word	0x4c742400

9000c6e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c6e0:	4b58      	ldr	r3, [pc, #352]	; (9000c844 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
{
9000c6e2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c6e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
9000c6e6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000c6e8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
9000c6ea:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
9000c6ee:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000c6f2:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
9000c6f4:	d05c      	beq.n	9000c7b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000c6f6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000c6fa:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c6fe:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000c702:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000c706:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000c708:	ee07 4a90 	vmov	s15, r4
9000c70c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000c710:	d003      	beq.n	9000c71a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
9000c712:	2902      	cmp	r1, #2
9000c714:	d075      	beq.n	9000c802 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
9000c716:	2900      	cmp	r1, #0
9000c718:	d04f      	beq.n	9000c7ba <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c71a:	ee07 2a90 	vmov	s15, r2
9000c71e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 9000c848 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
9000c722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000c728:	ee86 6aa7 	vdiv.f32	s12, s13, s15
9000c72c:	ed9f 5a47 	vldr	s10, [pc, #284]	; 9000c84c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
9000c730:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c734:	ee06 3a90 	vmov	s13, r3
9000c738:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c73c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c740:	eee7 6a05 	vfma.f32	s13, s14, s10
9000c744:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000c748:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
9000c74c:	4a3d      	ldr	r2, [pc, #244]	; (9000c844 <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
9000c74e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c752:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000c754:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000c758:	ee07 3a10 	vmov	s14, r3
9000c75c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
9000c760:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
9000c762:	ee37 7a06 	vadd.f32	s14, s14, s12
9000c766:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c76a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c76e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
9000c772:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000c774:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000c778:	ee07 3a10 	vmov	s14, r3
9000c77c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000c780:	ee37 7a06 	vadd.f32	s14, s14, s12
9000c784:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c78c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
9000c790:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000c792:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000c796:	ee07 3a90 	vmov	s15, r3
9000c79a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c79e:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c7a6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c7aa:	ed80 7a02 	vstr	s14, [r0, #8]
}
9000c7ae:	4770      	bx	lr
9000c7b0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
9000c7b2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
9000c7b6:	6082      	str	r2, [r0, #8]
}
9000c7b8:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000c7ba:	6819      	ldr	r1, [r3, #0]
9000c7bc:	0689      	lsls	r1, r1, #26
9000c7be:	d527      	bpl.n	9000c810 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c7c0:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c7c2:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c7c6:	4922      	ldr	r1, [pc, #136]	; (9000c850 <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c7c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c7ce:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c7d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c7d6:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 9000c84c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
9000c7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c7de:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c7e0:	ee06 3a90 	vmov	s13, r3
9000c7e4:	ee06 1a10 	vmov	s12, r1
9000c7e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c7ec:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000c7f0:	eee7 6a05 	vfma.f32	s13, s14, s10
9000c7f4:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000c7f8:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000c7fc:	ee66 6a87 	vmul.f32	s13, s13, s14
9000c800:	e7a4      	b.n	9000c74c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c802:	ee07 2a90 	vmov	s15, r2
9000c806:	eddf 6a13 	vldr	s13, [pc, #76]	; 9000c854 <HAL_RCCEx_GetPLL3ClockFreq+0x174>
9000c80a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c80e:	e78a      	b.n	9000c726 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000c810:	ee07 2a90 	vmov	s15, r2
9000c814:	ed9f 5a10 	vldr	s10, [pc, #64]	; 9000c858 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
9000c818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000c81a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c81e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c822:	eddf 5a0a 	vldr	s11, [pc, #40]	; 9000c84c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
9000c826:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c82a:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000c82e:	ee07 3a90 	vmov	s15, r3
9000c832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c836:	eee7 7a25 	vfma.f32	s15, s14, s11
9000c83a:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c83e:	ee66 6aa7 	vmul.f32	s13, s13, s15
9000c842:	e783      	b.n	9000c74c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
9000c844:	58024400 	.word	0x58024400
9000c848:	4a742400 	.word	0x4a742400
9000c84c:	39000000 	.word	0x39000000
9000c850:	03d09000 	.word	0x03d09000
9000c854:	4bbebc20 	.word	0x4bbebc20
9000c858:	4c742400 	.word	0x4c742400

9000c85c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c85c:	4b5c      	ldr	r3, [pc, #368]	; (9000c9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
{
9000c85e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c860:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
9000c862:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
9000c864:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
9000c866:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
9000c86a:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c86e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
9000c870:	d05c      	beq.n	9000c92c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c872:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
9000c876:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000c87a:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c87e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000c882:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000c884:	ee07 4a90 	vmov	s15, r4
9000c888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000c88c:	d07e      	beq.n	9000c98c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
9000c88e:	2902      	cmp	r1, #2
9000c890:	d075      	beq.n	9000c97e <HAL_RCCEx_GetPLL1ClockFreq+0x122>
9000c892:	2900      	cmp	r1, #0
9000c894:	d04f      	beq.n	9000c936 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c896:	ee07 2a90 	vmov	s15, r2
9000c89a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 9000c9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
9000c89e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000c8a4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
9000c8a8:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 9000c9d8 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
9000c8ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c8b0:	ee06 3a90 	vmov	s13, r3
9000c8b4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c8b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c8bc:	eee7 6a05 	vfma.f32	s13, s14, s10
9000c8c0:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000c8c4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
9000c8c8:	4a41      	ldr	r2, [pc, #260]	; (9000c9d0 <HAL_RCCEx_GetPLL1ClockFreq+0x174>)
9000c8ca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c8ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000c8d0:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000c8d4:	ee07 3a10 	vmov	s14, r3
9000c8d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
9000c8dc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
9000c8de:	ee37 7a06 	vadd.f32	s14, s14, s12
9000c8e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c8e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c8ea:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
9000c8ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000c8f0:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000c8f4:	ee07 3a10 	vmov	s14, r3
9000c8f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000c8fc:	ee37 7a06 	vadd.f32	s14, s14, s12
9000c900:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000c904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000c908:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
9000c90c:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000c90e:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000c912:	ee07 3a90 	vmov	s15, r3
9000c916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c91a:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c91e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000c922:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000c926:	ed80 7a02 	vstr	s14, [r0, #8]
}
9000c92a:	4770      	bx	lr
9000c92c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
9000c92e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
9000c932:	6082      	str	r2, [r0, #8]
}
9000c934:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000c936:	6819      	ldr	r1, [r3, #0]
9000c938:	0689      	lsls	r1, r1, #26
9000c93a:	d52e      	bpl.n	9000c99a <HAL_RCCEx_GetPLL1ClockFreq+0x13e>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c93c:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c93e:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c942:	4926      	ldr	r1, [pc, #152]	; (9000c9dc <HAL_RCCEx_GetPLL1ClockFreq+0x180>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c944:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000c948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c94a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c94e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c952:	ed9f 5a21 	vldr	s10, [pc, #132]	; 9000c9d8 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
9000c956:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000c95a:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c95c:	ee06 3a90 	vmov	s13, r3
9000c960:	ee06 1a10 	vmov	s12, r1
9000c964:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000c968:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000c96c:	eee7 6a05 	vfma.f32	s13, s14, s10
9000c970:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000c974:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000c978:	ee66 6a87 	vmul.f32	s13, s13, s14
9000c97c:	e7a4      	b.n	9000c8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c97e:	ee07 2a90 	vmov	s15, r2
9000c982:	eddf 6a17 	vldr	s13, [pc, #92]	; 9000c9e0 <HAL_RCCEx_GetPLL1ClockFreq+0x184>
9000c986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c98a:	e78a      	b.n	9000c8a2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c98c:	ee07 2a90 	vmov	s15, r2
9000c990:	eddf 6a14 	vldr	s13, [pc, #80]	; 9000c9e4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
9000c994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c998:	e783      	b.n	9000c8a2 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000c99a:	ee07 2a90 	vmov	s15, r2
9000c99e:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 9000c9d4 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
9000c9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000c9a4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000c9a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c9ac:	eddf 5a0a 	vldr	s11, [pc, #40]	; 9000c9d8 <HAL_RCCEx_GetPLL1ClockFreq+0x17c>
9000c9b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000c9b4:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000c9b8:	ee07 3a90 	vmov	s15, r3
9000c9bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000c9c0:	eee7 7a25 	vfma.f32	s15, s14, s11
9000c9c4:	ee77 7a86 	vadd.f32	s15, s15, s12
9000c9c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
9000c9cc:	e77c      	b.n	9000c8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
9000c9ce:	bf00      	nop
9000c9d0:	58024400 	.word	0x58024400
9000c9d4:	4c742400 	.word	0x4c742400
9000c9d8:	39000000 	.word	0x39000000
9000c9dc:	03d09000 	.word	0x03d09000
9000c9e0:	4bbebc20 	.word	0x4bbebc20
9000c9e4:	4a742400 	.word	0x4a742400

9000c9e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
9000c9e8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
9000c9ec:	430b      	orrs	r3, r1
{
9000c9ee:	b500      	push	{lr}
9000c9f0:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
9000c9f2:	f000 8084 	beq.w	9000cafe <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
9000c9f6:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
9000c9fa:	430b      	orrs	r3, r1
9000c9fc:	d039      	beq.n	9000ca72 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
9000c9fe:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
9000ca02:	430b      	orrs	r3, r1
9000ca04:	f000 80e6 	beq.w	9000cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
9000ca08:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
9000ca0c:	430b      	orrs	r3, r1
9000ca0e:	f000 8089 	beq.w	9000cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
9000ca12:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
9000ca16:	430b      	orrs	r3, r1
9000ca18:	d061      	beq.n	9000cade <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
9000ca1a:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
9000ca1e:	430b      	orrs	r3, r1
9000ca20:	f000 8112 	beq.w	9000cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
9000ca24:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
9000ca28:	430b      	orrs	r3, r1
9000ca2a:	f000 80a3 	beq.w	9000cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
9000ca2e:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
9000ca32:	430b      	orrs	r3, r1
9000ca34:	f000 80fa 	beq.w	9000cc2c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
9000ca38:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
9000ca3c:	430b      	orrs	r3, r1
9000ca3e:	f000 8143 	beq.w	9000ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
9000ca42:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
9000ca46:	ea50 0301 	orrs.w	r3, r0, r1
9000ca4a:	d137      	bne.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
9000ca4c:	4a99      	ldr	r2, [pc, #612]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000ca4e:	6d13      	ldr	r3, [r2, #80]	; 0x50
9000ca50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
9000ca54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000ca58:	f000 8083 	beq.w	9000cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
9000ca5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000ca60:	f000 8156 	beq.w	9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
9000ca64:	bb53      	cbnz	r3, 9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
9000ca66:	6810      	ldr	r0, [r2, #0]
9000ca68:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
9000ca6c:	d044      	beq.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
9000ca6e:	4892      	ldr	r0, [pc, #584]	; (9000ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
9000ca70:	e042      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
9000ca72:	4a90      	ldr	r2, [pc, #576]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000ca74:	6d13      	ldr	r3, [r2, #80]	; 0x50
9000ca76:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
9000ca7a:	2b80      	cmp	r3, #128	; 0x80
9000ca7c:	f000 80a5 	beq.w	9000cbca <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
9000ca80:	d920      	bls.n	9000cac4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
9000ca82:	2bc0      	cmp	r3, #192	; 0xc0
9000ca84:	d037      	beq.n	9000caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000ca86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000ca8a:	d117      	bne.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000ca8c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000ca8e:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000ca90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000ca94:	0749      	lsls	r1, r1, #29
9000ca96:	d502      	bpl.n	9000ca9e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
9000ca98:	2b00      	cmp	r3, #0
9000ca9a:	f000 80c1 	beq.w	9000cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
9000ca9e:	4a85      	ldr	r2, [pc, #532]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000caa0:	6812      	ldr	r2, [r2, #0]
9000caa2:	05d0      	lsls	r0, r2, #23
9000caa4:	d503      	bpl.n	9000caae <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
9000caa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000caaa:	f000 8101 	beq.w	9000ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
9000caae:	4a81      	ldr	r2, [pc, #516]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cab0:	6812      	ldr	r2, [r2, #0]
9000cab2:	0391      	lsls	r1, r2, #14
9000cab4:	d502      	bpl.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
9000cab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000caba:	d0d8      	beq.n	9000ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
9000cabc:	2000      	movs	r0, #0
}
9000cabe:	b005      	add	sp, #20
9000cac0:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
9000cac4:	2b00      	cmp	r3, #0
9000cac6:	d04c      	beq.n	9000cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
9000cac8:	2b40      	cmp	r3, #64	; 0x40
9000caca:	d1f7      	bne.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cacc:	6810      	ldr	r0, [r2, #0]
9000cace:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cad2:	d011      	beq.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000cad4:	a801      	add	r0, sp, #4
9000cad6:	f7ff fd45 	bl	9000c564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
9000cada:	9801      	ldr	r0, [sp, #4]
9000cadc:	e00c      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
9000cade:	4a75      	ldr	r2, [pc, #468]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cae0:	6d13      	ldr	r3, [r2, #80]	; 0x50
9000cae2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
9000cae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
9000caea:	d06e      	beq.n	9000cbca <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
9000caec:	d937      	bls.n	9000cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
9000caee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
9000caf2:	f040 8087 	bne.w	9000cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
9000caf6:	4871      	ldr	r0, [pc, #452]	; (9000ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
9000caf8:	b005      	add	sp, #20
9000cafa:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
9000cafe:	4b6d      	ldr	r3, [pc, #436]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000cb02:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
9000cb06:	2b04      	cmp	r3, #4
9000cb08:	d8d8      	bhi.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
9000cb0a:	a201      	add	r2, pc, #4	; (adr r2, 9000cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
9000cb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000cb10:	9000cbb3 	.word	0x9000cbb3
9000cb14:	9000cb8f 	.word	0x9000cb8f
9000cb18:	9000cb9f 	.word	0x9000cb9f
9000cb1c:	9000caf7 	.word	0x9000caf7
9000cb20:	9000cb9b 	.word	0x9000cb9b
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
9000cb24:	4a63      	ldr	r2, [pc, #396]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb26:	6d93      	ldr	r3, [r2, #88]	; 0x58
9000cb28:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
9000cb2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
9000cb30:	d04b      	beq.n	9000cbca <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
9000cb32:	d944      	bls.n	9000cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
9000cb34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
9000cb38:	d0dd      	beq.n	9000caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cb3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
9000cb3e:	d1bd      	bne.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000cb40:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000cb42:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000cb44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
9000cb48:	0752      	lsls	r2, r2, #29
9000cb4a:	d5a8      	bpl.n	9000ca9e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
9000cb4c:	2b00      	cmp	r3, #0
9000cb4e:	d1a6      	bne.n	9000ca9e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cb50:	4b58      	ldr	r3, [pc, #352]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb52:	485b      	ldr	r0, [pc, #364]	; (9000ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
9000cb54:	681b      	ldr	r3, [r3, #0]
9000cb56:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000cb5a:	40d8      	lsrs	r0, r3
9000cb5c:	e7cc      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
9000cb5e:	2b00      	cmp	r3, #0
9000cb60:	d154      	bne.n	9000cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
9000cb62:	6810      	ldr	r0, [r2, #0]
9000cb64:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
9000cb68:	d0c6      	beq.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
9000cb6a:	a801      	add	r0, sp, #4
9000cb6c:	f7ff fe76 	bl	9000c85c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
9000cb70:	9802      	ldr	r0, [sp, #8]
9000cb72:	e7c1      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
9000cb74:	4a4f      	ldr	r2, [pc, #316]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb76:	6d93      	ldr	r3, [r2, #88]	; 0x58
9000cb78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
9000cb7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000cb80:	f000 80d0 	beq.w	9000cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
9000cb84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000cb88:	d0da      	beq.n	9000cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
9000cb8a:	2b00      	cmp	r3, #0
9000cb8c:	d196      	bne.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cb8e:	4b49      	ldr	r3, [pc, #292]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb90:	6818      	ldr	r0, [r3, #0]
9000cb92:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cb96:	d0af      	beq.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
9000cb98:	e79c      	b.n	9000cad4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
9000cb9a:	4a46      	ldr	r2, [pc, #280]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cb9c:	e776      	b.n	9000ca8c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000cb9e:	4b45      	ldr	r3, [pc, #276]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cba0:	6818      	ldr	r0, [r3, #0]
9000cba2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
9000cba6:	d0a7      	beq.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000cba8:	a801      	add	r0, sp, #4
9000cbaa:	f7ff fd99 	bl	9000c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
9000cbae:	9801      	ldr	r0, [sp, #4]
9000cbb0:	e7a2      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
9000cbb2:	4b40      	ldr	r3, [pc, #256]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cbb4:	6818      	ldr	r0, [r3, #0]
9000cbb6:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
9000cbba:	d09d      	beq.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
9000cbbc:	e7d5      	b.n	9000cb6a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
9000cbbe:	2b00      	cmp	r3, #0
9000cbc0:	d0cf      	beq.n	9000cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
9000cbc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
9000cbc6:	d081      	beq.n	9000cacc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
9000cbc8:	e778      	b.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000cbca:	6810      	ldr	r0, [r2, #0]
9000cbcc:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
9000cbd0:	d092      	beq.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
9000cbd2:	e7e9      	b.n	9000cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
9000cbd4:	4a37      	ldr	r2, [pc, #220]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cbd6:	6d93      	ldr	r3, [r2, #88]	; 0x58
9000cbd8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
9000cbdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
9000cbe0:	d0f3      	beq.n	9000cbca <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
9000cbe2:	d806      	bhi.n	9000cbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
9000cbe4:	2b00      	cmp	r3, #0
9000cbe6:	d0bc      	beq.n	9000cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
9000cbe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
9000cbec:	f43f af6e 	beq.w	9000cacc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
9000cbf0:	e764      	b.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
9000cbf2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
9000cbf6:	f43f af7e 	beq.w	9000caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
9000cbfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
9000cbfe:	f43f af45 	beq.w	9000ca8c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
9000cc02:	e75b      	b.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
9000cc04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000cc08:	d09a      	beq.n	9000cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
9000cc0a:	e757      	b.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
9000cc0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
9000cc10:	f43f af5c 	beq.w	9000cacc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
9000cc14:	e752      	b.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
9000cc16:	6810      	ldr	r0, [r2, #0]
9000cc18:	f010 0004 	ands.w	r0, r0, #4
9000cc1c:	f43f af6c 	beq.w	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cc20:	6813      	ldr	r3, [r2, #0]
9000cc22:	4827      	ldr	r0, [pc, #156]	; (9000ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
9000cc24:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000cc28:	40d8      	lsrs	r0, r3
9000cc2a:	e765      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
9000cc2c:	4b21      	ldr	r3, [pc, #132]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
9000cc30:	03d2      	lsls	r2, r2, #15
9000cc32:	d5bf      	bpl.n	9000cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cc34:	6818      	ldr	r0, [r3, #0]
9000cc36:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cc3a:	f43f af5d 	beq.w	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000cc3e:	a801      	add	r0, sp, #4
9000cc40:	f7ff fc90 	bl	9000c564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
9000cc44:	9803      	ldr	r0, [sp, #12]
9000cc46:	e757      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
9000cc48:	4a1a      	ldr	r2, [pc, #104]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc4a:	6d13      	ldr	r3, [r2, #80]	; 0x50
9000cc4c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
9000cc50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
9000cc54:	d0df      	beq.n	9000cc16 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
9000cc56:	d810      	bhi.n	9000cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
9000cc58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000cc5c:	d058      	beq.n	9000cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
9000cc5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
9000cc62:	d118      	bne.n	9000cc96 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000cc64:	4b13      	ldr	r3, [pc, #76]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc66:	6818      	ldr	r0, [r3, #0]
9000cc68:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
9000cc6c:	f43f af44 	beq.w	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000cc70:	a801      	add	r0, sp, #4
9000cc72:	f7ff fd35 	bl	9000c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
9000cc76:	9802      	ldr	r0, [sp, #8]
9000cc78:	e73e      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
9000cc7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
9000cc7e:	d012      	beq.n	9000cca6 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
9000cc80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000cc84:	f47f af1a 	bne.w	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
9000cc88:	4b0a      	ldr	r3, [pc, #40]	; (9000ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
9000cc8a:	6818      	ldr	r0, [r3, #0]
9000cc8c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
9000cc90:	f43f af32 	beq.w	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
9000cc94:	e6eb      	b.n	9000ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
9000cc96:	2b00      	cmp	r3, #0
9000cc98:	f47f af10 	bne.w	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
9000cc9c:	b005      	add	sp, #20
9000cc9e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
9000cca2:	f7fe bcb3 	b.w	9000b60c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
9000cca6:	6810      	ldr	r0, [r2, #0]
9000cca8:	f410 7080 	ands.w	r0, r0, #256	; 0x100
9000ccac:	f43f af24 	beq.w	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
9000ccb0:	4804      	ldr	r0, [pc, #16]	; (9000ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
9000ccb2:	e721      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
9000ccb4:	58024400 	.word	0x58024400
9000ccb8:	017d7840 	.word	0x017d7840
9000ccbc:	00bb8000 	.word	0x00bb8000
9000ccc0:	03d09000 	.word	0x03d09000
9000ccc4:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
9000ccc8:	4b28      	ldr	r3, [pc, #160]	; (9000cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000ccca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000cccc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
9000ccd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
9000ccd4:	d037      	beq.n	9000cd46 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
9000ccd6:	d814      	bhi.n	9000cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
9000ccd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
9000ccdc:	d03f      	beq.n	9000cd5e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
9000ccde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
9000cce2:	d0bf      	beq.n	9000cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
9000cce4:	2b00      	cmp	r3, #0
9000cce6:	f47f aee9 	bne.w	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
9000ccea:	f7fe fc4f 	bl	9000b58c <HAL_RCC_GetHCLKFreq>
9000ccee:	4b1f      	ldr	r3, [pc, #124]	; (9000cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000ccf0:	4a1f      	ldr	r2, [pc, #124]	; (9000cd70 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
9000ccf2:	6a1b      	ldr	r3, [r3, #32]
9000ccf4:	f3c3 1302 	ubfx	r3, r3, #4, #3
9000ccf8:	5cd3      	ldrb	r3, [r2, r3]
9000ccfa:	f003 031f 	and.w	r3, r3, #31
9000ccfe:	40d8      	lsrs	r0, r3
        break;
9000cd00:	e6fa      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
9000cd02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
9000cd06:	d017      	beq.n	9000cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
9000cd08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
9000cd0c:	d0bc      	beq.n	9000cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
9000cd0e:	e6d5      	b.n	9000cabc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cd10:	6810      	ldr	r0, [r2, #0]
9000cd12:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cd16:	f43f aeef 	beq.w	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000cd1a:	a801      	add	r0, sp, #4
9000cd1c:	f7ff fc22 	bl	9000c564 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
9000cd20:	9802      	ldr	r0, [sp, #8]
9000cd22:	e6e9      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
9000cd24:	6810      	ldr	r0, [r2, #0]
9000cd26:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
9000cd2a:	f43f aee5 	beq.w	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000cd2e:	a801      	add	r0, sp, #4
9000cd30:	f7ff fcd6 	bl	9000c6e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
9000cd34:	9803      	ldr	r0, [sp, #12]
9000cd36:	e6df      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
9000cd38:	4b0c      	ldr	r3, [pc, #48]	; (9000cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000cd3a:	6818      	ldr	r0, [r3, #0]
9000cd3c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
9000cd40:	f43f aeda 	beq.w	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
9000cd44:	e7b4      	b.n	9000ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
9000cd46:	4b09      	ldr	r3, [pc, #36]	; (9000cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000cd48:	6818      	ldr	r0, [r3, #0]
9000cd4a:	f010 0004 	ands.w	r0, r0, #4
9000cd4e:	f43f aed3 	beq.w	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000cd52:	681b      	ldr	r3, [r3, #0]
9000cd54:	4807      	ldr	r0, [pc, #28]	; (9000cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
9000cd56:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000cd5a:	40d8      	lsrs	r0, r3
9000cd5c:	e6cc      	b.n	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
9000cd5e:	4b03      	ldr	r3, [pc, #12]	; (9000cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
9000cd60:	6818      	ldr	r0, [r3, #0]
9000cd62:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
9000cd66:	f43f aec7 	beq.w	9000caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
9000cd6a:	e7d6      	b.n	9000cd1a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
9000cd6c:	58024400 	.word	0x58024400
9000cd70:	900264c0 	.word	0x900264c0
9000cd74:	03d09000 	.word	0x03d09000

9000cd78 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000cd78:	b318      	cbz	r0, 9000cdc2 <HAL_SDRAM_Init+0x4a>
{
9000cd7a:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000cd7c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000cd80:	4604      	mov	r4, r0
9000cd82:	460d      	mov	r5, r1
9000cd84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000cd88:	b1b3      	cbz	r3, 9000cdb8 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000cd8a:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000cd8c:	2302      	movs	r3, #2
9000cd8e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000cd92:	f851 0b04 	ldr.w	r0, [r1], #4
9000cd96:	f000 fa39 	bl	9000d20c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000cd9a:	6862      	ldr	r2, [r4, #4]
9000cd9c:	4629      	mov	r1, r5
9000cd9e:	6820      	ldr	r0, [r4, #0]
9000cda0:	f000 fa72 	bl	9000d288 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000cda4:	4a08      	ldr	r2, [pc, #32]	; (9000cdc8 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000cda6:	2101      	movs	r1, #1

  return HAL_OK;
9000cda8:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000cdaa:	6813      	ldr	r3, [r2, #0]
9000cdac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000cdb0:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000cdb2:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
9000cdb6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000cdb8:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000cdbc:	f7f7 fd58 	bl	90004870 <HAL_SDRAM_MspInit>
9000cdc0:	e7e3      	b.n	9000cd8a <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000cdc2:	2001      	movs	r0, #1
}
9000cdc4:	4770      	bx	lr
9000cdc6:	bf00      	nop
9000cdc8:	52004000 	.word	0x52004000

9000cdcc <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000cdcc:	b510      	push	{r4, lr}
9000cdce:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000cdd0:	f7f7 fdca 	bl	90004968 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000cdd4:	e9d4 0100 	ldrd	r0, r1, [r4]
9000cdd8:	f000 faa2 	bl	9000d320 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000cddc:	2000      	movs	r0, #0
9000cdde:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000cde2:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
9000cde6:	bd10      	pop	{r4, pc}

9000cde8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000cde8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000cdea:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000cdee:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000cdf0:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000cdf2:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000cdf4:	d004      	beq.n	9000ce00 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000cdf6:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
9000cdfa:	2e01      	cmp	r6, #1
9000cdfc:	d001      	beq.n	9000ce02 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000cdfe:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000ce00:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ce02:	2302      	movs	r3, #2
9000ce04:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000ce06:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ce08:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000ce0c:	f000 fa9c 	bl	9000d348 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000ce10:	682b      	ldr	r3, [r5, #0]
9000ce12:	2b02      	cmp	r3, #2
9000ce14:	d003      	beq.n	9000ce1e <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
9000ce16:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
9000ce18:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
9000ce1c:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000ce1e:	2305      	movs	r3, #5
  return HAL_OK;
9000ce20:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000ce22:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000ce26:	bd70      	pop	{r4, r5, r6, pc}

9000ce28 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000ce28:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000ce2a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000ce2e:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000ce30:	2b02      	cmp	r3, #2
9000ce32:	b2d8      	uxtb	r0, r3
9000ce34:	d005      	beq.n	9000ce42 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000ce36:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9000ce3a:	2b01      	cmp	r3, #1
9000ce3c:	b2dd      	uxtb	r5, r3
9000ce3e:	d001      	beq.n	9000ce44 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000ce40:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000ce42:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ce44:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000ce46:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ce48:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000ce4c:	f000 fa94 	bl	9000d378 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000ce50:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000ce52:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
9000ce56:	bd38      	pop	{r3, r4, r5, pc}

9000ce58 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000ce58:	4770      	bx	lr
9000ce5a:	bf00      	nop

9000ce5c <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000ce5c:	2800      	cmp	r0, #0
9000ce5e:	f000 80a5 	beq.w	9000cfac <HAL_TIM_Base_Init+0x150>
{
9000ce62:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000ce64:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000ce68:	4604      	mov	r4, r0
9000ce6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000ce6e:	2b00      	cmp	r3, #0
9000ce70:	d076      	beq.n	9000cf60 <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000ce72:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000ce74:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ce76:	494e      	ldr	r1, [pc, #312]	; (9000cfb0 <HAL_TIM_Base_Init+0x154>)
9000ce78:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000ce7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ce80:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000ce84:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ce86:	fab1 f181 	clz	r1, r1
9000ce8a:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000ce8e:	d027      	beq.n	9000cee0 <HAL_TIM_Base_Init+0x84>
9000ce90:	bb31      	cbnz	r1, 9000cee0 <HAL_TIM_Base_Init+0x84>
9000ce92:	4848      	ldr	r0, [pc, #288]	; (9000cfb4 <HAL_TIM_Base_Init+0x158>)
9000ce94:	4d48      	ldr	r5, [pc, #288]	; (9000cfb8 <HAL_TIM_Base_Init+0x15c>)
9000ce96:	4282      	cmp	r2, r0
9000ce98:	d067      	beq.n	9000cf6a <HAL_TIM_Base_Init+0x10e>
9000ce9a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000ce9e:	4282      	cmp	r2, r0
9000cea0:	d063      	beq.n	9000cf6a <HAL_TIM_Base_Init+0x10e>
9000cea2:	1b55      	subs	r5, r2, r5
9000cea4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000cea8:	fab5 f585 	clz	r5, r5
9000ceac:	4282      	cmp	r2, r0
9000ceae:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000ceb2:	d063      	beq.n	9000cf7c <HAL_TIM_Base_Init+0x120>
9000ceb4:	2d00      	cmp	r5, #0
9000ceb6:	d161      	bne.n	9000cf7c <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000ceb8:	4840      	ldr	r0, [pc, #256]	; (9000cfbc <HAL_TIM_Base_Init+0x160>)
9000ceba:	4941      	ldr	r1, [pc, #260]	; (9000cfc0 <HAL_TIM_Base_Init+0x164>)
9000cebc:	428a      	cmp	r2, r1
9000cebe:	bf18      	it	ne
9000cec0:	4282      	cmpne	r2, r0
9000cec2:	d065      	beq.n	9000cf90 <HAL_TIM_Base_Init+0x134>
9000cec4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000cec8:	428a      	cmp	r2, r1
9000ceca:	d061      	beq.n	9000cf90 <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000cecc:	69a0      	ldr	r0, [r4, #24]
9000cece:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000ced2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000ced4:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000ced6:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000ced8:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000ceda:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000cedc:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000cede:	e023      	b.n	9000cf28 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cee0:	4d35      	ldr	r5, [pc, #212]	; (9000cfb8 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000cee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000cee6:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cee8:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000ceea:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ceec:	fab5 f585 	clz	r5, r5
9000cef0:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000cef2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000cef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000cef8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000cefa:	69a0      	ldr	r0, [r4, #24]
9000cefc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000cf00:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000cf02:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000cf04:	68e3      	ldr	r3, [r4, #12]
9000cf06:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000cf08:	6863      	ldr	r3, [r4, #4]
9000cf0a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000cf0c:	b951      	cbnz	r1, 9000cf24 <HAL_TIM_Base_Init+0xc8>
9000cf0e:	b94d      	cbnz	r5, 9000cf24 <HAL_TIM_Base_Init+0xc8>
9000cf10:	492a      	ldr	r1, [pc, #168]	; (9000cfbc <HAL_TIM_Base_Init+0x160>)
9000cf12:	4b2b      	ldr	r3, [pc, #172]	; (9000cfc0 <HAL_TIM_Base_Init+0x164>)
9000cf14:	429a      	cmp	r2, r3
9000cf16:	bf18      	it	ne
9000cf18:	428a      	cmpne	r2, r1
9000cf1a:	d003      	beq.n	9000cf24 <HAL_TIM_Base_Init+0xc8>
9000cf1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000cf20:	429a      	cmp	r2, r3
9000cf22:	d101      	bne.n	9000cf28 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000cf24:	6963      	ldr	r3, [r4, #20]
9000cf26:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000cf28:	2301      	movs	r3, #1
  return HAL_OK;
9000cf2a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000cf2c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000cf2e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000cf32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000cf36:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000cf3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000cf3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000cf42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000cf46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000cf4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000cf4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000cf52:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000cf56:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000cf5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000cf5e:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000cf60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
9000cf64:	f7ff ff78 	bl	9000ce58 <HAL_TIM_Base_MspInit>
9000cf68:	e783      	b.n	9000ce72 <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf6a:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000cf6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000cf70:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf72:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000cf76:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf78:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000cf7a:	e7ba      	b.n	9000cef2 <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000cf7c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000cf7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000cf82:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000cf84:	480f      	ldr	r0, [pc, #60]	; (9000cfc4 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000cf86:	4282      	cmp	r2, r0
9000cf88:	d0b3      	beq.n	9000cef2 <HAL_TIM_Base_Init+0x96>
9000cf8a:	2d00      	cmp	r5, #0
9000cf8c:	d1b1      	bne.n	9000cef2 <HAL_TIM_Base_Init+0x96>
9000cf8e:	e793      	b.n	9000ceb8 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000cf90:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000cf92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000cf96:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000cf98:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000cf9a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000cf9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000cfa0:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000cfa2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000cfa4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000cfa6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000cfa8:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000cfaa:	e7b1      	b.n	9000cf10 <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
9000cfac:	2001      	movs	r0, #1
}
9000cfae:	4770      	bx	lr
9000cfb0:	40010000 	.word	0x40010000
9000cfb4:	40000400 	.word	0x40000400
9000cfb8:	40010400 	.word	0x40010400
9000cfbc:	40014000 	.word	0x40014000
9000cfc0:	40014400 	.word	0x40014400
9000cfc4:	40000c00 	.word	0x40000c00

9000cfc8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000cfc8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000cfcc:	2b01      	cmp	r3, #1
9000cfce:	d141      	bne.n	9000d054 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000cfd0:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000cfd2:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000cfd4:	4b24      	ldr	r3, [pc, #144]	; (9000d068 <HAL_TIM_Base_Start_IT+0xa0>)
9000cfd6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
9000cfda:	bf18      	it	ne
9000cfdc:	429a      	cmpne	r2, r3
{
9000cfde:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000cfe0:	bf0c      	ite	eq
9000cfe2:	2301      	moveq	r3, #1
9000cfe4:	2300      	movne	r3, #0
9000cfe6:	4d21      	ldr	r5, [pc, #132]	; (9000d06c <HAL_TIM_Base_Start_IT+0xa4>)
9000cfe8:	4c21      	ldr	r4, [pc, #132]	; (9000d070 <HAL_TIM_Base_Start_IT+0xa8>)
9000cfea:	42aa      	cmp	r2, r5
9000cfec:	bf08      	it	eq
9000cfee:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000cff2:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000cff6:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000cff8:	42a2      	cmp	r2, r4
9000cffa:	bf08      	it	eq
9000cffc:	f043 0301 	orreq.w	r3, r3, #1
9000d000:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000d004:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000d008:	481a      	ldr	r0, [pc, #104]	; (9000d074 <HAL_TIM_Base_Start_IT+0xac>)
9000d00a:	42a2      	cmp	r2, r4
9000d00c:	bf08      	it	eq
9000d00e:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000d012:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000d014:	4282      	cmp	r2, r0
9000d016:	bf08      	it	eq
9000d018:	f043 0301 	orreq.w	r3, r3, #1
9000d01c:	4916      	ldr	r1, [pc, #88]	; (9000d078 <HAL_TIM_Base_Start_IT+0xb0>)
9000d01e:	428a      	cmp	r2, r1
9000d020:	bf08      	it	eq
9000d022:	f043 0301 	orreq.w	r3, r3, #1
9000d026:	b933      	cbnz	r3, 9000d036 <HAL_TIM_Base_Start_IT+0x6e>
9000d028:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
9000d02c:	1a10      	subs	r0, r2, r0
9000d02e:	fab0 f080 	clz	r0, r0
9000d032:	0940      	lsrs	r0, r0, #5
9000d034:	b198      	cbz	r0, 9000d05e <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000d036:	6891      	ldr	r1, [r2, #8]
9000d038:	4b10      	ldr	r3, [pc, #64]	; (9000d07c <HAL_TIM_Base_Start_IT+0xb4>)
9000d03a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000d03c:	2b06      	cmp	r3, #6
9000d03e:	d00b      	beq.n	9000d058 <HAL_TIM_Base_Start_IT+0x90>
9000d040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000d044:	d008      	beq.n	9000d058 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
9000d046:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
9000d048:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
9000d04a:	f043 0301 	orr.w	r3, r3, #1
9000d04e:	6013      	str	r3, [r2, #0]
}
9000d050:	bc30      	pop	{r4, r5}
9000d052:	4770      	bx	lr
    return HAL_ERROR;
9000d054:	2001      	movs	r0, #1
}
9000d056:	4770      	bx	lr
  return HAL_OK;
9000d058:	2000      	movs	r0, #0
}
9000d05a:	bc30      	pop	{r4, r5}
9000d05c:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
9000d05e:	6813      	ldr	r3, [r2, #0]
9000d060:	f043 0301 	orr.w	r3, r3, #1
9000d064:	6013      	str	r3, [r2, #0]
9000d066:	e7f3      	b.n	9000d050 <HAL_TIM_Base_Start_IT+0x88>
9000d068:	40010000 	.word	0x40010000
9000d06c:	40000400 	.word	0x40000400
9000d070:	40000800 	.word	0x40000800
9000d074:	40010400 	.word	0x40010400
9000d078:	40001800 	.word	0x40001800
9000d07c:	00010007 	.word	0x00010007

9000d080 <HAL_TIM_OC_DelayElapsedCallback>:
9000d080:	4770      	bx	lr
9000d082:	bf00      	nop

9000d084 <HAL_TIM_IC_CaptureCallback>:
9000d084:	4770      	bx	lr
9000d086:	bf00      	nop

9000d088 <HAL_TIM_PWM_PulseFinishedCallback>:
9000d088:	4770      	bx	lr
9000d08a:	bf00      	nop

9000d08c <HAL_TIM_TriggerCallback>:
9000d08c:	4770      	bx	lr
9000d08e:	bf00      	nop

9000d090 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000d090:	6803      	ldr	r3, [r0, #0]
9000d092:	691a      	ldr	r2, [r3, #16]
9000d094:	0791      	lsls	r1, r2, #30
{
9000d096:	b510      	push	{r4, lr}
9000d098:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000d09a:	d502      	bpl.n	9000d0a2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000d09c:	68da      	ldr	r2, [r3, #12]
9000d09e:	0792      	lsls	r2, r2, #30
9000d0a0:	d468      	bmi.n	9000d174 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000d0a2:	691a      	ldr	r2, [r3, #16]
9000d0a4:	0752      	lsls	r2, r2, #29
9000d0a6:	d502      	bpl.n	9000d0ae <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000d0a8:	68da      	ldr	r2, [r3, #12]
9000d0aa:	0750      	lsls	r0, r2, #29
9000d0ac:	d44f      	bmi.n	9000d14e <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000d0ae:	691a      	ldr	r2, [r3, #16]
9000d0b0:	0711      	lsls	r1, r2, #28
9000d0b2:	d502      	bpl.n	9000d0ba <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000d0b4:	68da      	ldr	r2, [r3, #12]
9000d0b6:	0712      	lsls	r2, r2, #28
9000d0b8:	d437      	bmi.n	9000d12a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000d0ba:	691a      	ldr	r2, [r3, #16]
9000d0bc:	06d0      	lsls	r0, r2, #27
9000d0be:	d502      	bpl.n	9000d0c6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000d0c0:	68da      	ldr	r2, [r3, #12]
9000d0c2:	06d1      	lsls	r1, r2, #27
9000d0c4:	d41e      	bmi.n	9000d104 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000d0c6:	691a      	ldr	r2, [r3, #16]
9000d0c8:	07d2      	lsls	r2, r2, #31
9000d0ca:	d502      	bpl.n	9000d0d2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000d0cc:	68da      	ldr	r2, [r3, #12]
9000d0ce:	07d0      	lsls	r0, r2, #31
9000d0d0:	d469      	bmi.n	9000d1a6 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000d0d2:	691a      	ldr	r2, [r3, #16]
9000d0d4:	0611      	lsls	r1, r2, #24
9000d0d6:	d502      	bpl.n	9000d0de <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000d0d8:	68da      	ldr	r2, [r3, #12]
9000d0da:	0612      	lsls	r2, r2, #24
9000d0dc:	d46b      	bmi.n	9000d1b6 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000d0de:	691a      	ldr	r2, [r3, #16]
9000d0e0:	05d0      	lsls	r0, r2, #23
9000d0e2:	d502      	bpl.n	9000d0ea <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000d0e4:	68da      	ldr	r2, [r3, #12]
9000d0e6:	0611      	lsls	r1, r2, #24
9000d0e8:	d46d      	bmi.n	9000d1c6 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000d0ea:	691a      	ldr	r2, [r3, #16]
9000d0ec:	0652      	lsls	r2, r2, #25
9000d0ee:	d502      	bpl.n	9000d0f6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000d0f0:	68da      	ldr	r2, [r3, #12]
9000d0f2:	0650      	lsls	r0, r2, #25
9000d0f4:	d46f      	bmi.n	9000d1d6 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000d0f6:	691a      	ldr	r2, [r3, #16]
9000d0f8:	0691      	lsls	r1, r2, #26
9000d0fa:	d502      	bpl.n	9000d102 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000d0fc:	68da      	ldr	r2, [r3, #12]
9000d0fe:	0692      	lsls	r2, r2, #26
9000d100:	d449      	bmi.n	9000d196 <HAL_TIM_IRQHandler+0x106>
}
9000d102:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000d104:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000d108:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000d10a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000d10c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000d10e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000d110:	69db      	ldr	r3, [r3, #28]
9000d112:	f413 7f40 	tst.w	r3, #768	; 0x300
9000d116:	d16f      	bne.n	9000d1f8 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000d118:	f7ff ffb2 	bl	9000d080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000d11c:	4620      	mov	r0, r4
9000d11e:	f7ff ffb3 	bl	9000d088 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d122:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000d124:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d126:	7722      	strb	r2, [r4, #28]
9000d128:	e7cd      	b.n	9000d0c6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000d12a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000d12e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000d130:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000d132:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000d134:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000d136:	69db      	ldr	r3, [r3, #28]
9000d138:	079b      	lsls	r3, r3, #30
9000d13a:	d15a      	bne.n	9000d1f2 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000d13c:	f7ff ffa0 	bl	9000d080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000d140:	4620      	mov	r0, r4
9000d142:	f7ff ffa1 	bl	9000d088 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d146:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000d148:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d14a:	7722      	strb	r2, [r4, #28]
9000d14c:	e7b5      	b.n	9000d0ba <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000d14e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000d152:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000d154:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000d156:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000d158:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000d15a:	699b      	ldr	r3, [r3, #24]
9000d15c:	f413 7f40 	tst.w	r3, #768	; 0x300
9000d160:	d144      	bne.n	9000d1ec <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000d162:	f7ff ff8d 	bl	9000d080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000d166:	4620      	mov	r0, r4
9000d168:	f7ff ff8e 	bl	9000d088 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d16c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000d16e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d170:	7722      	strb	r2, [r4, #28]
9000d172:	e79c      	b.n	9000d0ae <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000d174:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000d178:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000d17a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000d17c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000d17e:	699b      	ldr	r3, [r3, #24]
9000d180:	0799      	lsls	r1, r3, #30
9000d182:	d130      	bne.n	9000d1e6 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000d184:	f7ff ff7c 	bl	9000d080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000d188:	4620      	mov	r0, r4
9000d18a:	f7ff ff7d 	bl	9000d088 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d18e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000d190:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000d192:	7722      	strb	r2, [r4, #28]
9000d194:	e785      	b.n	9000d0a2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000d196:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000d19a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000d19c:	611a      	str	r2, [r3, #16]
}
9000d19e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000d1a2:	f000 b82d 	b.w	9000d200 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000d1a6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000d1aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000d1ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000d1ae:	f7f7 f965 	bl	9000447c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000d1b2:	6823      	ldr	r3, [r4, #0]
9000d1b4:	e78d      	b.n	9000d0d2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000d1b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
9000d1ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000d1bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000d1be:	f000 f821 	bl	9000d204 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000d1c2:	6823      	ldr	r3, [r4, #0]
9000d1c4:	e78b      	b.n	9000d0de <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000d1c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
9000d1ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000d1cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000d1ce:	f000 f81b 	bl	9000d208 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000d1d2:	6823      	ldr	r3, [r4, #0]
9000d1d4:	e789      	b.n	9000d0ea <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000d1d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
9000d1da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000d1dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000d1de:	f7ff ff55 	bl	9000d08c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000d1e2:	6823      	ldr	r3, [r4, #0]
9000d1e4:	e787      	b.n	9000d0f6 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000d1e6:	f7ff ff4d 	bl	9000d084 <HAL_TIM_IC_CaptureCallback>
9000d1ea:	e7d0      	b.n	9000d18e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000d1ec:	f7ff ff4a 	bl	9000d084 <HAL_TIM_IC_CaptureCallback>
9000d1f0:	e7bc      	b.n	9000d16c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000d1f2:	f7ff ff47 	bl	9000d084 <HAL_TIM_IC_CaptureCallback>
9000d1f6:	e7a6      	b.n	9000d146 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000d1f8:	f7ff ff44 	bl	9000d084 <HAL_TIM_IC_CaptureCallback>
9000d1fc:	e791      	b.n	9000d122 <HAL_TIM_IRQHandler+0x92>
9000d1fe:	bf00      	nop

9000d200 <HAL_TIMEx_CommutCallback>:
9000d200:	4770      	bx	lr
9000d202:	bf00      	nop

9000d204 <HAL_TIMEx_BreakCallback>:
9000d204:	4770      	bx	lr
9000d206:	bf00      	nop

9000d208 <HAL_TIMEx_Break2Callback>:
9000d208:	4770      	bx	lr
9000d20a:	bf00      	nop

9000d20c <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000d20c:	680b      	ldr	r3, [r1, #0]
{
9000d20e:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000d210:	b9d3      	cbnz	r3, 9000d248 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d212:	6804      	ldr	r4, [r0, #0]
9000d214:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
9000d218:	684a      	ldr	r2, [r1, #4]
9000d21a:	4023      	ands	r3, r4
9000d21c:	4313      	orrs	r3, r2
9000d21e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000d222:	4323      	orrs	r3, r4
9000d224:	4313      	orrs	r3, r2
9000d226:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
9000d22a:	4323      	orrs	r3, r4
9000d22c:	4313      	orrs	r3, r2
9000d22e:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
9000d232:	4323      	orrs	r3, r4
9000d234:	4313      	orrs	r3, r2
9000d236:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
9000d23a:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
9000d23c:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d240:	4313      	orrs	r3, r2
9000d242:	6003      	str	r3, [r0, #0]
}
9000d244:	2000      	movs	r0, #0
9000d246:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d248:	6802      	ldr	r2, [r0, #0]
9000d24a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
9000d24e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
9000d252:	4322      	orrs	r2, r4
9000d254:	6a4c      	ldr	r4, [r1, #36]	; 0x24
9000d256:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000d258:	4b0a      	ldr	r3, [pc, #40]	; (9000d284 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000d25a:	4322      	orrs	r2, r4
9000d25c:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000d25e:	6842      	ldr	r2, [r0, #4]
9000d260:	4013      	ands	r3, r2
9000d262:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
9000d266:	4323      	orrs	r3, r4
9000d268:	4313      	orrs	r3, r2
9000d26a:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
9000d26e:	4323      	orrs	r3, r4
9000d270:	4313      	orrs	r3, r2
9000d272:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
9000d276:	4323      	orrs	r3, r4
}
9000d278:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000d27c:	4313      	orrs	r3, r2
9000d27e:	6043      	str	r3, [r0, #4]
}
9000d280:	2000      	movs	r0, #0
9000d282:	4770      	bx	lr
9000d284:	ffff8000 	.word	0xffff8000

9000d288 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000d288:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000d28a:	bb0a      	cbnz	r2, 9000d2d0 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d28c:	6883      	ldr	r3, [r0, #8]
9000d28e:	e9d1 2400 	ldrd	r2, r4, [r1]
9000d292:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000d296:	3c01      	subs	r4, #1
9000d298:	3a01      	subs	r2, #1
9000d29a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000d29e:	4313      	orrs	r3, r2
9000d2a0:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
9000d2a4:	3a01      	subs	r2, #1
9000d2a6:	3c01      	subs	r4, #1
9000d2a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
9000d2ac:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
9000d2b0:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
9000d2b4:	6989      	ldr	r1, [r1, #24]
9000d2b6:	3b01      	subs	r3, #1
9000d2b8:	3c01      	subs	r4, #1
9000d2ba:	3901      	subs	r1, #1
9000d2bc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
9000d2c0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
9000d2c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9000d2c8:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d2ca:	6083      	str	r3, [r0, #8]
}
9000d2cc:	2000      	movs	r0, #0
9000d2ce:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d2d0:	6882      	ldr	r2, [r0, #8]
9000d2d2:	68cc      	ldr	r4, [r1, #12]
9000d2d4:	4b11      	ldr	r3, [pc, #68]	; (9000d31c <FMC_SDRAM_Timing_Init+0x94>)
9000d2d6:	3c01      	subs	r4, #1
9000d2d8:	4013      	ands	r3, r2
9000d2da:	694a      	ldr	r2, [r1, #20]
9000d2dc:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
9000d2e0:	1e54      	subs	r4, r2, #1
9000d2e2:	ea43 5404 	orr.w	r4, r3, r4, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d2e6:	e9d1 2500 	ldrd	r2, r5, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000d2ea:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d2ec:	68c3      	ldr	r3, [r0, #12]
9000d2ee:	1e6c      	subs	r4, r5, #1
9000d2f0:	3a01      	subs	r2, #1
9000d2f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000d2f6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000d2fa:	690c      	ldr	r4, [r1, #16]
9000d2fc:	431a      	orrs	r2, r3
9000d2fe:	688b      	ldr	r3, [r1, #8]
9000d300:	3c01      	subs	r4, #1
9000d302:	6989      	ldr	r1, [r1, #24]
9000d304:	3b01      	subs	r3, #1
9000d306:	3901      	subs	r1, #1
9000d308:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
9000d30c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
9000d310:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
9000d314:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000d316:	60c3      	str	r3, [r0, #12]
}
9000d318:	2000      	movs	r0, #0
9000d31a:	4770      	bx	lr
9000d31c:	ff0f0fff 	.word	0xff0f0fff

9000d320 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
9000d320:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
9000d322:	2200      	movs	r2, #0
{
9000d324:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9000d326:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000d32a:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
9000d32e:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
9000d332:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9000d336:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000d338:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
9000d33c:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
9000d33e:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
9000d340:	619a      	str	r2, [r3, #24]
}
9000d342:	bc30      	pop	{r4, r5}
9000d344:	4770      	bx	lr
9000d346:	bf00      	nop

9000d348 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000d348:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d34a:	e9d1 3400 	ldrd	r3, r4, [r1]
{
9000d34e:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d350:	6900      	ldr	r0, [r0, #16]
9000d352:	4323      	orrs	r3, r4
9000d354:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
9000d358:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
9000d35c:	4c05      	ldr	r4, [pc, #20]	; (9000d374 <FMC_SDRAM_SendCommand+0x2c>)
9000d35e:	3901      	subs	r1, #1
9000d360:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
9000d362:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d364:	4323      	orrs	r3, r4
}
9000d366:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000d36a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
9000d36e:	6113      	str	r3, [r2, #16]
}
9000d370:	4770      	bx	lr
9000d372:	bf00      	nop
9000d374:	ffc00000 	.word	0xffc00000

9000d378 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000d378:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000d37a:	4b05      	ldr	r3, [pc, #20]	; (9000d390 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
9000d37c:	2000      	movs	r0, #0
{
9000d37e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000d380:	6954      	ldr	r4, [r2, #20]
9000d382:	4023      	ands	r3, r4
}
9000d384:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000d388:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
9000d38c:	6151      	str	r1, [r2, #20]
}
9000d38e:	4770      	bx	lr
9000d390:	ffffc001 	.word	0xffffc001

9000d394 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
9000d394:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
9000d396:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d39a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000d39c:	f002 fc8e 	bl	9000fcbc <xTaskGetSchedulerState>
9000d3a0:	2801      	cmp	r0, #1
9000d3a2:	d100      	bne.n	9000d3a6 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
9000d3a4:	bd08      	pop	{r3, pc}
9000d3a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
9000d3aa:	f000 bccb 	b.w	9000dd44 <xPortSysTickHandler>
9000d3ae:	bf00      	nop

9000d3b0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000d3b0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
9000d3b4:	b92b      	cbnz	r3, 9000d3c2 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
9000d3b6:	4b06      	ldr	r3, [pc, #24]	; (9000d3d0 <osKernelInitialize+0x20>)
9000d3b8:	6818      	ldr	r0, [r3, #0]
9000d3ba:	b928      	cbnz	r0, 9000d3c8 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
9000d3bc:	2201      	movs	r2, #1
9000d3be:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000d3c0:	4770      	bx	lr
    stat = osErrorISR;
9000d3c2:	f06f 0005 	mvn.w	r0, #5
9000d3c6:	4770      	bx	lr
    } else {
      stat = osError;
9000d3c8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
9000d3cc:	4770      	bx	lr
9000d3ce:	bf00      	nop
9000d3d0:	2400c08c 	.word	0x2400c08c

9000d3d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
9000d3d4:	b510      	push	{r4, lr}
9000d3d6:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000d3da:	b974      	cbnz	r4, 9000d3fa <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
9000d3dc:	4b08      	ldr	r3, [pc, #32]	; (9000d400 <osKernelStart+0x2c>)
9000d3de:	681a      	ldr	r2, [r3, #0]
9000d3e0:	2a01      	cmp	r2, #1
9000d3e2:	d107      	bne.n	9000d3f4 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000d3e4:	4907      	ldr	r1, [pc, #28]	; (9000d404 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
9000d3e6:	2202      	movs	r2, #2
9000d3e8:	77cc      	strb	r4, [r1, #31]
9000d3ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
9000d3ec:	f002 f9f6 	bl	9000f7dc <vTaskStartScheduler>
      stat = osOK;
9000d3f0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
9000d3f2:	bd10      	pop	{r4, pc}
      stat = osError;
9000d3f4:	f04f 30ff 	mov.w	r0, #4294967295
}
9000d3f8:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d3fa:	f06f 0005 	mvn.w	r0, #5
}
9000d3fe:	bd10      	pop	{r4, pc}
9000d400:	2400c08c 	.word	0x2400c08c
9000d404:	e000ed00 	.word	0xe000ed00

9000d408 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000d408:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
9000d40a:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000d40c:	b087      	sub	sp, #28
9000d40e:	4614      	mov	r4, r2
  hTask = NULL;
9000d410:	9505      	str	r5, [sp, #20]
9000d412:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
9000d416:	bb4a      	cbnz	r2, 9000d46c <osThreadNew+0x64>
9000d418:	b340      	cbz	r0, 9000d46c <osThreadNew+0x64>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
9000d41a:	b1e4      	cbz	r4, 9000d456 <osThreadNew+0x4e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
9000d41c:	69a6      	ldr	r6, [r4, #24]
9000d41e:	bb4e      	cbnz	r6, 9000d474 <osThreadNew+0x6c>
9000d420:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000d422:	6863      	ldr	r3, [r4, #4]
9000d424:	07db      	lsls	r3, r3, #31
9000d426:	d421      	bmi.n	9000d46c <osThreadNew+0x64>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
9000d428:	6963      	ldr	r3, [r4, #20]
9000d42a:	b33b      	cbz	r3, 9000d47c <osThreadNew+0x74>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
9000d42c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000d430:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
9000d432:	6827      	ldr	r7, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000d434:	b33d      	cbz	r5, 9000d486 <osThreadNew+0x7e>
9000d436:	68e2      	ldr	r2, [r4, #12]
9000d438:	2a5f      	cmp	r2, #95	; 0x5f
9000d43a:	d917      	bls.n	9000d46c <osThreadNew+0x64>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000d43c:	6924      	ldr	r4, [r4, #16]
9000d43e:	b1ab      	cbz	r3, 9000d46c <osThreadNew+0x64>
9000d440:	b1a4      	cbz	r4, 9000d46c <osThreadNew+0x64>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000d442:	460b      	mov	r3, r1
9000d444:	4662      	mov	r2, ip
9000d446:	4639      	mov	r1, r7
9000d448:	9600      	str	r6, [sp, #0]
9000d44a:	e9cd 4501 	strd	r4, r5, [sp, #4]
9000d44e:	f002 f903 	bl	9000f658 <xTaskCreateStatic>
9000d452:	4605      	mov	r5, r0
9000d454:	e00b      	b.n	9000d46e <osThreadNew+0x66>
9000d456:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
9000d458:	2618      	movs	r6, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000d45a:	460b      	mov	r3, r1
9000d45c:	4621      	mov	r1, r4
9000d45e:	ac05      	add	r4, sp, #20
9000d460:	9600      	str	r6, [sp, #0]
9000d462:	9401      	str	r4, [sp, #4]
9000d464:	f002 f932 	bl	9000f6cc <xTaskCreate>
9000d468:	2801      	cmp	r0, #1
9000d46a:	d00a      	beq.n	9000d482 <osThreadNew+0x7a>
        return (NULL);
9000d46c:	2500      	movs	r5, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
9000d46e:	4628      	mov	r0, r5
9000d470:	b007      	add	sp, #28
9000d472:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000d474:	1e72      	subs	r2, r6, #1
9000d476:	2a37      	cmp	r2, #55	; 0x37
9000d478:	d9d3      	bls.n	9000d422 <osThreadNew+0x1a>
9000d47a:	e7f8      	b.n	9000d46e <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
9000d47c:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000d480:	e7d6      	b.n	9000d430 <osThreadNew+0x28>
  return ((osThreadId_t)hTask);
9000d482:	9d05      	ldr	r5, [sp, #20]
9000d484:	e7f3      	b.n	9000d46e <osThreadNew+0x66>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000d486:	68e3      	ldr	r3, [r4, #12]
9000d488:	2b00      	cmp	r3, #0
9000d48a:	d1f0      	bne.n	9000d46e <osThreadNew+0x66>
9000d48c:	6923      	ldr	r3, [r4, #16]
9000d48e:	2b00      	cmp	r3, #0
9000d490:	d1ed      	bne.n	9000d46e <osThreadNew+0x66>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000d492:	fa1f f28c 	uxth.w	r2, ip
9000d496:	463c      	mov	r4, r7
9000d498:	e7df      	b.n	9000d45a <osThreadNew+0x52>
9000d49a:	bf00      	nop

9000d49c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
9000d49c:	b510      	push	{r4, lr}
9000d49e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000d4a2:	b92c      	cbnz	r4, 9000d4b0 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
9000d4a4:	b900      	cbnz	r0, 9000d4a8 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
9000d4a6:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
9000d4a8:	f002 f942 	bl	9000f730 <vTaskDelay>
    stat = osOK;
9000d4ac:	4620      	mov	r0, r4
}
9000d4ae:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d4b0:	f06f 0005 	mvn.w	r0, #5
}
9000d4b4:	bd10      	pop	{r4, pc}
9000d4b6:	bf00      	nop

9000d4b8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000d4b8:	b530      	push	{r4, r5, lr}
9000d4ba:	b083      	sub	sp, #12
9000d4bc:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
9000d4c0:	b99d      	cbnz	r5, 9000d4ea <osMutexNew+0x32>
    if (attr != NULL) {
9000d4c2:	4604      	mov	r4, r0
9000d4c4:	b1a0      	cbz	r0, 9000d4f0 <osMutexNew+0x38>
      type = attr->attr_bits;
9000d4c6:	6845      	ldr	r5, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
9000d4c8:	072b      	lsls	r3, r5, #28
9000d4ca:	d40e      	bmi.n	9000d4ea <osMutexNew+0x32>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000d4cc:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
9000d4ce:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000d4d2:	68c3      	ldr	r3, [r0, #12]
9000d4d4:	b141      	cbz	r1, 9000d4e8 <osMutexNew+0x30>
9000d4d6:	2b4f      	cmp	r3, #79	; 0x4f
9000d4d8:	d907      	bls.n	9000d4ea <osMutexNew+0x32>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
9000d4da:	b1d5      	cbz	r5, 9000d512 <osMutexNew+0x5a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000d4dc:	2004      	movs	r0, #4
9000d4de:	f001 f843 	bl	9000e568 <xQueueCreateMutexStatic>
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
9000d4e2:	b110      	cbz	r0, 9000d4ea <osMutexNew+0x32>
        if (attr != NULL) {
          name = attr->name;
9000d4e4:	6824      	ldr	r4, [r4, #0]
9000d4e6:	e009      	b.n	9000d4fc <osMutexNew+0x44>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000d4e8:	b1bb      	cbz	r3, 9000d51a <osMutexNew+0x62>
  hMutex = NULL;
9000d4ea:	2000      	movs	r0, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
9000d4ec:	b003      	add	sp, #12
9000d4ee:	bd30      	pop	{r4, r5, pc}
              hMutex = xSemaphoreCreateMutex ();
9000d4f0:	2001      	movs	r0, #1
9000d4f2:	f001 f8a9 	bl	9000e648 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000d4f6:	2800      	cmp	r0, #0
9000d4f8:	d0f7      	beq.n	9000d4ea <osMutexNew+0x32>
9000d4fa:	4625      	mov	r5, r4
        vQueueAddToRegistry (hMutex, name);
9000d4fc:	4621      	mov	r1, r4
9000d4fe:	9001      	str	r0, [sp, #4]
9000d500:	f001 fd6c 	bl	9000efdc <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
9000d504:	9801      	ldr	r0, [sp, #4]
9000d506:	2d00      	cmp	r5, #0
9000d508:	d0f0      	beq.n	9000d4ec <osMutexNew+0x34>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
9000d50a:	f040 0001 	orr.w	r0, r0, #1
}
9000d50e:	b003      	add	sp, #12
9000d510:	bd30      	pop	{r4, r5, pc}
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000d512:	2001      	movs	r0, #1
9000d514:	f001 f828 	bl	9000e568 <xQueueCreateMutexStatic>
9000d518:	e7e3      	b.n	9000d4e2 <osMutexNew+0x2a>
            if (rmtx != 0U) {
9000d51a:	b91d      	cbnz	r5, 9000d524 <osMutexNew+0x6c>
              hMutex = xSemaphoreCreateMutex ();
9000d51c:	2001      	movs	r0, #1
9000d51e:	f001 f893 	bl	9000e648 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000d522:	e7de      	b.n	9000d4e2 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateRecursiveMutex ();
9000d524:	2004      	movs	r0, #4
9000d526:	f001 f88f 	bl	9000e648 <xQueueCreateMutex>
9000d52a:	e7da      	b.n	9000d4e2 <osMutexNew+0x2a>

9000d52c <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
9000d52c:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
9000d530:	f000 0301 	and.w	r3, r0, #1
9000d534:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
9000d538:	b9a8      	cbnz	r0, 9000d566 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000d53a:	b1ba      	cbz	r2, 9000d56c <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000d53c:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000d53e:	b510      	push	{r4, lr}
9000d540:	460c      	mov	r4, r1
    if (rmtx != 0U) {
9000d542:	b953      	cbnz	r3, 9000d55a <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000d544:	f001 fafc 	bl	9000eb40 <xQueueSemaphoreTake>
9000d548:	2801      	cmp	r0, #1
9000d54a:	d00a      	beq.n	9000d562 <osMutexAcquire+0x36>
          stat = osErrorResource;
9000d54c:	2c00      	cmp	r4, #0
9000d54e:	bf14      	ite	ne
9000d550:	f06f 0001 	mvnne.w	r0, #1
9000d554:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
9000d558:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000d55a:	f001 fc79 	bl	9000ee50 <xQueueTakeMutexRecursive>
9000d55e:	2801      	cmp	r0, #1
9000d560:	d1f4      	bne.n	9000d54c <osMutexAcquire+0x20>
  stat = osOK;
9000d562:	2000      	movs	r0, #0
}
9000d564:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d566:	f06f 0005 	mvn.w	r0, #5
9000d56a:	4770      	bx	lr
    stat = osErrorParameter;
9000d56c:	f06f 0003 	mvn.w	r0, #3
}
9000d570:	4770      	bx	lr
9000d572:	bf00      	nop

9000d574 <osMutexRelease>:
9000d574:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000d578:	b9ba      	cbnz	r2, 9000d5aa <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
9000d57a:	b510      	push	{r4, lr}
9000d57c:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000d580:	b1b4      	cbz	r4, 9000d5b0 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000d582:	f000 0301 	and.w	r3, r0, #1
9000d586:	b943      	cbnz	r3, 9000d59a <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
9000d588:	461a      	mov	r2, r3
9000d58a:	4619      	mov	r1, r3
9000d58c:	4620      	mov	r0, r4
9000d58e:	f000 fe69 	bl	9000e264 <xQueueGenericSend>
9000d592:	2801      	cmp	r0, #1
9000d594:	d106      	bne.n	9000d5a4 <osMutexRelease+0x30>
  stat = osOK;
9000d596:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000d598:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
9000d59a:	4620      	mov	r0, r4
9000d59c:	f001 f834 	bl	9000e608 <xQueueGiveMutexRecursive>
9000d5a0:	2801      	cmp	r0, #1
9000d5a2:	d0f8      	beq.n	9000d596 <osMutexRelease+0x22>
        stat = osErrorResource;
9000d5a4:	f06f 0002 	mvn.w	r0, #2
}
9000d5a8:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000d5aa:	f06f 0005 	mvn.w	r0, #5
}
9000d5ae:	4770      	bx	lr
    stat = osErrorParameter;
9000d5b0:	f06f 0003 	mvn.w	r0, #3
}
9000d5b4:	bd10      	pop	{r4, pc}
9000d5b6:	bf00      	nop

9000d5b8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
9000d5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
9000d5ba:	b083      	sub	sp, #12
9000d5bc:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000d5c0:	b98e      	cbnz	r6, 9000d5e6 <osSemaphoreNew+0x2e>
9000d5c2:	4605      	mov	r5, r0
9000d5c4:	b178      	cbz	r0, 9000d5e6 <osSemaphoreNew+0x2e>
9000d5c6:	4288      	cmp	r0, r1
9000d5c8:	460f      	mov	r7, r1
9000d5ca:	d30c      	bcc.n	9000d5e6 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
9000d5cc:	4614      	mov	r4, r2
9000d5ce:	b182      	cbz	r2, 9000d5f2 <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000d5d0:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
9000d5d4:	b15a      	cbz	r2, 9000d5ee <osSemaphoreNew+0x36>
9000d5d6:	2b4f      	cmp	r3, #79	; 0x4f
9000d5d8:	d905      	bls.n	9000d5e6 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
9000d5da:	2801      	cmp	r0, #1
9000d5dc:	d032      	beq.n	9000d644 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
9000d5de:	f000 fd99 	bl	9000e114 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
9000d5e2:	4605      	mov	r5, r0
9000d5e4:	b978      	cbnz	r0, 9000d606 <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
9000d5e6:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
9000d5e8:	4628      	mov	r0, r5
9000d5ea:	b003      	add	sp, #12
9000d5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000d5ee:	2b00      	cmp	r3, #0
9000d5f0:	d1f9      	bne.n	9000d5e6 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
9000d5f2:	2d01      	cmp	r5, #1
9000d5f4:	d00f      	beq.n	9000d616 <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
9000d5f6:	4628      	mov	r0, r5
9000d5f8:	4639      	mov	r1, r7
9000d5fa:	f000 fded 	bl	9000e1d8 <xQueueCreateCountingSemaphore>
9000d5fe:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
9000d600:	2d00      	cmp	r5, #0
9000d602:	d0f0      	beq.n	9000d5e6 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
9000d604:	b104      	cbz	r4, 9000d608 <osSemaphoreNew+0x50>
          name = attr->name;
9000d606:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
9000d608:	4628      	mov	r0, r5
9000d60a:	4621      	mov	r1, r4
9000d60c:	f001 fce6 	bl	9000efdc <vQueueAddToRegistry>
}
9000d610:	4628      	mov	r0, r5
9000d612:	b003      	add	sp, #12
9000d614:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
9000d616:	4628      	mov	r0, r5
9000d618:	2203      	movs	r2, #3
9000d61a:	2100      	movs	r1, #0
9000d61c:	f000 fd38 	bl	9000e090 <xQueueGenericCreate>
9000d620:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
9000d622:	2d00      	cmp	r5, #0
9000d624:	d0df      	beq.n	9000d5e6 <osSemaphoreNew+0x2e>
9000d626:	2f00      	cmp	r7, #0
9000d628:	d0ea      	beq.n	9000d600 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000d62a:	2300      	movs	r3, #0
9000d62c:	4628      	mov	r0, r5
9000d62e:	461a      	mov	r2, r3
9000d630:	4619      	mov	r1, r3
9000d632:	f000 fe17 	bl	9000e264 <xQueueGenericSend>
9000d636:	2801      	cmp	r0, #1
9000d638:	d0e4      	beq.n	9000d604 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
9000d63a:	4628      	mov	r0, r5
            hSemaphore = NULL;
9000d63c:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
9000d63e:	f001 fc87 	bl	9000ef50 <vQueueDelete>
      if (hSemaphore != NULL) {
9000d642:	e7d1      	b.n	9000d5e8 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
9000d644:	4613      	mov	r3, r2
9000d646:	2203      	movs	r2, #3
9000d648:	4631      	mov	r1, r6
9000d64a:	9200      	str	r2, [sp, #0]
9000d64c:	4632      	mov	r2, r6
9000d64e:	f000 fcb3 	bl	9000dfb8 <xQueueGenericCreateStatic>
9000d652:	4605      	mov	r5, r0
9000d654:	e7e5      	b.n	9000d622 <osSemaphoreNew+0x6a>
9000d656:	bf00      	nop

9000d658 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000d658:	b370      	cbz	r0, 9000d6b8 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
9000d65a:	b510      	push	{r4, lr}
9000d65c:	460c      	mov	r4, r1
9000d65e:	b082      	sub	sp, #8
9000d660:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000d664:	b1c3      	cbz	r3, 9000d698 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
9000d666:	bb21      	cbnz	r1, 9000d6b2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000d668:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000d66a:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000d66c:	f001 fc10 	bl	9000ee90 <xQueueReceiveFromISR>
9000d670:	2801      	cmp	r0, #1
9000d672:	d11a      	bne.n	9000d6aa <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000d674:	9b01      	ldr	r3, [sp, #4]
9000d676:	b913      	cbnz	r3, 9000d67e <osSemaphoreAcquire+0x26>
  stat = osOK;
9000d678:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000d67a:	b002      	add	sp, #8
9000d67c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
9000d67e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d686:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d68a:	f3bf 8f4f 	dsb	sy
9000d68e:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000d692:	4620      	mov	r0, r4
}
9000d694:	b002      	add	sp, #8
9000d696:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
9000d698:	f001 fa52 	bl	9000eb40 <xQueueSemaphoreTake>
9000d69c:	2801      	cmp	r0, #1
9000d69e:	d0eb      	beq.n	9000d678 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
9000d6a0:	b11c      	cbz	r4, 9000d6aa <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
9000d6a2:	f06f 0001 	mvn.w	r0, #1
}
9000d6a6:	b002      	add	sp, #8
9000d6a8:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
9000d6aa:	f06f 0002 	mvn.w	r0, #2
}
9000d6ae:	b002      	add	sp, #8
9000d6b0:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000d6b2:	f06f 0003 	mvn.w	r0, #3
9000d6b6:	e7e0      	b.n	9000d67a <osSemaphoreAcquire+0x22>
9000d6b8:	f06f 0003 	mvn.w	r0, #3
}
9000d6bc:	4770      	bx	lr
9000d6be:	bf00      	nop

9000d6c0 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000d6c0:	b330      	cbz	r0, 9000d710 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
9000d6c2:	b510      	push	{r4, lr}
9000d6c4:	b082      	sub	sp, #8
9000d6c6:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000d6ca:	b1ab      	cbz	r3, 9000d6f8 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
9000d6cc:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000d6ce:	a901      	add	r1, sp, #4
    yield = pdFALSE;
9000d6d0:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000d6d2:	f001 f85b 	bl	9000e78c <xQueueGiveFromISR>
9000d6d6:	2801      	cmp	r0, #1
9000d6d8:	d117      	bne.n	9000d70a <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
9000d6da:	9b01      	ldr	r3, [sp, #4]
9000d6dc:	b193      	cbz	r3, 9000d704 <osSemaphoreRelease+0x44>
9000d6de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d6e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d6e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d6ea:	f3bf 8f4f 	dsb	sy
9000d6ee:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000d6f2:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
9000d6f4:	b002      	add	sp, #8
9000d6f6:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000d6f8:	461a      	mov	r2, r3
9000d6fa:	4619      	mov	r1, r3
9000d6fc:	f000 fdb2 	bl	9000e264 <xQueueGenericSend>
9000d700:	2801      	cmp	r0, #1
9000d702:	d102      	bne.n	9000d70a <osSemaphoreRelease+0x4a>
  stat = osOK;
9000d704:	2000      	movs	r0, #0
}
9000d706:	b002      	add	sp, #8
9000d708:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
9000d70a:	f06f 0002 	mvn.w	r0, #2
9000d70e:	e7fa      	b.n	9000d706 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
9000d710:	f06f 0003 	mvn.w	r0, #3
}
9000d714:	4770      	bx	lr
9000d716:	bf00      	nop

9000d718 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
9000d718:	b5f0      	push	{r4, r5, r6, r7, lr}
9000d71a:	b085      	sub	sp, #20
9000d71c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000d720:	b987      	cbnz	r7, 9000d744 <osMessageQueueNew+0x2c>
9000d722:	4605      	mov	r5, r0
9000d724:	b170      	cbz	r0, 9000d744 <osMessageQueueNew+0x2c>
9000d726:	b169      	cbz	r1, 9000d744 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
9000d728:	4614      	mov	r4, r2
9000d72a:	b172      	cbz	r2, 9000d74a <osMessageQueueNew+0x32>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000d72c:	6893      	ldr	r3, [r2, #8]
9000d72e:	b1bb      	cbz	r3, 9000d760 <osMessageQueueNew+0x48>
9000d730:	68d2      	ldr	r2, [r2, #12]
9000d732:	2a4f      	cmp	r2, #79	; 0x4f
9000d734:	d906      	bls.n	9000d744 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000d736:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000d738:	b122      	cbz	r2, 9000d744 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000d73a:	fb01 f505 	mul.w	r5, r1, r5
9000d73e:	6966      	ldr	r6, [r4, #20]
9000d740:	42ae      	cmp	r6, r5
9000d742:	d21c      	bcs.n	9000d77e <osMessageQueueNew+0x66>
  hQueue = NULL;
9000d744:	2000      	movs	r0, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
9000d746:	b005      	add	sp, #20
9000d748:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
9000d74a:	f000 fca1 	bl	9000e090 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000d74e:	2800      	cmp	r0, #0
9000d750:	d0f8      	beq.n	9000d744 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
9000d752:	4621      	mov	r1, r4
9000d754:	9003      	str	r0, [sp, #12]
9000d756:	f001 fc41 	bl	9000efdc <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
9000d75a:	9803      	ldr	r0, [sp, #12]
}
9000d75c:	b005      	add	sp, #20
9000d75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
9000d760:	68d3      	ldr	r3, [r2, #12]
9000d762:	2b00      	cmp	r3, #0
9000d764:	d1ee      	bne.n	9000d744 <osMessageQueueNew+0x2c>
9000d766:	6913      	ldr	r3, [r2, #16]
9000d768:	2b00      	cmp	r3, #0
9000d76a:	d1eb      	bne.n	9000d744 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
9000d76c:	6952      	ldr	r2, [r2, #20]
9000d76e:	2a00      	cmp	r2, #0
9000d770:	d1e8      	bne.n	9000d744 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
9000d772:	f000 fc8d 	bl	9000e090 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000d776:	2800      	cmp	r0, #0
9000d778:	d0e4      	beq.n	9000d744 <osMessageQueueNew+0x2c>
        name = attr->name;
9000d77a:	6824      	ldr	r4, [r4, #0]
9000d77c:	e7e9      	b.n	9000d752 <osMessageQueueNew+0x3a>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
9000d77e:	9700      	str	r7, [sp, #0]
9000d780:	f000 fc1a 	bl	9000dfb8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
9000d784:	2800      	cmp	r0, #0
9000d786:	d1f8      	bne.n	9000d77a <osMessageQueueNew+0x62>
9000d788:	e7dc      	b.n	9000d744 <osMessageQueueNew+0x2c>
9000d78a:	bf00      	nop

9000d78c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
9000d78c:	b530      	push	{r4, r5, lr}
9000d78e:	461c      	mov	r4, r3
9000d790:	b083      	sub	sp, #12
9000d792:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000d796:	b30b      	cbz	r3, 9000d7dc <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000d798:	3c00      	subs	r4, #0
9000d79a:	bf18      	it	ne
9000d79c:	2401      	movne	r4, #1
9000d79e:	2900      	cmp	r1, #0
9000d7a0:	bf08      	it	eq
9000d7a2:	f044 0401 	orreq.w	r4, r4, #1
9000d7a6:	bb7c      	cbnz	r4, 9000d808 <osMessageQueuePut+0x7c>
9000d7a8:	fab0 f480 	clz	r4, r0
9000d7ac:	0964      	lsrs	r4, r4, #5
9000d7ae:	b358      	cbz	r0, 9000d808 <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000d7b0:	4623      	mov	r3, r4
9000d7b2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000d7b4:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000d7b6:	f000 ff7f 	bl	9000e6b8 <xQueueGenericSendFromISR>
9000d7ba:	2801      	cmp	r0, #1
9000d7bc:	d120      	bne.n	9000d800 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000d7be:	9b01      	ldr	r3, [sp, #4]
9000d7c0:	b1db      	cbz	r3, 9000d7fa <osMessageQueuePut+0x6e>
9000d7c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d7ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d7ce:	f3bf 8f4f 	dsb	sy
9000d7d2:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000d7d6:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000d7d8:	b003      	add	sp, #12
9000d7da:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000d7dc:	b1a0      	cbz	r0, 9000d808 <osMessageQueuePut+0x7c>
9000d7de:	fab1 f381 	clz	r3, r1
9000d7e2:	095b      	lsrs	r3, r3, #5
9000d7e4:	b181      	cbz	r1, 9000d808 <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000d7e6:	4622      	mov	r2, r4
9000d7e8:	f000 fd3c 	bl	9000e264 <xQueueGenericSend>
9000d7ec:	2801      	cmp	r0, #1
9000d7ee:	d004      	beq.n	9000d7fa <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
9000d7f0:	b134      	cbz	r4, 9000d800 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
9000d7f2:	f06f 0001 	mvn.w	r0, #1
}
9000d7f6:	b003      	add	sp, #12
9000d7f8:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000d7fa:	2000      	movs	r0, #0
}
9000d7fc:	b003      	add	sp, #12
9000d7fe:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000d800:	f06f 0002 	mvn.w	r0, #2
}
9000d804:	b003      	add	sp, #12
9000d806:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000d808:	f06f 0003 	mvn.w	r0, #3
9000d80c:	e7e4      	b.n	9000d7d8 <osMessageQueuePut+0x4c>
9000d80e:	bf00      	nop

9000d810 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
9000d810:	b530      	push	{r4, r5, lr}
9000d812:	461c      	mov	r4, r3
9000d814:	b083      	sub	sp, #12
9000d816:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000d81a:	b303      	cbz	r3, 9000d85e <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000d81c:	3c00      	subs	r4, #0
9000d81e:	bf18      	it	ne
9000d820:	2401      	movne	r4, #1
9000d822:	2900      	cmp	r1, #0
9000d824:	bf08      	it	eq
9000d826:	f044 0401 	orreq.w	r4, r4, #1
9000d82a:	bb5c      	cbnz	r4, 9000d884 <osMessageQueueGet+0x74>
9000d82c:	fab0 f480 	clz	r4, r0
9000d830:	0964      	lsrs	r4, r4, #5
9000d832:	b338      	cbz	r0, 9000d884 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000d834:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000d836:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000d838:	f001 fb2a 	bl	9000ee90 <xQueueReceiveFromISR>
9000d83c:	2801      	cmp	r0, #1
9000d83e:	d11d      	bne.n	9000d87c <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000d840:	9b01      	ldr	r3, [sp, #4]
9000d842:	b1c3      	cbz	r3, 9000d876 <osMessageQueueGet+0x66>
9000d844:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d84c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000d850:	f3bf 8f4f 	dsb	sy
9000d854:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000d858:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000d85a:	b003      	add	sp, #12
9000d85c:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000d85e:	b188      	cbz	r0, 9000d884 <osMessageQueueGet+0x74>
9000d860:	b181      	cbz	r1, 9000d884 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000d862:	4622      	mov	r2, r4
9000d864:	f000 ffea 	bl	9000e83c <xQueueReceive>
9000d868:	2801      	cmp	r0, #1
9000d86a:	d004      	beq.n	9000d876 <osMessageQueueGet+0x66>
        if (timeout != 0U) {
9000d86c:	b134      	cbz	r4, 9000d87c <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
9000d86e:	f06f 0001 	mvn.w	r0, #1
}
9000d872:	b003      	add	sp, #12
9000d874:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000d876:	2000      	movs	r0, #0
}
9000d878:	b003      	add	sp, #12
9000d87a:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000d87c:	f06f 0002 	mvn.w	r0, #2
}
9000d880:	b003      	add	sp, #12
9000d882:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000d884:	f06f 0003 	mvn.w	r0, #3
9000d888:	e7e7      	b.n	9000d85a <osMessageQueueGet+0x4a>
9000d88a:	bf00      	nop

9000d88c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000d88c:	4b04      	ldr	r3, [pc, #16]	; (9000d8a0 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000d88e:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000d890:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000d892:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000d894:	4c03      	ldr	r4, [pc, #12]	; (9000d8a4 <vApplicationGetIdleTaskMemory+0x18>)
9000d896:	600c      	str	r4, [r1, #0]
}
9000d898:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000d89c:	6013      	str	r3, [r2, #0]
}
9000d89e:	4770      	bx	lr
9000d8a0:	2400c02c 	.word	0x2400c02c
9000d8a4:	2400be2c 	.word	0x2400be2c

9000d8a8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000d8a8:	4b05      	ldr	r3, [pc, #20]	; (9000d8c0 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000d8aa:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000d8ac:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000d8ae:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000d8b2:	4c04      	ldr	r4, [pc, #16]	; (9000d8c4 <vApplicationGetTimerTaskMemory+0x1c>)
9000d8b4:	600c      	str	r4, [r1, #0]
}
9000d8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000d8ba:	6013      	str	r3, [r2, #0]
}
9000d8bc:	4770      	bx	lr
9000d8be:	bf00      	nop
9000d8c0:	2400c490 	.word	0x2400c490
9000d8c4:	2400c090 	.word	0x2400c090

9000d8c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000d8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d8cc:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
9000d8ce:	f002 f821 	bl	9000f914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000d8d2:	4a52      	ldr	r2, [pc, #328]	; (9000da1c <pvPortMalloc+0x154>)
9000d8d4:	6816      	ldr	r6, [r2, #0]
9000d8d6:	2e00      	cmp	r6, #0
9000d8d8:	d06f      	beq.n	9000d9ba <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000d8da:	4b51      	ldr	r3, [pc, #324]	; (9000da20 <pvPortMalloc+0x158>)
9000d8dc:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000d8de:	423d      	tst	r5, r7
9000d8e0:	d12e      	bne.n	9000d940 <pvPortMalloc+0x78>
9000d8e2:	b36d      	cbz	r5, 9000d940 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
9000d8e4:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000d8e8:	076d      	lsls	r5, r5, #29
9000d8ea:	d002      	beq.n	9000d8f2 <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000d8ec:	f024 0407 	bic.w	r4, r4, #7
9000d8f0:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000d8f2:	b32c      	cbz	r4, 9000d940 <pvPortMalloc+0x78>
9000d8f4:	f8df c140 	ldr.w	ip, [pc, #320]	; 9000da38 <pvPortMalloc+0x170>
9000d8f8:	f8dc 5000 	ldr.w	r5, [ip]
9000d8fc:	42a5      	cmp	r5, r4
9000d8fe:	d31f      	bcc.n	9000d940 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
9000d900:	4848      	ldr	r0, [pc, #288]	; (9000da24 <pvPortMalloc+0x15c>)
9000d902:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000d904:	e003      	b.n	9000d90e <pvPortMalloc+0x46>
9000d906:	681a      	ldr	r2, [r3, #0]
9000d908:	b122      	cbz	r2, 9000d914 <pvPortMalloc+0x4c>
9000d90a:	4618      	mov	r0, r3
9000d90c:	4613      	mov	r3, r2
9000d90e:	6859      	ldr	r1, [r3, #4]
9000d910:	42a1      	cmp	r1, r4
9000d912:	d3f8      	bcc.n	9000d906 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000d914:	42b3      	cmp	r3, r6
9000d916:	d013      	beq.n	9000d940 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000d918:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000d91a:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000d91c:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000d920:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000d922:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000d926:	d929      	bls.n	9000d97c <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000d928:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000d92a:	0748      	lsls	r0, r1, #29
9000d92c:	d00f      	beq.n	9000d94e <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000d92e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d932:	f383 8811 	msr	BASEPRI, r3
9000d936:	f3bf 8f6f 	isb	sy
9000d93a:	f3bf 8f4f 	dsb	sy
9000d93e:	e7fe      	b.n	9000d93e <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000d940:	f04f 0800 	mov.w	r8, #0
9000d944:	f001 ffee 	bl	9000f924 <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
9000d948:	4640      	mov	r0, r8
9000d94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000d94e:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000d950:	4a34      	ldr	r2, [pc, #208]	; (9000da24 <pvPortMalloc+0x15c>)
						pxBlock->xBlockSize = xWantedSize;
9000d952:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000d954:	4614      	mov	r4, r2
9000d956:	6812      	ldr	r2, [r2, #0]
9000d958:	4291      	cmp	r1, r2
9000d95a:	d8fb      	bhi.n	9000d954 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000d95c:	6860      	ldr	r0, [r4, #4]
9000d95e:	eb04 0e00 	add.w	lr, r4, r0
9000d962:	4571      	cmp	r1, lr
9000d964:	d04a      	beq.n	9000d9fc <pvPortMalloc+0x134>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000d966:	f8d1 e004 	ldr.w	lr, [r1, #4]
9000d96a:	eb01 000e 	add.w	r0, r1, lr
9000d96e:	4282      	cmp	r2, r0
9000d970:	d04b      	beq.n	9000da0a <pvPortMalloc+0x142>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
9000d972:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000d974:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000d976:	bf18      	it	ne
9000d978:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000d97a:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000d97c:	4a2a      	ldr	r2, [pc, #168]	; (9000da28 <pvPortMalloc+0x160>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000d97e:	1a6d      	subs	r5, r5, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000d980:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000d982:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000d984:	f8cc 5000 	str.w	r5, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000d988:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
9000d98a:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000d98e:	bf38      	it	cc
9000d990:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
9000d992:	4a26      	ldr	r2, [pc, #152]	; (9000da2c <pvPortMalloc+0x164>)
					pxBlock->pxNextFreeBlock = NULL;
9000d994:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
9000d998:	6813      	ldr	r3, [r2, #0]
9000d99a:	3301      	adds	r3, #1
9000d99c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
9000d99e:	f001 ffc1 	bl	9000f924 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000d9a2:	f018 0f07 	tst.w	r8, #7
9000d9a6:	d0cf      	beq.n	9000d948 <pvPortMalloc+0x80>
9000d9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d9ac:	f383 8811 	msr	BASEPRI, r3
9000d9b0:	f3bf 8f6f 	isb	sy
9000d9b4:	f3bf 8f4f 	dsb	sy
9000d9b8:	e7fe      	b.n	9000d9b8 <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
9000d9ba:	4b1d      	ldr	r3, [pc, #116]	; (9000da30 <pvPortMalloc+0x168>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000d9bc:	075e      	lsls	r6, r3, #29
9000d9be:	d117      	bne.n	9000d9f0 <pvPortMalloc+0x128>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
9000d9c0:	4e1c      	ldr	r6, [pc, #112]	; (9000da34 <pvPortMalloc+0x16c>)
9000d9c2:	4618      	mov	r0, r3
	uxAddress -= xHeapStructSize;
9000d9c4:	3e08      	subs	r6, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000d9c6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000d9ca:	4916      	ldr	r1, [pc, #88]	; (9000da24 <pvPortMalloc+0x15c>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000d9cc:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
9000d9d0:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000d9d2:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000d9d4:	4a14      	ldr	r2, [pc, #80]	; (9000da28 <pvPortMalloc+0x160>)
9000d9d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000d9d8:	4a17      	ldr	r2, [pc, #92]	; (9000da38 <pvPortMalloc+0x170>)
9000d9da:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000d9dc:	4a10      	ldr	r2, [pc, #64]	; (9000da20 <pvPortMalloc+0x158>)
9000d9de:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000d9e0:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000d9e2:	e9c1 0200 	strd	r0, r2, [r1]
	pxEnd->pxNextFreeBlock = NULL;
9000d9e6:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000d9ea:	e9c0 6300 	strd	r6, r3, [r0]
}
9000d9ee:	e776      	b.n	9000d8de <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000d9f0:	3307      	adds	r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000d9f2:	4e10      	ldr	r6, [pc, #64]	; (9000da34 <pvPortMalloc+0x16c>)
9000d9f4:	f023 0307 	bic.w	r3, r3, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
9000d9f8:	4618      	mov	r0, r3
9000d9fa:	e7e3      	b.n	9000d9c4 <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000d9fc:	6849      	ldr	r1, [r1, #4]
9000d9fe:	eb00 0e01 	add.w	lr, r0, r1
9000da02:	4621      	mov	r1, r4
9000da04:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
9000da08:	e7af      	b.n	9000d96a <pvPortMalloc+0xa2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000da0a:	42b2      	cmp	r2, r6
9000da0c:	d0b1      	beq.n	9000d972 <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000da0e:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000da10:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000da12:	4470      	add	r0, lr
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000da14:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000da16:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000da18:	e7ac      	b.n	9000d974 <pvPortMalloc+0xac>
9000da1a:	bf00      	nop
9000da1c:	2400c4f0 	.word	0x2400c4f0
9000da20:	24024b94 	.word	0x24024b94
9000da24:	24024ba8 	.word	0x24024ba8
9000da28:	24024b9c 	.word	0x24024b9c
9000da2c:	24024ba0 	.word	0x24024ba0
9000da30:	2400c4f4 	.word	0x2400c4f4
9000da34:	24024b94 	.word	0x24024b94
9000da38:	24024b98 	.word	0x24024b98

9000da3c <vPortFree>:
	if( pv != NULL )
9000da3c:	b1d0      	cbz	r0, 9000da74 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000da3e:	4a2b      	ldr	r2, [pc, #172]	; (9000daec <vPortFree+0xb0>)
9000da40:	f850 3c04 	ldr.w	r3, [r0, #-4]
9000da44:	6812      	ldr	r2, [r2, #0]
9000da46:	4213      	tst	r3, r2
9000da48:	d00b      	beq.n	9000da62 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000da4a:	f850 1c08 	ldr.w	r1, [r0, #-8]
9000da4e:	b191      	cbz	r1, 9000da76 <vPortFree+0x3a>
9000da50:	f04f 0350 	mov.w	r3, #80	; 0x50
9000da54:	f383 8811 	msr	BASEPRI, r3
9000da58:	f3bf 8f6f 	isb	sy
9000da5c:	f3bf 8f4f 	dsb	sy
9000da60:	e7fe      	b.n	9000da60 <vPortFree+0x24>
9000da62:	f04f 0350 	mov.w	r3, #80	; 0x50
9000da66:	f383 8811 	msr	BASEPRI, r3
9000da6a:	f3bf 8f6f 	isb	sy
9000da6e:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000da72:	e7fe      	b.n	9000da72 <vPortFree+0x36>
9000da74:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000da76:	ea23 0302 	bic.w	r3, r3, r2
{
9000da7a:	b530      	push	{r4, r5, lr}
9000da7c:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000da7e:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9000da82:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
9000da86:	4d1a      	ldr	r5, [pc, #104]	; (9000daf0 <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000da88:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
9000da8a:	f001 ff43 	bl	9000f914 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
9000da8e:	9801      	ldr	r0, [sp, #4]
9000da90:	682a      	ldr	r2, [r5, #0]
9000da92:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000da96:	4b17      	ldr	r3, [pc, #92]	; (9000daf4 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
9000da98:	440a      	add	r2, r1
9000da9a:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000da9c:	461a      	mov	r2, r3
9000da9e:	681b      	ldr	r3, [r3, #0]
9000daa0:	429c      	cmp	r4, r3
9000daa2:	d8fb      	bhi.n	9000da9c <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000daa4:	6850      	ldr	r0, [r2, #4]
9000daa6:	eb02 0c00 	add.w	ip, r2, r0
9000daaa:	4564      	cmp	r4, ip
9000daac:	d019      	beq.n	9000dae2 <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000daae:	1860      	adds	r0, r4, r1
9000dab0:	4283      	cmp	r3, r0
9000dab2:	d00c      	beq.n	9000dace <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
9000dab4:	6023      	str	r3, [r4, #0]
	if( pxIterator != pxBlockToInsert )
9000dab6:	42a2      	cmp	r2, r4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000dab8:	bf18      	it	ne
9000daba:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
9000dabc:	4a0e      	ldr	r2, [pc, #56]	; (9000daf8 <vPortFree+0xbc>)
9000dabe:	6813      	ldr	r3, [r2, #0]
9000dac0:	3301      	adds	r3, #1
9000dac2:	6013      	str	r3, [r2, #0]
}
9000dac4:	b003      	add	sp, #12
9000dac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
9000daca:	f001 bf2b 	b.w	9000f924 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000dace:	480b      	ldr	r0, [pc, #44]	; (9000dafc <vPortFree+0xc0>)
9000dad0:	6800      	ldr	r0, [r0, #0]
9000dad2:	4283      	cmp	r3, r0
9000dad4:	d0ee      	beq.n	9000dab4 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000dad6:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000dada:	4401      	add	r1, r0
9000dadc:	e9c4 3100 	strd	r3, r1, [r4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000dae0:	e7e9      	b.n	9000dab6 <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000dae2:	4401      	add	r1, r0
9000dae4:	4614      	mov	r4, r2
9000dae6:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
9000dae8:	e7e1      	b.n	9000daae <vPortFree+0x72>
9000daea:	bf00      	nop
9000daec:	24024b94 	.word	0x24024b94
9000daf0:	24024b98 	.word	0x24024b98
9000daf4:	24024ba8 	.word	0x24024ba8
9000daf8:	24024ba4 	.word	0x24024ba4
9000dafc:	2400c4f0 	.word	0x2400c4f0

9000db00 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000db00:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000db04:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000db08:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000db0a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000db0c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000db0e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000db10:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000db14:	4770      	bx	lr
9000db16:	bf00      	nop

9000db18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000db18:	2300      	movs	r3, #0
9000db1a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000db1c:	4770      	bx	lr
9000db1e:	bf00      	nop

9000db20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
9000db20:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000db22:	6802      	ldr	r2, [r0, #0]
{
9000db24:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000db26:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
9000db28:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
9000db2a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000db2c:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000db2e:	689c      	ldr	r4, [r3, #8]
9000db30:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000db32:	6099      	str	r1, [r3, #8]
}
9000db34:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
9000db38:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000db3a:	6002      	str	r2, [r0, #0]
}
9000db3c:	4770      	bx	lr
9000db3e:	bf00      	nop

9000db40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000db40:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000db42:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000db44:	1c6b      	adds	r3, r5, #1
9000db46:	d010      	beq.n	9000db6a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000db48:	f100 0308 	add.w	r3, r0, #8
9000db4c:	461c      	mov	r4, r3
9000db4e:	685b      	ldr	r3, [r3, #4]
9000db50:	681a      	ldr	r2, [r3, #0]
9000db52:	42aa      	cmp	r2, r5
9000db54:	d9fa      	bls.n	9000db4c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000db56:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000db58:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
9000db5a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000db5c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000db5e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
9000db60:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9000db62:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000db64:	6002      	str	r2, [r0, #0]
}
9000db66:	bc30      	pop	{r4, r5}
9000db68:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
9000db6a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000db6c:	6863      	ldr	r3, [r4, #4]
9000db6e:	e7f2      	b.n	9000db56 <vListInsert+0x16>

9000db70 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000db70:	6903      	ldr	r3, [r0, #16]
{
9000db72:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000db74:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000db76:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
9000db7a:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
9000db7c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000db80:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000db82:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9000db84:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000db88:	bf08      	it	eq
9000db8a:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
9000db8c:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
9000db8e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
9000db90:	3a01      	subs	r2, #1
9000db92:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9000db94:	6818      	ldr	r0, [r3, #0]
}
9000db96:	4770      	bx	lr

9000db98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000db98:	4808      	ldr	r0, [pc, #32]	; (9000dbbc <prvPortStartFirstTask+0x24>)
9000db9a:	6800      	ldr	r0, [r0, #0]
9000db9c:	6800      	ldr	r0, [r0, #0]
9000db9e:	f380 8808 	msr	MSP, r0
9000dba2:	f04f 0000 	mov.w	r0, #0
9000dba6:	f380 8814 	msr	CONTROL, r0
9000dbaa:	b662      	cpsie	i
9000dbac:	b661      	cpsie	f
9000dbae:	f3bf 8f4f 	dsb	sy
9000dbb2:	f3bf 8f6f 	isb	sy
9000dbb6:	df00      	svc	0
9000dbb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000dbba:	0000      	.short	0x0000
9000dbbc:	e000ed08 	.word	0xe000ed08

9000dbc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000dbc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 9000dbd0 <vPortEnableVFP+0x10>
9000dbc4:	6801      	ldr	r1, [r0, #0]
9000dbc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000dbca:	6001      	str	r1, [r0, #0]
9000dbcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000dbce:	0000      	.short	0x0000
9000dbd0:	e000ed88 	.word	0xe000ed88

9000dbd4 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9000dbd4:	4b0e      	ldr	r3, [pc, #56]	; (9000dc10 <prvTaskExitError+0x3c>)
{
9000dbd6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
9000dbd8:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
9000dbda:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
9000dbdc:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
9000dbde:	3301      	adds	r3, #1
9000dbe0:	d008      	beq.n	9000dbf4 <prvTaskExitError+0x20>
9000dbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dbe6:	f383 8811 	msr	BASEPRI, r3
9000dbea:	f3bf 8f6f 	isb	sy
9000dbee:	f3bf 8f4f 	dsb	sy
9000dbf2:	e7fe      	b.n	9000dbf2 <prvTaskExitError+0x1e>
9000dbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dbf8:	f383 8811 	msr	BASEPRI, r3
9000dbfc:	f3bf 8f6f 	isb	sy
9000dc00:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000dc04:	9b01      	ldr	r3, [sp, #4]
9000dc06:	2b00      	cmp	r3, #0
9000dc08:	d0fc      	beq.n	9000dc04 <prvTaskExitError+0x30>
}
9000dc0a:	b002      	add	sp, #8
9000dc0c:	4770      	bx	lr
9000dc0e:	bf00      	nop
9000dc10:	24000064 	.word	0x24000064

9000dc14 <pxPortInitialiseStack>:
{
9000dc14:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000dc16:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000dc1a:	4809      	ldr	r0, [pc, #36]	; (9000dc40 <pxPortInitialiseStack+0x2c>)
{
9000dc1c:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000dc1e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000dc22:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000dc26:	f843 2c20 	str.w	r2, [r3, #-32]
}
9000dc2a:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000dc2e:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000dc32:	f06f 0102 	mvn.w	r1, #2
}
9000dc36:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000dc3a:	f843 1c24 	str.w	r1, [r3, #-36]
}
9000dc3e:	4770      	bx	lr
9000dc40:	9000dbd5 	.word	0x9000dbd5
	...

9000dc50 <SVC_Handler>:
	__asm volatile (
9000dc50:	4b07      	ldr	r3, [pc, #28]	; (9000dc70 <pxCurrentTCBConst2>)
9000dc52:	6819      	ldr	r1, [r3, #0]
9000dc54:	6808      	ldr	r0, [r1, #0]
9000dc56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000dc5a:	f380 8809 	msr	PSP, r0
9000dc5e:	f3bf 8f6f 	isb	sy
9000dc62:	f04f 0000 	mov.w	r0, #0
9000dc66:	f380 8811 	msr	BASEPRI, r0
9000dc6a:	4770      	bx	lr
9000dc6c:	f3af 8000 	nop.w

9000dc70 <pxCurrentTCBConst2>:
9000dc70:	24024bf8 	.word	0x24024bf8

9000dc74 <vPortEnterCritical>:
9000dc74:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dc78:	f383 8811 	msr	BASEPRI, r3
9000dc7c:	f3bf 8f6f 	isb	sy
9000dc80:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
9000dc84:	4a0b      	ldr	r2, [pc, #44]	; (9000dcb4 <vPortEnterCritical+0x40>)
9000dc86:	6813      	ldr	r3, [r2, #0]
9000dc88:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9000dc8a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9000dc8c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9000dc8e:	d000      	beq.n	9000dc92 <vPortEnterCritical+0x1e>
}
9000dc90:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000dc92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000dc96:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
9000dc9a:	b2db      	uxtb	r3, r3
9000dc9c:	2b00      	cmp	r3, #0
9000dc9e:	d0f7      	beq.n	9000dc90 <vPortEnterCritical+0x1c>
9000dca0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dca4:	f383 8811 	msr	BASEPRI, r3
9000dca8:	f3bf 8f6f 	isb	sy
9000dcac:	f3bf 8f4f 	dsb	sy
9000dcb0:	e7fe      	b.n	9000dcb0 <vPortEnterCritical+0x3c>
9000dcb2:	bf00      	nop
9000dcb4:	24000064 	.word	0x24000064

9000dcb8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
9000dcb8:	4a08      	ldr	r2, [pc, #32]	; (9000dcdc <vPortExitCritical+0x24>)
9000dcba:	6813      	ldr	r3, [r2, #0]
9000dcbc:	b943      	cbnz	r3, 9000dcd0 <vPortExitCritical+0x18>
9000dcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dcc2:	f383 8811 	msr	BASEPRI, r3
9000dcc6:	f3bf 8f6f 	isb	sy
9000dcca:	f3bf 8f4f 	dsb	sy
9000dcce:	e7fe      	b.n	9000dcce <vPortExitCritical+0x16>
	uxCriticalNesting--;
9000dcd0:	3b01      	subs	r3, #1
9000dcd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000dcd4:	b90b      	cbnz	r3, 9000dcda <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000dcd6:	f383 8811 	msr	BASEPRI, r3
}
9000dcda:	4770      	bx	lr
9000dcdc:	24000064 	.word	0x24000064

9000dce0 <PendSV_Handler>:
	__asm volatile
9000dce0:	f3ef 8009 	mrs	r0, PSP
9000dce4:	f3bf 8f6f 	isb	sy
9000dce8:	4b15      	ldr	r3, [pc, #84]	; (9000dd40 <pxCurrentTCBConst>)
9000dcea:	681a      	ldr	r2, [r3, #0]
9000dcec:	f01e 0f10 	tst.w	lr, #16
9000dcf0:	bf08      	it	eq
9000dcf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000dcf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000dcfa:	6010      	str	r0, [r2, #0]
9000dcfc:	e92d 0009 	stmdb	sp!, {r0, r3}
9000dd00:	f04f 0050 	mov.w	r0, #80	; 0x50
9000dd04:	f380 8811 	msr	BASEPRI, r0
9000dd08:	f3bf 8f4f 	dsb	sy
9000dd0c:	f3bf 8f6f 	isb	sy
9000dd10:	f001 fe44 	bl	9000f99c <vTaskSwitchContext>
9000dd14:	f04f 0000 	mov.w	r0, #0
9000dd18:	f380 8811 	msr	BASEPRI, r0
9000dd1c:	bc09      	pop	{r0, r3}
9000dd1e:	6819      	ldr	r1, [r3, #0]
9000dd20:	6808      	ldr	r0, [r1, #0]
9000dd22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000dd26:	f01e 0f10 	tst.w	lr, #16
9000dd2a:	bf08      	it	eq
9000dd2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000dd30:	f380 8809 	msr	PSP, r0
9000dd34:	f3bf 8f6f 	isb	sy
9000dd38:	4770      	bx	lr
9000dd3a:	bf00      	nop
9000dd3c:	f3af 8000 	nop.w

9000dd40 <pxCurrentTCBConst>:
9000dd40:	24024bf8 	.word	0x24024bf8

9000dd44 <xPortSysTickHandler>:
{
9000dd44:	b508      	push	{r3, lr}
	__asm volatile
9000dd46:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dd4a:	f383 8811 	msr	BASEPRI, r3
9000dd4e:	f3bf 8f6f 	isb	sy
9000dd52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
9000dd56:	f001 fdfb 	bl	9000f950 <xTaskIncrementTick>
9000dd5a:	b128      	cbz	r0, 9000dd68 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000dd5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000dd60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000dd64:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
9000dd68:	2300      	movs	r3, #0
9000dd6a:	f383 8811 	msr	BASEPRI, r3
}
9000dd6e:	bd08      	pop	{r3, pc}

9000dd70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000dd70:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
9000dd74:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000dd76:	4b06      	ldr	r3, [pc, #24]	; (9000dd90 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000dd78:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000dd7a:	4806      	ldr	r0, [pc, #24]	; (9000dd94 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000dd7c:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000dd7e:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000dd80:	681b      	ldr	r3, [r3, #0]
9000dd82:	fba0 0303 	umull	r0, r3, r0, r3
9000dd86:	099b      	lsrs	r3, r3, #6
9000dd88:	3b01      	subs	r3, #1
9000dd8a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000dd8c:	6111      	str	r1, [r2, #16]
}
9000dd8e:	4770      	bx	lr
9000dd90:	24000054 	.word	0x24000054
9000dd94:	10624dd3 	.word	0x10624dd3

9000dd98 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000dd98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000dd9c:	4a48      	ldr	r2, [pc, #288]	; (9000dec0 <xPortStartScheduler+0x128>)
9000dd9e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
9000dda2:	4291      	cmp	r1, r2
9000dda4:	d041      	beq.n	9000de2a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000dda6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9000ddaa:	4b46      	ldr	r3, [pc, #280]	; (9000dec4 <xPortStartScheduler+0x12c>)
9000ddac:	429a      	cmp	r2, r3
9000ddae:	d033      	beq.n	9000de18 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000ddb0:	4b45      	ldr	r3, [pc, #276]	; (9000dec8 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000ddb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000ddb6:	4845      	ldr	r0, [pc, #276]	; (9000decc <xPortStartScheduler+0x134>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000ddb8:	4945      	ldr	r1, [pc, #276]	; (9000ded0 <xPortStartScheduler+0x138>)
{
9000ddba:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000ddbc:	781a      	ldrb	r2, [r3, #0]
{
9000ddbe:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000ddc0:	b2d2      	uxtb	r2, r2
9000ddc2:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000ddc4:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000ddc6:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000ddca:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000ddcc:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000ddce:	b2db      	uxtb	r3, r3
9000ddd0:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000ddd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000ddd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000dddc:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000dde0:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000dde2:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000dde4:	d50f      	bpl.n	9000de06 <xPortStartScheduler+0x6e>
9000dde6:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000dde8:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000ddec:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000ddee:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000ddf0:	005b      	lsls	r3, r3, #1
9000ddf2:	b2db      	uxtb	r3, r3
9000ddf4:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000ddf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000ddfc:	061b      	lsls	r3, r3, #24
9000ddfe:	d4f3      	bmi.n	9000dde8 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000de00:	2903      	cmp	r1, #3
9000de02:	d01b      	beq.n	9000de3c <xPortStartScheduler+0xa4>
9000de04:	6001      	str	r1, [r0, #0]
	__asm volatile
9000de06:	f04f 0350 	mov.w	r3, #80	; 0x50
9000de0a:	f383 8811 	msr	BASEPRI, r3
9000de0e:	f3bf 8f6f 	isb	sy
9000de12:	f3bf 8f4f 	dsb	sy
9000de16:	e7fe      	b.n	9000de16 <xPortStartScheduler+0x7e>
9000de18:	f04f 0350 	mov.w	r3, #80	; 0x50
9000de1c:	f383 8811 	msr	BASEPRI, r3
9000de20:	f3bf 8f6f 	isb	sy
9000de24:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000de28:	e7fe      	b.n	9000de28 <xPortStartScheduler+0x90>
9000de2a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000de2e:	f383 8811 	msr	BASEPRI, r3
9000de32:	f3bf 8f6f 	isb	sy
9000de36:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000de3a:	e7fe      	b.n	9000de3a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000de3c:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000de3e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000de42:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000de46:	4a20      	ldr	r2, [pc, #128]	; (9000dec8 <xPortStartScheduler+0x130>)
9000de48:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
9000de4a:	4e22      	ldr	r6, [pc, #136]	; (9000ded4 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000de4c:	6001      	str	r1, [r0, #0]
	uxCriticalNesting = 0;
9000de4e:	2500      	movs	r5, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000de50:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000de52:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
9000de56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000de5a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000de5e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
9000de62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000de66:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
9000de6a:	f7ff ff81 	bl	9000dd70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9000de6e:	6035      	str	r5, [r6, #0]
	vPortEnableVFP();
9000de70:	f7ff fea6 	bl	9000dbc0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000de74:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
9000de78:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9000de7c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
9000de80:	f7ff fe8a 	bl	9000db98 <prvPortStartFirstTask>
	vTaskSwitchContext();
9000de84:	f001 fd8a 	bl	9000f99c <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
9000de88:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9000de8a:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9000de8c:	3301      	adds	r3, #1
9000de8e:	d008      	beq.n	9000dea2 <xPortStartScheduler+0x10a>
9000de90:	f04f 0350 	mov.w	r3, #80	; 0x50
9000de94:	f383 8811 	msr	BASEPRI, r3
9000de98:	f3bf 8f6f 	isb	sy
9000de9c:	f3bf 8f4f 	dsb	sy
9000dea0:	e7fe      	b.n	9000dea0 <xPortStartScheduler+0x108>
9000dea2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dea6:	f383 8811 	msr	BASEPRI, r3
9000deaa:	f3bf 8f6f 	isb	sy
9000deae:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000deb2:	9b03      	ldr	r3, [sp, #12]
9000deb4:	2b00      	cmp	r3, #0
9000deb6:	d0fc      	beq.n	9000deb2 <xPortStartScheduler+0x11a>
}
9000deb8:	2000      	movs	r0, #0
9000deba:	b004      	add	sp, #16
9000debc:	bd70      	pop	{r4, r5, r6, pc}
9000debe:	bf00      	nop
9000dec0:	410fc271 	.word	0x410fc271
9000dec4:	410fc270 	.word	0x410fc270
9000dec8:	e000e400 	.word	0xe000e400
9000decc:	24024bb4 	.word	0x24024bb4
9000ded0:	24024bb0 	.word	0x24024bb0
9000ded4:	24000064 	.word	0x24000064

9000ded8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000ded8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000dedc:	2b0f      	cmp	r3, #15
9000dede:	d90e      	bls.n	9000defe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000dee0:	4911      	ldr	r1, [pc, #68]	; (9000df28 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000dee2:	4a12      	ldr	r2, [pc, #72]	; (9000df2c <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000dee4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000dee6:	7812      	ldrb	r2, [r2, #0]
9000dee8:	429a      	cmp	r2, r3
9000deea:	d908      	bls.n	9000defe <vPortValidateInterruptPriority+0x26>
9000deec:	f04f 0350 	mov.w	r3, #80	; 0x50
9000def0:	f383 8811 	msr	BASEPRI, r3
9000def4:	f3bf 8f6f 	isb	sy
9000def8:	f3bf 8f4f 	dsb	sy
9000defc:	e7fe      	b.n	9000defc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000defe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000df02:	4a0b      	ldr	r2, [pc, #44]	; (9000df30 <vPortValidateInterruptPriority+0x58>)
9000df04:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
9000df08:	6812      	ldr	r2, [r2, #0]
9000df0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000df0e:	4293      	cmp	r3, r2
9000df10:	d908      	bls.n	9000df24 <vPortValidateInterruptPriority+0x4c>
9000df12:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df16:	f383 8811 	msr	BASEPRI, r3
9000df1a:	f3bf 8f6f 	isb	sy
9000df1e:	f3bf 8f4f 	dsb	sy
9000df22:	e7fe      	b.n	9000df22 <vPortValidateInterruptPriority+0x4a>
	}
9000df24:	4770      	bx	lr
9000df26:	bf00      	nop
9000df28:	e000e3f0 	.word	0xe000e3f0
9000df2c:	24024bb0 	.word	0x24024bb0
9000df30:	24024bb4 	.word	0x24024bb4

9000df34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000df34:	b570      	push	{r4, r5, r6, lr}
9000df36:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000df38:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
9000df3a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000df3c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000df3e:	b92a      	cbnz	r2, 9000df4c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000df40:	6805      	ldr	r5, [r0, #0]
9000df42:	b365      	cbz	r5, 9000df9e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000df44:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000df46:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000df48:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
9000df4a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
9000df4c:	b97d      	cbnz	r5, 9000df6e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000df4e:	6840      	ldr	r0, [r0, #4]
9000df50:	f014 ff64 	bl	90022e1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000df54:	6863      	ldr	r3, [r4, #4]
9000df56:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000df58:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000df5a:	68a2      	ldr	r2, [r4, #8]
9000df5c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000df5e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000df60:	d319      	bcc.n	9000df96 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000df62:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000df64:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000df66:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000df68:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000df6a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000df6c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000df6e:	68c0      	ldr	r0, [r0, #12]
9000df70:	f014 ff54 	bl	90022e1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000df74:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000df76:	68e3      	ldr	r3, [r4, #12]
9000df78:	4251      	negs	r1, r2
9000df7a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000df7c:	6822      	ldr	r2, [r4, #0]
9000df7e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000df80:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000df82:	d202      	bcs.n	9000df8a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000df84:	68a3      	ldr	r3, [r4, #8]
9000df86:	440b      	add	r3, r1
9000df88:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9000df8a:	2d02      	cmp	r5, #2
9000df8c:	d00d      	beq.n	9000dfaa <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000df8e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000df90:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000df92:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000df94:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000df96:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000df98:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000df9a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000df9c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000df9e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000dfa0:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000dfa2:	f001 fee1 	bl	9000fd68 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000dfa6:	60a5      	str	r5, [r4, #8]
9000dfa8:	e7ce      	b.n	9000df48 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000dfaa:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
9000dfac:	f04f 0000 	mov.w	r0, #0
9000dfb0:	bf38      	it	cc
9000dfb2:	2601      	movcc	r6, #1
9000dfb4:	e7c8      	b.n	9000df48 <prvCopyDataToQueue+0x14>
9000dfb6:	bf00      	nop

9000dfb8 <xQueueGenericCreateStatic>:
	{
9000dfb8:	b530      	push	{r4, r5, lr}
9000dfba:	b083      	sub	sp, #12
9000dfbc:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000dfc0:	b940      	cbnz	r0, 9000dfd4 <xQueueGenericCreateStatic+0x1c>
9000dfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dfc6:	f383 8811 	msr	BASEPRI, r3
9000dfca:	f3bf 8f6f 	isb	sy
9000dfce:	f3bf 8f4f 	dsb	sy
9000dfd2:	e7fe      	b.n	9000dfd2 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
9000dfd4:	461d      	mov	r5, r3
9000dfd6:	b153      	cbz	r3, 9000dfee <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000dfd8:	b30a      	cbz	r2, 9000e01e <xQueueGenericCreateStatic+0x66>
9000dfda:	b989      	cbnz	r1, 9000e000 <xQueueGenericCreateStatic+0x48>
9000dfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dfe0:	f383 8811 	msr	BASEPRI, r3
9000dfe4:	f3bf 8f6f 	isb	sy
9000dfe8:	f3bf 8f4f 	dsb	sy
9000dfec:	e7fe      	b.n	9000dfec <xQueueGenericCreateStatic+0x34>
9000dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dff2:	f383 8811 	msr	BASEPRI, r3
9000dff6:	f3bf 8f6f 	isb	sy
9000dffa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000dffe:	e7fe      	b.n	9000dffe <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000e000:	b16a      	cbz	r2, 9000e01e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e002:	2350      	movs	r3, #80	; 0x50
9000e004:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000e006:	9b01      	ldr	r3, [sp, #4]
9000e008:	2b50      	cmp	r3, #80	; 0x50
9000e00a:	d013      	beq.n	9000e034 <xQueueGenericCreateStatic+0x7c>
9000e00c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e010:	f383 8811 	msr	BASEPRI, r3
9000e014:	f3bf 8f6f 	isb	sy
9000e018:	f3bf 8f4f 	dsb	sy
9000e01c:	e7fe      	b.n	9000e01c <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000e01e:	2900      	cmp	r1, #0
9000e020:	d0ef      	beq.n	9000e002 <xQueueGenericCreateStatic+0x4a>
9000e022:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e026:	f383 8811 	msr	BASEPRI, r3
9000e02a:	f3bf 8f6f 	isb	sy
9000e02e:	f3bf 8f4f 	dsb	sy
9000e032:	e7fe      	b.n	9000e032 <xQueueGenericCreateStatic+0x7a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000e034:	2900      	cmp	r1, #0
9000e036:	bf08      	it	eq
9000e038:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
9000e03a:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
9000e03c:	6429      	str	r1, [r5, #64]	; 0x40
9000e03e:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000e040:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e042:	2201      	movs	r2, #1
9000e044:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
9000e048:	f7ff fe14 	bl	9000dc74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e04c:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e04e:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e050:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e052:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e054:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
9000e058:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e05c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e05e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e060:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e062:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e064:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e066:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e06a:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000e06c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e070:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e074:	f7ff fd44 	bl	9000db00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e078:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000e07c:	f7ff fd40 	bl	9000db00 <vListInitialise>
	taskEXIT_CRITICAL();
9000e080:	f7ff fe1a 	bl	9000dcb8 <vPortExitCritical>
	}
9000e084:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000e086:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
9000e08a:	b003      	add	sp, #12
9000e08c:	bd30      	pop	{r4, r5, pc}
9000e08e:	bf00      	nop

9000e090 <xQueueGenericCreate>:
	{
9000e090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000e092:	b940      	cbnz	r0, 9000e0a6 <xQueueGenericCreate+0x16>
9000e094:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e098:	f383 8811 	msr	BASEPRI, r3
9000e09c:	f3bf 8f6f 	isb	sy
9000e0a0:	f3bf 8f4f 	dsb	sy
9000e0a4:	e7fe      	b.n	9000e0a4 <xQueueGenericCreate+0x14>
9000e0a6:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e0a8:	fb01 f000 	mul.w	r0, r1, r0
9000e0ac:	460e      	mov	r6, r1
9000e0ae:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000e0b0:	3050      	adds	r0, #80	; 0x50
9000e0b2:	f7ff fc09 	bl	9000d8c8 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000e0b6:	4604      	mov	r4, r0
9000e0b8:	b340      	cbz	r0, 9000e10c <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e0ba:	2300      	movs	r3, #0
9000e0bc:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
9000e0c0:	b336      	cbz	r6, 9000e110 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0c2:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000e0c6:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000e0c8:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
9000e0cc:	f7ff fdd2 	bl	9000dc74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0d0:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e0d2:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e0d6:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0d8:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
9000e0dc:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0e0:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0e2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0e4:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0e6:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e0e8:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000e0ea:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e0ec:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e0ee:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000e0f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e0f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e0f8:	f7ff fd02 	bl	9000db00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e0fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e100:	f7ff fcfe 	bl	9000db00 <vListInitialise>
	taskEXIT_CRITICAL();
9000e104:	f7ff fdd8 	bl	9000dcb8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000e108:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
9000e10c:	4620      	mov	r0, r4
9000e10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000e110:	4603      	mov	r3, r0
9000e112:	e7d8      	b.n	9000e0c6 <xQueueGenericCreate+0x36>

9000e114 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
9000e114:	b940      	cbnz	r0, 9000e128 <xQueueCreateCountingSemaphoreStatic+0x14>
9000e116:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e11a:	f383 8811 	msr	BASEPRI, r3
9000e11e:	f3bf 8f6f 	isb	sy
9000e122:	f3bf 8f4f 	dsb	sy
9000e126:	e7fe      	b.n	9000e126 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
9000e128:	4288      	cmp	r0, r1
9000e12a:	d208      	bcs.n	9000e13e <xQueueCreateCountingSemaphoreStatic+0x2a>
9000e12c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e130:	f383 8811 	msr	BASEPRI, r3
9000e134:	f3bf 8f6f 	isb	sy
9000e138:	f3bf 8f4f 	dsb	sy
9000e13c:	e7fe      	b.n	9000e13c <xQueueCreateCountingSemaphoreStatic+0x28>
	{
9000e13e:	b530      	push	{r4, r5, lr}
9000e140:	4615      	mov	r5, r2
9000e142:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
9000e144:	2a00      	cmp	r2, #0
9000e146:	d03d      	beq.n	9000e1c4 <xQueueCreateCountingSemaphoreStatic+0xb0>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e148:	2350      	movs	r3, #80	; 0x50
9000e14a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
9000e14c:	9b03      	ldr	r3, [sp, #12]
9000e14e:	2b50      	cmp	r3, #80	; 0x50
9000e150:	d008      	beq.n	9000e164 <xQueueCreateCountingSemaphoreStatic+0x50>
9000e152:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e156:	f383 8811 	msr	BASEPRI, r3
9000e15a:	f3bf 8f6f 	isb	sy
9000e15e:	f3bf 8f4f 	dsb	sy
9000e162:	e7fe      	b.n	9000e162 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
9000e164:	2400      	movs	r4, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e166:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e168:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000e16a:	63d0      	str	r0, [r2, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e16c:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000e170:	6414      	str	r4, [r2, #64]	; 0x40
9000e172:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000e174:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
9000e176:	f7ff fd7d 	bl	9000dc74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e17a:	6828      	ldr	r0, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e17c:	63ac      	str	r4, [r5, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e17e:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e180:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
9000e184:	fb03 f30c 	mul.w	r3, r3, ip
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e188:	eba3 0c0c 	sub.w	ip, r3, ip
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e18c:	4403      	add	r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e18e:	4484      	add	ip, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e190:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e192:	23ff      	movs	r3, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e194:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e198:	f8c5 c00c 	str.w	ip, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000e19c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e1a0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e1a4:	f7ff fcac 	bl	9000db00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e1a8:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000e1ac:	f7ff fca8 	bl	9000db00 <vListInitialise>
	taskEXIT_CRITICAL();
9000e1b0:	f7ff fd82 	bl	9000dcb8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000e1b4:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000e1b6:	9901      	ldr	r1, [sp, #4]
	}
9000e1b8:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000e1ba:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000e1be:	63a9      	str	r1, [r5, #56]	; 0x38
	}
9000e1c0:	b005      	add	sp, #20
9000e1c2:	bd30      	pop	{r4, r5, pc}
9000e1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e1c8:	f383 8811 	msr	BASEPRI, r3
9000e1cc:	f3bf 8f6f 	isb	sy
9000e1d0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000e1d4:	e7fe      	b.n	9000e1d4 <xQueueCreateCountingSemaphoreStatic+0xc0>
9000e1d6:	bf00      	nop

9000e1d8 <xQueueCreateCountingSemaphore>:
	{
9000e1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9000e1da:	b940      	cbnz	r0, 9000e1ee <xQueueCreateCountingSemaphore+0x16>
9000e1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e1e0:	f383 8811 	msr	BASEPRI, r3
9000e1e4:	f3bf 8f6f 	isb	sy
9000e1e8:	f3bf 8f4f 	dsb	sy
9000e1ec:	e7fe      	b.n	9000e1ec <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9000e1ee:	4288      	cmp	r0, r1
9000e1f0:	4604      	mov	r4, r0
9000e1f2:	460e      	mov	r6, r1
9000e1f4:	d208      	bcs.n	9000e208 <xQueueCreateCountingSemaphore+0x30>
9000e1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e1fa:	f383 8811 	msr	BASEPRI, r3
9000e1fe:	f3bf 8f6f 	isb	sy
9000e202:	f3bf 8f4f 	dsb	sy
9000e206:	e7fe      	b.n	9000e206 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000e208:	2050      	movs	r0, #80	; 0x50
9000e20a:	f7ff fb5d 	bl	9000d8c8 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000e20e:	4605      	mov	r5, r0
9000e210:	b330      	cbz	r0, 9000e260 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e212:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e214:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000e216:	63c4      	str	r4, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e218:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000e21c:	6407      	str	r7, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
9000e21e:	f7ff fd29 	bl	9000dc74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e222:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e224:	63af      	str	r7, [r5, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e226:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e22a:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e22c:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	; 0x3c
9000e230:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e234:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e236:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e238:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e23a:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e23c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e23e:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000e240:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e244:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e248:	f7ff fc5a 	bl	9000db00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e24c:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000e250:	f7ff fc56 	bl	9000db00 <vListInitialise>
	taskEXIT_CRITICAL();
9000e254:	f7ff fd30 	bl	9000dcb8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000e258:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000e25a:	63ae      	str	r6, [r5, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
9000e25c:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	}
9000e260:	4628      	mov	r0, r5
9000e262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000e264 <xQueueGenericSend>:
{
9000e264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000e268:	b084      	sub	sp, #16
9000e26a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9000e26c:	2800      	cmp	r0, #0
9000e26e:	f000 8103 	beq.w	9000e478 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e272:	4688      	mov	r8, r1
9000e274:	4604      	mov	r4, r0
9000e276:	461f      	mov	r7, r3
9000e278:	2900      	cmp	r1, #0
9000e27a:	f000 8097 	beq.w	9000e3ac <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000e27e:	2f02      	cmp	r7, #2
9000e280:	d10b      	bne.n	9000e29a <xQueueGenericSend+0x36>
9000e282:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e284:	2b01      	cmp	r3, #1
9000e286:	d008      	beq.n	9000e29a <xQueueGenericSend+0x36>
9000e288:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e28c:	f383 8811 	msr	BASEPRI, r3
9000e290:	f3bf 8f6f 	isb	sy
9000e294:	f3bf 8f4f 	dsb	sy
9000e298:	e7fe      	b.n	9000e298 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e29a:	f001 fd0f 	bl	9000fcbc <xTaskGetSchedulerState>
9000e29e:	2800      	cmp	r0, #0
9000e2a0:	f000 80f3 	beq.w	9000e48a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e2a4:	f1a7 0902 	sub.w	r9, r7, #2
9000e2a8:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e2aa:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e2ae:	fab9 f989 	clz	r9, r9
9000e2b2:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
9000e2b6:	f7ff fcdd 	bl	9000dc74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e2ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000e2bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e2be:	429a      	cmp	r2, r3
9000e2c0:	f0c0 80f0 	bcc.w	9000e4a4 <xQueueGenericSend+0x240>
9000e2c4:	f1b9 0f00 	cmp.w	r9, #0
9000e2c8:	f040 80ec 	bne.w	9000e4a4 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9000e2cc:	9b01      	ldr	r3, [sp, #4]
9000e2ce:	2b00      	cmp	r3, #0
9000e2d0:	f000 8101 	beq.w	9000e4d6 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
9000e2d4:	2d00      	cmp	r5, #0
9000e2d6:	f000 80cb 	beq.w	9000e470 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9000e2da:	f7ff fced 	bl	9000dcb8 <vPortExitCritical>
		vTaskSuspendAll();
9000e2de:	f001 fb19 	bl	9000f914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000e2e2:	f7ff fcc7 	bl	9000dc74 <vPortEnterCritical>
9000e2e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e2ea:	2bff      	cmp	r3, #255	; 0xff
9000e2ec:	d102      	bne.n	9000e2f4 <xQueueGenericSend+0x90>
9000e2ee:	2300      	movs	r3, #0
9000e2f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000e2f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e2f8:	2bff      	cmp	r3, #255	; 0xff
9000e2fa:	d102      	bne.n	9000e302 <xQueueGenericSend+0x9e>
9000e2fc:	2300      	movs	r3, #0
9000e2fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000e302:	f7ff fcd9 	bl	9000dcb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000e306:	a901      	add	r1, sp, #4
9000e308:	a802      	add	r0, sp, #8
9000e30a:	f001 fc83 	bl	9000fc14 <xTaskCheckForTimeOut>
9000e30e:	2800      	cmp	r0, #0
9000e310:	f040 80e5 	bne.w	9000e4de <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000e314:	f7ff fcae 	bl	9000dc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000e318:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000e31a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e31c:	429a      	cmp	r2, r3
9000e31e:	d052      	beq.n	9000e3c6 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000e320:	f7ff fcca 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e324:	f7ff fca6 	bl	9000dc74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e328:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
9000e32c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e32e:	2d00      	cmp	r5, #0
9000e330:	dc04      	bgt.n	9000e33c <xQueueGenericSend+0xd8>
9000e332:	e011      	b.n	9000e358 <xQueueGenericSend+0xf4>
			--cTxLock;
9000e334:	1e6a      	subs	r2, r5, #1
9000e336:	b2d3      	uxtb	r3, r2
9000e338:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e33a:	b16b      	cbz	r3, 9000e358 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e33c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e33e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e340:	b153      	cbz	r3, 9000e358 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e342:	f001 fc11 	bl	9000fb68 <xTaskRemoveFromEventList>
9000e346:	2800      	cmp	r0, #0
9000e348:	d0f4      	beq.n	9000e334 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
9000e34a:	f001 fcab 	bl	9000fca4 <vTaskMissedYield>
			--cTxLock;
9000e34e:	1e6a      	subs	r2, r5, #1
9000e350:	b2d3      	uxtb	r3, r2
9000e352:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e354:	2b00      	cmp	r3, #0
9000e356:	d1f1      	bne.n	9000e33c <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
9000e358:	23ff      	movs	r3, #255	; 0xff
9000e35a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e35e:	f7ff fcab 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e362:	f7ff fc87 	bl	9000dc74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e366:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
9000e36a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e36c:	2d00      	cmp	r5, #0
9000e36e:	dd14      	ble.n	9000e39a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e370:	f104 0a10 	add.w	sl, r4, #16
9000e374:	e003      	b.n	9000e37e <xQueueGenericSend+0x11a>
				--cRxLock;
9000e376:	1e6a      	subs	r2, r5, #1
9000e378:	b2d3      	uxtb	r3, r2
9000e37a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e37c:	b16b      	cbz	r3, 9000e39a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e37e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e380:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e382:	b153      	cbz	r3, 9000e39a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e384:	f001 fbf0 	bl	9000fb68 <xTaskRemoveFromEventList>
9000e388:	2800      	cmp	r0, #0
9000e38a:	d0f4      	beq.n	9000e376 <xQueueGenericSend+0x112>
					vTaskMissedYield();
9000e38c:	f001 fc8a 	bl	9000fca4 <vTaskMissedYield>
				--cRxLock;
9000e390:	1e6a      	subs	r2, r5, #1
9000e392:	b2d3      	uxtb	r3, r2
9000e394:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e396:	2b00      	cmp	r3, #0
9000e398:	d1f1      	bne.n	9000e37e <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
9000e39a:	23ff      	movs	r3, #255	; 0xff
9000e39c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e3a0:	f7ff fc8a 	bl	9000dcb8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000e3a4:	f001 fabe 	bl	9000f924 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e3a8:	2501      	movs	r5, #1
9000e3aa:	e784      	b.n	9000e2b6 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e3ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000e3ae:	2b00      	cmp	r3, #0
9000e3b0:	f43f af65 	beq.w	9000e27e <xQueueGenericSend+0x1a>
9000e3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e3b8:	f383 8811 	msr	BASEPRI, r3
9000e3bc:	f3bf 8f6f 	isb	sy
9000e3c0:	f3bf 8f4f 	dsb	sy
9000e3c4:	e7fe      	b.n	9000e3c4 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000e3c6:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
9000e3ca:	f7ff fc75 	bl	9000dcb8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000e3ce:	9901      	ldr	r1, [sp, #4]
9000e3d0:	4650      	mov	r0, sl
9000e3d2:	f001 fb3b 	bl	9000fa4c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000e3d6:	f7ff fc4d 	bl	9000dc74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e3da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e3de:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e3e0:	2d00      	cmp	r5, #0
9000e3e2:	dc04      	bgt.n	9000e3ee <xQueueGenericSend+0x18a>
9000e3e4:	e011      	b.n	9000e40a <xQueueGenericSend+0x1a6>
			--cTxLock;
9000e3e6:	1e6b      	subs	r3, r5, #1
9000e3e8:	b2da      	uxtb	r2, r3
9000e3ea:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e3ec:	b16a      	cbz	r2, 9000e40a <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e3ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e3f0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e3f2:	b153      	cbz	r3, 9000e40a <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e3f4:	f001 fbb8 	bl	9000fb68 <xTaskRemoveFromEventList>
9000e3f8:	2800      	cmp	r0, #0
9000e3fa:	d0f4      	beq.n	9000e3e6 <xQueueGenericSend+0x182>
						vTaskMissedYield();
9000e3fc:	f001 fc52 	bl	9000fca4 <vTaskMissedYield>
			--cTxLock;
9000e400:	1e6b      	subs	r3, r5, #1
9000e402:	b2da      	uxtb	r2, r3
9000e404:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e406:	2a00      	cmp	r2, #0
9000e408:	d1f1      	bne.n	9000e3ee <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
9000e40a:	23ff      	movs	r3, #255	; 0xff
9000e40c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e410:	f7ff fc52 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e414:	f7ff fc2e 	bl	9000dc74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e418:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e41c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e41e:	2d00      	cmp	r5, #0
9000e420:	dc04      	bgt.n	9000e42c <xQueueGenericSend+0x1c8>
9000e422:	e011      	b.n	9000e448 <xQueueGenericSend+0x1e4>
				--cRxLock;
9000e424:	1e6b      	subs	r3, r5, #1
9000e426:	b2da      	uxtb	r2, r3
9000e428:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e42a:	b16a      	cbz	r2, 9000e448 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e42c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e42e:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e430:	b153      	cbz	r3, 9000e448 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e432:	f001 fb99 	bl	9000fb68 <xTaskRemoveFromEventList>
9000e436:	2800      	cmp	r0, #0
9000e438:	d0f4      	beq.n	9000e424 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
9000e43a:	f001 fc33 	bl	9000fca4 <vTaskMissedYield>
				--cRxLock;
9000e43e:	1e6b      	subs	r3, r5, #1
9000e440:	b2da      	uxtb	r2, r3
9000e442:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e444:	2a00      	cmp	r2, #0
9000e446:	d1f1      	bne.n	9000e42c <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000e448:	23ff      	movs	r3, #255	; 0xff
9000e44a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e44e:	f7ff fc33 	bl	9000dcb8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000e452:	f001 fa67 	bl	9000f924 <xTaskResumeAll>
9000e456:	2800      	cmp	r0, #0
9000e458:	d1a6      	bne.n	9000e3a8 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
9000e45a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e462:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e466:	f3bf 8f4f 	dsb	sy
9000e46a:	f3bf 8f6f 	isb	sy
9000e46e:	e79b      	b.n	9000e3a8 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000e470:	a802      	add	r0, sp, #8
9000e472:	f001 fbc3 	bl	9000fbfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000e476:	e730      	b.n	9000e2da <xQueueGenericSend+0x76>
9000e478:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e47c:	f383 8811 	msr	BASEPRI, r3
9000e480:	f3bf 8f6f 	isb	sy
9000e484:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000e488:	e7fe      	b.n	9000e488 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e48a:	9b01      	ldr	r3, [sp, #4]
9000e48c:	2b00      	cmp	r3, #0
9000e48e:	f43f af09 	beq.w	9000e2a4 <xQueueGenericSend+0x40>
9000e492:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e496:	f383 8811 	msr	BASEPRI, r3
9000e49a:	f3bf 8f6f 	isb	sy
9000e49e:	f3bf 8f4f 	dsb	sy
9000e4a2:	e7fe      	b.n	9000e4a2 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e4a4:	463a      	mov	r2, r7
9000e4a6:	4641      	mov	r1, r8
9000e4a8:	4620      	mov	r0, r4
9000e4aa:	f7ff fd43 	bl	9000df34 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000e4b0:	2b00      	cmp	r3, #0
9000e4b2:	d152      	bne.n	9000e55a <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
9000e4b4:	b148      	cbz	r0, 9000e4ca <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
9000e4b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e4be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e4c2:	f3bf 8f4f 	dsb	sy
9000e4c6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000e4ca:	f7ff fbf5 	bl	9000dcb8 <vPortExitCritical>
				return pdPASS;
9000e4ce:	2001      	movs	r0, #1
}
9000e4d0:	b004      	add	sp, #16
9000e4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
9000e4d6:	f7ff fbef 	bl	9000dcb8 <vPortExitCritical>
					return errQUEUE_FULL;
9000e4da:	4648      	mov	r0, r9
9000e4dc:	e7f8      	b.n	9000e4d0 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
9000e4de:	f7ff fbc9 	bl	9000dc74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e4e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e4e6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e4e8:	2d00      	cmp	r5, #0
9000e4ea:	dd10      	ble.n	9000e50e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e4ec:	f104 0624 	add.w	r6, r4, #36	; 0x24
9000e4f0:	e003      	b.n	9000e4fa <xQueueGenericSend+0x296>
			--cTxLock;
9000e4f2:	1e6b      	subs	r3, r5, #1
9000e4f4:	b2da      	uxtb	r2, r3
9000e4f6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e4f8:	b14a      	cbz	r2, 9000e50e <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e4fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e4fc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e4fe:	b133      	cbz	r3, 9000e50e <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e500:	f001 fb32 	bl	9000fb68 <xTaskRemoveFromEventList>
9000e504:	2800      	cmp	r0, #0
9000e506:	d0f4      	beq.n	9000e4f2 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
9000e508:	f001 fbcc 	bl	9000fca4 <vTaskMissedYield>
9000e50c:	e7f1      	b.n	9000e4f2 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
9000e50e:	23ff      	movs	r3, #255	; 0xff
9000e510:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e514:	f7ff fbd0 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e518:	f7ff fbac 	bl	9000dc74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e51c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e520:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e522:	2d00      	cmp	r5, #0
9000e524:	dd10      	ble.n	9000e548 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e526:	f104 0610 	add.w	r6, r4, #16
9000e52a:	e003      	b.n	9000e534 <xQueueGenericSend+0x2d0>
				--cRxLock;
9000e52c:	1e6b      	subs	r3, r5, #1
9000e52e:	b2da      	uxtb	r2, r3
9000e530:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e532:	b14a      	cbz	r2, 9000e548 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e534:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e536:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e538:	b133      	cbz	r3, 9000e548 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e53a:	f001 fb15 	bl	9000fb68 <xTaskRemoveFromEventList>
9000e53e:	2800      	cmp	r0, #0
9000e540:	d0f4      	beq.n	9000e52c <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
9000e542:	f001 fbaf 	bl	9000fca4 <vTaskMissedYield>
9000e546:	e7f1      	b.n	9000e52c <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000e548:	23ff      	movs	r3, #255	; 0xff
9000e54a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e54e:	f7ff fbb3 	bl	9000dcb8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000e552:	f001 f9e7 	bl	9000f924 <xTaskResumeAll>
			return errQUEUE_FULL;
9000e556:	2000      	movs	r0, #0
9000e558:	e7ba      	b.n	9000e4d0 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e55a:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e55e:	f001 fb03 	bl	9000fb68 <xTaskRemoveFromEventList>
9000e562:	2800      	cmp	r0, #0
9000e564:	d0b1      	beq.n	9000e4ca <xQueueGenericSend+0x266>
9000e566:	e7a6      	b.n	9000e4b6 <xQueueGenericSend+0x252>

9000e568 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
9000e568:	b179      	cbz	r1, 9000e58a <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e56a:	2350      	movs	r3, #80	; 0x50
	{
9000e56c:	b570      	push	{r4, r5, r6, lr}
9000e56e:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
9000e570:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000e572:	9b01      	ldr	r3, [sp, #4]
9000e574:	2b50      	cmp	r3, #80	; 0x50
9000e576:	d011      	beq.n	9000e59c <xQueueCreateMutexStatic+0x34>
9000e578:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e57c:	f383 8811 	msr	BASEPRI, r3
9000e580:	f3bf 8f6f 	isb	sy
9000e584:	f3bf 8f4f 	dsb	sy
9000e588:	e7fe      	b.n	9000e588 <xQueueCreateMutexStatic+0x20>
9000e58a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e58e:	f383 8811 	msr	BASEPRI, r3
9000e592:	f3bf 8f6f 	isb	sy
9000e596:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000e59a:	e7fe      	b.n	9000e59a <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
9000e59c:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e59e:	2301      	movs	r3, #1
9000e5a0:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e5a2:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000e5a4:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
9000e5a8:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000e5aa:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
9000e5ac:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
	taskENTER_CRITICAL();
9000e5b0:	f7ff fb60 	bl	9000dc74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e5b4:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
9000e5b6:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e5b8:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e5ba:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
9000e5bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e5c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e5c4:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
9000e5c8:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e5cc:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e5ce:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e5d0:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e5d2:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e5d6:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e5da:	f7ff fa91 	bl	9000db00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e5de:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e5e2:	f7ff fa8d 	bl	9000db00 <vListInitialise>
	taskEXIT_CRITICAL();
9000e5e6:	f7ff fb67 	bl	9000dcb8 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000e5ea:	4633      	mov	r3, r6
9000e5ec:	4632      	mov	r2, r6
9000e5ee:	4631      	mov	r1, r6
9000e5f0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000e5f2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000e5f6:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000e5f8:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000e5fa:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000e5fc:	f7ff fe32 	bl	9000e264 <xQueueGenericSend>
	}
9000e600:	4620      	mov	r0, r4
9000e602:	b002      	add	sp, #8
9000e604:	bd70      	pop	{r4, r5, r6, pc}
9000e606:	bf00      	nop

9000e608 <xQueueGiveMutexRecursive>:
	{
9000e608:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
9000e60a:	b138      	cbz	r0, 9000e61c <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000e60c:	6885      	ldr	r5, [r0, #8]
9000e60e:	4604      	mov	r4, r0
9000e610:	f001 fb4e 	bl	9000fcb0 <xTaskGetCurrentTaskHandle>
9000e614:	4285      	cmp	r5, r0
9000e616:	d00a      	beq.n	9000e62e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
9000e618:	2000      	movs	r0, #0
	}
9000e61a:	bd38      	pop	{r3, r4, r5, pc}
9000e61c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e620:	f383 8811 	msr	BASEPRI, r3
9000e624:	f3bf 8f6f 	isb	sy
9000e628:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000e62c:	e7fe      	b.n	9000e62c <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
9000e62e:	68e3      	ldr	r3, [r4, #12]
9000e630:	3b01      	subs	r3, #1
9000e632:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
9000e634:	b10b      	cbz	r3, 9000e63a <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
9000e636:	2001      	movs	r0, #1
	}
9000e638:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
9000e63a:	461a      	mov	r2, r3
9000e63c:	4619      	mov	r1, r3
9000e63e:	4620      	mov	r0, r4
9000e640:	f7ff fe10 	bl	9000e264 <xQueueGenericSend>
			xReturn = pdPASS;
9000e644:	2001      	movs	r0, #1
	}
9000e646:	bd38      	pop	{r3, r4, r5, pc}

9000e648 <xQueueCreateMutex>:
	{
9000e648:	b570      	push	{r4, r5, r6, lr}
9000e64a:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000e64c:	2050      	movs	r0, #80	; 0x50
9000e64e:	f7ff f93b 	bl	9000d8c8 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000e652:	4604      	mov	r4, r0
9000e654:	b370      	cbz	r0, 9000e6b4 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e656:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
9000e658:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000e65a:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000e65c:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000e660:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
9000e664:	f7ff fb06 	bl	9000dc74 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e668:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000e66a:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e66c:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000e670:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e672:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
9000e676:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e67a:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e67c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e67e:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
9000e680:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000e682:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000e686:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000e68a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000e68e:	f7ff fa37 	bl	9000db00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000e692:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e696:	f7ff fa33 	bl	9000db00 <vListInitialise>
	taskEXIT_CRITICAL();
9000e69a:	f7ff fb0d 	bl	9000dcb8 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000e69e:	4633      	mov	r3, r6
9000e6a0:	4632      	mov	r2, r6
9000e6a2:	4631      	mov	r1, r6
9000e6a4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000e6a6:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000e6aa:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000e6ac:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000e6ae:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000e6b0:	f7ff fdd8 	bl	9000e264 <xQueueGenericSend>
	}
9000e6b4:	4620      	mov	r0, r4
9000e6b6:	bd70      	pop	{r4, r5, r6, pc}

9000e6b8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
9000e6b8:	2800      	cmp	r0, #0
9000e6ba:	d04e      	beq.n	9000e75a <xQueueGenericSendFromISR+0xa2>
{
9000e6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000e6c0:	460e      	mov	r6, r1
9000e6c2:	4604      	mov	r4, r0
9000e6c4:	4617      	mov	r7, r2
9000e6c6:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e6c8:	b339      	cbz	r1, 9000e71a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000e6ca:	2d02      	cmp	r5, #2
9000e6cc:	d10b      	bne.n	9000e6e6 <xQueueGenericSendFromISR+0x2e>
9000e6ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e6d0:	2b01      	cmp	r3, #1
9000e6d2:	d008      	beq.n	9000e6e6 <xQueueGenericSendFromISR+0x2e>
9000e6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e6d8:	f383 8811 	msr	BASEPRI, r3
9000e6dc:	f3bf 8f6f 	isb	sy
9000e6e0:	f3bf 8f4f 	dsb	sy
9000e6e4:	e7fe      	b.n	9000e6e4 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000e6e6:	f7ff fbf7 	bl	9000ded8 <vPortValidateInterruptPriority>
	__asm volatile
9000e6ea:	f3ef 8811 	mrs	r8, BASEPRI
9000e6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e6f2:	f383 8811 	msr	BASEPRI, r3
9000e6f6:	f3bf 8f6f 	isb	sy
9000e6fa:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000e6fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000e700:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000e702:	429a      	cmp	r2, r3
9000e704:	d315      	bcc.n	9000e732 <xQueueGenericSendFromISR+0x7a>
9000e706:	f1a5 0002 	sub.w	r0, r5, #2
9000e70a:	fab0 f080 	clz	r0, r0
9000e70e:	0940      	lsrs	r0, r0, #5
9000e710:	b978      	cbnz	r0, 9000e732 <xQueueGenericSendFromISR+0x7a>
	__asm volatile
9000e712:	f388 8811 	msr	BASEPRI, r8
}
9000e716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e71a:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000e71c:	2b00      	cmp	r3, #0
9000e71e:	d0d4      	beq.n	9000e6ca <xQueueGenericSendFromISR+0x12>
	__asm volatile
9000e720:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e724:	f383 8811 	msr	BASEPRI, r3
9000e728:	f3bf 8f6f 	isb	sy
9000e72c:	f3bf 8f4f 	dsb	sy
9000e730:	e7fe      	b.n	9000e730 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e732:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
9000e734:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e738:	4631      	mov	r1, r6
9000e73a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
9000e73c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e73e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000e740:	f7ff fbf8 	bl	9000df34 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
9000e744:	1c6b      	adds	r3, r5, #1
9000e746:	d011      	beq.n	9000e76c <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e748:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
9000e74a:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e74c:	b25b      	sxtb	r3, r3
9000e74e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
9000e752:	f388 8811 	msr	BASEPRI, r8
}
9000e756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
9000e75a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e75e:	f383 8811 	msr	BASEPRI, r3
9000e762:	f3bf 8f6f 	isb	sy
9000e766:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000e76a:	e7fe      	b.n	9000e76a <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e76c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000e76e:	b90b      	cbnz	r3, 9000e774 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
9000e770:	2001      	movs	r0, #1
9000e772:	e7ce      	b.n	9000e712 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e774:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e778:	f001 f9f6 	bl	9000fb68 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000e77c:	2800      	cmp	r0, #0
9000e77e:	d0f7      	beq.n	9000e770 <xQueueGenericSendFromISR+0xb8>
9000e780:	2f00      	cmp	r7, #0
9000e782:	d0f5      	beq.n	9000e770 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e784:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000e786:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e788:	603b      	str	r3, [r7, #0]
9000e78a:	e7c2      	b.n	9000e712 <xQueueGenericSendFromISR+0x5a>

9000e78c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
9000e78c:	b360      	cbz	r0, 9000e7e8 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
9000e78e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
9000e790:	b570      	push	{r4, r5, r6, lr}
9000e792:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
9000e794:	b143      	cbz	r3, 9000e7a8 <xQueueGiveFromISR+0x1c>
9000e796:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e79a:	f383 8811 	msr	BASEPRI, r3
9000e79e:	f3bf 8f6f 	isb	sy
9000e7a2:	f3bf 8f4f 	dsb	sy
9000e7a6:	e7fe      	b.n	9000e7a6 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000e7a8:	6803      	ldr	r3, [r0, #0]
9000e7aa:	460d      	mov	r5, r1
9000e7ac:	b32b      	cbz	r3, 9000e7fa <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000e7ae:	f7ff fb93 	bl	9000ded8 <vPortValidateInterruptPriority>
	__asm volatile
9000e7b2:	f3ef 8611 	mrs	r6, BASEPRI
9000e7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e7ba:	f383 8811 	msr	BASEPRI, r3
9000e7be:	f3bf 8f6f 	isb	sy
9000e7c2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e7c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
9000e7c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000e7ca:	429a      	cmp	r2, r3
9000e7cc:	d921      	bls.n	9000e812 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
9000e7ce:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e7d2:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
9000e7d4:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000e7d6:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
9000e7d8:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
9000e7da:	d01e      	beq.n	9000e81a <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e7dc:	3301      	adds	r3, #1
			xReturn = pdPASS;
9000e7de:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000e7e0:	b25b      	sxtb	r3, r3
9000e7e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000e7e6:	e015      	b.n	9000e814 <xQueueGiveFromISR+0x88>
	__asm volatile
9000e7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e7ec:	f383 8811 	msr	BASEPRI, r3
9000e7f0:	f3bf 8f6f 	isb	sy
9000e7f4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000e7f8:	e7fe      	b.n	9000e7f8 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000e7fa:	6883      	ldr	r3, [r0, #8]
9000e7fc:	2b00      	cmp	r3, #0
9000e7fe:	d0d6      	beq.n	9000e7ae <xQueueGiveFromISR+0x22>
9000e800:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e804:	f383 8811 	msr	BASEPRI, r3
9000e808:	f3bf 8f6f 	isb	sy
9000e80c:	f3bf 8f4f 	dsb	sy
9000e810:	e7fe      	b.n	9000e810 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
9000e812:	2000      	movs	r0, #0
	__asm volatile
9000e814:	f386 8811 	msr	BASEPRI, r6
}
9000e818:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e81a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000e81c:	b90b      	cbnz	r3, 9000e822 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
9000e81e:	2001      	movs	r0, #1
9000e820:	e7f8      	b.n	9000e814 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e822:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000e826:	f001 f99f 	bl	9000fb68 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000e82a:	2d00      	cmp	r5, #0
9000e82c:	d0f7      	beq.n	9000e81e <xQueueGiveFromISR+0x92>
9000e82e:	2800      	cmp	r0, #0
9000e830:	d0f5      	beq.n	9000e81e <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e832:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000e834:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000e836:	602b      	str	r3, [r5, #0]
9000e838:	e7ec      	b.n	9000e814 <xQueueGiveFromISR+0x88>
9000e83a:	bf00      	nop

9000e83c <xQueueReceive>:
{
9000e83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000e840:	b085      	sub	sp, #20
9000e842:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
9000e844:	2800      	cmp	r0, #0
9000e846:	f000 815f 	beq.w	9000eb08 <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e84a:	460f      	mov	r7, r1
9000e84c:	4604      	mov	r4, r0
9000e84e:	2900      	cmp	r1, #0
9000e850:	f000 8094 	beq.w	9000e97c <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e854:	f001 fa32 	bl	9000fcbc <xTaskGetSchedulerState>
9000e858:	2800      	cmp	r0, #0
9000e85a:	f000 809c 	beq.w	9000e996 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
9000e85e:	f7ff fa09 	bl	9000dc74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e862:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000e864:	2d00      	cmp	r5, #0
9000e866:	d172      	bne.n	9000e94e <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
9000e868:	9b01      	ldr	r3, [sp, #4]
9000e86a:	2b00      	cmp	r3, #0
9000e86c:	f000 80f1 	beq.w	9000ea52 <xQueueReceive+0x216>
		prvLockQueue( pxQueue );
9000e870:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e872:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
9000e876:	a802      	add	r0, sp, #8
9000e878:	f001 f9c0 	bl	9000fbfc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9000e87c:	f7ff fa1c 	bl	9000dcb8 <vPortExitCritical>
		vTaskSuspendAll();
9000e880:	f001 f848 	bl	9000f914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000e884:	f7ff f9f6 	bl	9000dc74 <vPortEnterCritical>
9000e888:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e88c:	2bff      	cmp	r3, #255	; 0xff
9000e88e:	d101      	bne.n	9000e894 <xQueueReceive+0x58>
9000e890:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
9000e894:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e898:	2bff      	cmp	r3, #255	; 0xff
9000e89a:	d101      	bne.n	9000e8a0 <xQueueReceive+0x64>
9000e89c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
9000e8a0:	f7ff fa0a 	bl	9000dcb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000e8a4:	a901      	add	r1, sp, #4
9000e8a6:	a802      	add	r0, sp, #8
9000e8a8:	f001 f9b4 	bl	9000fc14 <xTaskCheckForTimeOut>
9000e8ac:	2800      	cmp	r0, #0
9000e8ae:	d17f      	bne.n	9000e9b0 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
9000e8b0:	f7ff f9e0 	bl	9000dc74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000e8b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000e8b6:	2b00      	cmp	r3, #0
9000e8b8:	f000 80d1 	beq.w	9000ea5e <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
9000e8bc:	f7ff f9fc 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e8c0:	f7ff f9d8 	bl	9000dc74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e8c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e8c8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e8ca:	2d00      	cmp	r5, #0
9000e8cc:	dc04      	bgt.n	9000e8d8 <xQueueReceive+0x9c>
9000e8ce:	e011      	b.n	9000e8f4 <xQueueReceive+0xb8>
			--cTxLock;
9000e8d0:	1e6b      	subs	r3, r5, #1
9000e8d2:	b2da      	uxtb	r2, r3
9000e8d4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e8d6:	b16a      	cbz	r2, 9000e8f4 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e8d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e8da:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e8dc:	b153      	cbz	r3, 9000e8f4 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e8de:	f001 f943 	bl	9000fb68 <xTaskRemoveFromEventList>
9000e8e2:	2800      	cmp	r0, #0
9000e8e4:	d0f4      	beq.n	9000e8d0 <xQueueReceive+0x94>
						vTaskMissedYield();
9000e8e6:	f001 f9dd 	bl	9000fca4 <vTaskMissedYield>
			--cTxLock;
9000e8ea:	1e6b      	subs	r3, r5, #1
9000e8ec:	b2da      	uxtb	r2, r3
9000e8ee:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e8f0:	2a00      	cmp	r2, #0
9000e8f2:	d1f1      	bne.n	9000e8d8 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
9000e8f4:	23ff      	movs	r3, #255	; 0xff
9000e8f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e8fa:	f7ff f9dd 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e8fe:	f7ff f9b9 	bl	9000dc74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e902:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e906:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e908:	2d00      	cmp	r5, #0
9000e90a:	dd14      	ble.n	9000e936 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e90c:	f104 0910 	add.w	r9, r4, #16
9000e910:	e003      	b.n	9000e91a <xQueueReceive+0xde>
				--cRxLock;
9000e912:	1e6b      	subs	r3, r5, #1
9000e914:	b2da      	uxtb	r2, r3
9000e916:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e918:	b16a      	cbz	r2, 9000e936 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e91a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e91c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e91e:	b153      	cbz	r3, 9000e936 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e920:	f001 f922 	bl	9000fb68 <xTaskRemoveFromEventList>
9000e924:	2800      	cmp	r0, #0
9000e926:	d0f4      	beq.n	9000e912 <xQueueReceive+0xd6>
					vTaskMissedYield();
9000e928:	f001 f9bc 	bl	9000fca4 <vTaskMissedYield>
				--cRxLock;
9000e92c:	1e6b      	subs	r3, r5, #1
9000e92e:	b2da      	uxtb	r2, r3
9000e930:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e932:	2a00      	cmp	r2, #0
9000e934:	d1f1      	bne.n	9000e91a <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
9000e936:	23ff      	movs	r3, #255	; 0xff
9000e938:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e93c:	f7ff f9bc 	bl	9000dcb8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000e940:	f000 fff0 	bl	9000f924 <xTaskResumeAll>
		taskENTER_CRITICAL();
9000e944:	f7ff f996 	bl	9000dc74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e948:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000e94a:	2d00      	cmp	r5, #0
9000e94c:	d07d      	beq.n	9000ea4a <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000e94e:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000e950:	b152      	cbz	r2, 9000e968 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e952:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000e954:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e956:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000e958:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e95a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000e95c:	d301      	bcc.n	9000e962 <xQueueReceive+0x126>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000e95e:	6821      	ldr	r1, [r4, #0]
9000e960:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000e962:	4638      	mov	r0, r7
9000e964:	f014 fa5a 	bl	90022e1c <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000e968:	3d01      	subs	r5, #1
9000e96a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e96c:	6923      	ldr	r3, [r4, #16]
9000e96e:	2b00      	cmp	r3, #0
9000e970:	f040 80d3 	bne.w	9000eb1a <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
9000e974:	f7ff f9a0 	bl	9000dcb8 <vPortExitCritical>
				return pdPASS;
9000e978:	2001      	movs	r0, #1
9000e97a:	e06d      	b.n	9000ea58 <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e97c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000e97e:	2b00      	cmp	r3, #0
9000e980:	f43f af68 	beq.w	9000e854 <xQueueReceive+0x18>
	__asm volatile
9000e984:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e988:	f383 8811 	msr	BASEPRI, r3
9000e98c:	f3bf 8f6f 	isb	sy
9000e990:	f3bf 8f4f 	dsb	sy
9000e994:	e7fe      	b.n	9000e994 <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e996:	9b01      	ldr	r3, [sp, #4]
9000e998:	2b00      	cmp	r3, #0
9000e99a:	f43f af60 	beq.w	9000e85e <xQueueReceive+0x22>
9000e99e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e9a2:	f383 8811 	msr	BASEPRI, r3
9000e9a6:	f3bf 8f6f 	isb	sy
9000e9aa:	f3bf 8f4f 	dsb	sy
9000e9ae:	e7fe      	b.n	9000e9ae <xQueueReceive+0x172>
	taskENTER_CRITICAL();
9000e9b0:	f7ff f960 	bl	9000dc74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e9b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e9b8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e9ba:	2d00      	cmp	r5, #0
9000e9bc:	dc04      	bgt.n	9000e9c8 <xQueueReceive+0x18c>
9000e9be:	e011      	b.n	9000e9e4 <xQueueReceive+0x1a8>
			--cTxLock;
9000e9c0:	1e6b      	subs	r3, r5, #1
9000e9c2:	b2da      	uxtb	r2, r3
9000e9c4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e9c6:	b16a      	cbz	r2, 9000e9e4 <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e9c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e9ca:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e9cc:	b153      	cbz	r3, 9000e9e4 <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e9ce:	f001 f8cb 	bl	9000fb68 <xTaskRemoveFromEventList>
9000e9d2:	2800      	cmp	r0, #0
9000e9d4:	d0f4      	beq.n	9000e9c0 <xQueueReceive+0x184>
						vTaskMissedYield();
9000e9d6:	f001 f965 	bl	9000fca4 <vTaskMissedYield>
			--cTxLock;
9000e9da:	1e6b      	subs	r3, r5, #1
9000e9dc:	b2da      	uxtb	r2, r3
9000e9de:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e9e0:	2a00      	cmp	r2, #0
9000e9e2:	d1f1      	bne.n	9000e9c8 <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
9000e9e4:	23ff      	movs	r3, #255	; 0xff
9000e9e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e9ea:	f7ff f965 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e9ee:	f7ff f941 	bl	9000dc74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e9f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e9f6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e9f8:	2d00      	cmp	r5, #0
9000e9fa:	dd14      	ble.n	9000ea26 <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e9fc:	f104 0910 	add.w	r9, r4, #16
9000ea00:	e003      	b.n	9000ea0a <xQueueReceive+0x1ce>
				--cRxLock;
9000ea02:	1e6b      	subs	r3, r5, #1
9000ea04:	b2da      	uxtb	r2, r3
9000ea06:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ea08:	b16a      	cbz	r2, 9000ea26 <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ea0a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ea0c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ea0e:	b153      	cbz	r3, 9000ea26 <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ea10:	f001 f8aa 	bl	9000fb68 <xTaskRemoveFromEventList>
9000ea14:	2800      	cmp	r0, #0
9000ea16:	d0f4      	beq.n	9000ea02 <xQueueReceive+0x1c6>
					vTaskMissedYield();
9000ea18:	f001 f944 	bl	9000fca4 <vTaskMissedYield>
				--cRxLock;
9000ea1c:	1e6b      	subs	r3, r5, #1
9000ea1e:	b2da      	uxtb	r2, r3
9000ea20:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ea22:	2a00      	cmp	r2, #0
9000ea24:	d1f1      	bne.n	9000ea0a <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
9000ea26:	23ff      	movs	r3, #255	; 0xff
9000ea28:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ea2c:	f7ff f944 	bl	9000dcb8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000ea30:	f000 ff78 	bl	9000f924 <xTaskResumeAll>
	taskENTER_CRITICAL();
9000ea34:	f7ff f91e 	bl	9000dc74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000ea38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000ea3a:	b153      	cbz	r3, 9000ea52 <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
9000ea3c:	f7ff f93c 	bl	9000dcb8 <vPortExitCritical>
		taskENTER_CRITICAL();
9000ea40:	f7ff f918 	bl	9000dc74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000ea44:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000ea46:	2d00      	cmp	r5, #0
9000ea48:	d181      	bne.n	9000e94e <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
9000ea4a:	9b01      	ldr	r3, [sp, #4]
9000ea4c:	2b00      	cmp	r3, #0
9000ea4e:	f47f af15 	bne.w	9000e87c <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
9000ea52:	f7ff f931 	bl	9000dcb8 <vPortExitCritical>
					return errQUEUE_EMPTY;
9000ea56:	2000      	movs	r0, #0
}
9000ea58:	b005      	add	sp, #20
9000ea5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
9000ea5e:	f7ff f92b 	bl	9000dcb8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000ea62:	9901      	ldr	r1, [sp, #4]
9000ea64:	4630      	mov	r0, r6
9000ea66:	f000 fff1 	bl	9000fa4c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000ea6a:	f7ff f903 	bl	9000dc74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ea6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ea72:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ea74:	2d00      	cmp	r5, #0
9000ea76:	dc04      	bgt.n	9000ea82 <xQueueReceive+0x246>
9000ea78:	e011      	b.n	9000ea9e <xQueueReceive+0x262>
			--cTxLock;
9000ea7a:	1e6b      	subs	r3, r5, #1
9000ea7c:	b2da      	uxtb	r2, r3
9000ea7e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ea80:	b16a      	cbz	r2, 9000ea9e <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ea82:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ea84:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ea86:	b153      	cbz	r3, 9000ea9e <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ea88:	f001 f86e 	bl	9000fb68 <xTaskRemoveFromEventList>
9000ea8c:	2800      	cmp	r0, #0
9000ea8e:	d0f4      	beq.n	9000ea7a <xQueueReceive+0x23e>
						vTaskMissedYield();
9000ea90:	f001 f908 	bl	9000fca4 <vTaskMissedYield>
			--cTxLock;
9000ea94:	1e6b      	subs	r3, r5, #1
9000ea96:	b2da      	uxtb	r2, r3
9000ea98:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ea9a:	2a00      	cmp	r2, #0
9000ea9c:	d1f1      	bne.n	9000ea82 <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
9000ea9e:	23ff      	movs	r3, #255	; 0xff
9000eaa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000eaa4:	f7ff f908 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000eaa8:	f7ff f8e4 	bl	9000dc74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000eaac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000eab0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eab2:	2d00      	cmp	r5, #0
9000eab4:	dd14      	ble.n	9000eae0 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eab6:	f104 0910 	add.w	r9, r4, #16
9000eaba:	e003      	b.n	9000eac4 <xQueueReceive+0x288>
				--cRxLock;
9000eabc:	1e6b      	subs	r3, r5, #1
9000eabe:	b2da      	uxtb	r2, r3
9000eac0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eac2:	b16a      	cbz	r2, 9000eae0 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eac4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eac6:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000eac8:	b153      	cbz	r3, 9000eae0 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eaca:	f001 f84d 	bl	9000fb68 <xTaskRemoveFromEventList>
9000eace:	2800      	cmp	r0, #0
9000ead0:	d0f4      	beq.n	9000eabc <xQueueReceive+0x280>
					vTaskMissedYield();
9000ead2:	f001 f8e7 	bl	9000fca4 <vTaskMissedYield>
				--cRxLock;
9000ead6:	1e6b      	subs	r3, r5, #1
9000ead8:	b2da      	uxtb	r2, r3
9000eada:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eadc:	2a00      	cmp	r2, #0
9000eade:	d1f1      	bne.n	9000eac4 <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
9000eae0:	23ff      	movs	r3, #255	; 0xff
9000eae2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000eae6:	f7ff f8e7 	bl	9000dcb8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000eaea:	f000 ff1b 	bl	9000f924 <xTaskResumeAll>
9000eaee:	2800      	cmp	r0, #0
9000eaf0:	d1a6      	bne.n	9000ea40 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
9000eaf2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eaf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000eafa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000eafe:	f3bf 8f4f 	dsb	sy
9000eb02:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
9000eb06:	e79b      	b.n	9000ea40 <xQueueReceive+0x204>
9000eb08:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eb0c:	f383 8811 	msr	BASEPRI, r3
9000eb10:	f3bf 8f6f 	isb	sy
9000eb14:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000eb18:	e7fe      	b.n	9000eb18 <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000eb1a:	f104 0010 	add.w	r0, r4, #16
9000eb1e:	f001 f823 	bl	9000fb68 <xTaskRemoveFromEventList>
9000eb22:	2800      	cmp	r0, #0
9000eb24:	f43f af26 	beq.w	9000e974 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
9000eb28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eb2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000eb30:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000eb34:	f3bf 8f4f 	dsb	sy
9000eb38:	f3bf 8f6f 	isb	sy
9000eb3c:	e71a      	b.n	9000e974 <xQueueReceive+0x138>
9000eb3e:	bf00      	nop

9000eb40 <xQueueSemaphoreTake>:
{
9000eb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000eb44:	b084      	sub	sp, #16
9000eb46:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
9000eb48:	2800      	cmp	r0, #0
9000eb4a:	d05c      	beq.n	9000ec06 <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
9000eb4c:	6c07      	ldr	r7, [r0, #64]	; 0x40
9000eb4e:	4604      	mov	r4, r0
9000eb50:	b147      	cbz	r7, 9000eb64 <xQueueSemaphoreTake+0x24>
9000eb52:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eb56:	f383 8811 	msr	BASEPRI, r3
9000eb5a:	f3bf 8f6f 	isb	sy
9000eb5e:	f3bf 8f4f 	dsb	sy
9000eb62:	e7fe      	b.n	9000eb62 <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000eb64:	f001 f8aa 	bl	9000fcbc <xTaskGetSchedulerState>
9000eb68:	4605      	mov	r5, r0
9000eb6a:	2800      	cmp	r0, #0
9000eb6c:	d054      	beq.n	9000ec18 <xQueueSemaphoreTake+0xd8>
9000eb6e:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000eb70:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
9000eb74:	f7ff f87e 	bl	9000dc74 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
9000eb78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9000eb7a:	2b00      	cmp	r3, #0
9000eb7c:	f040 8149 	bne.w	9000ee12 <xQueueSemaphoreTake+0x2d2>
				if( xTicksToWait == ( TickType_t ) 0 )
9000eb80:	9b01      	ldr	r3, [sp, #4]
9000eb82:	2b00      	cmp	r3, #0
9000eb84:	f000 813a 	beq.w	9000edfc <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
9000eb88:	2d00      	cmp	r5, #0
9000eb8a:	f000 809d 	beq.w	9000ecc8 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
9000eb8e:	f7ff f893 	bl	9000dcb8 <vPortExitCritical>
		vTaskSuspendAll();
9000eb92:	f000 febf 	bl	9000f914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000eb96:	f7ff f86d 	bl	9000dc74 <vPortEnterCritical>
9000eb9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000eb9e:	2bff      	cmp	r3, #255	; 0xff
9000eba0:	d102      	bne.n	9000eba8 <xQueueSemaphoreTake+0x68>
9000eba2:	2300      	movs	r3, #0
9000eba4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000eba8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ebac:	2bff      	cmp	r3, #255	; 0xff
9000ebae:	d102      	bne.n	9000ebb6 <xQueueSemaphoreTake+0x76>
9000ebb0:	2300      	movs	r3, #0
9000ebb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000ebb6:	f7ff f87f 	bl	9000dcb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000ebba:	a901      	add	r1, sp, #4
9000ebbc:	a802      	add	r0, sp, #8
9000ebbe:	f001 f829 	bl	9000fc14 <xTaskCheckForTimeOut>
9000ebc2:	2800      	cmp	r0, #0
9000ebc4:	d135      	bne.n	9000ec32 <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
9000ebc6:	f7ff f855 	bl	9000dc74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000ebca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000ebcc:	2b00      	cmp	r3, #0
9000ebce:	f000 80a4 	beq.w	9000ed1a <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
9000ebd2:	f7ff f871 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ebd6:	f7ff f84d 	bl	9000dc74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ebda:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ebde:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ebe0:	2d00      	cmp	r5, #0
9000ebe2:	dc05      	bgt.n	9000ebf0 <xQueueSemaphoreTake+0xb0>
9000ebe4:	e074      	b.n	9000ecd0 <xQueueSemaphoreTake+0x190>
			--cTxLock;
9000ebe6:	1e6b      	subs	r3, r5, #1
9000ebe8:	b2da      	uxtb	r2, r3
9000ebea:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ebec:	2a00      	cmp	r2, #0
9000ebee:	d06f      	beq.n	9000ecd0 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ebf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ebf2:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ebf4:	2b00      	cmp	r3, #0
9000ebf6:	d06b      	beq.n	9000ecd0 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ebf8:	f000 ffb6 	bl	9000fb68 <xTaskRemoveFromEventList>
9000ebfc:	2800      	cmp	r0, #0
9000ebfe:	d0f2      	beq.n	9000ebe6 <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
9000ec00:	f001 f850 	bl	9000fca4 <vTaskMissedYield>
9000ec04:	e7ef      	b.n	9000ebe6 <xQueueSemaphoreTake+0xa6>
9000ec06:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ec0a:	f383 8811 	msr	BASEPRI, r3
9000ec0e:	f3bf 8f6f 	isb	sy
9000ec12:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000ec16:	e7fe      	b.n	9000ec16 <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000ec18:	9b01      	ldr	r3, [sp, #4]
9000ec1a:	2b00      	cmp	r3, #0
9000ec1c:	f000 80d4 	beq.w	9000edc8 <xQueueSemaphoreTake+0x288>
9000ec20:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ec24:	f383 8811 	msr	BASEPRI, r3
9000ec28:	f3bf 8f6f 	isb	sy
9000ec2c:	f3bf 8f4f 	dsb	sy
9000ec30:	e7fe      	b.n	9000ec30 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
9000ec32:	f7ff f81f 	bl	9000dc74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ec36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ec3a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ec3c:	2d00      	cmp	r5, #0
9000ec3e:	dc04      	bgt.n	9000ec4a <xQueueSemaphoreTake+0x10a>
9000ec40:	e011      	b.n	9000ec66 <xQueueSemaphoreTake+0x126>
			--cTxLock;
9000ec42:	1e6b      	subs	r3, r5, #1
9000ec44:	b2da      	uxtb	r2, r3
9000ec46:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ec48:	b16a      	cbz	r2, 9000ec66 <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ec4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ec4c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ec4e:	b153      	cbz	r3, 9000ec66 <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ec50:	f000 ff8a 	bl	9000fb68 <xTaskRemoveFromEventList>
9000ec54:	2800      	cmp	r0, #0
9000ec56:	d0f4      	beq.n	9000ec42 <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
9000ec58:	f001 f824 	bl	9000fca4 <vTaskMissedYield>
			--cTxLock;
9000ec5c:	1e6b      	subs	r3, r5, #1
9000ec5e:	b2da      	uxtb	r2, r3
9000ec60:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ec62:	2a00      	cmp	r2, #0
9000ec64:	d1f1      	bne.n	9000ec4a <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
9000ec66:	23ff      	movs	r3, #255	; 0xff
9000ec68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ec6c:	f7ff f824 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ec70:	f7ff f800 	bl	9000dc74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ec74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ec78:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ec7a:	2d00      	cmp	r5, #0
9000ec7c:	dd14      	ble.n	9000eca8 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ec7e:	f104 0810 	add.w	r8, r4, #16
9000ec82:	e003      	b.n	9000ec8c <xQueueSemaphoreTake+0x14c>
				--cRxLock;
9000ec84:	1e6b      	subs	r3, r5, #1
9000ec86:	b2da      	uxtb	r2, r3
9000ec88:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ec8a:	b16a      	cbz	r2, 9000eca8 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ec8c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ec8e:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ec90:	b153      	cbz	r3, 9000eca8 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ec92:	f000 ff69 	bl	9000fb68 <xTaskRemoveFromEventList>
9000ec96:	2800      	cmp	r0, #0
9000ec98:	d0f4      	beq.n	9000ec84 <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
9000ec9a:	f001 f803 	bl	9000fca4 <vTaskMissedYield>
				--cRxLock;
9000ec9e:	1e6b      	subs	r3, r5, #1
9000eca0:	b2da      	uxtb	r2, r3
9000eca2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000eca4:	2a00      	cmp	r2, #0
9000eca6:	d1f1      	bne.n	9000ec8c <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
9000eca8:	23ff      	movs	r3, #255	; 0xff
9000ecaa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ecae:	f7ff f803 	bl	9000dcb8 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000ecb2:	f000 fe37 	bl	9000f924 <xTaskResumeAll>
	taskENTER_CRITICAL();
9000ecb6:	f7fe ffdd 	bl	9000dc74 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000ecba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000ecbc:	2b00      	cmp	r3, #0
9000ecbe:	d07c      	beq.n	9000edba <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
9000ecc0:	f7fe fffa 	bl	9000dcb8 <vPortExitCritical>
	return xReturn;
9000ecc4:	2501      	movs	r5, #1
9000ecc6:	e755      	b.n	9000eb74 <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000ecc8:	a802      	add	r0, sp, #8
9000ecca:	f000 ff97 	bl	9000fbfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000ecce:	e75e      	b.n	9000eb8e <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000ecd0:	23ff      	movs	r3, #255	; 0xff
9000ecd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ecd6:	f7fe ffef 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ecda:	f7fe ffcb 	bl	9000dc74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ecde:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ece2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ece4:	2d00      	cmp	r5, #0
9000ece6:	dd10      	ble.n	9000ed0a <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ece8:	f104 0810 	add.w	r8, r4, #16
9000ecec:	e003      	b.n	9000ecf6 <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
9000ecee:	1e6b      	subs	r3, r5, #1
9000ecf0:	b2da      	uxtb	r2, r3
9000ecf2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ecf4:	b14a      	cbz	r2, 9000ed0a <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ecf6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ecf8:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ecfa:	b133      	cbz	r3, 9000ed0a <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ecfc:	f000 ff34 	bl	9000fb68 <xTaskRemoveFromEventList>
9000ed00:	2800      	cmp	r0, #0
9000ed02:	d0f4      	beq.n	9000ecee <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
9000ed04:	f000 ffce 	bl	9000fca4 <vTaskMissedYield>
9000ed08:	e7f1      	b.n	9000ecee <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
9000ed0a:	23ff      	movs	r3, #255	; 0xff
9000ed0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ed10:	f7fe ffd2 	bl	9000dcb8 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000ed14:	f000 fe06 	bl	9000f924 <xTaskResumeAll>
9000ed18:	e7d4      	b.n	9000ecc4 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000ed1a:	f7fe ffcd 	bl	9000dcb8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000ed1e:	6823      	ldr	r3, [r4, #0]
9000ed20:	2b00      	cmp	r3, #0
9000ed22:	d062      	beq.n	9000edea <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000ed24:	9901      	ldr	r1, [sp, #4]
9000ed26:	4630      	mov	r0, r6
9000ed28:	f000 fe90 	bl	9000fa4c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000ed2c:	f7fe ffa2 	bl	9000dc74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000ed30:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000ed34:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ed36:	2d00      	cmp	r5, #0
9000ed38:	dc04      	bgt.n	9000ed44 <xQueueSemaphoreTake+0x204>
9000ed3a:	e00d      	b.n	9000ed58 <xQueueSemaphoreTake+0x218>
			--cTxLock;
9000ed3c:	1e6b      	subs	r3, r5, #1
9000ed3e:	b2da      	uxtb	r2, r3
9000ed40:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000ed42:	b14a      	cbz	r2, 9000ed58 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ed44:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ed46:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ed48:	b133      	cbz	r3, 9000ed58 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ed4a:	f000 ff0d 	bl	9000fb68 <xTaskRemoveFromEventList>
9000ed4e:	2800      	cmp	r0, #0
9000ed50:	d0f4      	beq.n	9000ed3c <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
9000ed52:	f000 ffa7 	bl	9000fca4 <vTaskMissedYield>
9000ed56:	e7f1      	b.n	9000ed3c <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
9000ed58:	23ff      	movs	r3, #255	; 0xff
9000ed5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000ed5e:	f7fe ffab 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000ed62:	f7fe ff87 	bl	9000dc74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000ed66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000ed6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ed6c:	2d00      	cmp	r5, #0
9000ed6e:	dd10      	ble.n	9000ed92 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ed70:	f104 0810 	add.w	r8, r4, #16
9000ed74:	e003      	b.n	9000ed7e <xQueueSemaphoreTake+0x23e>
				--cRxLock;
9000ed76:	1e6b      	subs	r3, r5, #1
9000ed78:	b2da      	uxtb	r2, r3
9000ed7a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ed7c:	b14a      	cbz	r2, 9000ed92 <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ed7e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ed80:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ed82:	b133      	cbz	r3, 9000ed92 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ed84:	f000 fef0 	bl	9000fb68 <xTaskRemoveFromEventList>
9000ed88:	2800      	cmp	r0, #0
9000ed8a:	d0f4      	beq.n	9000ed76 <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
9000ed8c:	f000 ff8a 	bl	9000fca4 <vTaskMissedYield>
9000ed90:	e7f1      	b.n	9000ed76 <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
9000ed92:	23ff      	movs	r3, #255	; 0xff
9000ed94:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000ed98:	f7fe ff8e 	bl	9000dcb8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000ed9c:	f000 fdc2 	bl	9000f924 <xTaskResumeAll>
9000eda0:	2800      	cmp	r0, #0
9000eda2:	d18f      	bne.n	9000ecc4 <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
9000eda4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000eda8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000edac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000edb0:	f3bf 8f4f 	dsb	sy
9000edb4:	f3bf 8f6f 	isb	sy
9000edb8:	e784      	b.n	9000ecc4 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000edba:	f7fe ff7d 	bl	9000dcb8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
9000edbe:	b92f      	cbnz	r7, 9000edcc <xQueueSemaphoreTake+0x28c>
}
9000edc0:	4638      	mov	r0, r7
9000edc2:	b004      	add	sp, #16
9000edc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000edc8:	4607      	mov	r7, r0
9000edca:	e6d1      	b.n	9000eb70 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
9000edcc:	f7fe ff52 	bl	9000dc74 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
9000edd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000edd2:	b119      	cbz	r1, 9000eddc <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
9000edd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000edd6:	6819      	ldr	r1, [r3, #0]
9000edd8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000eddc:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
9000edde:	2700      	movs	r7, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000ede0:	f001 f808 	bl	9000fdf4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
9000ede4:	f7fe ff68 	bl	9000dcb8 <vPortExitCritical>
9000ede8:	e7ea      	b.n	9000edc0 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
9000edea:	f7fe ff43 	bl	9000dc74 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
9000edee:	68a0      	ldr	r0, [r4, #8]
9000edf0:	f000 ff74 	bl	9000fcdc <xTaskPriorityInherit>
9000edf4:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
9000edf6:	f7fe ff5f 	bl	9000dcb8 <vPortExitCritical>
9000edfa:	e793      	b.n	9000ed24 <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
9000edfc:	2f00      	cmp	r7, #0
9000edfe:	d0f1      	beq.n	9000ede4 <xQueueSemaphoreTake+0x2a4>
9000ee00:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ee04:	f383 8811 	msr	BASEPRI, r3
9000ee08:	f3bf 8f6f 	isb	sy
9000ee0c:	f3bf 8f4f 	dsb	sy
9000ee10:	e7fe      	b.n	9000ee10 <xQueueSemaphoreTake+0x2d0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000ee12:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000ee14:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000ee16:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000ee18:	b12a      	cbz	r2, 9000ee26 <xQueueSemaphoreTake+0x2e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ee1a:	6923      	ldr	r3, [r4, #16]
9000ee1c:	b93b      	cbnz	r3, 9000ee2e <xQueueSemaphoreTake+0x2ee>
				return pdPASS;
9000ee1e:	2701      	movs	r7, #1
				taskEXIT_CRITICAL();
9000ee20:	f7fe ff4a 	bl	9000dcb8 <vPortExitCritical>
				return pdPASS;
9000ee24:	e7cc      	b.n	9000edc0 <xQueueSemaphoreTake+0x280>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
9000ee26:	f001 f839 	bl	9000fe9c <pvTaskIncrementMutexHeldCount>
9000ee2a:	60a0      	str	r0, [r4, #8]
9000ee2c:	e7f5      	b.n	9000ee1a <xQueueSemaphoreTake+0x2da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ee2e:	f104 0010 	add.w	r0, r4, #16
9000ee32:	f000 fe99 	bl	9000fb68 <xTaskRemoveFromEventList>
9000ee36:	2800      	cmp	r0, #0
9000ee38:	d0f1      	beq.n	9000ee1e <xQueueSemaphoreTake+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
9000ee3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ee3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ee42:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ee46:	f3bf 8f4f 	dsb	sy
9000ee4a:	f3bf 8f6f 	isb	sy
9000ee4e:	e7e6      	b.n	9000ee1e <xQueueSemaphoreTake+0x2de>

9000ee50 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
9000ee50:	b1a8      	cbz	r0, 9000ee7e <xQueueTakeMutexRecursive+0x2e>
	{
9000ee52:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000ee54:	6886      	ldr	r6, [r0, #8]
9000ee56:	4604      	mov	r4, r0
9000ee58:	460d      	mov	r5, r1
9000ee5a:	f000 ff29 	bl	9000fcb0 <xTaskGetCurrentTaskHandle>
9000ee5e:	4286      	cmp	r6, r0
9000ee60:	d008      	beq.n	9000ee74 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
9000ee62:	4629      	mov	r1, r5
9000ee64:	4620      	mov	r0, r4
9000ee66:	f7ff fe6b 	bl	9000eb40 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
9000ee6a:	b110      	cbz	r0, 9000ee72 <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000ee6c:	68e3      	ldr	r3, [r4, #12]
9000ee6e:	3301      	adds	r3, #1
9000ee70:	60e3      	str	r3, [r4, #12]
	}
9000ee72:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000ee74:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
9000ee76:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000ee78:	4403      	add	r3, r0
9000ee7a:	60e3      	str	r3, [r4, #12]
	}
9000ee7c:	bd70      	pop	{r4, r5, r6, pc}
9000ee7e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ee82:	f383 8811 	msr	BASEPRI, r3
9000ee86:	f3bf 8f6f 	isb	sy
9000ee8a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000ee8e:	e7fe      	b.n	9000ee8e <xQueueTakeMutexRecursive+0x3e>

9000ee90 <xQueueReceiveFromISR>:
{
9000ee90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
9000ee94:	b310      	cbz	r0, 9000eedc <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ee96:	460e      	mov	r6, r1
9000ee98:	4604      	mov	r4, r0
9000ee9a:	4617      	mov	r7, r2
9000ee9c:	b191      	cbz	r1, 9000eec4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000ee9e:	f7ff f81b 	bl	9000ded8 <vPortValidateInterruptPriority>
	__asm volatile
9000eea2:	f3ef 8911 	mrs	r9, BASEPRI
9000eea6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eeaa:	f383 8811 	msr	BASEPRI, r3
9000eeae:	f3bf 8f6f 	isb	sy
9000eeb2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000eeb6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000eeb8:	b9cd      	cbnz	r5, 9000eeee <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
9000eeba:	4628      	mov	r0, r5
	__asm volatile
9000eebc:	f389 8811 	msr	BASEPRI, r9
}
9000eec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000eec4:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000eec6:	2b00      	cmp	r3, #0
9000eec8:	d0e9      	beq.n	9000ee9e <xQueueReceiveFromISR+0xe>
	__asm volatile
9000eeca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eece:	f383 8811 	msr	BASEPRI, r3
9000eed2:	f3bf 8f6f 	isb	sy
9000eed6:	f3bf 8f4f 	dsb	sy
9000eeda:	e7fe      	b.n	9000eeda <xQueueReceiveFromISR+0x4a>
9000eedc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eee0:	f383 8811 	msr	BASEPRI, r3
9000eee4:	f3bf 8f6f 	isb	sy
9000eee8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000eeec:	e7fe      	b.n	9000eeec <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
9000eeee:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000eef2:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
9000eef4:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000eef8:	b142      	cbz	r2, 9000ef0c <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000eefa:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000eefc:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000eefe:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000ef00:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000ef02:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000ef04:	d215      	bcs.n	9000ef32 <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000ef06:	4630      	mov	r0, r6
9000ef08:	f013 ff88 	bl	90022e1c <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000ef0c:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
9000ef0e:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000ef12:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
9000ef14:	d009      	beq.n	9000ef2a <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000ef16:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
9000ef1a:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000ef1c:	b25b      	sxtb	r3, r3
9000ef1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
9000ef22:	f389 8811 	msr	BASEPRI, r9
}
9000ef26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000ef2a:	6923      	ldr	r3, [r4, #16]
9000ef2c:	b923      	cbnz	r3, 9000ef38 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
9000ef2e:	2001      	movs	r0, #1
9000ef30:	e7c4      	b.n	9000eebc <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000ef32:	6821      	ldr	r1, [r4, #0]
9000ef34:	60e1      	str	r1, [r4, #12]
9000ef36:	e7e6      	b.n	9000ef06 <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000ef38:	f104 0010 	add.w	r0, r4, #16
9000ef3c:	f000 fe14 	bl	9000fb68 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
9000ef40:	2f00      	cmp	r7, #0
9000ef42:	d0f4      	beq.n	9000ef2e <xQueueReceiveFromISR+0x9e>
9000ef44:	2800      	cmp	r0, #0
9000ef46:	d0f2      	beq.n	9000ef2e <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
9000ef48:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000ef4a:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
9000ef4c:	603b      	str	r3, [r7, #0]
9000ef4e:	e7b5      	b.n	9000eebc <xQueueReceiveFromISR+0x2c>

9000ef50 <vQueueDelete>:
	configASSERT( pxQueue );
9000ef50:	b1e0      	cbz	r0, 9000ef8c <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
9000ef52:	4b21      	ldr	r3, [pc, #132]	; (9000efd8 <vQueueDelete+0x88>)
9000ef54:	685a      	ldr	r2, [r3, #4]
9000ef56:	4290      	cmp	r0, r2
9000ef58:	d02b      	beq.n	9000efb2 <vQueueDelete+0x62>
9000ef5a:	68da      	ldr	r2, [r3, #12]
9000ef5c:	4290      	cmp	r0, r2
9000ef5e:	d02a      	beq.n	9000efb6 <vQueueDelete+0x66>
9000ef60:	695a      	ldr	r2, [r3, #20]
9000ef62:	4290      	cmp	r0, r2
9000ef64:	d029      	beq.n	9000efba <vQueueDelete+0x6a>
9000ef66:	69da      	ldr	r2, [r3, #28]
9000ef68:	4290      	cmp	r0, r2
9000ef6a:	d028      	beq.n	9000efbe <vQueueDelete+0x6e>
9000ef6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000ef6e:	4290      	cmp	r0, r2
9000ef70:	d027      	beq.n	9000efc2 <vQueueDelete+0x72>
9000ef72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000ef74:	4290      	cmp	r0, r2
9000ef76:	d014      	beq.n	9000efa2 <vQueueDelete+0x52>
9000ef78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000ef7a:	4290      	cmp	r0, r2
9000ef7c:	d023      	beq.n	9000efc6 <vQueueDelete+0x76>
9000ef7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000ef80:	4290      	cmp	r0, r2
9000ef82:	d022      	beq.n	9000efca <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
9000ef84:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
9000ef88:	b14b      	cbz	r3, 9000ef9e <vQueueDelete+0x4e>
}
9000ef8a:	4770      	bx	lr
	__asm volatile
9000ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef90:	f383 8811 	msr	BASEPRI, r3
9000ef94:	f3bf 8f6f 	isb	sy
9000ef98:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000ef9c:	e7fe      	b.n	9000ef9c <vQueueDelete+0x4c>
			vPortFree( pxQueue );
9000ef9e:	f7fe bd4d 	b.w	9000da3c <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000efa2:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
9000efa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
9000efa8:	ed9f 7b09 	vldr	d7, [pc, #36]	; 9000efd0 <vQueueDelete+0x80>
9000efac:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
9000efb0:	e7e8      	b.n	9000ef84 <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000efb2:	2200      	movs	r2, #0
9000efb4:	e7f6      	b.n	9000efa4 <vQueueDelete+0x54>
9000efb6:	2201      	movs	r2, #1
9000efb8:	e7f4      	b.n	9000efa4 <vQueueDelete+0x54>
9000efba:	2202      	movs	r2, #2
9000efbc:	e7f2      	b.n	9000efa4 <vQueueDelete+0x54>
9000efbe:	2203      	movs	r2, #3
9000efc0:	e7f0      	b.n	9000efa4 <vQueueDelete+0x54>
9000efc2:	2204      	movs	r2, #4
9000efc4:	e7ee      	b.n	9000efa4 <vQueueDelete+0x54>
9000efc6:	2206      	movs	r2, #6
9000efc8:	e7ec      	b.n	9000efa4 <vQueueDelete+0x54>
9000efca:	2207      	movs	r2, #7
9000efcc:	e7ea      	b.n	9000efa4 <vQueueDelete+0x54>
9000efce:	bf00      	nop
	...
9000efd8:	24024bb8 	.word	0x24024bb8

9000efdc <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
9000efdc:	4b12      	ldr	r3, [pc, #72]	; (9000f028 <vQueueAddToRegistry+0x4c>)
9000efde:	681a      	ldr	r2, [r3, #0]
9000efe0:	b17a      	cbz	r2, 9000f002 <vQueueAddToRegistry+0x26>
9000efe2:	689a      	ldr	r2, [r3, #8]
9000efe4:	b162      	cbz	r2, 9000f000 <vQueueAddToRegistry+0x24>
9000efe6:	691a      	ldr	r2, [r3, #16]
9000efe8:	b192      	cbz	r2, 9000f010 <vQueueAddToRegistry+0x34>
9000efea:	699a      	ldr	r2, [r3, #24]
9000efec:	b192      	cbz	r2, 9000f014 <vQueueAddToRegistry+0x38>
9000efee:	6a1a      	ldr	r2, [r3, #32]
9000eff0:	b192      	cbz	r2, 9000f018 <vQueueAddToRegistry+0x3c>
9000eff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9000eff4:	b192      	cbz	r2, 9000f01c <vQueueAddToRegistry+0x40>
9000eff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000eff8:	b192      	cbz	r2, 9000f020 <vQueueAddToRegistry+0x44>
9000effa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000effc:	b192      	cbz	r2, 9000f024 <vQueueAddToRegistry+0x48>
	}
9000effe:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f000:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
9000f002:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9000f006:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
9000f00a:	f8cc 0004 	str.w	r0, [ip, #4]
	}
9000f00e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000f010:	2202      	movs	r2, #2
9000f012:	e7f6      	b.n	9000f002 <vQueueAddToRegistry+0x26>
9000f014:	2203      	movs	r2, #3
9000f016:	e7f4      	b.n	9000f002 <vQueueAddToRegistry+0x26>
9000f018:	2204      	movs	r2, #4
9000f01a:	e7f2      	b.n	9000f002 <vQueueAddToRegistry+0x26>
9000f01c:	2205      	movs	r2, #5
9000f01e:	e7f0      	b.n	9000f002 <vQueueAddToRegistry+0x26>
9000f020:	2206      	movs	r2, #6
9000f022:	e7ee      	b.n	9000f002 <vQueueAddToRegistry+0x26>
9000f024:	2207      	movs	r2, #7
9000f026:	e7ec      	b.n	9000f002 <vQueueAddToRegistry+0x26>
9000f028:	24024bb8 	.word	0x24024bb8

9000f02c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
9000f02c:	b570      	push	{r4, r5, r6, lr}
9000f02e:	4605      	mov	r5, r0
9000f030:	460e      	mov	r6, r1
9000f032:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
9000f034:	f7fe fe1e 	bl	9000dc74 <vPortEnterCritical>
9000f038:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000f03c:	2bff      	cmp	r3, #255	; 0xff
9000f03e:	d102      	bne.n	9000f046 <vQueueWaitForMessageRestricted+0x1a>
9000f040:	2300      	movs	r3, #0
9000f042:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
9000f046:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000f04a:	2bff      	cmp	r3, #255	; 0xff
9000f04c:	d102      	bne.n	9000f054 <vQueueWaitForMessageRestricted+0x28>
9000f04e:	2300      	movs	r3, #0
9000f050:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
9000f054:	f7fe fe30 	bl	9000dcb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
9000f058:	6bab      	ldr	r3, [r5, #56]	; 0x38
9000f05a:	2b00      	cmp	r3, #0
9000f05c:	d043      	beq.n	9000f0e6 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
9000f05e:	f7fe fe09 	bl	9000dc74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000f062:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000f066:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f068:	2c00      	cmp	r4, #0
9000f06a:	dd14      	ble.n	9000f096 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f06c:	f105 0624 	add.w	r6, r5, #36	; 0x24
9000f070:	e003      	b.n	9000f07a <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
9000f072:	1e63      	subs	r3, r4, #1
9000f074:	b2da      	uxtb	r2, r3
9000f076:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f078:	b16a      	cbz	r2, 9000f096 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f07a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f07c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000f07e:	b153      	cbz	r3, 9000f096 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000f080:	f000 fd72 	bl	9000fb68 <xTaskRemoveFromEventList>
9000f084:	2800      	cmp	r0, #0
9000f086:	d0f4      	beq.n	9000f072 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
9000f088:	f000 fe0c 	bl	9000fca4 <vTaskMissedYield>
			--cTxLock;
9000f08c:	1e63      	subs	r3, r4, #1
9000f08e:	b2da      	uxtb	r2, r3
9000f090:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000f092:	2a00      	cmp	r2, #0
9000f094:	d1f1      	bne.n	9000f07a <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000f096:	23ff      	movs	r3, #255	; 0xff
9000f098:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
9000f09c:	f7fe fe0c 	bl	9000dcb8 <vPortExitCritical>
	taskENTER_CRITICAL();
9000f0a0:	f7fe fde8 	bl	9000dc74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000f0a4:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000f0a8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f0aa:	2c00      	cmp	r4, #0
9000f0ac:	dd14      	ble.n	9000f0d8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f0ae:	f105 0610 	add.w	r6, r5, #16
9000f0b2:	e003      	b.n	9000f0bc <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
9000f0b4:	1e63      	subs	r3, r4, #1
9000f0b6:	b2da      	uxtb	r2, r3
9000f0b8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f0ba:	b16a      	cbz	r2, 9000f0d8 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f0bc:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f0be:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000f0c0:	b153      	cbz	r3, 9000f0d8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000f0c2:	f000 fd51 	bl	9000fb68 <xTaskRemoveFromEventList>
9000f0c6:	2800      	cmp	r0, #0
9000f0c8:	d0f4      	beq.n	9000f0b4 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
9000f0ca:	f000 fdeb 	bl	9000fca4 <vTaskMissedYield>
				--cRxLock;
9000f0ce:	1e63      	subs	r3, r4, #1
9000f0d0:	b2da      	uxtb	r2, r3
9000f0d2:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000f0d4:	2a00      	cmp	r2, #0
9000f0d6:	d1f1      	bne.n	9000f0bc <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
9000f0d8:	23ff      	movs	r3, #255	; 0xff
9000f0da:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
9000f0de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
9000f0e2:	f7fe bde9 	b.w	9000dcb8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
9000f0e6:	4622      	mov	r2, r4
9000f0e8:	4631      	mov	r1, r6
9000f0ea:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000f0ee:	f000 fcf1 	bl	9000fad4 <vTaskPlaceOnEventListRestricted>
9000f0f2:	e7b4      	b.n	9000f05e <vQueueWaitForMessageRestricted+0x32>

9000f0f4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
9000f0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000f0f8:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
9000f0fa:	f7fe fdbb 	bl	9000dc74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
9000f0fe:	4a34      	ldr	r2, [pc, #208]	; (9000f1d0 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
9000f100:	4e34      	ldr	r6, [pc, #208]	; (9000f1d4 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
9000f102:	6813      	ldr	r3, [r2, #0]
9000f104:	3301      	adds	r3, #1
9000f106:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
9000f108:	6833      	ldr	r3, [r6, #0]
9000f10a:	2b00      	cmp	r3, #0
9000f10c:	d032      	beq.n	9000f174 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
9000f10e:	4c32      	ldr	r4, [pc, #200]	; (9000f1d8 <prvAddNewTaskToReadyList+0xe4>)
9000f110:	6823      	ldr	r3, [r4, #0]
9000f112:	b33b      	cbz	r3, 9000f164 <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
9000f114:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000f116:	4f31      	ldr	r7, [pc, #196]	; (9000f1dc <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
9000f118:	4a31      	ldr	r2, [pc, #196]	; (9000f1e0 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
9000f11a:	4932      	ldr	r1, [pc, #200]	; (9000f1e4 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
9000f11c:	6813      	ldr	r3, [r2, #0]
9000f11e:	3301      	adds	r3, #1
9000f120:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9000f122:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
9000f124:	680b      	ldr	r3, [r1, #0]
9000f126:	4283      	cmp	r3, r0
9000f128:	d200      	bcs.n	9000f12c <prvAddNewTaskToReadyList+0x38>
9000f12a:	6008      	str	r0, [r1, #0]
9000f12c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000f130:	1d29      	adds	r1, r5, #4
9000f132:	eb07 0080 	add.w	r0, r7, r0, lsl #2
9000f136:	f7fe fcf3 	bl	9000db20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
9000f13a:	f7fe fdbd 	bl	9000dcb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
9000f13e:	6823      	ldr	r3, [r4, #0]
9000f140:	b173      	cbz	r3, 9000f160 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9000f142:	6832      	ldr	r2, [r6, #0]
9000f144:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000f146:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000f148:	429a      	cmp	r2, r3
9000f14a:	d209      	bcs.n	9000f160 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
9000f14c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f154:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f158:	f3bf 8f4f 	dsb	sy
9000f15c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
9000f160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000f164:	6833      	ldr	r3, [r6, #0]
9000f166:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000f168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f16a:	4f1c      	ldr	r7, [pc, #112]	; (9000f1dc <prvAddNewTaskToReadyList+0xe8>)
9000f16c:	4283      	cmp	r3, r0
9000f16e:	d8d3      	bhi.n	9000f118 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
9000f170:	6035      	str	r5, [r6, #0]
9000f172:	e7d1      	b.n	9000f118 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
9000f174:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
9000f176:	6813      	ldr	r3, [r2, #0]
9000f178:	2b01      	cmp	r3, #1
9000f17a:	d003      	beq.n	9000f184 <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
9000f17c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000f17e:	4f17      	ldr	r7, [pc, #92]	; (9000f1dc <prvAddNewTaskToReadyList+0xe8>)
9000f180:	4c15      	ldr	r4, [pc, #84]	; (9000f1d8 <prvAddNewTaskToReadyList+0xe4>)
9000f182:	e7c9      	b.n	9000f118 <prvAddNewTaskToReadyList+0x24>
9000f184:	4f15      	ldr	r7, [pc, #84]	; (9000f1dc <prvAddNewTaskToReadyList+0xe8>)
9000f186:	463c      	mov	r4, r7
9000f188:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000f18c:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000f18e:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000f190:	f7fe fcb6 	bl	9000db00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000f194:	45a0      	cmp	r8, r4
9000f196:	d1f9      	bne.n	9000f18c <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
9000f198:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9000f1fc <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
9000f19c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9000f200 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
9000f1a0:	4648      	mov	r0, r9
9000f1a2:	4c0d      	ldr	r4, [pc, #52]	; (9000f1d8 <prvAddNewTaskToReadyList+0xe4>)
9000f1a4:	f7fe fcac 	bl	9000db00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
9000f1a8:	4640      	mov	r0, r8
9000f1aa:	f7fe fca9 	bl	9000db00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
9000f1ae:	480e      	ldr	r0, [pc, #56]	; (9000f1e8 <prvAddNewTaskToReadyList+0xf4>)
9000f1b0:	f7fe fca6 	bl	9000db00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
9000f1b4:	480d      	ldr	r0, [pc, #52]	; (9000f1ec <prvAddNewTaskToReadyList+0xf8>)
9000f1b6:	f7fe fca3 	bl	9000db00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
9000f1ba:	480d      	ldr	r0, [pc, #52]	; (9000f1f0 <prvAddNewTaskToReadyList+0xfc>)
9000f1bc:	f7fe fca0 	bl	9000db00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
9000f1c0:	4b0c      	ldr	r3, [pc, #48]	; (9000f1f4 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
9000f1c2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
9000f1c4:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
9000f1c8:	4b0b      	ldr	r3, [pc, #44]	; (9000f1f8 <prvAddNewTaskToReadyList+0x104>)
9000f1ca:	f8c3 8000 	str.w	r8, [r3]
}
9000f1ce:	e7a3      	b.n	9000f118 <prvAddNewTaskToReadyList+0x24>
9000f1d0:	24025064 	.word	0x24025064
9000f1d4:	24024bf8 	.word	0x24024bf8
9000f1d8:	240250c0 	.word	0x240250c0
9000f1dc:	24024c04 	.word	0x24024c04
9000f1e0:	24025070 	.word	0x24025070
9000f1e4:	24025074 	.word	0x24025074
9000f1e8:	240250ac 	.word	0x240250ac
9000f1ec:	240250d8 	.word	0x240250d8
9000f1f0:	240250c4 	.word	0x240250c4
9000f1f4:	24024bfc 	.word	0x24024bfc
9000f1f8:	24024c00 	.word	0x24024c00
9000f1fc:	24025078 	.word	0x24025078
9000f200:	2402508c 	.word	0x2402508c

9000f204 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
9000f204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000f208:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f20a:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
9000f20e:	4606      	mov	r6, r0
9000f210:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f212:	464a      	mov	r2, r9
9000f214:	21a5      	movs	r1, #165	; 0xa5
9000f216:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
9000f218:	461f      	mov	r7, r3
9000f21a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f21e:	f1a9 0904 	sub.w	r9, r9, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f222:	f013 fe09 	bl	90022e38 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f226:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000f228:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000f22a:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
9000f22e:	2d00      	cmp	r5, #0
9000f230:	d07f      	beq.n	9000f332 <prvInitialiseNewTask.constprop.0+0x12e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f232:	782b      	ldrb	r3, [r5, #0]
9000f234:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000f238:	782b      	ldrb	r3, [r5, #0]
9000f23a:	2b00      	cmp	r3, #0
9000f23c:	d04d      	beq.n	9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f23e:	786b      	ldrb	r3, [r5, #1]
9000f240:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000f244:	786b      	ldrb	r3, [r5, #1]
9000f246:	2b00      	cmp	r3, #0
9000f248:	d047      	beq.n	9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f24a:	78ab      	ldrb	r3, [r5, #2]
9000f24c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000f250:	78ab      	ldrb	r3, [r5, #2]
9000f252:	2b00      	cmp	r3, #0
9000f254:	d041      	beq.n	9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f256:	78eb      	ldrb	r3, [r5, #3]
9000f258:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000f25c:	78eb      	ldrb	r3, [r5, #3]
9000f25e:	2b00      	cmp	r3, #0
9000f260:	d03b      	beq.n	9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f262:	792b      	ldrb	r3, [r5, #4]
9000f264:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000f268:	792b      	ldrb	r3, [r5, #4]
9000f26a:	2b00      	cmp	r3, #0
9000f26c:	d035      	beq.n	9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f26e:	796b      	ldrb	r3, [r5, #5]
9000f270:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000f274:	796b      	ldrb	r3, [r5, #5]
9000f276:	2b00      	cmp	r3, #0
9000f278:	d02f      	beq.n	9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f27a:	79ab      	ldrb	r3, [r5, #6]
9000f27c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000f280:	79ab      	ldrb	r3, [r5, #6]
9000f282:	b353      	cbz	r3, 9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f284:	79eb      	ldrb	r3, [r5, #7]
9000f286:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000f28a:	79eb      	ldrb	r3, [r5, #7]
9000f28c:	b32b      	cbz	r3, 9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f28e:	7a2b      	ldrb	r3, [r5, #8]
9000f290:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000f294:	7a2b      	ldrb	r3, [r5, #8]
9000f296:	b303      	cbz	r3, 9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f298:	7a6b      	ldrb	r3, [r5, #9]
9000f29a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000f29e:	7a6b      	ldrb	r3, [r5, #9]
9000f2a0:	b1db      	cbz	r3, 9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f2a2:	7aab      	ldrb	r3, [r5, #10]
9000f2a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000f2a8:	7aab      	ldrb	r3, [r5, #10]
9000f2aa:	b1b3      	cbz	r3, 9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f2ac:	7aeb      	ldrb	r3, [r5, #11]
9000f2ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000f2b2:	7aeb      	ldrb	r3, [r5, #11]
9000f2b4:	b18b      	cbz	r3, 9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f2b6:	7b2b      	ldrb	r3, [r5, #12]
9000f2b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000f2bc:	7b2b      	ldrb	r3, [r5, #12]
9000f2be:	b163      	cbz	r3, 9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f2c0:	7b6b      	ldrb	r3, [r5, #13]
9000f2c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000f2c6:	7b6b      	ldrb	r3, [r5, #13]
9000f2c8:	b13b      	cbz	r3, 9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f2ca:	7bab      	ldrb	r3, [r5, #14]
9000f2cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
9000f2d0:	7bab      	ldrb	r3, [r5, #14]
9000f2d2:	b113      	cbz	r3, 9000f2da <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f2d4:	7beb      	ldrb	r3, [r5, #15]
9000f2d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000f2da:	2300      	movs	r3, #0
9000f2dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000f2e0:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
9000f2e2:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f2e6:	1d20      	adds	r0, r4, #4
9000f2e8:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000f2ea:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
9000f2ee:	bf28      	it	cs
9000f2f0:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
9000f2f2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000f2f4:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f2f6:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f2fa:	f7fe fc0d 	bl	9000db18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000f2fe:	f104 0018 	add.w	r0, r4, #24
9000f302:	f7fe fc09 	bl	9000db18 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
9000f306:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f30a:	463a      	mov	r2, r7
9000f30c:	4631      	mov	r1, r6
9000f30e:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f310:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000f312:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000f314:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000f316:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000f31a:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f31e:	f7fe fc79 	bl	9000dc14 <pxPortInitialiseStack>
9000f322:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
9000f324:	f1b8 0f00 	cmp.w	r8, #0
9000f328:	d001      	beq.n	9000f32e <prvInitialiseNewTask.constprop.0+0x12a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
9000f32a:	f8c8 4000 	str.w	r4, [r8]
}
9000f32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000f332:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
9000f336:	e7d3      	b.n	9000f2e0 <prvInitialiseNewTask.constprop.0+0xdc>

9000f338 <prvIdleTask>:
{
9000f338:	b580      	push	{r7, lr}
9000f33a:	4c22      	ldr	r4, [pc, #136]	; (9000f3c4 <prvIdleTask+0x8c>)
				taskYIELD();
9000f33c:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9000f340:	4e21      	ldr	r6, [pc, #132]	; (9000f3c8 <prvIdleTask+0x90>)
9000f342:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
9000f346:	4d21      	ldr	r5, [pc, #132]	; (9000f3cc <prvIdleTask+0x94>)
9000f348:	4f21      	ldr	r7, [pc, #132]	; (9000f3d0 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000f34a:	6823      	ldr	r3, [r4, #0]
9000f34c:	b353      	cbz	r3, 9000f3a4 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
9000f34e:	f7fe fc91 	bl	9000dc74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f352:	68f3      	ldr	r3, [r6, #12]
9000f354:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f358:	f10a 0004 	add.w	r0, sl, #4
9000f35c:	f7fe fc08 	bl	9000db70 <uxListRemove>
				--uxCurrentNumberOfTasks;
9000f360:	682b      	ldr	r3, [r5, #0]
9000f362:	3b01      	subs	r3, #1
9000f364:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
9000f366:	6823      	ldr	r3, [r4, #0]
9000f368:	3b01      	subs	r3, #1
9000f36a:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
9000f36c:	f7fe fca4 	bl	9000dcb8 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
9000f370:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
9000f374:	b163      	cbz	r3, 9000f390 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
9000f376:	2b01      	cmp	r3, #1
9000f378:	d020      	beq.n	9000f3bc <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
9000f37a:	2b02      	cmp	r3, #2
9000f37c:	d0e5      	beq.n	9000f34a <prvIdleTask+0x12>
9000f37e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f382:	f383 8811 	msr	BASEPRI, r3
9000f386:	f3bf 8f6f 	isb	sy
9000f38a:	f3bf 8f4f 	dsb	sy
9000f38e:	e7fe      	b.n	9000f38e <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
9000f390:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
9000f394:	f7fe fb52 	bl	9000da3c <vPortFree>
				vPortFree( pxTCB );
9000f398:	4650      	mov	r0, sl
9000f39a:	f7fe fb4f 	bl	9000da3c <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000f39e:	6823      	ldr	r3, [r4, #0]
9000f3a0:	2b00      	cmp	r3, #0
9000f3a2:	d1d4      	bne.n	9000f34e <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
9000f3a4:	683b      	ldr	r3, [r7, #0]
9000f3a6:	2b01      	cmp	r3, #1
9000f3a8:	d905      	bls.n	9000f3b6 <prvIdleTask+0x7e>
				taskYIELD();
9000f3aa:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
9000f3ae:	f3bf 8f4f 	dsb	sy
9000f3b2:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
9000f3b6:	f7f4 fd23 	bl	90003e00 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
9000f3ba:	e7c6      	b.n	9000f34a <prvIdleTask+0x12>
				vPortFree( pxTCB );
9000f3bc:	4650      	mov	r0, sl
9000f3be:	f7fe fb3d 	bl	9000da3c <vPortFree>
9000f3c2:	e7c2      	b.n	9000f34a <prvIdleTask+0x12>
9000f3c4:	24025068 	.word	0x24025068
9000f3c8:	240250d8 	.word	0x240250d8
9000f3cc:	24025064 	.word	0x24025064
9000f3d0:	24024c04 	.word	0x24024c04

9000f3d4 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000f3d4:	4b4a      	ldr	r3, [pc, #296]	; (9000f500 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
9000f3d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000f3da:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
9000f3dc:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000f3de:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
9000f3e0:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
9000f3e2:	2e00      	cmp	r6, #0
9000f3e4:	d040      	beq.n	9000f468 <xTaskIncrementTick.part.0+0x94>
9000f3e6:	f8df b12c 	ldr.w	fp, [pc, #300]	; 9000f514 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
9000f3ea:	f8db 3000 	ldr.w	r3, [fp]
9000f3ee:	429e      	cmp	r6, r3
9000f3f0:	d347      	bcc.n	9000f482 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f3f2:	4f44      	ldr	r7, [pc, #272]	; (9000f504 <xTaskIncrementTick.part.0+0x130>)
9000f3f4:	683b      	ldr	r3, [r7, #0]
9000f3f6:	681d      	ldr	r5, [r3, #0]
9000f3f8:	2d00      	cmp	r5, #0
9000f3fa:	d077      	beq.n	9000f4ec <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
9000f3fc:	2500      	movs	r5, #0
9000f3fe:	f8df 9118 	ldr.w	r9, [pc, #280]	; 9000f518 <xTaskIncrementTick.part.0+0x144>
9000f402:	f8df a118 	ldr.w	sl, [pc, #280]	; 9000f51c <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
9000f406:	f8df 8118 	ldr.w	r8, [pc, #280]	; 9000f520 <xTaskIncrementTick.part.0+0x14c>
9000f40a:	e022      	b.n	9000f452 <xTaskIncrementTick.part.0+0x7e>
9000f40c:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f40e:	f7fe fbaf 	bl	9000db70 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000f412:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000f414:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000f418:	9901      	ldr	r1, [sp, #4]
9000f41a:	b113      	cbz	r3, 9000f422 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000f41c:	f7fe fba8 	bl	9000db70 <uxListRemove>
9000f420:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
9000f422:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000f424:	f8d8 2000 	ldr.w	r2, [r8]
9000f428:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000f42c:	4293      	cmp	r3, r2
9000f42e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000f432:	d901      	bls.n	9000f438 <xTaskIncrementTick.part.0+0x64>
9000f434:	f8c8 3000 	str.w	r3, [r8]
9000f438:	f7fe fb72 	bl	9000db20 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000f43c:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f440:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000f442:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
9000f444:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f446:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
9000f448:	4291      	cmp	r1, r2
9000f44a:	bf28      	it	cs
9000f44c:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f44e:	2b00      	cmp	r3, #0
9000f450:	d050      	beq.n	9000f4f4 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f452:	683b      	ldr	r3, [r7, #0]
9000f454:	68db      	ldr	r3, [r3, #12]
9000f456:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9000f458:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f45a:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
9000f45c:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f45e:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
9000f460:	d2d4      	bcs.n	9000f40c <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
9000f462:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
9000f466:	e011      	b.n	9000f48c <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
9000f468:	4b26      	ldr	r3, [pc, #152]	; (9000f504 <xTaskIncrementTick.part.0+0x130>)
9000f46a:	681a      	ldr	r2, [r3, #0]
9000f46c:	6812      	ldr	r2, [r2, #0]
9000f46e:	b30a      	cbz	r2, 9000f4b4 <xTaskIncrementTick.part.0+0xe0>
9000f470:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f474:	f383 8811 	msr	BASEPRI, r3
9000f478:	f3bf 8f6f 	isb	sy
9000f47c:	f3bf 8f4f 	dsb	sy
9000f480:	e7fe      	b.n	9000f480 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
9000f482:	2500      	movs	r5, #0
9000f484:	f8df 9090 	ldr.w	r9, [pc, #144]	; 9000f518 <xTaskIncrementTick.part.0+0x144>
9000f488:	f8df a090 	ldr.w	sl, [pc, #144]	; 9000f51c <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000f48c:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
9000f490:	491d      	ldr	r1, [pc, #116]	; (9000f508 <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000f492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f494:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000f498:	009b      	lsls	r3, r3, #2
9000f49a:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
9000f49e:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
9000f4a0:	2a02      	cmp	r2, #2
9000f4a2:	bf28      	it	cs
9000f4a4:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
9000f4a6:	2b00      	cmp	r3, #0
}
9000f4a8:	bf0c      	ite	eq
9000f4aa:	4628      	moveq	r0, r5
9000f4ac:	2001      	movne	r0, #1
9000f4ae:	b003      	add	sp, #12
9000f4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
9000f4b4:	4a15      	ldr	r2, [pc, #84]	; (9000f50c <xTaskIncrementTick.part.0+0x138>)
9000f4b6:	6818      	ldr	r0, [r3, #0]
9000f4b8:	6811      	ldr	r1, [r2, #0]
9000f4ba:	6019      	str	r1, [r3, #0]
9000f4bc:	4914      	ldr	r1, [pc, #80]	; (9000f510 <xTaskIncrementTick.part.0+0x13c>)
9000f4be:	6010      	str	r0, [r2, #0]
9000f4c0:	680a      	ldr	r2, [r1, #0]
9000f4c2:	3201      	adds	r2, #1
9000f4c4:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f4c6:	681a      	ldr	r2, [r3, #0]
9000f4c8:	6812      	ldr	r2, [r2, #0]
9000f4ca:	b932      	cbnz	r2, 9000f4da <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
9000f4cc:	f8df b044 	ldr.w	fp, [pc, #68]	; 9000f514 <xTaskIncrementTick.part.0+0x140>
9000f4d0:	f04f 33ff 	mov.w	r3, #4294967295
9000f4d4:	f8cb 3000 	str.w	r3, [fp]
9000f4d8:	e787      	b.n	9000f3ea <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f4da:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f4dc:	f8df b034 	ldr.w	fp, [pc, #52]	; 9000f514 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f4e0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f4e2:	68db      	ldr	r3, [r3, #12]
9000f4e4:	685b      	ldr	r3, [r3, #4]
9000f4e6:	f8cb 3000 	str.w	r3, [fp]
	}
}
9000f4ea:	e77e      	b.n	9000f3ea <xTaskIncrementTick.part.0+0x16>
9000f4ec:	f8df 9028 	ldr.w	r9, [pc, #40]	; 9000f518 <xTaskIncrementTick.part.0+0x144>
9000f4f0:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000f51c <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f4f4:	f04f 33ff 	mov.w	r3, #4294967295
9000f4f8:	f8cb 3000 	str.w	r3, [fp]
					break;
9000f4fc:	e7c6      	b.n	9000f48c <xTaskIncrementTick.part.0+0xb8>
9000f4fe:	bf00      	nop
9000f500:	240250ec 	.word	0x240250ec
9000f504:	24024bfc 	.word	0x24024bfc
9000f508:	240250f0 	.word	0x240250f0
9000f50c:	24024c00 	.word	0x24024c00
9000f510:	240250a4 	.word	0x240250a4
9000f514:	240250a0 	.word	0x240250a0
9000f518:	24024c04 	.word	0x24024c04
9000f51c:	24024bf8 	.word	0x24024bf8
9000f520:	24025074 	.word	0x24025074

9000f524 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
9000f524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
9000f528:	4d41      	ldr	r5, [pc, #260]	; (9000f630 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
9000f52a:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
9000f52c:	f7fe fba2 	bl	9000dc74 <vPortEnterCritical>
		--uxSchedulerSuspended;
9000f530:	682b      	ldr	r3, [r5, #0]
9000f532:	3b01      	subs	r3, #1
9000f534:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000f536:	682b      	ldr	r3, [r5, #0]
9000f538:	2b00      	cmp	r3, #0
9000f53a:	d161      	bne.n	9000f600 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
9000f53c:	4b3d      	ldr	r3, [pc, #244]	; (9000f634 <xTaskResumeAll.part.0+0x110>)
9000f53e:	681b      	ldr	r3, [r3, #0]
9000f540:	2b00      	cmp	r3, #0
9000f542:	d05d      	beq.n	9000f600 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000f544:	4e3c      	ldr	r6, [pc, #240]	; (9000f638 <xTaskResumeAll.part.0+0x114>)
9000f546:	6833      	ldr	r3, [r6, #0]
9000f548:	2b00      	cmp	r3, #0
9000f54a:	d06e      	beq.n	9000f62a <xTaskResumeAll.part.0+0x106>
9000f54c:	4f3b      	ldr	r7, [pc, #236]	; (9000f63c <xTaskResumeAll.part.0+0x118>)
9000f54e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 9000f64c <xTaskResumeAll.part.0+0x128>
9000f552:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 9000f650 <xTaskResumeAll.part.0+0x12c>
9000f556:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 9000f654 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f55a:	68f3      	ldr	r3, [r6, #12]
9000f55c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f55e:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000f562:	f104 0018 	add.w	r0, r4, #24
9000f566:	f7fe fb03 	bl	9000db70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000f56a:	4658      	mov	r0, fp
9000f56c:	f7fe fb00 	bl	9000db70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000f570:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000f572:	683a      	ldr	r2, [r7, #0]
9000f574:	4659      	mov	r1, fp
9000f576:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000f57a:	4293      	cmp	r3, r2
9000f57c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000f580:	d900      	bls.n	9000f584 <xTaskResumeAll.part.0+0x60>
9000f582:	603b      	str	r3, [r7, #0]
9000f584:	f7fe facc 	bl	9000db20 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000f588:	f8d8 3000 	ldr.w	r3, [r8]
9000f58c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000f58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f590:	429a      	cmp	r2, r3
9000f592:	d33d      	bcc.n	9000f610 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
9000f594:	2301      	movs	r3, #1
9000f596:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000f59a:	6833      	ldr	r3, [r6, #0]
9000f59c:	2b00      	cmp	r3, #0
9000f59e:	d1dc      	bne.n	9000f55a <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f5a0:	4b27      	ldr	r3, [pc, #156]	; (9000f640 <xTaskResumeAll.part.0+0x11c>)
9000f5a2:	681a      	ldr	r2, [r3, #0]
9000f5a4:	6812      	ldr	r2, [r2, #0]
9000f5a6:	2a00      	cmp	r2, #0
9000f5a8:	d03a      	beq.n	9000f620 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f5aa:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f5ac:	4b25      	ldr	r3, [pc, #148]	; (9000f644 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f5ae:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000f5b0:	68d2      	ldr	r2, [r2, #12]
9000f5b2:	6852      	ldr	r2, [r2, #4]
9000f5b4:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
9000f5b6:	4e24      	ldr	r6, [pc, #144]	; (9000f648 <xTaskResumeAll.part.0+0x124>)
9000f5b8:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
9000f5ba:	b194      	cbz	r4, 9000f5e2 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
9000f5bc:	2701      	movs	r7, #1
9000f5be:	e006      	b.n	9000f5ce <xTaskResumeAll.part.0+0xaa>
9000f5c0:	f7ff ff08 	bl	9000f3d4 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
9000f5c4:	b108      	cbz	r0, 9000f5ca <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
9000f5c6:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000f5ca:	3c01      	subs	r4, #1
9000f5cc:	d008      	beq.n	9000f5e0 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000f5ce:	682b      	ldr	r3, [r5, #0]
9000f5d0:	2b00      	cmp	r3, #0
9000f5d2:	d0f5      	beq.n	9000f5c0 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
9000f5d4:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000f5d6:	3c01      	subs	r4, #1
		++xPendedTicks;
9000f5d8:	f103 0301 	add.w	r3, r3, #1
9000f5dc:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000f5de:	d1f6      	bne.n	9000f5ce <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
9000f5e0:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
9000f5e2:	f8da 3000 	ldr.w	r3, [sl]
9000f5e6:	b15b      	cbz	r3, 9000f600 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
9000f5e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f5ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f5f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f5f4:	f3bf 8f4f 	dsb	sy
9000f5f8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
9000f5fc:	2001      	movs	r0, #1
9000f5fe:	e000      	b.n	9000f602 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
9000f600:	2000      	movs	r0, #0
9000f602:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000f604:	f7fe fb58 	bl	9000dcb8 <vPortExitCritical>
}
9000f608:	9801      	ldr	r0, [sp, #4]
9000f60a:	b003      	add	sp, #12
9000f60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000f610:	6833      	ldr	r3, [r6, #0]
9000f612:	2b00      	cmp	r3, #0
9000f614:	d1a1      	bne.n	9000f55a <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000f616:	4b0a      	ldr	r3, [pc, #40]	; (9000f640 <xTaskResumeAll.part.0+0x11c>)
9000f618:	681a      	ldr	r2, [r3, #0]
9000f61a:	6812      	ldr	r2, [r2, #0]
9000f61c:	2a00      	cmp	r2, #0
9000f61e:	d1c4      	bne.n	9000f5aa <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
9000f620:	4b08      	ldr	r3, [pc, #32]	; (9000f644 <xTaskResumeAll.part.0+0x120>)
9000f622:	f04f 32ff 	mov.w	r2, #4294967295
9000f626:	601a      	str	r2, [r3, #0]
9000f628:	e7c5      	b.n	9000f5b6 <xTaskResumeAll.part.0+0x92>
9000f62a:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000f654 <xTaskResumeAll.part.0+0x130>
9000f62e:	e7c2      	b.n	9000f5b6 <xTaskResumeAll.part.0+0x92>
9000f630:	2402506c 	.word	0x2402506c
9000f634:	24025064 	.word	0x24025064
9000f638:	240250ac 	.word	0x240250ac
9000f63c:	24025074 	.word	0x24025074
9000f640:	24024bfc 	.word	0x24024bfc
9000f644:	240250a0 	.word	0x240250a0
9000f648:	240250a8 	.word	0x240250a8
9000f64c:	24024c04 	.word	0x24024c04
9000f650:	24024bf8 	.word	0x24024bf8
9000f654:	240250f0 	.word	0x240250f0

9000f658 <xTaskCreateStatic>:
	{
9000f658:	b530      	push	{r4, r5, lr}
9000f65a:	b087      	sub	sp, #28
9000f65c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
9000f65e:	b1c4      	cbz	r4, 9000f692 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
9000f660:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9000f662:	b16d      	cbz	r5, 9000f680 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
9000f664:	2560      	movs	r5, #96	; 0x60
9000f666:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
9000f668:	9d05      	ldr	r5, [sp, #20]
9000f66a:	2d60      	cmp	r5, #96	; 0x60
9000f66c:	d01a      	beq.n	9000f6a4 <xTaskCreateStatic+0x4c>
9000f66e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f672:	f383 8811 	msr	BASEPRI, r3
9000f676:	f3bf 8f6f 	isb	sy
9000f67a:	f3bf 8f4f 	dsb	sy
9000f67e:	e7fe      	b.n	9000f67e <xTaskCreateStatic+0x26>
9000f680:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f684:	f383 8811 	msr	BASEPRI, r3
9000f688:	f3bf 8f6f 	isb	sy
9000f68c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000f690:	e7fe      	b.n	9000f690 <xTaskCreateStatic+0x38>
9000f692:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f696:	f383 8811 	msr	BASEPRI, r3
9000f69a:	f3bf 8f6f 	isb	sy
9000f69e:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000f6a2:	e7fe      	b.n	9000f6a2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000f6a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9000f6a6:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000f6a8:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
9000f6aa:	9502      	str	r5, [sp, #8]
9000f6ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
9000f6ae:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000f6b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9000f6b2:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
9000f6b6:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000f6b8:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
9000f6ba:	9401      	str	r4, [sp, #4]
9000f6bc:	f7ff fda2 	bl	9000f204 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
9000f6c0:	980c      	ldr	r0, [sp, #48]	; 0x30
9000f6c2:	f7ff fd17 	bl	9000f0f4 <prvAddNewTaskToReadyList>
	}
9000f6c6:	9804      	ldr	r0, [sp, #16]
9000f6c8:	b007      	add	sp, #28
9000f6ca:	bd30      	pop	{r4, r5, pc}

9000f6cc <xTaskCreate>:
	{
9000f6cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000f6d0:	4607      	mov	r7, r0
9000f6d2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000f6d4:	0090      	lsls	r0, r2, #2
	{
9000f6d6:	4615      	mov	r5, r2
9000f6d8:	4688      	mov	r8, r1
9000f6da:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000f6dc:	f7fe f8f4 	bl	9000d8c8 <pvPortMalloc>
			if( pxStack != NULL )
9000f6e0:	b1d8      	cbz	r0, 9000f71a <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
9000f6e2:	4604      	mov	r4, r0
9000f6e4:	2060      	movs	r0, #96	; 0x60
9000f6e6:	f7fe f8ef 	bl	9000d8c8 <pvPortMalloc>
				if( pxNewTCB != NULL )
9000f6ea:	4606      	mov	r6, r0
9000f6ec:	b1d0      	cbz	r0, 9000f724 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
9000f6ee:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000f6f0:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
9000f6f2:	464b      	mov	r3, r9
9000f6f4:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000f6f6:	f886 405d 	strb.w	r4, [r6, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
9000f6fa:	4641      	mov	r1, r8
9000f6fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9000f6fe:	4638      	mov	r0, r7
9000f700:	9602      	str	r6, [sp, #8]
9000f702:	9401      	str	r4, [sp, #4]
9000f704:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9000f706:	9400      	str	r4, [sp, #0]
9000f708:	f7ff fd7c 	bl	9000f204 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
9000f70c:	4630      	mov	r0, r6
9000f70e:	f7ff fcf1 	bl	9000f0f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
9000f712:	2001      	movs	r0, #1
	}
9000f714:	b005      	add	sp, #20
9000f716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000f71a:	f04f 30ff 	mov.w	r0, #4294967295
	}
9000f71e:	b005      	add	sp, #20
9000f720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
9000f724:	4620      	mov	r0, r4
9000f726:	f7fe f989 	bl	9000da3c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000f72a:	f04f 30ff 	mov.w	r0, #4294967295
9000f72e:	e7f1      	b.n	9000f714 <xTaskCreate+0x48>

9000f730 <vTaskDelay>:
	{
9000f730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
9000f732:	b950      	cbnz	r0, 9000f74a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
9000f734:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000f738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000f73c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000f740:	f3bf 8f4f 	dsb	sy
9000f744:	f3bf 8f6f 	isb	sy
	}
9000f748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
9000f74a:	4d1e      	ldr	r5, [pc, #120]	; (9000f7c4 <vTaskDelay+0x94>)
9000f74c:	682b      	ldr	r3, [r5, #0]
9000f74e:	b143      	cbz	r3, 9000f762 <vTaskDelay+0x32>
9000f750:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f754:	f383 8811 	msr	BASEPRI, r3
9000f758:	f3bf 8f6f 	isb	sy
9000f75c:	f3bf 8f4f 	dsb	sy
9000f760:	e7fe      	b.n	9000f760 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
9000f762:	682b      	ldr	r3, [r5, #0]
9000f764:	4604      	mov	r4, r0
9000f766:	3301      	adds	r3, #1
9000f768:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
9000f76a:	4b17      	ldr	r3, [pc, #92]	; (9000f7c8 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f76c:	4e17      	ldr	r6, [pc, #92]	; (9000f7cc <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
9000f76e:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f770:	6830      	ldr	r0, [r6, #0]
9000f772:	3004      	adds	r0, #4
9000f774:	f7fe f9fc 	bl	9000db70 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
9000f778:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000f77a:	6833      	ldr	r3, [r6, #0]
9000f77c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
9000f77e:	d315      	bcc.n	9000f7ac <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f780:	4b13      	ldr	r3, [pc, #76]	; (9000f7d0 <vTaskDelay+0xa0>)
9000f782:	6818      	ldr	r0, [r3, #0]
9000f784:	6831      	ldr	r1, [r6, #0]
9000f786:	3104      	adds	r1, #4
9000f788:	f7fe f9da 	bl	9000db40 <vListInsert>
	configASSERT( uxSchedulerSuspended );
9000f78c:	682b      	ldr	r3, [r5, #0]
9000f78e:	b943      	cbnz	r3, 9000f7a2 <vTaskDelay+0x72>
9000f790:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f794:	f383 8811 	msr	BASEPRI, r3
9000f798:	f3bf 8f6f 	isb	sy
9000f79c:	f3bf 8f4f 	dsb	sy
9000f7a0:	e7fe      	b.n	9000f7a0 <vTaskDelay+0x70>
9000f7a2:	f7ff febf 	bl	9000f524 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
9000f7a6:	2800      	cmp	r0, #0
9000f7a8:	d0c4      	beq.n	9000f734 <vTaskDelay+0x4>
	}
9000f7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f7ac:	4b09      	ldr	r3, [pc, #36]	; (9000f7d4 <vTaskDelay+0xa4>)
9000f7ae:	6818      	ldr	r0, [r3, #0]
9000f7b0:	6831      	ldr	r1, [r6, #0]
9000f7b2:	3104      	adds	r1, #4
9000f7b4:	f7fe f9c4 	bl	9000db40 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
9000f7b8:	4b07      	ldr	r3, [pc, #28]	; (9000f7d8 <vTaskDelay+0xa8>)
9000f7ba:	681a      	ldr	r2, [r3, #0]
9000f7bc:	4294      	cmp	r4, r2
9000f7be:	d2e5      	bcs.n	9000f78c <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
9000f7c0:	601c      	str	r4, [r3, #0]
9000f7c2:	e7e3      	b.n	9000f78c <vTaskDelay+0x5c>
9000f7c4:	2402506c 	.word	0x2402506c
9000f7c8:	240250ec 	.word	0x240250ec
9000f7cc:	24024bf8 	.word	0x24024bf8
9000f7d0:	24024c00 	.word	0x24024c00
9000f7d4:	24024bfc 	.word	0x24024bfc
9000f7d8:	240250a0 	.word	0x240250a0

9000f7dc <vTaskStartScheduler>:
{
9000f7dc:	b570      	push	{r4, r5, r6, lr}
9000f7de:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
9000f7e0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000f7e2:	4668      	mov	r0, sp
9000f7e4:	aa02      	add	r2, sp, #8
9000f7e6:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
9000f7e8:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000f7ec:	f7fe f84e 	bl	9000d88c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000f7f0:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
9000f7f2:	b1c8      	cbz	r0, 9000f828 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000f7f4:	9d00      	ldr	r5, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
9000f7f6:	b175      	cbz	r5, 9000f816 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
9000f7f8:	2260      	movs	r2, #96	; 0x60
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000f7fa:	9e02      	ldr	r6, [sp, #8]
			volatile size_t xSize = sizeof( StaticTask_t );
9000f7fc:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
9000f7fe:	9a03      	ldr	r2, [sp, #12]
9000f800:	2a60      	cmp	r2, #96	; 0x60
9000f802:	d01a      	beq.n	9000f83a <vTaskStartScheduler+0x5e>
9000f804:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f808:	f383 8811 	msr	BASEPRI, r3
9000f80c:	f3bf 8f6f 	isb	sy
9000f810:	f3bf 8f4f 	dsb	sy
9000f814:	e7fe      	b.n	9000f814 <vTaskStartScheduler+0x38>
9000f816:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f81a:	f383 8811 	msr	BASEPRI, r3
9000f81e:	f3bf 8f6f 	isb	sy
9000f822:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000f826:	e7fe      	b.n	9000f826 <vTaskStartScheduler+0x4a>
9000f828:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f82c:	f383 8811 	msr	BASEPRI, r3
9000f830:	f3bf 8f6f 	isb	sy
9000f834:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000f838:	e7fe      	b.n	9000f838 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f83a:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000f83c:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f83e:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000f840:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f842:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000f844:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000f848:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000f84a:	f013 faf5 	bl	90022e38 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f84e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
9000f850:	1f33      	subs	r3, r6, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f852:	492a      	ldr	r1, [pc, #168]	; (9000f8fc <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f854:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000f856:	18d6      	adds	r6, r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000f858:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
9000f85c:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000f85e:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000f862:	f026 0607 	bic.w	r6, r6, #7
	pxNewTCB->uxPriority = uxPriority;
9000f866:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
9000f868:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000f86c:	f7fe f954 	bl	9000db18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000f870:	f105 0018 	add.w	r0, r5, #24
9000f874:	f7fe f950 	bl	9000db18 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f878:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f87a:	4622      	mov	r2, r4
9000f87c:	4920      	ldr	r1, [pc, #128]	; (9000f900 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
9000f87e:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f880:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f882:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000f884:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000f886:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000f888:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000f88a:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f88e:	f7fe f9c1 	bl	9000dc14 <pxPortInitialiseStack>
9000f892:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000f894:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000f896:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000f898:	f7ff fc2c 	bl	9000f0f4 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
9000f89c:	f000 fca2 	bl	900101e4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
9000f8a0:	2801      	cmp	r0, #1
9000f8a2:	d00c      	beq.n	9000f8be <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000f8a4:	3001      	adds	r0, #1
9000f8a6:	d001      	beq.n	9000f8ac <vTaskStartScheduler+0xd0>
}
9000f8a8:	b004      	add	sp, #16
9000f8aa:	bd70      	pop	{r4, r5, r6, pc}
9000f8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f8b0:	f383 8811 	msr	BASEPRI, r3
9000f8b4:	f3bf 8f6f 	isb	sy
9000f8b8:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000f8bc:	e7fe      	b.n	9000f8bc <vTaskStartScheduler+0xe0>
9000f8be:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f8c2:	f383 8811 	msr	BASEPRI, r3
9000f8c6:	f3bf 8f6f 	isb	sy
9000f8ca:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
9000f8ce:	4b0d      	ldr	r3, [pc, #52]	; (9000f904 <vTaskStartScheduler+0x128>)
9000f8d0:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
9000f8d4:	490c      	ldr	r1, [pc, #48]	; (9000f908 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
9000f8d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000f8d8:	4b0c      	ldr	r3, [pc, #48]	; (9000f90c <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
9000f8da:	4a0d      	ldr	r2, [pc, #52]	; (9000f910 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
9000f8dc:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000f8de:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
9000f8e0:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
9000f8e2:	b143      	cbz	r3, 9000f8f6 <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
9000f8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000f8e6:	b10b      	cbz	r3, 9000f8ec <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000f8e8:	2000      	movs	r0, #0
9000f8ea:	4798      	blx	r3
}
9000f8ec:	b004      	add	sp, #16
9000f8ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
9000f8f2:	f7fe ba51 	b.w	9000dd98 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
9000f8f6:	6813      	ldr	r3, [r2, #0]
9000f8f8:	e7f4      	b.n	9000f8e4 <vTaskStartScheduler+0x108>
9000f8fa:	bf00      	nop
9000f8fc:	454c4449 	.word	0x454c4449
9000f900:	9000f339 	.word	0x9000f339
9000f904:	240250a0 	.word	0x240250a0
9000f908:	240250c0 	.word	0x240250c0
9000f90c:	240250ec 	.word	0x240250ec
9000f910:	24024bf8 	.word	0x24024bf8

9000f914 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
9000f914:	4a02      	ldr	r2, [pc, #8]	; (9000f920 <vTaskSuspendAll+0xc>)
9000f916:	6813      	ldr	r3, [r2, #0]
9000f918:	3301      	adds	r3, #1
9000f91a:	6013      	str	r3, [r2, #0]
}
9000f91c:	4770      	bx	lr
9000f91e:	bf00      	nop
9000f920:	2402506c 	.word	0x2402506c

9000f924 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
9000f924:	4b06      	ldr	r3, [pc, #24]	; (9000f940 <xTaskResumeAll+0x1c>)
9000f926:	681b      	ldr	r3, [r3, #0]
9000f928:	b943      	cbnz	r3, 9000f93c <xTaskResumeAll+0x18>
9000f92a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f92e:	f383 8811 	msr	BASEPRI, r3
9000f932:	f3bf 8f6f 	isb	sy
9000f936:	f3bf 8f4f 	dsb	sy
9000f93a:	e7fe      	b.n	9000f93a <xTaskResumeAll+0x16>
9000f93c:	f7ff bdf2 	b.w	9000f524 <xTaskResumeAll.part.0>
9000f940:	2402506c 	.word	0x2402506c

9000f944 <xTaskGetTickCount>:
		xTicks = xTickCount;
9000f944:	4b01      	ldr	r3, [pc, #4]	; (9000f94c <xTaskGetTickCount+0x8>)
9000f946:	6818      	ldr	r0, [r3, #0]
}
9000f948:	4770      	bx	lr
9000f94a:	bf00      	nop
9000f94c:	240250ec 	.word	0x240250ec

9000f950 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000f950:	4b05      	ldr	r3, [pc, #20]	; (9000f968 <xTaskIncrementTick+0x18>)
9000f952:	681b      	ldr	r3, [r3, #0]
9000f954:	b90b      	cbnz	r3, 9000f95a <xTaskIncrementTick+0xa>
9000f956:	f7ff bd3d 	b.w	9000f3d4 <xTaskIncrementTick.part.0>
		++xPendedTicks;
9000f95a:	4a04      	ldr	r2, [pc, #16]	; (9000f96c <xTaskIncrementTick+0x1c>)
}
9000f95c:	2000      	movs	r0, #0
		++xPendedTicks;
9000f95e:	6813      	ldr	r3, [r2, #0]
9000f960:	3301      	adds	r3, #1
9000f962:	6013      	str	r3, [r2, #0]
}
9000f964:	4770      	bx	lr
9000f966:	bf00      	nop
9000f968:	2402506c 	.word	0x2402506c
9000f96c:	240250a8 	.word	0x240250a8

9000f970 <vTaskSetApplicationTaskTag>:
	{
9000f970:	b538      	push	{r3, r4, r5, lr}
9000f972:	460d      	mov	r5, r1
		if( xTask == NULL )
9000f974:	b138      	cbz	r0, 9000f986 <vTaskSetApplicationTaskTag+0x16>
9000f976:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
9000f978:	f7fe f97c 	bl	9000dc74 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000f97c:	6565      	str	r5, [r4, #84]	; 0x54
	}
9000f97e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000f982:	f7fe b999 	b.w	9000dcb8 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
9000f986:	4b04      	ldr	r3, [pc, #16]	; (9000f998 <vTaskSetApplicationTaskTag+0x28>)
9000f988:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
9000f98a:	f7fe f973 	bl	9000dc74 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000f98e:	6565      	str	r5, [r4, #84]	; 0x54
	}
9000f990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000f994:	f7fe b990 	b.w	9000dcb8 <vPortExitCritical>
9000f998:	24024bf8 	.word	0x24024bf8

9000f99c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
9000f99c:	4b26      	ldr	r3, [pc, #152]	; (9000fa38 <vTaskSwitchContext+0x9c>)
9000f99e:	681b      	ldr	r3, [r3, #0]
9000f9a0:	b11b      	cbz	r3, 9000f9aa <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
9000f9a2:	4b26      	ldr	r3, [pc, #152]	; (9000fa3c <vTaskSwitchContext+0xa0>)
9000f9a4:	2201      	movs	r2, #1
9000f9a6:	601a      	str	r2, [r3, #0]
9000f9a8:	4770      	bx	lr
{
9000f9aa:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
9000f9ac:	4a23      	ldr	r2, [pc, #140]	; (9000fa3c <vTaskSwitchContext+0xa0>)
		traceTASK_SWITCHED_OUT();
9000f9ae:	4c24      	ldr	r4, [pc, #144]	; (9000fa40 <vTaskSwitchContext+0xa4>)
		xYieldPending = pdFALSE;
9000f9b0:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
9000f9b2:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000f9b4:	2b00      	cmp	r3, #0
9000f9b6:	d034      	beq.n	9000fa22 <vTaskSwitchContext+0x86>
		if( xTCB->pxTaskTag != NULL )
9000f9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000f9ba:	b10b      	cbz	r3, 9000f9c0 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000f9bc:	2001      	movs	r0, #1
9000f9be:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f9c0:	4d20      	ldr	r5, [pc, #128]	; (9000fa44 <vTaskSwitchContext+0xa8>)
9000f9c2:	4921      	ldr	r1, [pc, #132]	; (9000fa48 <vTaskSwitchContext+0xac>)
9000f9c4:	682b      	ldr	r3, [r5, #0]
9000f9c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000f9ca:	0098      	lsls	r0, r3, #2
9000f9cc:	0092      	lsls	r2, r2, #2
9000f9ce:	588a      	ldr	r2, [r1, r2]
9000f9d0:	b942      	cbnz	r2, 9000f9e4 <vTaskSwitchContext+0x48>
9000f9d2:	b1eb      	cbz	r3, 9000fa10 <vTaskSwitchContext+0x74>
9000f9d4:	3b01      	subs	r3, #1
9000f9d6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000f9da:	0098      	lsls	r0, r3, #2
9000f9dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
9000f9e0:	2a00      	cmp	r2, #0
9000f9e2:	d0f6      	beq.n	9000f9d2 <vTaskSwitchContext+0x36>
9000f9e4:	18c2      	adds	r2, r0, r3
9000f9e6:	eb01 0082 	add.w	r0, r1, r2, lsl #2
9000f9ea:	6841      	ldr	r1, [r0, #4]
9000f9ec:	4602      	mov	r2, r0
9000f9ee:	6849      	ldr	r1, [r1, #4]
9000f9f0:	3208      	adds	r2, #8
9000f9f2:	4291      	cmp	r1, r2
9000f9f4:	6041      	str	r1, [r0, #4]
9000f9f6:	d01b      	beq.n	9000fa30 <vTaskSwitchContext+0x94>
9000f9f8:	68ca      	ldr	r2, [r1, #12]
9000f9fa:	6022      	str	r2, [r4, #0]
9000f9fc:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
9000f9fe:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000fa00:	b1a3      	cbz	r3, 9000fa2c <vTaskSwitchContext+0x90>
		if( xTCB->pxTaskTag != NULL )
9000fa02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000fa04:	b11b      	cbz	r3, 9000fa0e <vTaskSwitchContext+0x72>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000fa06:	2000      	movs	r0, #0
}
9000fa08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
9000fa0c:	4718      	bx	r3
}
9000fa0e:	bd70      	pop	{r4, r5, r6, pc}
9000fa10:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa14:	f383 8811 	msr	BASEPRI, r3
9000fa18:	f3bf 8f6f 	isb	sy
9000fa1c:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fa20:	e7fe      	b.n	9000fa20 <vTaskSwitchContext+0x84>
			xTCB = pxCurrentTCB;
9000fa22:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
9000fa24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000fa26:	2b00      	cmp	r3, #0
9000fa28:	d1c8      	bne.n	9000f9bc <vTaskSwitchContext+0x20>
9000fa2a:	e7c9      	b.n	9000f9c0 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
9000fa2c:	6823      	ldr	r3, [r4, #0]
9000fa2e:	e7e8      	b.n	9000fa02 <vTaskSwitchContext+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fa30:	6849      	ldr	r1, [r1, #4]
9000fa32:	6041      	str	r1, [r0, #4]
9000fa34:	e7e0      	b.n	9000f9f8 <vTaskSwitchContext+0x5c>
9000fa36:	bf00      	nop
9000fa38:	2402506c 	.word	0x2402506c
9000fa3c:	240250f0 	.word	0x240250f0
9000fa40:	24024bf8 	.word	0x24024bf8
9000fa44:	24025074 	.word	0x24025074
9000fa48:	24024c04 	.word	0x24024c04

9000fa4c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
9000fa4c:	b1f0      	cbz	r0, 9000fa8c <vTaskPlaceOnEventList+0x40>
{
9000fa4e:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000fa50:	4d1a      	ldr	r5, [pc, #104]	; (9000fabc <vTaskPlaceOnEventList+0x70>)
9000fa52:	460c      	mov	r4, r1
9000fa54:	6829      	ldr	r1, [r5, #0]
9000fa56:	3118      	adds	r1, #24
9000fa58:	f7fe f872 	bl	9000db40 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
9000fa5c:	4b18      	ldr	r3, [pc, #96]	; (9000fac0 <vTaskPlaceOnEventList+0x74>)
9000fa5e:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fa60:	6828      	ldr	r0, [r5, #0]
9000fa62:	3004      	adds	r0, #4
9000fa64:	f7fe f884 	bl	9000db70 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
9000fa68:	1c63      	adds	r3, r4, #1
9000fa6a:	d020      	beq.n	9000faae <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000fa6c:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000fa6e:	682b      	ldr	r3, [r5, #0]
9000fa70:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000fa72:	d214      	bcs.n	9000fa9e <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fa74:	4b13      	ldr	r3, [pc, #76]	; (9000fac4 <vTaskPlaceOnEventList+0x78>)
9000fa76:	6818      	ldr	r0, [r3, #0]
9000fa78:	6829      	ldr	r1, [r5, #0]
9000fa7a:	3104      	adds	r1, #4
9000fa7c:	f7fe f860 	bl	9000db40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000fa80:	4b11      	ldr	r3, [pc, #68]	; (9000fac8 <vTaskPlaceOnEventList+0x7c>)
9000fa82:	681a      	ldr	r2, [r3, #0]
9000fa84:	4294      	cmp	r4, r2
9000fa86:	d200      	bcs.n	9000fa8a <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
9000fa88:	601c      	str	r4, [r3, #0]
}
9000fa8a:	bd70      	pop	{r4, r5, r6, pc}
9000fa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fa90:	f383 8811 	msr	BASEPRI, r3
9000fa94:	f3bf 8f6f 	isb	sy
9000fa98:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
9000fa9c:	e7fe      	b.n	9000fa9c <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fa9e:	4b0b      	ldr	r3, [pc, #44]	; (9000facc <vTaskPlaceOnEventList+0x80>)
9000faa0:	6818      	ldr	r0, [r3, #0]
9000faa2:	6829      	ldr	r1, [r5, #0]
}
9000faa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000faa8:	3104      	adds	r1, #4
9000faaa:	f7fe b849 	b.w	9000db40 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000faae:	6829      	ldr	r1, [r5, #0]
9000fab0:	4807      	ldr	r0, [pc, #28]	; (9000fad0 <vTaskPlaceOnEventList+0x84>)
9000fab2:	3104      	adds	r1, #4
}
9000fab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fab8:	f7fe b832 	b.w	9000db20 <vListInsertEnd>
9000fabc:	24024bf8 	.word	0x24024bf8
9000fac0:	240250ec 	.word	0x240250ec
9000fac4:	24024bfc 	.word	0x24024bfc
9000fac8:	240250a0 	.word	0x240250a0
9000facc:	24024c00 	.word	0x24024c00
9000fad0:	240250c4 	.word	0x240250c4

9000fad4 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
9000fad4:	b358      	cbz	r0, 9000fb2e <vTaskPlaceOnEventListRestricted+0x5a>
	{
9000fad6:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000fad8:	4e1d      	ldr	r6, [pc, #116]	; (9000fb50 <vTaskPlaceOnEventListRestricted+0x7c>)
9000fada:	460c      	mov	r4, r1
9000fadc:	4615      	mov	r5, r2
9000fade:	6831      	ldr	r1, [r6, #0]
9000fae0:	3118      	adds	r1, #24
9000fae2:	f7fe f81d 	bl	9000db20 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
9000fae6:	b165      	cbz	r5, 9000fb02 <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
9000fae8:	4b1a      	ldr	r3, [pc, #104]	; (9000fb54 <vTaskPlaceOnEventListRestricted+0x80>)
9000faea:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000faec:	6830      	ldr	r0, [r6, #0]
9000faee:	3004      	adds	r0, #4
9000faf0:	f7fe f83e 	bl	9000db70 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000faf4:	6831      	ldr	r1, [r6, #0]
9000faf6:	4818      	ldr	r0, [pc, #96]	; (9000fb58 <vTaskPlaceOnEventListRestricted+0x84>)
9000faf8:	3104      	adds	r1, #4
	}
9000fafa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fafe:	f7fe b80f 	b.w	9000db20 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
9000fb02:	4b14      	ldr	r3, [pc, #80]	; (9000fb54 <vTaskPlaceOnEventListRestricted+0x80>)
9000fb04:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fb06:	6830      	ldr	r0, [r6, #0]
9000fb08:	3004      	adds	r0, #4
9000fb0a:	f7fe f831 	bl	9000db70 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000fb0e:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000fb10:	6833      	ldr	r3, [r6, #0]
9000fb12:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000fb14:	d214      	bcs.n	9000fb40 <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fb16:	4b11      	ldr	r3, [pc, #68]	; (9000fb5c <vTaskPlaceOnEventListRestricted+0x88>)
9000fb18:	6818      	ldr	r0, [r3, #0]
9000fb1a:	6831      	ldr	r1, [r6, #0]
9000fb1c:	3104      	adds	r1, #4
9000fb1e:	f7fe f80f 	bl	9000db40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000fb22:	4b0f      	ldr	r3, [pc, #60]	; (9000fb60 <vTaskPlaceOnEventListRestricted+0x8c>)
9000fb24:	681a      	ldr	r2, [r3, #0]
9000fb26:	4294      	cmp	r4, r2
9000fb28:	d200      	bcs.n	9000fb2c <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
9000fb2a:	601c      	str	r4, [r3, #0]
	}
9000fb2c:	bd70      	pop	{r4, r5, r6, pc}
9000fb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fb32:	f383 8811 	msr	BASEPRI, r3
9000fb36:	f3bf 8f6f 	isb	sy
9000fb3a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
9000fb3e:	e7fe      	b.n	9000fb3e <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fb40:	4b08      	ldr	r3, [pc, #32]	; (9000fb64 <vTaskPlaceOnEventListRestricted+0x90>)
9000fb42:	6818      	ldr	r0, [r3, #0]
9000fb44:	6831      	ldr	r1, [r6, #0]
	}
9000fb46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000fb4a:	3104      	adds	r1, #4
9000fb4c:	f7fd bff8 	b.w	9000db40 <vListInsert>
9000fb50:	24024bf8 	.word	0x24024bf8
9000fb54:	240250ec 	.word	0x240250ec
9000fb58:	240250c4 	.word	0x240250c4
9000fb5c:	24024bfc 	.word	0x24024bfc
9000fb60:	240250a0 	.word	0x240250a0
9000fb64:	24024c00 	.word	0x24024c00

9000fb68 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fb68:	68c3      	ldr	r3, [r0, #12]
{
9000fb6a:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fb6c:	68dc      	ldr	r4, [r3, #12]
{
9000fb6e:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
9000fb70:	b35c      	cbz	r4, 9000fbca <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
9000fb72:	f104 0518 	add.w	r5, r4, #24
9000fb76:	4628      	mov	r0, r5
9000fb78:	f7fd fffa 	bl	9000db70 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000fb7c:	4b19      	ldr	r3, [pc, #100]	; (9000fbe4 <xTaskRemoveFromEventList+0x7c>)
9000fb7e:	681b      	ldr	r3, [r3, #0]
9000fb80:	b17b      	cbz	r3, 9000fba2 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
9000fb82:	4629      	mov	r1, r5
9000fb84:	4818      	ldr	r0, [pc, #96]	; (9000fbe8 <xTaskRemoveFromEventList+0x80>)
9000fb86:	f7fd ffcb 	bl	9000db20 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
9000fb8a:	4b18      	ldr	r3, [pc, #96]	; (9000fbec <xTaskRemoveFromEventList+0x84>)
9000fb8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000fb8e:	681b      	ldr	r3, [r3, #0]
9000fb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000fb92:	429a      	cmp	r2, r3
9000fb94:	d922      	bls.n	9000fbdc <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
9000fb96:	2301      	movs	r3, #1
9000fb98:	4a15      	ldr	r2, [pc, #84]	; (9000fbf0 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
9000fb9a:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
9000fb9c:	6013      	str	r3, [r2, #0]
}
9000fb9e:	b003      	add	sp, #12
9000fba0:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
9000fba2:	1d21      	adds	r1, r4, #4
9000fba4:	4608      	mov	r0, r1
9000fba6:	9101      	str	r1, [sp, #4]
9000fba8:	f7fd ffe2 	bl	9000db70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
9000fbac:	4a11      	ldr	r2, [pc, #68]	; (9000fbf4 <xTaskRemoveFromEventList+0x8c>)
9000fbae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000fbb0:	6810      	ldr	r0, [r2, #0]
9000fbb2:	9901      	ldr	r1, [sp, #4]
9000fbb4:	4283      	cmp	r3, r0
9000fbb6:	d900      	bls.n	9000fbba <xTaskRemoveFromEventList+0x52>
9000fbb8:	6013      	str	r3, [r2, #0]
9000fbba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000fbbe:	480e      	ldr	r0, [pc, #56]	; (9000fbf8 <xTaskRemoveFromEventList+0x90>)
9000fbc0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
9000fbc4:	f7fd ffac 	bl	9000db20 <vListInsertEnd>
9000fbc8:	e7df      	b.n	9000fb8a <xTaskRemoveFromEventList+0x22>
9000fbca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fbce:	f383 8811 	msr	BASEPRI, r3
9000fbd2:	f3bf 8f6f 	isb	sy
9000fbd6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
9000fbda:	e7fe      	b.n	9000fbda <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
9000fbdc:	2000      	movs	r0, #0
}
9000fbde:	b003      	add	sp, #12
9000fbe0:	bd30      	pop	{r4, r5, pc}
9000fbe2:	bf00      	nop
9000fbe4:	2402506c 	.word	0x2402506c
9000fbe8:	240250ac 	.word	0x240250ac
9000fbec:	24024bf8 	.word	0x24024bf8
9000fbf0:	240250f0 	.word	0x240250f0
9000fbf4:	24025074 	.word	0x24025074
9000fbf8:	24024c04 	.word	0x24024c04

9000fbfc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000fbfc:	4a03      	ldr	r2, [pc, #12]	; (9000fc0c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
9000fbfe:	4b04      	ldr	r3, [pc, #16]	; (9000fc10 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000fc00:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000fc02:	681b      	ldr	r3, [r3, #0]
9000fc04:	e9c0 2300 	strd	r2, r3, [r0]
}
9000fc08:	4770      	bx	lr
9000fc0a:	bf00      	nop
9000fc0c:	240250a4 	.word	0x240250a4
9000fc10:	240250ec 	.word	0x240250ec

9000fc14 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
9000fc14:	b328      	cbz	r0, 9000fc62 <xTaskCheckForTimeOut+0x4e>
{
9000fc16:	b5f0      	push	{r4, r5, r6, r7, lr}
9000fc18:	460d      	mov	r5, r1
9000fc1a:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
9000fc1c:	b1c1      	cbz	r1, 9000fc50 <xTaskCheckForTimeOut+0x3c>
9000fc1e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
9000fc20:	f7fe f828 	bl	9000dc74 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
9000fc24:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
9000fc26:	4a1d      	ldr	r2, [pc, #116]	; (9000fc9c <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
9000fc28:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
9000fc2a:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
9000fc2c:	d030      	beq.n	9000fc90 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000fc2e:	f8df c070 	ldr.w	ip, [pc, #112]	; 9000fca0 <xTaskCheckForTimeOut+0x8c>
9000fc32:	6826      	ldr	r6, [r4, #0]
9000fc34:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000fc38:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000fc3a:	42be      	cmp	r6, r7
9000fc3c:	d01a      	beq.n	9000fc74 <xTaskCheckForTimeOut+0x60>
9000fc3e:	4288      	cmp	r0, r1
9000fc40:	d818      	bhi.n	9000fc74 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
9000fc42:	2001      	movs	r0, #1
9000fc44:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000fc46:	f7fe f837 	bl	9000dcb8 <vPortExitCritical>
}
9000fc4a:	9801      	ldr	r0, [sp, #4]
9000fc4c:	b003      	add	sp, #12
9000fc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000fc50:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fc54:	f383 8811 	msr	BASEPRI, r3
9000fc58:	f3bf 8f6f 	isb	sy
9000fc5c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
9000fc60:	e7fe      	b.n	9000fc60 <xTaskCheckForTimeOut+0x4c>
9000fc62:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fc66:	f383 8811 	msr	BASEPRI, r3
9000fc6a:	f3bf 8f6f 	isb	sy
9000fc6e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
9000fc72:	e7fe      	b.n	9000fc72 <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000fc74:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
9000fc78:	4573      	cmp	r3, lr
9000fc7a:	d90b      	bls.n	9000fc94 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
9000fc7c:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000fc7e:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000fc82:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
9000fc84:	4403      	add	r3, r0
			xReturn = pdFALSE;
9000fc86:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
9000fc88:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000fc8a:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
9000fc8e:	e7d9      	b.n	9000fc44 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
9000fc90:	2000      	movs	r0, #0
9000fc92:	e7d7      	b.n	9000fc44 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
9000fc94:	2300      	movs	r3, #0
			xReturn = pdTRUE;
9000fc96:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
9000fc98:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
9000fc9a:	e7d3      	b.n	9000fc44 <xTaskCheckForTimeOut+0x30>
9000fc9c:	240250ec 	.word	0x240250ec
9000fca0:	240250a4 	.word	0x240250a4

9000fca4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
9000fca4:	4b01      	ldr	r3, [pc, #4]	; (9000fcac <vTaskMissedYield+0x8>)
9000fca6:	2201      	movs	r2, #1
9000fca8:	601a      	str	r2, [r3, #0]
}
9000fcaa:	4770      	bx	lr
9000fcac:	240250f0 	.word	0x240250f0

9000fcb0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
9000fcb0:	4b01      	ldr	r3, [pc, #4]	; (9000fcb8 <xTaskGetCurrentTaskHandle+0x8>)
9000fcb2:	6818      	ldr	r0, [r3, #0]
	}
9000fcb4:	4770      	bx	lr
9000fcb6:	bf00      	nop
9000fcb8:	24024bf8 	.word	0x24024bf8

9000fcbc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
9000fcbc:	4b05      	ldr	r3, [pc, #20]	; (9000fcd4 <xTaskGetSchedulerState+0x18>)
9000fcbe:	681b      	ldr	r3, [r3, #0]
9000fcc0:	b133      	cbz	r3, 9000fcd0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000fcc2:	4b05      	ldr	r3, [pc, #20]	; (9000fcd8 <xTaskGetSchedulerState+0x1c>)
9000fcc4:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
9000fcc6:	2b00      	cmp	r3, #0
9000fcc8:	bf0c      	ite	eq
9000fcca:	2002      	moveq	r0, #2
9000fccc:	2000      	movne	r0, #0
9000fcce:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
9000fcd0:	2001      	movs	r0, #1
	}
9000fcd2:	4770      	bx	lr
9000fcd4:	240250c0 	.word	0x240250c0
9000fcd8:	2402506c 	.word	0x2402506c

9000fcdc <xTaskPriorityInherit>:
	{
9000fcdc:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
9000fcde:	4604      	mov	r4, r0
	{
9000fce0:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
9000fce2:	b1c8      	cbz	r0, 9000fd18 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
9000fce4:	4d1d      	ldr	r5, [pc, #116]	; (9000fd5c <xTaskPriorityInherit+0x80>)
9000fce6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
9000fce8:	682a      	ldr	r2, [r5, #0]
9000fcea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000fcec:	4293      	cmp	r3, r2
9000fcee:	d215      	bcs.n	9000fd1c <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000fcf0:	6982      	ldr	r2, [r0, #24]
9000fcf2:	2a00      	cmp	r2, #0
9000fcf4:	db04      	blt.n	9000fd00 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000fcf6:	682a      	ldr	r2, [r5, #0]
9000fcf8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000fcfa:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
9000fcfe:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
9000fd00:	4e17      	ldr	r6, [pc, #92]	; (9000fd60 <xTaskPriorityInherit+0x84>)
9000fd02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000fd06:	6962      	ldr	r2, [r4, #20]
9000fd08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
9000fd0c:	429a      	cmp	r2, r3
9000fd0e:	d00e      	beq.n	9000fd2e <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fd10:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
9000fd12:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000fd16:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
9000fd18:	b002      	add	sp, #8
9000fd1a:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
9000fd1c:	682b      	ldr	r3, [r5, #0]
9000fd1e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9000fd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000fd22:	4298      	cmp	r0, r3
9000fd24:	bf2c      	ite	cs
9000fd26:	2000      	movcs	r0, #0
9000fd28:	2001      	movcc	r0, #1
	}
9000fd2a:	b002      	add	sp, #8
9000fd2c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fd2e:	1d21      	adds	r1, r4, #4
9000fd30:	4608      	mov	r0, r1
9000fd32:	9101      	str	r1, [sp, #4]
9000fd34:	f7fd ff1c 	bl	9000db70 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fd38:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000fd3a:	4b0a      	ldr	r3, [pc, #40]	; (9000fd64 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fd3c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000fd3e:	681a      	ldr	r2, [r3, #0]
9000fd40:	9901      	ldr	r1, [sp, #4]
9000fd42:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000fd44:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000fd46:	d900      	bls.n	9000fd4a <xTaskPriorityInherit+0x6e>
9000fd48:	6018      	str	r0, [r3, #0]
9000fd4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000fd4e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
9000fd52:	f7fd fee5 	bl	9000db20 <vListInsertEnd>
				xReturn = pdTRUE;
9000fd56:	2001      	movs	r0, #1
9000fd58:	e7de      	b.n	9000fd18 <xTaskPriorityInherit+0x3c>
9000fd5a:	bf00      	nop
9000fd5c:	24024bf8 	.word	0x24024bf8
9000fd60:	24024c04 	.word	0x24024c04
9000fd64:	24025074 	.word	0x24025074

9000fd68 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
9000fd68:	b318      	cbz	r0, 9000fdb2 <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
9000fd6a:	4b1f      	ldr	r3, [pc, #124]	; (9000fde8 <xTaskPriorityDisinherit+0x80>)
	{
9000fd6c:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
9000fd6e:	681c      	ldr	r4, [r3, #0]
	{
9000fd70:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
9000fd72:	4284      	cmp	r4, r0
9000fd74:	d008      	beq.n	9000fd88 <xTaskPriorityDisinherit+0x20>
9000fd76:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fd7a:	f383 8811 	msr	BASEPRI, r3
9000fd7e:	f3bf 8f6f 	isb	sy
9000fd82:	f3bf 8f4f 	dsb	sy
9000fd86:	e7fe      	b.n	9000fd86 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
9000fd88:	6d23      	ldr	r3, [r4, #80]	; 0x50
9000fd8a:	b14b      	cbz	r3, 9000fda0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000fd8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
9000fd8e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000fd90:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
9000fd92:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
9000fd94:	4291      	cmp	r1, r2
9000fd96:	d000      	beq.n	9000fd9a <xTaskPriorityDisinherit+0x32>
9000fd98:	b16b      	cbz	r3, 9000fdb6 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
9000fd9a:	2000      	movs	r0, #0
	}
9000fd9c:	b002      	add	sp, #8
9000fd9e:	bd10      	pop	{r4, pc}
9000fda0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fda4:	f383 8811 	msr	BASEPRI, r3
9000fda8:	f3bf 8f6f 	isb	sy
9000fdac:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000fdb0:	e7fe      	b.n	9000fdb0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
9000fdb2:	2000      	movs	r0, #0
	}
9000fdb4:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fdb6:	1d21      	adds	r1, r4, #4
9000fdb8:	4608      	mov	r0, r1
9000fdba:	9101      	str	r1, [sp, #4]
9000fdbc:	f7fd fed8 	bl	9000db70 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000fdc0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
9000fdc2:	4b0a      	ldr	r3, [pc, #40]	; (9000fdec <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000fdc4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
9000fdc8:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000fdca:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000fdcc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
9000fdce:	681a      	ldr	r2, [r3, #0]
9000fdd0:	4290      	cmp	r0, r2
9000fdd2:	d900      	bls.n	9000fdd6 <xTaskPriorityDisinherit+0x6e>
9000fdd4:	6018      	str	r0, [r3, #0]
9000fdd6:	4b06      	ldr	r3, [pc, #24]	; (9000fdf0 <xTaskPriorityDisinherit+0x88>)
9000fdd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000fddc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
9000fde0:	f7fd fe9e 	bl	9000db20 <vListInsertEnd>
					xReturn = pdTRUE;
9000fde4:	2001      	movs	r0, #1
		return xReturn;
9000fde6:	e7d9      	b.n	9000fd9c <xTaskPriorityDisinherit+0x34>
9000fde8:	24024bf8 	.word	0x24024bf8
9000fdec:	24025074 	.word	0x24025074
9000fdf0:	24024c04 	.word	0x24024c04

9000fdf4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
9000fdf4:	2800      	cmp	r0, #0
9000fdf6:	d040      	beq.n	9000fe7a <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
9000fdf8:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
9000fdfa:	b530      	push	{r4, r5, lr}
9000fdfc:	4604      	mov	r4, r0
9000fdfe:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
9000fe00:	b153      	cbz	r3, 9000fe18 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9000fe02:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
9000fe04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000fe06:	4281      	cmp	r1, r0
9000fe08:	bf38      	it	cc
9000fe0a:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
9000fe0c:	2b01      	cmp	r3, #1
9000fe0e:	d101      	bne.n	9000fe14 <vTaskPriorityDisinheritAfterTimeout+0x20>
9000fe10:	428a      	cmp	r2, r1
9000fe12:	d10a      	bne.n	9000fe2a <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
9000fe14:	b003      	add	sp, #12
9000fe16:	bd30      	pop	{r4, r5, pc}
9000fe18:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fe1c:	f383 8811 	msr	BASEPRI, r3
9000fe20:	f3bf 8f6f 	isb	sy
9000fe24:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000fe28:	e7fe      	b.n	9000fe28 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
9000fe2a:	4b19      	ldr	r3, [pc, #100]	; (9000fe90 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
9000fe2c:	681b      	ldr	r3, [r3, #0]
9000fe2e:	42a3      	cmp	r3, r4
9000fe30:	d024      	beq.n	9000fe7c <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000fe32:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
9000fe34:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000fe36:	2b00      	cmp	r3, #0
9000fe38:	db02      	blt.n	9000fe40 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000fe3a:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
9000fe3e:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
9000fe40:	4d14      	ldr	r5, [pc, #80]	; (9000fe94 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
9000fe42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
9000fe46:	6961      	ldr	r1, [r4, #20]
9000fe48:	eb05 0382 	add.w	r3, r5, r2, lsl #2
9000fe4c:	4299      	cmp	r1, r3
9000fe4e:	d1e1      	bne.n	9000fe14 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000fe50:	1d21      	adds	r1, r4, #4
9000fe52:	4608      	mov	r0, r1
9000fe54:	9101      	str	r1, [sp, #4]
9000fe56:	f7fd fe8b 	bl	9000db70 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
9000fe5a:	4b0f      	ldr	r3, [pc, #60]	; (9000fe98 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
9000fe5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000fe5e:	681a      	ldr	r2, [r3, #0]
9000fe60:	9901      	ldr	r1, [sp, #4]
9000fe62:	4290      	cmp	r0, r2
9000fe64:	d900      	bls.n	9000fe68 <vTaskPriorityDisinheritAfterTimeout+0x74>
9000fe66:	6018      	str	r0, [r3, #0]
9000fe68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000fe6c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
9000fe70:	b003      	add	sp, #12
9000fe72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
9000fe76:	f7fd be53 	b.w	9000db20 <vListInsertEnd>
9000fe7a:	4770      	bx	lr
9000fe7c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000fe80:	f383 8811 	msr	BASEPRI, r3
9000fe84:	f3bf 8f6f 	isb	sy
9000fe88:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
9000fe8c:	e7fe      	b.n	9000fe8c <vTaskPriorityDisinheritAfterTimeout+0x98>
9000fe8e:	bf00      	nop
9000fe90:	24024bf8 	.word	0x24024bf8
9000fe94:	24024c04 	.word	0x24024c04
9000fe98:	24025074 	.word	0x24025074

9000fe9c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
9000fe9c:	4b04      	ldr	r3, [pc, #16]	; (9000feb0 <pvTaskIncrementMutexHeldCount+0x14>)
9000fe9e:	681a      	ldr	r2, [r3, #0]
9000fea0:	b11a      	cbz	r2, 9000feaa <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
9000fea2:	6819      	ldr	r1, [r3, #0]
9000fea4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
9000fea6:	3201      	adds	r2, #1
9000fea8:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
9000feaa:	6818      	ldr	r0, [r3, #0]
	}
9000feac:	4770      	bx	lr
9000feae:	bf00      	nop
9000feb0:	24024bf8 	.word	0x24024bf8

9000feb4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
9000feb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000feb8:	4e22      	ldr	r6, [pc, #136]	; (9000ff44 <prvSwitchTimerLists+0x90>)
9000feba:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
9000febc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 9000ff4c <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
9000fec0:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000fec4:	e00d      	b.n	9000fee2 <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000fec6:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000fec8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000feca:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000fecc:	1d25      	adds	r5, r4, #4
9000fece:	4628      	mov	r0, r5
9000fed0:	f7fd fe4e 	bl	9000db70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000fed4:	6a23      	ldr	r3, [r4, #32]
9000fed6:	4620      	mov	r0, r4
9000fed8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000feda:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
9000fede:	075b      	lsls	r3, r3, #29
9000fee0:	d40a      	bmi.n	9000fef8 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000fee2:	6833      	ldr	r3, [r6, #0]
9000fee4:	681a      	ldr	r2, [r3, #0]
9000fee6:	2a00      	cmp	r2, #0
9000fee8:	d1ed      	bne.n	9000fec6 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
9000feea:	4a17      	ldr	r2, [pc, #92]	; (9000ff48 <prvSwitchTimerLists+0x94>)
9000feec:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
9000feee:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
9000fef0:	6031      	str	r1, [r6, #0]
}
9000fef2:	b005      	add	sp, #20
9000fef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000fef8:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000fefa:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000fefc:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
9000fefe:	429f      	cmp	r7, r3
9000ff00:	d205      	bcs.n	9000ff0e <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000ff02:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
9000ff04:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000ff06:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000ff08:	f7fd fe1a 	bl	9000db40 <vListInsert>
9000ff0c:	e7e9      	b.n	9000fee2 <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
9000ff0e:	f8d9 3000 	ldr.w	r3, [r9]
9000ff12:	b16b      	cbz	r3, 9000ff30 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9000ff14:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000ff16:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000ff1a:	f7ff fecf 	bl	9000fcbc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000ff1e:	2300      	movs	r3, #0
9000ff20:	4669      	mov	r1, sp
9000ff22:	f8d9 0000 	ldr.w	r0, [r9]
9000ff26:	461a      	mov	r2, r3
9000ff28:	f7fe f99c 	bl	9000e264 <xQueueGenericSend>
				configASSERT( xResult );
9000ff2c:	2800      	cmp	r0, #0
9000ff2e:	d1d8      	bne.n	9000fee2 <prvSwitchTimerLists+0x2e>
9000ff30:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ff34:	f383 8811 	msr	BASEPRI, r3
9000ff38:	f3bf 8f6f 	isb	sy
9000ff3c:	f3bf 8f4f 	dsb	sy
9000ff40:	e7fe      	b.n	9000ff40 <prvSwitchTimerLists+0x8c>
9000ff42:	bf00      	nop
9000ff44:	240250f4 	.word	0x240250f4
9000ff48:	240250f8 	.word	0x240250f8
9000ff4c:	24025218 	.word	0x24025218

9000ff50 <prvTimerTask>:
{
9000ff50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000ff54:	4e9f      	ldr	r6, [pc, #636]	; (900101d4 <prvTimerTask+0x284>)
9000ff56:	b089      	sub	sp, #36	; 0x24
9000ff58:	4d9f      	ldr	r5, [pc, #636]	; (900101d8 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
9000ff5a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9000ff5e:	4c9f      	ldr	r4, [pc, #636]	; (900101dc <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
9000ff60:	6833      	ldr	r3, [r6, #0]
9000ff62:	681f      	ldr	r7, [r3, #0]
9000ff64:	2f00      	cmp	r7, #0
9000ff66:	f000 80b2 	beq.w	900100ce <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000ff6a:	68db      	ldr	r3, [r3, #12]
9000ff6c:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
9000ff6e:	f7ff fcd1 	bl	9000f914 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9000ff72:	f7ff fce7 	bl	9000f944 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000ff76:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000ff78:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
9000ff7a:	4290      	cmp	r0, r2
9000ff7c:	f0c0 80af 	bcc.w	900100de <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9000ff80:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
9000ff82:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9000ff84:	f200 80d0 	bhi.w	90010128 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
9000ff88:	f7ff fccc 	bl	9000f924 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000ff8c:	6832      	ldr	r2, [r6, #0]
9000ff8e:	68d2      	ldr	r2, [r2, #12]
9000ff90:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000ff94:	f10b 0804 	add.w	r8, fp, #4
9000ff98:	4640      	mov	r0, r8
9000ff9a:	f7fd fde9 	bl	9000db70 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000ff9e:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
9000ffa2:	0741      	lsls	r1, r0, #29
9000ffa4:	f100 80d0 	bmi.w	90010148 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000ffa8:	f020 0001 	bic.w	r0, r0, #1
9000ffac:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000ffb0:	f8db 3020 	ldr.w	r3, [fp, #32]
9000ffb4:	4658      	mov	r0, fp
9000ffb6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
9000ffb8:	2200      	movs	r2, #0
9000ffba:	4669      	mov	r1, sp
9000ffbc:	6820      	ldr	r0, [r4, #0]
9000ffbe:	f7fe fc3d 	bl	9000e83c <xQueueReceive>
9000ffc2:	2800      	cmp	r0, #0
9000ffc4:	d0cc      	beq.n	9000ff60 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
9000ffc6:	9b00      	ldr	r3, [sp, #0]
9000ffc8:	2b00      	cmp	r3, #0
9000ffca:	db77      	blt.n	900100bc <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
9000ffcc:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
9000ffce:	697b      	ldr	r3, [r7, #20]
9000ffd0:	b113      	cbz	r3, 9000ffd8 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000ffd2:	1d38      	adds	r0, r7, #4
9000ffd4:	f7fd fdcc 	bl	9000db70 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
9000ffd8:	f7ff fcb4 	bl	9000f944 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000ffdc:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000ffde:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
9000ffe0:	4298      	cmp	r0, r3
9000ffe2:	f0c0 8083 	bcc.w	900100ec <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
9000ffe6:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
9000ffe8:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
9000ffec:	2b09      	cmp	r3, #9
9000ffee:	d8e3      	bhi.n	9000ffb8 <prvTimerTask+0x68>
9000fff0:	e8df f003 	tbb	[pc, r3]
9000fff4:	54050505 	.word	0x54050505
9000fff8:	05055b3e 	.word	0x05055b3e
9000fffc:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000fffe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
90010002:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90010004:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90010008:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9001000a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9001000e:	9b01      	ldr	r3, [sp, #4]
90010010:	1899      	adds	r1, r3, r2
90010012:	bf2c      	ite	cs
90010014:	2001      	movcs	r0, #1
90010016:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
90010018:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9001001a:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9001001c:	f200 8086 	bhi.w	9001012c <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90010020:	eba8 0303 	sub.w	r3, r8, r3
90010024:	429a      	cmp	r2, r3
90010026:	f200 80c0 	bhi.w	900101aa <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9001002a:	6a3b      	ldr	r3, [r7, #32]
9001002c:	4638      	mov	r0, r7
9001002e:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
90010030:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90010034:	075b      	lsls	r3, r3, #29
90010036:	d5bf      	bpl.n	9000ffb8 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
90010038:	6823      	ldr	r3, [r4, #0]
9001003a:	b183      	cbz	r3, 9001005e <prvTimerTask+0x10e>
		xMessage.xMessageID = xCommandID;
9001003c:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9001003e:	69bb      	ldr	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90010040:	9706      	str	r7, [sp, #24]
		xMessage.xMessageID = xCommandID;
90010042:	9204      	str	r2, [sp, #16]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
90010044:	9a01      	ldr	r2, [sp, #4]
90010046:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90010048:	9305      	str	r3, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9001004a:	f7ff fe37 	bl	9000fcbc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9001004e:	2300      	movs	r3, #0
90010050:	a904      	add	r1, sp, #16
90010052:	6820      	ldr	r0, [r4, #0]
90010054:	461a      	mov	r2, r3
90010056:	f7fe f905 	bl	9000e264 <xQueueGenericSend>
							configASSERT( xResult );
9001005a:	2800      	cmp	r0, #0
9001005c:	d1ac      	bne.n	9000ffb8 <prvTimerTask+0x68>
9001005e:	f04f 0350 	mov.w	r3, #80	; 0x50
90010062:	f383 8811 	msr	BASEPRI, r3
90010066:	f3bf 8f6f 	isb	sy
9001006a:	f3bf 8f4f 	dsb	sy
9001006e:	e7fe      	b.n	9001006e <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90010070:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90010074:	f043 0301 	orr.w	r3, r3, #1
90010078:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
9001007c:	9b01      	ldr	r3, [sp, #4]
9001007e:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
90010080:	2b00      	cmp	r3, #0
90010082:	f000 809e 	beq.w	900101c2 <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
90010086:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90010088:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9001008a:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
9001008c:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9001008e:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
90010090:	d856      	bhi.n	90010140 <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
90010092:	4b53      	ldr	r3, [pc, #332]	; (900101e0 <prvTimerTask+0x290>)
90010094:	6818      	ldr	r0, [r3, #0]
90010096:	f7fd fd53 	bl	9000db40 <vListInsert>
	return xProcessTimerNow;
9001009a:	e78d      	b.n	9000ffb8 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9001009c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900100a0:	f023 0301 	bic.w	r3, r3, #1
900100a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
900100a8:	e786      	b.n	9000ffb8 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
900100aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900100ae:	079a      	lsls	r2, r3, #30
900100b0:	d572      	bpl.n	90010198 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900100b2:	f023 0301 	bic.w	r3, r3, #1
900100b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
900100ba:	e77d      	b.n	9000ffb8 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
900100bc:	9b01      	ldr	r3, [sp, #4]
900100be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
900100c2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
900100c4:	9b00      	ldr	r3, [sp, #0]
900100c6:	2b00      	cmp	r3, #0
900100c8:	f6ff af76 	blt.w	9000ffb8 <prvTimerTask+0x68>
900100cc:	e77e      	b.n	9000ffcc <prvTimerTask+0x7c>
	vTaskSuspendAll();
900100ce:	f7ff fc21 	bl	9000f914 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
900100d2:	f7ff fc37 	bl	9000f944 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
900100d6:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
900100d8:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
900100da:	4282      	cmp	r2, r0
900100dc:	d909      	bls.n	900100f2 <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
900100de:	f7ff fee9 	bl	9000feb4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
900100e2:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
900100e6:	f7ff fc1d 	bl	9000f924 <xTaskResumeAll>
900100ea:	e765      	b.n	9000ffb8 <prvTimerTask+0x68>
		prvSwitchTimerLists();
900100ec:	f7ff fee2 	bl	9000feb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
900100f0:	e779      	b.n	9000ffe6 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
900100f2:	4b3b      	ldr	r3, [pc, #236]	; (900101e0 <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
900100f4:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
900100f8:	681a      	ldr	r2, [r3, #0]
900100fa:	6812      	ldr	r2, [r2, #0]
900100fc:	fab2 f282 	clz	r2, r2
90010100:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
90010102:	eba7 010a 	sub.w	r1, r7, sl
90010106:	6820      	ldr	r0, [r4, #0]
90010108:	f7fe ff90 	bl	9000f02c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
9001010c:	f7ff fc0a 	bl	9000f924 <xTaskResumeAll>
90010110:	2800      	cmp	r0, #0
90010112:	f47f af51 	bne.w	9000ffb8 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
90010116:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
9001011a:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
9001011e:	f3bf 8f4f 	dsb	sy
90010122:	f3bf 8f6f 	isb	sy
90010126:	e747      	b.n	9000ffb8 <prvTimerTask+0x68>
90010128:	2200      	movs	r2, #0
9001012a:	e7ea      	b.n	90010102 <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
9001012c:	4543      	cmp	r3, r8
9001012e:	d902      	bls.n	90010136 <prvTimerTask+0x1e6>
90010130:	2800      	cmp	r0, #0
90010132:	f43f af7a 	beq.w	9001002a <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010136:	1d39      	adds	r1, r7, #4
90010138:	6830      	ldr	r0, [r6, #0]
9001013a:	f7fd fd01 	bl	9000db40 <vListInsert>
	return xProcessTimerNow;
9001013e:	e73b      	b.n	9000ffb8 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90010140:	6830      	ldr	r0, [r6, #0]
90010142:	f7fd fcfd 	bl	9000db40 <vListInsert>
90010146:	e737      	b.n	9000ffb8 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90010148:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9001014c:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90010150:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
90010152:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90010154:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
90010158:	d322      	bcc.n	900101a0 <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9001015a:	ebaa 0307 	sub.w	r3, sl, r7
9001015e:	429a      	cmp	r2, r3
90010160:	d829      	bhi.n	900101b6 <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
90010162:	6823      	ldr	r3, [r4, #0]
90010164:	b17b      	cbz	r3, 90010186 <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
90010166:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90010168:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9001016a:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
9001016e:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90010170:	f7ff fda4 	bl	9000fcbc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90010174:	2300      	movs	r3, #0
90010176:	a904      	add	r1, sp, #16
90010178:	6820      	ldr	r0, [r4, #0]
9001017a:	461a      	mov	r2, r3
9001017c:	f7fe f872 	bl	9000e264 <xQueueGenericSend>
			configASSERT( xResult );
90010180:	2800      	cmp	r0, #0
90010182:	f47f af15 	bne.w	9000ffb0 <prvTimerTask+0x60>
90010186:	f04f 0350 	mov.w	r3, #80	; 0x50
9001018a:	f383 8811 	msr	BASEPRI, r3
9001018e:	f3bf 8f6f 	isb	sy
90010192:	f3bf 8f4f 	dsb	sy
90010196:	e7fe      	b.n	90010196 <prvTimerTask+0x246>
							vPortFree( pxTimer );
90010198:	4638      	mov	r0, r7
9001019a:	f7fd fc4f 	bl	9000da3c <vPortFree>
9001019e:	e70b      	b.n	9000ffb8 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
900101a0:	4641      	mov	r1, r8
900101a2:	6830      	ldr	r0, [r6, #0]
900101a4:	f7fd fccc 	bl	9000db40 <vListInsert>
	return xProcessTimerNow;
900101a8:	e702      	b.n	9000ffb0 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900101aa:	4b0d      	ldr	r3, [pc, #52]	; (900101e0 <prvTimerTask+0x290>)
900101ac:	1d39      	adds	r1, r7, #4
900101ae:	6818      	ldr	r0, [r3, #0]
900101b0:	f7fd fcc6 	bl	9000db40 <vListInsert>
	return xProcessTimerNow;
900101b4:	e700      	b.n	9000ffb8 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900101b6:	4b0a      	ldr	r3, [pc, #40]	; (900101e0 <prvTimerTask+0x290>)
900101b8:	4641      	mov	r1, r8
900101ba:	6818      	ldr	r0, [r3, #0]
900101bc:	f7fd fcc0 	bl	9000db40 <vListInsert>
	return xProcessTimerNow;
900101c0:	e6f6      	b.n	9000ffb0 <prvTimerTask+0x60>
900101c2:	f04f 0350 	mov.w	r3, #80	; 0x50
900101c6:	f383 8811 	msr	BASEPRI, r3
900101ca:	f3bf 8f6f 	isb	sy
900101ce:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
900101d2:	e7fe      	b.n	900101d2 <prvTimerTask+0x282>
900101d4:	240250f4 	.word	0x240250f4
900101d8:	240251c4 	.word	0x240251c4
900101dc:	24025218 	.word	0x24025218
900101e0:	240250f8 	.word	0x240250f8

900101e4 <xTimerCreateTimerTask>:
{
900101e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
900101e6:	4c23      	ldr	r4, [pc, #140]	; (90010274 <xTimerCreateTimerTask+0x90>)
{
900101e8:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
900101ea:	f7fd fd43 	bl	9000dc74 <vPortEnterCritical>
		if( xTimerQueue == NULL )
900101ee:	6825      	ldr	r5, [r4, #0]
900101f0:	b335      	cbz	r5, 90010240 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
900101f2:	f7fd fd61 	bl	9000dcb8 <vPortExitCritical>
	if( xTimerQueue != NULL )
900101f6:	6823      	ldr	r3, [r4, #0]
900101f8:	b1cb      	cbz	r3, 9001022e <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
900101fa:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
900101fc:	aa07      	add	r2, sp, #28
900101fe:	a906      	add	r1, sp, #24
90010200:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
90010202:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
90010204:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90010208:	f7fd fb4e 	bl	9000d8a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9001020c:	4623      	mov	r3, r4
9001020e:	9a07      	ldr	r2, [sp, #28]
90010210:	9500      	str	r5, [sp, #0]
90010212:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
90010216:	e9cd 1001 	strd	r1, r0, [sp, #4]
9001021a:	4917      	ldr	r1, [pc, #92]	; (90010278 <xTimerCreateTimerTask+0x94>)
9001021c:	4817      	ldr	r0, [pc, #92]	; (9001027c <xTimerCreateTimerTask+0x98>)
9001021e:	f7ff fa1b 	bl	9000f658 <xTaskCreateStatic>
90010222:	4b17      	ldr	r3, [pc, #92]	; (90010280 <xTimerCreateTimerTask+0x9c>)
90010224:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
90010226:	b110      	cbz	r0, 9001022e <xTimerCreateTimerTask+0x4a>
}
90010228:	2001      	movs	r0, #1
9001022a:	b009      	add	sp, #36	; 0x24
9001022c:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001022e:	f04f 0350 	mov.w	r3, #80	; 0x50
90010232:	f383 8811 	msr	BASEPRI, r3
90010236:	f3bf 8f6f 	isb	sy
9001023a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
9001023e:	e7fe      	b.n	9001023e <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
90010240:	4f10      	ldr	r7, [pc, #64]	; (90010284 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
90010242:	4e11      	ldr	r6, [pc, #68]	; (90010288 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
90010244:	4638      	mov	r0, r7
90010246:	f7fd fc5b 	bl	9000db00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
9001024a:	4630      	mov	r0, r6
9001024c:	f7fd fc58 	bl	9000db00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
90010250:	4a0e      	ldr	r2, [pc, #56]	; (9001028c <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90010252:	9500      	str	r5, [sp, #0]
90010254:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
90010256:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90010258:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
9001025a:	4a0d      	ldr	r2, [pc, #52]	; (90010290 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9001025c:	4b0d      	ldr	r3, [pc, #52]	; (90010294 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
9001025e:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90010260:	4a0d      	ldr	r2, [pc, #52]	; (90010298 <xTimerCreateTimerTask+0xb4>)
90010262:	f7fd fea9 	bl	9000dfb8 <xQueueGenericCreateStatic>
90010266:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
90010268:	2800      	cmp	r0, #0
9001026a:	d0c2      	beq.n	900101f2 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
9001026c:	490b      	ldr	r1, [pc, #44]	; (9001029c <xTimerCreateTimerTask+0xb8>)
9001026e:	f7fe feb5 	bl	9000efdc <vQueueAddToRegistry>
90010272:	e7be      	b.n	900101f2 <xTimerCreateTimerTask+0xe>
90010274:	24025218 	.word	0x24025218
90010278:	90026738 	.word	0x90026738
9001027c:	9000ff51 	.word	0x9000ff51
90010280:	2402521c 	.word	0x2402521c
90010284:	2402519c 	.word	0x2402519c
90010288:	240251b0 	.word	0x240251b0
9001028c:	240250f4 	.word	0x240250f4
90010290:	240250f8 	.word	0x240250f8
90010294:	240251c8 	.word	0x240251c8
90010298:	240250fc 	.word	0x240250fc
9001029c:	90026730 	.word	0x90026730

900102a0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
900102a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900102a4:	4c82      	ldr	r4, [pc, #520]	; (900104b0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
{  
900102a6:	b091      	sub	sp, #68	; 0x44
900102a8:	9008      	str	r0, [sp, #32]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900102aa:	fba4 0303 	umull	r0, r3, r4, r3
{  
900102ae:	910d      	str	r1, [sp, #52]	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900102b0:	0a19      	lsrs	r1, r3, #8
{  
900102b2:	920b      	str	r2, [sp, #44]	; 0x2c
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900102b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900102b8:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
900102bc:	4293      	cmp	r3, r2
900102be:	930f      	str	r3, [sp, #60]	; 0x3c
900102c0:	f240 80f1 	bls.w	900104a6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x206>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900102c4:	4b7b      	ldr	r3, [pc, #492]	; (900104b4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>)
900102c6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 900104c4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x224>
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900102ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900102cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900102ce:	691b      	ldr	r3, [r3, #16]
900102d0:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 900104c8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x228>
900102d4:	9305      	str	r3, [sp, #20]
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
900102d6:	0053      	lsls	r3, r2, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900102d8:	920a      	str	r2, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900102da:	910e      	str	r1, [sp, #56]	; 0x38
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
900102dc:	930c      	str	r3, [sp, #48]	; 0x30
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900102de:	9a08      	ldr	r2, [sp, #32]
    currentMCU++;
900102e0:	f04f 0e02 	mov.w	lr, #2
900102e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
900102e6:	f502 7080 	add.w	r0, r2, #256	; 0x100
900102ea:	9204      	str	r2, [sp, #16]
900102ec:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900102ee:	3101      	adds	r1, #1
900102f0:	9006      	str	r0, [sp, #24]
900102f2:	980e      	ldr	r0, [sp, #56]	; 0x38
900102f4:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900102f6:	990a      	ldr	r1, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900102f8:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
900102fc:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010300:	fb01 f202 	mul.w	r2, r1, r2
90010304:	005b      	lsls	r3, r3, #1
90010306:	eb03 1302 	add.w	r3, r3, r2, lsl #4
9001030a:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
9001030c:	e009      	b.n	90010322 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001030e:	9b05      	ldr	r3, [sp, #20]
90010310:	9a01      	ldr	r2, [sp, #4]
90010312:	4293      	cmp	r3, r2
90010314:	d80f      	bhi.n	90010336 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
    for(i= 0; i <  16; i+=2)
90010316:	f1be 0f10 	cmp.w	lr, #16
9001031a:	f000 80bb 	beq.w	90010494 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>
9001031e:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90010322:	f1be 0f0a 	cmp.w	lr, #10
90010326:	d1f2      	bne.n	9001030e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
        pLum = pInBuffer + 128;
90010328:	9b08      	ldr	r3, [sp, #32]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001032a:	9a01      	ldr	r2, [sp, #4]
9001032c:	3380      	adds	r3, #128	; 0x80
9001032e:	9304      	str	r3, [sp, #16]
90010330:	9b05      	ldr	r3, [sp, #20]
90010332:	4293      	cmp	r3, r2
90010334:	d9f3      	bls.n	9001031e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer + refline;
90010336:	9a01      	ldr	r2, [sp, #4]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90010338:	9906      	ldr	r1, [sp, #24]
        pOutAddr = pOutBuffer + refline;
9001033a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9001033c:	9103      	str	r1, [sp, #12]
        pOutAddr = pOutBuffer + refline;
9001033e:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90010340:	990a      	ldr	r1, [sp, #40]	; 0x28
90010342:	9a04      	ldr	r2, [sp, #16]
90010344:	1859      	adds	r1, r3, r1
90010346:	f103 0c10 	add.w	ip, r3, #16
9001034a:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
9001034e:	3330      	adds	r3, #48	; 0x30
90010350:	4696      	mov	lr, r2
90010352:	9102      	str	r1, [sp, #8]
        for(k= 0; k<2; k++)
90010354:	9307      	str	r3, [sp, #28]
90010356:	9b03      	ldr	r3, [sp, #12]
90010358:	f1ac 0510 	sub.w	r5, ip, #16
          for(j=0; j < 8; j+=2)
9001035c:	4674      	mov	r4, lr
    currentMCU++;
9001035e:	9e02      	ldr	r6, [sp, #8]
90010360:	1e5f      	subs	r7, r3, #1
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010362:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90010366:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010368:	4b53      	ldr	r3, [pc, #332]	; (900104b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>)
          for(j=0; j < 8; j+=2)
9001036a:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001036c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90010370:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010372:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
          for(j=0; j < 8; j+=2)
90010376:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010378:	4b50      	ldr	r3, [pc, #320]	; (900104bc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21c>)
            ycomp = (int32_t)(*(pLum +j));
9001037a:	f814 ac02 	ldrb.w	sl, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001037e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010382:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010386:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010388:	4403      	add	r3, r0
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001038a:	484d      	ldr	r0, [pc, #308]	; (900104c0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x220>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001038c:	eb09 4323 	add.w	r3, r9, r3, asr #16
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010390:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010394:	eb01 020a 	add.w	r2, r1, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010398:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001039a:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
9001039e:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900103a2:	4482      	add	sl, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900103a4:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900103a8:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900103ac:	ea4f 0292 	mov.w	r2, r2, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900103b0:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900103b4:	ea4f 1242 	mov.w	r2, r2, lsl #5
900103b8:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
900103bc:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr = 
900103c0:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
900103c4:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900103c8:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900103cc:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900103d0:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900103d2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900103d6:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900103da:	ea4f 0292 	mov.w	r2, r2, lsr #2
900103de:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900103e2:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900103e6:	ea4f 1242 	mov.w	r2, r2, lsl #5
900103ea:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
900103ee:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
900103f2:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
900103f6:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900103fa:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900103fe:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010402:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010404:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010408:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001040c:	ea4f 0292 	mov.w	r2, r2, lsr #2
90010410:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010414:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010418:	ea4f 1242 	mov.w	r2, r2, lsl #5
9001041c:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90010420:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
90010424:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90010428:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001042a:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001042c:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9001042e:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010430:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010434:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010438:	ea4f 0393 	mov.w	r3, r3, lsr #2
9001043c:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010440:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010444:	ea4f 1343 	mov.w	r3, r3, lsl #5
90010448:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
9001044c:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
90010450:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90010454:	d185      	bne.n	90010362 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc2>
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90010456:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90010458:	f105 0c10 	add.w	ip, r5, #16
          pLum += 64;                      
9001045c:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90010460:	3310      	adds	r3, #16
90010462:	9302      	str	r3, [sp, #8]
            pChrom++;
90010464:	9b03      	ldr	r3, [sp, #12]
90010466:	3304      	adds	r3, #4
90010468:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
9001046a:	9b07      	ldr	r3, [sp, #28]
9001046c:	4563      	cmp	r3, ip
9001046e:	f47f af72 	bne.w	90010356 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb6>
            pChrom++;
90010472:	9b06      	ldr	r3, [sp, #24]
90010474:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90010478:	3308      	adds	r3, #8
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9001047a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for(i= 0; i <  16; i+=2)
9001047c:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90010480:	9306      	str	r3, [sp, #24]
        pLum = pLum - 128 + 16;
90010482:	9b04      	ldr	r3, [sp, #16]
90010484:	f103 0310 	add.w	r3, r3, #16
90010488:	9304      	str	r3, [sp, #16]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9001048a:	9b01      	ldr	r3, [sp, #4]
9001048c:	4413      	add	r3, r2
9001048e:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90010490:	f47f af45 	bne.w	9001031e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90010494:	9b08      	ldr	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90010496:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90010498:	f503 73c0 	add.w	r3, r3, #384	; 0x180
9001049c:	9308      	str	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9001049e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900104a0:	4293      	cmp	r3, r2
900104a2:	f47f af1c 	bne.w	900102de <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
  }
  return numberMCU;
}
900104a6:	ee17 0a90 	vmov	r0, s15
900104aa:	b011      	add	sp, #68	; 0x44
900104ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900104b0:	aaaaaaab 	.word	0xaaaaaaab
900104b4:	24026220 	.word	0x24026220
900104b8:	24025620 	.word	0x24025620
900104bc:	24025220 	.word	0x24025220
900104c0:	24025e20 	.word	0x24025e20
900104c4:	24025a20 	.word	0x24025a20
900104c8:	90026740 	.word	0x90026740

900104cc <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
900104cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
900104d0:	0a1c      	lsrs	r4, r3, #8
{  
900104d2:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900104d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
900104d8:	ee07 4a90 	vmov	s15, r4
{  
900104dc:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
900104de:	429a      	cmp	r2, r3
{  
900104e0:	9007      	str	r0, [sp, #28]
900104e2:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
900104e4:	930b      	str	r3, [sp, #44]	; 0x2c
900104e6:	f080 814a 	bcs.w	9001077e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
900104ea:	4ba7      	ldr	r3, [pc, #668]	; (90010788 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
900104ec:	4da7      	ldr	r5, [pc, #668]	; (9001078c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
900104ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
900104f0:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90010790 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
900104f4:	920a      	str	r2, [sp, #40]	; 0x28
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900104f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900104f8:	691b      	ldr	r3, [r3, #16]
900104fa:	f8df a298 	ldr.w	sl, [pc, #664]	; 90010794 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
900104fe:	f8df b298 	ldr.w	fp, [pc, #664]	; 90010798 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90010502:	f8df 8298 	ldr.w	r8, [pc, #664]	; 9001079c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010506:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010508:	9301      	str	r3, [sp, #4]
9001050a:	e008      	b.n	9001051e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9001050c:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
9001050e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90010510:	f503 7380 	add.w	r3, r3, #256	; 0x100
90010514:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90010516:	9b08      	ldr	r3, [sp, #32]
90010518:	4293      	cmp	r3, r2
9001051a:	f000 8130 	beq.w	9001077e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9001051e:	9a07      	ldr	r2, [sp, #28]
90010520:	9908      	ldr	r1, [sp, #32]
90010522:	f102 0080 	add.w	r0, r2, #128	; 0x80
90010526:	010b      	lsls	r3, r1, #4
90010528:	3101      	adds	r1, #1
    currentMCU++;
9001052a:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9001052e:	980a      	ldr	r0, [sp, #40]	; 0x28
90010530:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010532:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90010534:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90010538:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001053c:	fb01 f202 	mul.w	r2, r1, r2
90010540:	005b      	lsls	r3, r3, #1
90010542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90010546:	9300      	str	r3, [sp, #0]
    currentMCU++;
90010548:	2308      	movs	r3, #8
9001054a:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001054c:	e9dd 2300 	ldrd	r2, r3, [sp]
90010550:	4293      	cmp	r3, r2
90010552:	d9db      	bls.n	9001050c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90010554:	9b09      	ldr	r3, [sp, #36]	; 0x24
90010556:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90010558:	9a03      	ldr	r2, [sp, #12]
9001055a:	f102 0140 	add.w	r1, r2, #64	; 0x40
9001055e:	9a02      	ldr	r2, [sp, #8]
90010560:	f103 0020 	add.w	r0, r3, #32
90010564:	3204      	adds	r2, #4
90010566:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010568:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
9001056c:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001056e:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90010572:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010574:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90010578:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
9001057a:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001057e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010582:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010584:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90010588:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001058c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001058e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010590:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010594:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010598:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001059c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900105a0:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900105a2:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900105a6:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
900105aa:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
900105ae:	08e4      	lsrs	r4, r4, #3
900105b0:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900105b4:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
900105b8:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900105bc:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
900105c0:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
900105c4:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900105c6:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900105c8:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900105ca:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900105ce:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
900105d2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900105d6:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900105d8:	08c0      	lsrs	r0, r0, #3
900105da:	08a4      	lsrs	r4, r4, #2
900105dc:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
900105e0:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
900105e4:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900105e8:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900105ec:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900105f0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
900105f4:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900105f8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900105fc:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900105fe:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90010602:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010606:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010608:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001060a:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001060e:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010612:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010616:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001061a:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001061c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010620:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90010624:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90010628:	08e4      	lsrs	r4, r4, #3
9001062a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001062e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90010632:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010636:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
9001063a:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9001063e:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010640:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010642:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010644:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010648:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9001064c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010650:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010652:	08c0      	lsrs	r0, r0, #3
90010654:	08a4      	lsrs	r4, r4, #2
90010656:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9001065a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9001065e:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010662:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010666:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
9001066a:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001066e:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010672:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010676:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001067a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001067c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010680:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010682:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010684:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010688:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001068c:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90010690:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010694:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010696:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001069a:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9001069e:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
900106a2:	08e4      	lsrs	r4, r4, #3
900106a4:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900106a8:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
900106ac:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900106b0:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
900106b4:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
900106b8:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106ba:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900106bc:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106be:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900106c2:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
900106c6:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106ca:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900106cc:	08c0      	lsrs	r0, r0, #3
900106ce:	08a4      	lsrs	r4, r4, #2
900106d0:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
900106d4:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
900106d8:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900106dc:	f812 0c05 	ldrb.w	r0, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900106e0:	f892 403b 	ldrb.w	r4, [r2, #59]	; 0x3b
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900106e4:	f85b c020 	ldr.w	ip, [fp, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900106e8:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900106ec:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900106f0:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900106f4:	4446      	add	r6, r8
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106f6:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900106f8:	4460      	add	r0, ip
            ycomp = (int32_t)(*(pLum +j));
900106fa:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900106fe:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010702:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010706:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9001070a:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001070e:	4484      	add	ip, r0
90010710:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010714:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010718:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9001071c:	08e4      	lsrs	r4, r4, #3
9001071e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010722:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90010726:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001072a:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9001072e:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90010732:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010734:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010736:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010738:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001073c:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90010740:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010744:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010746:	08c0      	lsrs	r0, r0, #3
90010748:	08a4      	lsrs	r4, r4, #2
9001074a:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9001074e:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90010752:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90010756:	9804      	ldr	r0, [sp, #16]
90010758:	4283      	cmp	r3, r0
9001075a:	f47f af05 	bne.w	90010568 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
9001075e:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90010760:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90010762:	3308      	adds	r3, #8
90010764:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90010766:	9b03      	ldr	r3, [sp, #12]
90010768:	3308      	adds	r3, #8
9001076a:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9001076c:	9b00      	ldr	r3, [sp, #0]
9001076e:	4413      	add	r3, r2
90010770:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90010772:	9b05      	ldr	r3, [sp, #20]
90010774:	3b01      	subs	r3, #1
90010776:	9305      	str	r3, [sp, #20]
90010778:	f47f aee8 	bne.w	9001054c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
9001077c:	e6c6      	b.n	9001050c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
9001077e:	ee17 0a90 	vmov	r0, s15
90010782:	b00d      	add	sp, #52	; 0x34
90010784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010788:	24026220 	.word	0x24026220
9001078c:	24025220 	.word	0x24025220
90010790:	24025e20 	.word	0x24025e20
90010794:	24025a20 	.word	0x24025a20
90010798:	24025620 	.word	0x24025620
9001079c:	90026740 	.word	0x90026740

900107a0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
900107a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
900107a4:	4cb6      	ldr	r4, [pc, #728]	; (90010a80 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{  
900107a6:	b089      	sub	sp, #36	; 0x24
900107a8:	e9cd 0204 	strd	r0, r2, [sp, #16]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
900107ac:	fba4 0303 	umull	r0, r3, r4, r3
{  
900107b0:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
900107b2:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900107b4:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
900107b8:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
900107bc:	429a      	cmp	r2, r3
900107be:	9306      	str	r3, [sp, #24]
900107c0:	f080 8158 	bcs.w	90010a74 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900107c4:	4baf      	ldr	r3, [pc, #700]	; (90010a84 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900107c6:	4cb0      	ldr	r4, [pc, #704]	; (90010a88 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900107c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900107ca:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90010a90 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900107ce:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900107d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900107d2:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900107d4:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90010a94 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900107d8:	48ac      	ldr	r0, [pc, #688]	; (90010a8c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
900107da:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90010a98 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900107de:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900107e0:	9300      	str	r3, [sp, #0]
900107e2:	e007      	b.n	900107f4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
900107e4:	9b04      	ldr	r3, [sp, #16]
900107e6:	33c0      	adds	r3, #192	; 0xc0
900107e8:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
900107ea:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
900107ee:	4293      	cmp	r3, r2
900107f0:	f000 8140 	beq.w	90010a74 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900107f4:	9e05      	ldr	r6, [sp, #20]
900107f6:	9f07      	ldr	r7, [sp, #28]
900107f8:	00f5      	lsls	r5, r6, #3
900107fa:	3601      	adds	r6, #1
900107fc:	9904      	ldr	r1, [sp, #16]
900107fe:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010800:	9e03      	ldr	r6, [sp, #12]
90010802:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010806:	fbb5 f2f7 	udiv	r2, r5, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9001080a:	fb07 5512 	mls	r5, r7, r2, r5
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001080e:	fb06 f202 	mul.w	r2, r6, r2
90010812:	006d      	lsls	r5, r5, #1
90010814:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
    currentMCU++;   
90010818:	2508      	movs	r5, #8
9001081a:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001081c:	9d00      	ldr	r5, [sp, #0]
9001081e:	4295      	cmp	r5, r2
90010820:	d9e0      	bls.n	900107e4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010822:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90010826:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010828:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
9001082c:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
9001082e:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010832:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010836:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
9001083a:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001083c:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010840:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010844:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010846:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010848:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001084a:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001084e:	eb05 4929 	add.w	r9, r5, r9, asr #16
90010852:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010856:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010858:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9001085c:	08ed      	lsrs	r5, r5, #3
9001085e:	08bf      	lsrs	r7, r7, #2
90010860:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr = 
90010864:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010866:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001086a:	52ae      	strh	r6, [r5, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001086c:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010870:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90010874:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010878:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001087c:	4425      	add	r5, r4
9001087e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010882:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010886:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001088a:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001088c:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001088e:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010890:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010894:	eb05 4929 	add.w	r9, r5, r9, asr #16
90010898:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001089c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001089e:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
900108a2:	08ed      	lsrs	r5, r5, #3
900108a4:	08bf      	lsrs	r7, r7, #2
900108a6:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
900108aa:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900108ac:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
900108b0:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr = 
900108b2:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900108b4:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
900108b8:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;          
900108bc:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900108be:	4427      	add	r7, r4
900108c0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;          
900108c4:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900108c6:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900108ca:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900108cc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900108d0:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900108d4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900108d8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900108dc:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900108de:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900108e2:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900108e4:	eb07 4626 	add.w	r6, r7, r6, asr #16
900108e8:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
900108ec:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
900108f0:	08ff      	lsrs	r7, r7, #3
900108f2:	08b6      	lsrs	r6, r6, #2
900108f4:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
900108f8:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900108fc:	f8a5 9004 	strh.w	r9, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010900:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010904:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90010908:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001090c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010910:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90010914:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010916:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001091a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001091e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010920:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010922:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010924:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010928:	eb07 4626 	add.w	r6, r7, r6, asr #16
9001092c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010930:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010934:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90010938:	08ff      	lsrs	r7, r7, #3
9001093a:	08b6      	lsrs	r6, r6, #2
9001093c:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90010940:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010944:	f8a5 9006 	strh.w	r9, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010948:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001094c:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90010950:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010954:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010958:	4427      	add	r7, r4
9001095a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001095e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010962:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010966:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010968:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001096a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001096c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010970:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010974:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010978:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001097c:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90010980:	08ff      	lsrs	r7, r7, #3
90010982:	08b6      	lsrs	r6, r6, #2
90010984:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90010988:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001098c:	f8a5 9008 	strh.w	r9, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010990:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90010994:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010998:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9001099c:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001099e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900109a2:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109a6:	44b9      	add	r9, r7
900109a8:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900109ac:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900109b0:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109b4:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900109b8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900109ba:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900109bc:	eb07 4626 	add.w	r6, r7, r6, asr #16
900109c0:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
900109c4:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
900109c8:	08ff      	lsrs	r7, r7, #3
900109ca:	08b6      	lsrs	r6, r6, #2
900109cc:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
900109d0:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900109d4:	f8a5 900a 	strh.w	r9, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900109d8:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900109dc:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
900109e0:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900109e4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109e8:	4427      	add	r7, r4
900109ea:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900109ee:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900109f2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109f6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900109f8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900109fa:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900109fc:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010a00:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010a04:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a08:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010a0c:	08ff      	lsrs	r7, r7, #3
90010a0e:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90010a12:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90010a16:	08b6      	lsrs	r6, r6, #2
90010a18:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010a1c:	f8a5 900c 	strh.w	r9, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90010a20:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010a24:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90010a28:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a2c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90010a30:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a32:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010a36:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a3a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a3e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010a40:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010a42:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a44:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010a48:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010a4c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010a50:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010a54:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90010a58:	08ff      	lsrs	r7, r7, #3
90010a5a:	08b6      	lsrs	r6, r6, #2
90010a5c:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90010a60:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010a64:	f8a5 900e 	strh.w	r9, [r5, #14]
    for(i= 0; i <  8; i++)
90010a68:	9d01      	ldr	r5, [sp, #4]
90010a6a:	3d01      	subs	r5, #1
90010a6c:	9501      	str	r5, [sp, #4]
90010a6e:	f47f aed5 	bne.w	9001081c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
90010a72:	e6b7      	b.n	900107e4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90010a74:	ee17 0a90 	vmov	r0, s15
90010a78:	b009      	add	sp, #36	; 0x24
90010a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010a7e:	bf00      	nop
90010a80:	aaaaaaab 	.word	0xaaaaaaab
90010a84:	24026220 	.word	0x24026220
90010a88:	90026740 	.word	0x90026740
90010a8c:	24025a20 	.word	0x24025a20
90010a90:	24025e20 	.word	0x24025e20
90010a94:	24025220 	.word	0x24025220
90010a98:	24025620 	.word	0x24025620

90010a9c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90010a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
90010aa0:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90010aa4:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90010aa6:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90010aa8:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
90010aac:	f080 8088 	bcs.w	90010bc0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010ab0:	4b45      	ldr	r3, [pc, #276]	; (90010bc8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010ab2:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010ab6:	691e      	ldr	r6, [r3, #16]
90010ab8:	e003      	b.n	90010ac2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
90010aba:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;        
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
90010abc:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
90010ac0:	d07e      	beq.n	90010bc0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010ac2:	00d5      	lsls	r5, r2, #3
    currentMCU++;
90010ac4:	4604      	mov	r4, r0
90010ac6:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010aca:	3201      	adds	r2, #1
90010acc:	fbb5 f7f9 	udiv	r7, r5, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90010ad0:	fb09 5317 	mls	r3, r9, r7, r5
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010ad4:	fb08 f707 	mul.w	r7, r8, r7
90010ad8:	005b      	lsls	r3, r3, #1
90010ada:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010ade:	429e      	cmp	r6, r3
90010ae0:	d9eb      	bls.n	90010aba <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
90010ae2:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
90010ae6:	18cd      	adds	r5, r1, r3
          pLum++;
90010ae8:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
90010aea:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010aee:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010af2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010af6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010afa:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010afe:	ea47 070c 	orr.w	r7, r7, ip
90010b02:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;        
90010b04:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
90010b06:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010b0a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010b0e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010b12:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010b16:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010b1a:	ea47 070c 	orr.w	r7, r7, ip
90010b1e:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
90010b20:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010b24:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010b28:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010b2c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010b30:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010b34:	ea47 070c 	orr.w	r7, r7, ip
90010b38:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
90010b3a:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010b3e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010b42:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010b46:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010b4a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010b4e:	ea47 070c 	orr.w	r7, r7, ip
90010b52:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90010b54:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010b58:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010b5c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010b60:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010b64:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010b68:	ea47 070c 	orr.w	r7, r7, ip
90010b6c:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
90010b6e:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010b72:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010b76:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010b7a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010b7e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010b82:	ea47 070c 	orr.w	r7, r7, ip
90010b86:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90010b88:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010b8c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010b90:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010b94:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010b98:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010b9c:	ea47 070c 	orr.w	r7, r7, ip
90010ba0:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90010ba2:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010ba6:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010baa:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010bae:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010bb2:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010bb6:	ea47 070c 	orr.w	r7, r7, ip
90010bba:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
90010bbc:	d18f      	bne.n	90010ade <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
90010bbe:	e77c      	b.n	90010aba <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
90010bc0:	ee17 0a90 	vmov	r0, s15
90010bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010bc8:	24026220 	.word	0x24026220

90010bcc <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90010bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90010bd0:	0a1c      	lsrs	r4, r3, #8
{  
90010bd2:	b083      	sub	sp, #12
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90010bd4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
90010bd8:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
90010bdc:	429a      	cmp	r2, r3
90010bde:	9301      	str	r3, [sp, #4]
90010be0:	f080 8128 	bcs.w	90010e34 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x268>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010be4:	4b96      	ldr	r3, [pc, #600]	; (90010e40 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010be6:	f8df c25c 	ldr.w	ip, [pc, #604]	; 90010e44 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010bea:	691f      	ldr	r7, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010bec:	e9d3 a909 	ldrd	sl, r9, [r3, #36]	; 0x24
90010bf0:	e006      	b.n	90010c00 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x34>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
90010bf2:	9a00      	ldr	r2, [sp, #0]
90010bf4:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
90010bf8:	9b01      	ldr	r3, [sp, #4]
90010bfa:	429a      	cmp	r2, r3
90010bfc:	f000 811a 	beq.w	90010e34 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x268>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010c00:	00d3      	lsls	r3, r2, #3
    currentMCU++;
90010c02:	f04f 0808 	mov.w	r8, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010c06:	3201      	adds	r2, #1
90010c08:	fbb3 f4fa 	udiv	r4, r3, sl
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90010c0c:	fb0a 3514 	mls	r5, sl, r4, r3
    currentMCU++;
90010c10:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010c12:	fb09 f404 	mul.w	r4, r9, r4
90010c16:	006d      	lsls	r5, r5, #1
    currentMCU++;
90010c18:	9200      	str	r2, [sp, #0]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010c1a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90010c1e:	42af      	cmp	r7, r5
90010c20:	d9e7      	bls.n	90010bf2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26>
            color_k = (int32_t)(*(pChrom + 192));
90010c22:	f893 b0c0 	ldrb.w	fp, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;        
90010c26:	194e      	adds	r6, r1, r5
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010c28:	f893 e040 	ldrb.w	lr, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
90010c2c:	f1b8 0801 	subs.w	r8, r8, #1
            pChrom++;
90010c30:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010c34:	fb1e fe0b 	smulbb	lr, lr, fp
90010c38:	fbac 4e0e 	umull	r4, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010c3c:	f813 4c08 	ldrb.w	r4, [r3, #-8]
90010c40:	fb14 f40b 	smulbb	r4, r4, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010c44:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010c48:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010c4c:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010c50:	ea4f 2494 	mov.w	r4, r4, lsr #10
90010c54:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010c58:	f893 e078 	ldrb.w	lr, [r3, #120]	; 0x78
90010c5c:	fb1e fb0b 	smulbb	fp, lr, fp
90010c60:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010c64:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90010c68:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90010c6a:	534c      	strh	r4, [r1, r5]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90010c6c:	444d      	add	r5, r9
            color_k = (int32_t)(*(pChrom + 192));
90010c6e:	f893 b0b9 	ldrb.w	fp, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010c72:	f893 e039 	ldrb.w	lr, [r3, #57]	; 0x39
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010c76:	f813 4c07 	ldrb.w	r4, [r3, #-7]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010c7a:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010c7e:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010c82:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010c86:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010c8a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010c8e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010c92:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010c96:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010c9a:	f893 e079 	ldrb.w	lr, [r3, #121]	; 0x79
90010c9e:	fb1e fb0b 	smulbb	fp, lr, fp
90010ca2:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010ca6:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90010caa:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90010cac:	8074      	strh	r4, [r6, #2]
            color_k = (int32_t)(*(pChrom + 192));
90010cae:	f893 b0ba 	ldrb.w	fp, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010cb2:	f893 e03a 	ldrb.w	lr, [r3, #58]	; 0x3a
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010cb6:	f813 4c06 	ldrb.w	r4, [r3, #-6]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010cba:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010cbe:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010cc2:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010cc6:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010cca:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010cce:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010cd2:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010cd6:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010cda:	f893 e07a 	ldrb.w	lr, [r3, #122]	; 0x7a
90010cde:	fb1e fb0b 	smulbb	fp, lr, fp
90010ce2:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010ce6:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90010cea:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90010cec:	80b4      	strh	r4, [r6, #4]
            color_k = (int32_t)(*(pChrom + 192));
90010cee:	f893 b0bb 	ldrb.w	fp, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010cf2:	f893 e03b 	ldrb.w	lr, [r3, #59]	; 0x3b
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010cf6:	f813 4c05 	ldrb.w	r4, [r3, #-5]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010cfa:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010cfe:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010d02:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d06:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d0a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010d0e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d12:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010d16:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010d1a:	f893 e07b 	ldrb.w	lr, [r3, #123]	; 0x7b
90010d1e:	fb1e fb0b 	smulbb	fp, lr, fp
90010d22:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d26:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90010d2a:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90010d2c:	80f4      	strh	r4, [r6, #6]
            color_k = (int32_t)(*(pChrom + 192));
90010d2e:	f893 b0bc 	ldrb.w	fp, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010d32:	f893 e03c 	ldrb.w	lr, [r3, #60]	; 0x3c
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d36:	f813 4c04 	ldrb.w	r4, [r3, #-4]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010d3a:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d3e:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010d42:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d46:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d4a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010d4e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d52:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010d56:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010d5a:	f893 e07c 	ldrb.w	lr, [r3, #124]	; 0x7c
90010d5e:	fb1e fb0b 	smulbb	fp, lr, fp
90010d62:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d66:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90010d6a:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90010d6c:	8134      	strh	r4, [r6, #8]
            color_k = (int32_t)(*(pChrom + 192));
90010d6e:	f893 b0bd 	ldrb.w	fp, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010d72:	f893 e03d 	ldrb.w	lr, [r3, #61]	; 0x3d
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d76:	f813 4c03 	ldrb.w	r4, [r3, #-3]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010d7a:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d7e:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010d82:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010d86:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d8a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010d8e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010d92:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010d96:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010d9a:	f893 e07d 	ldrb.w	lr, [r3, #125]	; 0x7d
90010d9e:	fb1e fb0b 	smulbb	fp, lr, fp
90010da2:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010da6:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90010daa:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90010dac:	8174      	strh	r4, [r6, #10]
            color_k = (int32_t)(*(pChrom + 192));
90010dae:	f893 b0be 	ldrb.w	fp, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010db2:	f813 ec02 	ldrb.w	lr, [r3, #-2]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010db6:	f893 403e 	ldrb.w	r4, [r3, #62]	; 0x3e
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010dba:	fb1e fe0b 	smulbb	lr, lr, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010dbe:	fb14 f40b 	smulbb	r4, r4, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010dc2:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010dc6:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010dca:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010dce:	ea4f 2454 	mov.w	r4, r4, lsr #9
90010dd2:	ea4f 1444 	mov.w	r4, r4, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010dd6:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010dda:	f893 e07e 	ldrb.w	lr, [r3, #126]	; 0x7e
90010dde:	fb1e fb0b 	smulbb	fp, lr, fp
90010de2:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010de6:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90010dea:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90010dec:	81b4      	strh	r4, [r6, #12]
            color_k = (int32_t)(*(pChrom + 192));
90010dee:	f893 b0bf 	ldrb.w	fp, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010df2:	f893 e03f 	ldrb.w	lr, [r3, #63]	; 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010df6:	f813 4c01 	ldrb.w	r4, [r3, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010dfa:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010dfe:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010e02:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010e06:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e0a:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010e0e:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e12:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010e16:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010e1a:	f893 e07f 	ldrb.w	lr, [r3, #127]	; 0x7f
90010e1e:	fb1e fb0b 	smulbb	fp, lr, fp
90010e22:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010e26:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90010e2a:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90010e2c:	81f4      	strh	r4, [r6, #14]
    for(i= 0; i <  8; i++)
90010e2e:	f47f aef6 	bne.w	90010c1e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x52>
90010e32:	e6de      	b.n	90010bf2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26>
  }
  return numberMCU;
}
90010e34:	ee17 0a90 	vmov	r0, s15
90010e38:	b003      	add	sp, #12
90010e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90010e3e:	bf00      	nop
90010e40:	24026220 	.word	0x24026220
90010e44:	80808081 	.word	0x80808081

90010e48 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90010e48:	b4f0      	push	{r4, r5, r6, r7}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90010e4a:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90010e4e:	68c5      	ldr	r5, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90010e50:	6804      	ldr	r4, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90010e52:	fb06 f005 	mul.w	r0, r6, r5
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90010e56:	4b31      	ldr	r3, [pc, #196]	; (90010f1c <JPEG_GetDecodeColorConvertFunc+0xd4>)
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90010e58:	2c10      	cmp	r4, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90010e5a:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90010e5e:	609d      	str	r5, [r3, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90010e60:	601c      	str	r4, [r3, #0]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
90010e62:	60de      	str	r6, [r3, #12]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90010e64:	605f      	str	r7, [r3, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90010e66:	6118      	str	r0, [r3, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90010e68:	d02b      	beq.n	90010ec2 <JPEG_GetDecodeColorConvertFunc+0x7a>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
90010e6a:	b9fc      	cbnz	r4, 90010eac <JPEG_GetDecodeColorConvertFunc+0x64>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
90010e6c:	482c      	ldr	r0, [pc, #176]	; (90010f20 <JPEG_GetDecodeColorConvertFunc+0xd8>)
90010e6e:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
90010e70:	f015 0007 	ands.w	r0, r5, #7
90010e74:	d121      	bne.n	90010eba <JPEG_GetDecodeColorConvertFunc+0x72>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90010e76:	4607      	mov	r7, r0
90010e78:	6158      	str	r0, [r3, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
    }
    JPEG_ConvertorParams.H_factor = 8;
90010e7a:	2108      	movs	r1, #8
90010e7c:	460c      	mov	r4, r1
    JPEG_ConvertorParams.V_factor  = 8;
90010e7e:	e9c3 1107 	strd	r1, r1, [r3, #28]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010e82:	442f      	add	r7, r5
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010e84:	fbb5 f4f4 	udiv	r4, r5, r4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010e88:	006d      	lsls	r5, r5, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010e8a:	625f      	str	r7, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010e8c:	629d      	str	r5, [r3, #40]	; 0x28
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90010e8e:	b100      	cbz	r0, 90010e92 <JPEG_GetDecodeColorConvertFunc+0x4a>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
90010e90:	3401      	adds	r4, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
90010e92:	fbb6 f0f1 	udiv	r0, r6, r1
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90010e96:	fb01 6110 	mls	r1, r1, r0, r6
90010e9a:	b101      	cbz	r1, 90010e9e <JPEG_GetDecodeColorConvertFunc+0x56>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
90010e9c:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90010e9e:	fb00 f404 	mul.w	r4, r0, r4
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
90010ea2:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90010ea4:	62dc      	str	r4, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90010ea6:	6014      	str	r4, [r2, #0]
}
90010ea8:	bcf0      	pop	{r4, r5, r6, r7}
90010eaa:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90010eac:	2c30      	cmp	r4, #48	; 0x30
90010eae:	d112      	bne.n	90010ed6 <JPEG_GetDecodeColorConvertFunc+0x8e>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
90010eb0:	481c      	ldr	r0, [pc, #112]	; (90010f24 <JPEG_GetDecodeColorConvertFunc+0xdc>)
90010eb2:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90010eb4:	f015 0007 	ands.w	r0, r5, #7
90010eb8:	d0dd      	beq.n	90010e76 <JPEG_GetDecodeColorConvertFunc+0x2e>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
90010eba:	f1c0 0708 	rsb	r7, r0, #8
90010ebe:	615f      	str	r7, [r3, #20]
90010ec0:	e7db      	b.n	90010e7a <JPEG_GetDecodeColorConvertFunc+0x32>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
90010ec2:	2f01      	cmp	r7, #1
90010ec4:	d017      	beq.n	90010ef6 <JPEG_GetDecodeColorConvertFunc+0xae>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
90010ec6:	2f02      	cmp	r7, #2
90010ec8:	d008      	beq.n	90010edc <JPEG_GetDecodeColorConvertFunc+0x94>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
90010eca:	4817      	ldr	r0, [pc, #92]	; (90010f28 <JPEG_GetDecodeColorConvertFunc+0xe0>)
90010ecc:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90010ece:	f015 0007 	ands.w	r0, r5, #7
90010ed2:	d1f2      	bne.n	90010eba <JPEG_GetDecodeColorConvertFunc+0x72>
90010ed4:	e7cf      	b.n	90010e76 <JPEG_GetDecodeColorConvertFunc+0x2e>
    return HAL_ERROR; /* Color space Not supported*/
90010ed6:	2001      	movs	r0, #1
}
90010ed8:	bcf0      	pop	{r4, r5, r6, r7}
90010eda:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90010edc:	4813      	ldr	r0, [pc, #76]	; (90010f2c <JPEG_GetDecodeColorConvertFunc+0xe4>)
90010ede:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90010ee0:	f015 000f 	ands.w	r0, r5, #15
90010ee4:	d116      	bne.n	90010f14 <JPEG_GetDecodeColorConvertFunc+0xcc>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90010ee6:	4607      	mov	r7, r0
90010ee8:	6158      	str	r0, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
90010eea:	f04f 0c10 	mov.w	ip, #16
90010eee:	2108      	movs	r1, #8
90010ef0:	e9c3 c107 	strd	ip, r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
90010ef4:	e7c5      	b.n	90010e82 <JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
90010ef6:	480e      	ldr	r0, [pc, #56]	; (90010f30 <JPEG_GetDecodeColorConvertFunc+0xe8>)
90010ef8:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90010efa:	f015 000f 	ands.w	r0, r5, #15
90010efe:	d105      	bne.n	90010f0c <JPEG_GetDecodeColorConvertFunc+0xc4>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90010f00:	4607      	mov	r7, r0
90010f02:	6158      	str	r0, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
90010f04:	2110      	movs	r1, #16
      JPEG_ConvertorParams.V_factor  = 16;
90010f06:	e9c3 1107 	strd	r1, r1, [r3, #28]
90010f0a:	e7ba      	b.n	90010e82 <JPEG_GetDecodeColorConvertFunc+0x3a>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90010f0c:	f1c0 0710 	rsb	r7, r0, #16
90010f10:	615f      	str	r7, [r3, #20]
90010f12:	e7f7      	b.n	90010f04 <JPEG_GetDecodeColorConvertFunc+0xbc>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90010f14:	f1c0 0710 	rsb	r7, r0, #16
90010f18:	615f      	str	r7, [r3, #20]
90010f1a:	e7e6      	b.n	90010eea <JPEG_GetDecodeColorConvertFunc+0xa2>
90010f1c:	24026220 	.word	0x24026220
90010f20:	90010a9d 	.word	0x90010a9d
90010f24:	90010bcd 	.word	0x90010bcd
90010f28:	900107a1 	.word	0x900107a1
90010f2c:	900104cd 	.word	0x900104cd
90010f30:	900102a1 	.word	0x900102a1

90010f34 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
90010f34:	8880      	ldrh	r0, [r0, #4]
90010f36:	4770      	bx	lr

90010f38 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
90010f38:	b570      	push	{r4, r5, r6, lr}
90010f3a:	6803      	ldr	r3, [r0, #0]
90010f3c:	460c      	mov	r4, r1
90010f3e:	2100      	movs	r1, #0
90010f40:	4605      	mov	r5, r0
90010f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010f44:	4798      	blx	r3
90010f46:	4606      	mov	r6, r0
90010f48:	682b      	ldr	r3, [r5, #0]
90010f4a:	4628      	mov	r0, r5
90010f4c:	1ba4      	subs	r4, r4, r6
90010f4e:	6a1b      	ldr	r3, [r3, #32]
90010f50:	b2a4      	uxth	r4, r4
90010f52:	4798      	blx	r3
90010f54:	fbb4 f0f0 	udiv	r0, r4, r0
90010f58:	bd70      	pop	{r4, r5, r6, pc}

90010f5a <_ZN8touchgfx17AbstractPartition5clearEv>:
90010f5a:	2300      	movs	r3, #0
90010f5c:	8083      	strh	r3, [r0, #4]
90010f5e:	4770      	bx	lr

90010f60 <_ZN8touchgfx17AbstractPartition8allocateEt>:
90010f60:	b510      	push	{r4, lr}
90010f62:	6803      	ldr	r3, [r0, #0]
90010f64:	4604      	mov	r4, r0
90010f66:	8881      	ldrh	r1, [r0, #4]
90010f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010f6a:	4798      	blx	r3
90010f6c:	88a3      	ldrh	r3, [r4, #4]
90010f6e:	3301      	adds	r3, #1
90010f70:	80a3      	strh	r3, [r4, #4]
90010f72:	bd10      	pop	{r4, pc}

90010f74 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
90010f74:	6803      	ldr	r3, [r0, #0]
90010f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010f78:	4718      	bx	r3

90010f7a <_ZN8touchgfx17AbstractPartitionD1Ev>:
90010f7a:	4770      	bx	lr

90010f7c <_ZN8touchgfx17AbstractPartitionC1Ev>:
90010f7c:	4a02      	ldr	r2, [pc, #8]	; (90010f88 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
90010f7e:	6002      	str	r2, [r0, #0]
90010f80:	2200      	movs	r2, #0
90010f82:	8082      	strh	r2, [r0, #4]
90010f84:	4770      	bx	lr
90010f86:	bf00      	nop
90010f88:	90026a48 	.word	0x90026a48

90010f8c <_ZN8touchgfx9Container13getFirstChildEv>:
90010f8c:	6a80      	ldr	r0, [r0, #40]	; 0x28
90010f8e:	4770      	bx	lr

90010f90 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
90010f90:	6a83      	ldr	r3, [r0, #40]	; 0x28
90010f92:	2000      	movs	r0, #0
90010f94:	b12b      	cbz	r3, 90010fa2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
90010f96:	b920      	cbnz	r0, 90010fa2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
90010f98:	1a5a      	subs	r2, r3, r1
90010f9a:	699b      	ldr	r3, [r3, #24]
90010f9c:	4250      	negs	r0, r2
90010f9e:	4150      	adcs	r0, r2
90010fa0:	e7f8      	b.n	90010f94 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
90010fa2:	4770      	bx	lr

90010fa4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
90010fa4:	2300      	movs	r3, #0
90010fa6:	6148      	str	r0, [r1, #20]
90010fa8:	618b      	str	r3, [r1, #24]
90010faa:	6a83      	ldr	r3, [r0, #40]	; 0x28
90010fac:	b913      	cbnz	r3, 90010fb4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
90010fae:	6281      	str	r1, [r0, #40]	; 0x28
90010fb0:	4770      	bx	lr
90010fb2:	4613      	mov	r3, r2
90010fb4:	699a      	ldr	r2, [r3, #24]
90010fb6:	2a00      	cmp	r2, #0
90010fb8:	d1fb      	bne.n	90010fb2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
90010fba:	6199      	str	r1, [r3, #24]
90010fbc:	4770      	bx	lr

90010fbe <_ZN8touchgfx9Container9removeAllEv>:
90010fbe:	2200      	movs	r2, #0
90010fc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
90010fc2:	b123      	cbz	r3, 90010fce <_ZN8touchgfx9Container9removeAllEv+0x10>
90010fc4:	6999      	ldr	r1, [r3, #24]
90010fc6:	6281      	str	r1, [r0, #40]	; 0x28
90010fc8:	e9c3 2205 	strd	r2, r2, [r3, #20]
90010fcc:	e7f8      	b.n	90010fc0 <_ZN8touchgfx9Container9removeAllEv+0x2>
90010fce:	4770      	bx	lr

90010fd0 <_ZN8touchgfx9Container6unlinkEv>:
90010fd0:	2300      	movs	r3, #0
90010fd2:	6283      	str	r3, [r0, #40]	; 0x28
90010fd4:	4770      	bx	lr

90010fd6 <_ZNK8touchgfx9Container12getSolidRectEv>:
90010fd6:	2200      	movs	r2, #0
90010fd8:	8002      	strh	r2, [r0, #0]
90010fda:	8042      	strh	r2, [r0, #2]
90010fdc:	8082      	strh	r2, [r0, #4]
90010fde:	80c2      	strh	r2, [r0, #6]
90010fe0:	4770      	bx	lr

90010fe2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
90010fe2:	b570      	push	{r4, r5, r6, lr}
90010fe4:	460d      	mov	r5, r1
90010fe6:	4616      	mov	r6, r2
90010fe8:	6a84      	ldr	r4, [r0, #40]	; 0x28
90010fea:	b13c      	cbz	r4, 90010ffc <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
90010fec:	6823      	ldr	r3, [r4, #0]
90010fee:	4620      	mov	r0, r4
90010ff0:	4632      	mov	r2, r6
90010ff2:	4629      	mov	r1, r5
90010ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010ff6:	4798      	blx	r3
90010ff8:	69a4      	ldr	r4, [r4, #24]
90010ffa:	e7f6      	b.n	90010fea <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
90010ffc:	bd70      	pop	{r4, r5, r6, pc}

90010ffe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
90010ffe:	b538      	push	{r3, r4, r5, lr}
90011000:	460d      	mov	r5, r1
90011002:	6a84      	ldr	r4, [r0, #40]	; 0x28
90011004:	b134      	cbz	r4, 90011014 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
90011006:	682b      	ldr	r3, [r5, #0]
90011008:	4621      	mov	r1, r4
9001100a:	4628      	mov	r0, r5
9001100c:	689b      	ldr	r3, [r3, #8]
9001100e:	4798      	blx	r3
90011010:	69a4      	ldr	r4, [r4, #24]
90011012:	e7f7      	b.n	90011004 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
90011014:	bd38      	pop	{r3, r4, r5, pc}

90011016 <_ZN8touchgfx9ContainerD1Ev>:
90011016:	4770      	bx	lr

90011018 <_ZN8touchgfx9ContainerD0Ev>:
90011018:	b510      	push	{r4, lr}
9001101a:	4604      	mov	r4, r0
9001101c:	212c      	movs	r1, #44	; 0x2c
9001101e:	f011 fe4c 	bl	90022cba <_ZdlPvj>
90011022:	4620      	mov	r0, r4
90011024:	bd10      	pop	{r4, pc}

90011026 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
90011026:	6a83      	ldr	r3, [r0, #40]	; 0x28
90011028:	b19b      	cbz	r3, 90011052 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
9001102a:	428b      	cmp	r3, r1
9001102c:	d109      	bne.n	90011042 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
9001102e:	699a      	ldr	r2, [r3, #24]
90011030:	2100      	movs	r1, #0
90011032:	6159      	str	r1, [r3, #20]
90011034:	6282      	str	r2, [r0, #40]	; 0x28
90011036:	b902      	cbnz	r2, 9001103a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
90011038:	4770      	bx	lr
9001103a:	6199      	str	r1, [r3, #24]
9001103c:	4770      	bx	lr
9001103e:	4613      	mov	r3, r2
90011040:	b13a      	cbz	r2, 90011052 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
90011042:	699a      	ldr	r2, [r3, #24]
90011044:	428a      	cmp	r2, r1
90011046:	d1fa      	bne.n	9001103e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
90011048:	698a      	ldr	r2, [r1, #24]
9001104a:	619a      	str	r2, [r3, #24]
9001104c:	2300      	movs	r3, #0
9001104e:	e9c1 3305 	strd	r3, r3, [r1, #20]
90011052:	4770      	bx	lr

90011054 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
90011054:	b410      	push	{r4}
90011056:	6a83      	ldr	r3, [r0, #40]	; 0x28
90011058:	4604      	mov	r4, r0
9001105a:	b92b      	cbnz	r3, 90011068 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
9001105c:	6803      	ldr	r3, [r0, #0]
9001105e:	4611      	mov	r1, r2
90011060:	f85d 4b04 	ldr.w	r4, [sp], #4
90011064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90011066:	4718      	bx	r3
90011068:	b941      	cbnz	r1, 9001107c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
9001106a:	6193      	str	r3, [r2, #24]
9001106c:	6282      	str	r2, [r0, #40]	; 0x28
9001106e:	6154      	str	r4, [r2, #20]
90011070:	f85d 4b04 	ldr.w	r4, [sp], #4
90011074:	4770      	bx	lr
90011076:	4603      	mov	r3, r0
90011078:	2800      	cmp	r0, #0
9001107a:	d0f9      	beq.n	90011070 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
9001107c:	4299      	cmp	r1, r3
9001107e:	6998      	ldr	r0, [r3, #24]
90011080:	d1f9      	bne.n	90011076 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
90011082:	6190      	str	r0, [r2, #24]
90011084:	618a      	str	r2, [r1, #24]
90011086:	e7f2      	b.n	9001106e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

90011088 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
90011088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001108c:	461f      	mov	r7, r3
9001108e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
90011092:	460d      	mov	r5, r1
90011094:	4616      	mov	r6, r2
90011096:	b103      	cbz	r3, 9001109a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
90011098:	6038      	str	r0, [r7, #0]
9001109a:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001109c:	b314      	cbz	r4, 900110e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
9001109e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
900110a2:	b1eb      	cbz	r3, 900110e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900110a4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
900110a8:	428d      	cmp	r5, r1
900110aa:	db19      	blt.n	900110e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900110ac:	b289      	uxth	r1, r1
900110ae:	8923      	ldrh	r3, [r4, #8]
900110b0:	440b      	add	r3, r1
900110b2:	b21b      	sxth	r3, r3
900110b4:	429d      	cmp	r5, r3
900110b6:	da13      	bge.n	900110e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900110b8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
900110bc:	4296      	cmp	r6, r2
900110be:	db0f      	blt.n	900110e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900110c0:	b292      	uxth	r2, r2
900110c2:	8963      	ldrh	r3, [r4, #10]
900110c4:	4413      	add	r3, r2
900110c6:	b21b      	sxth	r3, r3
900110c8:	429e      	cmp	r6, r3
900110ca:	da09      	bge.n	900110e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900110cc:	6823      	ldr	r3, [r4, #0]
900110ce:	1ab2      	subs	r2, r6, r2
900110d0:	1a69      	subs	r1, r5, r1
900110d2:	4620      	mov	r0, r4
900110d4:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
900110d8:	b212      	sxth	r2, r2
900110da:	463b      	mov	r3, r7
900110dc:	b209      	sxth	r1, r1
900110de:	47c0      	blx	r8
900110e0:	69a4      	ldr	r4, [r4, #24]
900110e2:	e7db      	b.n	9001109c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
900110e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900110e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
900110e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900110ec:	4c6d      	ldr	r4, [pc, #436]	; (900112a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
900110ee:	b0a1      	sub	sp, #132	; 0x84
900110f0:	4606      	mov	r6, r0
900110f2:	6824      	ldr	r4, [r4, #0]
900110f4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
900110f6:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
900110fa:	2400      	movs	r4, #0
900110fc:	9303      	str	r3, [sp, #12]
900110fe:	802c      	strh	r4, [r5, #0]
90011100:	9d2b      	ldr	r5, [sp, #172]	; 0xac
90011102:	802c      	strh	r4, [r5, #0]
90011104:	601c      	str	r4, [r3, #0]
90011106:	e9cd 1201 	strd	r1, r2, [sp, #4]
9001110a:	f7ff ffbd 	bl	90011088 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
9001110e:	f1b9 0f03 	cmp.w	r9, #3
90011112:	f340 80c1 	ble.w	90011298 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
90011116:	4631      	mov	r1, r6
90011118:	a80c      	add	r0, sp, #48	; 0x30
9001111a:	f004 f8b3 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001111e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
90011122:	9306      	str	r3, [sp, #24]
90011124:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90011128:	9307      	str	r3, [sp, #28]
9001112a:	9b03      	ldr	r3, [sp, #12]
9001112c:	f8d3 a000 	ldr.w	sl, [r3]
90011130:	f1ba 0f00 	cmp.w	sl, #0
90011134:	f000 80b3 	beq.w	9001129e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
90011138:	4651      	mov	r1, sl
9001113a:	a810      	add	r0, sp, #64	; 0x40
9001113c:	f004 f8a2 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90011140:	2002      	movs	r0, #2
90011142:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
90011146:	9b01      	ldr	r3, [sp, #4]
90011148:	9a06      	ldr	r2, [sp, #24]
9001114a:	fb91 f1f0 	sdiv	r1, r1, r0
9001114e:	189d      	adds	r5, r3, r2
90011150:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
90011154:	9a07      	ldr	r2, [sp, #28]
90011156:	4419      	add	r1, r3
90011158:	9b02      	ldr	r3, [sp, #8]
9001115a:	4413      	add	r3, r2
9001115c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
90011160:	1a6d      	subs	r5, r5, r1
90011162:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
90011166:	fb92 f2f0 	sdiv	r2, r2, r0
9001116a:	440a      	add	r2, r1
9001116c:	1a9b      	subs	r3, r3, r2
9001116e:	435b      	muls	r3, r3
90011170:	fb05 3505 	mla	r5, r5, r5, r3
90011174:	4f4c      	ldr	r7, [pc, #304]	; (900112a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
90011176:	ac10      	add	r4, sp, #64	; 0x40
90011178:	f1b9 0f0c 	cmp.w	r9, #12
9001117c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9001117e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90011180:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90011182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90011184:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90011186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90011188:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
9001118c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
90011190:	f04f 0303 	mov.w	r3, #3
90011194:	bfd8      	it	le
90011196:	f109 32ff 	addle.w	r2, r9, #4294967295
9001119a:	f04f 0400 	mov.w	r4, #0
9001119e:	f8cd 9000 	str.w	r9, [sp]
900111a2:	bfcc      	ite	gt
900111a4:	4698      	movgt	r8, r3
900111a6:	fb92 f8f3 	sdivle	r8, r2, r3
900111aa:	1c63      	adds	r3, r4, #1
900111ac:	aa10      	add	r2, sp, #64	; 0x40
900111ae:	f004 0401 	and.w	r4, r4, #1
900111b2:	f04f 0b00 	mov.w	fp, #0
900111b6:	9308      	str	r3, [sp, #32]
900111b8:	9b00      	ldr	r3, [sp, #0]
900111ba:	eb02 1444 	add.w	r4, r2, r4, lsl #5
900111be:	fb93 f3f8 	sdiv	r3, r3, r8
900111c2:	3404      	adds	r4, #4
900111c4:	b29b      	uxth	r3, r3
900111c6:	9304      	str	r3, [sp, #16]
900111c8:	9a04      	ldr	r2, [sp, #16]
900111ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
900111ce:	fb13 f302 	smulbb	r3, r3, r2
900111d2:	9a01      	ldr	r2, [sp, #4]
900111d4:	b29b      	uxth	r3, r3
900111d6:	1899      	adds	r1, r3, r2
900111d8:	9305      	str	r3, [sp, #20]
900111da:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
900111de:	b209      	sxth	r1, r1
900111e0:	4299      	cmp	r1, r3
900111e2:	db4d      	blt.n	90011280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900111e4:	8932      	ldrh	r2, [r6, #8]
900111e6:	4413      	add	r3, r2
900111e8:	b21b      	sxth	r3, r3
900111ea:	4299      	cmp	r1, r3
900111ec:	da48      	bge.n	90011280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900111ee:	9b04      	ldr	r3, [sp, #16]
900111f0:	6827      	ldr	r7, [r4, #0]
900111f2:	fb17 f703 	smulbb	r7, r7, r3
900111f6:	9b02      	ldr	r3, [sp, #8]
900111f8:	b2bf      	uxth	r7, r7
900111fa:	18fa      	adds	r2, r7, r3
900111fc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90011200:	b212      	sxth	r2, r2
90011202:	429a      	cmp	r2, r3
90011204:	db3c      	blt.n	90011280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90011206:	8970      	ldrh	r0, [r6, #10]
90011208:	4403      	add	r3, r0
9001120a:	b21b      	sxth	r3, r3
9001120c:	429a      	cmp	r2, r3
9001120e:	da37      	bge.n	90011280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90011210:	2300      	movs	r3, #0
90011212:	4630      	mov	r0, r6
90011214:	930b      	str	r3, [sp, #44]	; 0x2c
90011216:	ab0b      	add	r3, sp, #44	; 0x2c
90011218:	f7ff ff36 	bl	90011088 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
9001121c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001121e:	b37a      	cbz	r2, 90011280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90011220:	4552      	cmp	r2, sl
90011222:	d02d      	beq.n	90011280 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90011224:	4611      	mov	r1, r2
90011226:	a80e      	add	r0, sp, #56	; 0x38
90011228:	9209      	str	r2, [sp, #36]	; 0x24
9001122a:	f004 f82b 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001122e:	f04f 0e02 	mov.w	lr, #2
90011232:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
90011236:	9a06      	ldr	r2, [sp, #24]
90011238:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
9001123c:	9b01      	ldr	r3, [sp, #4]
9001123e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
90011242:	4413      	add	r3, r2
90011244:	9a07      	ldr	r2, [sp, #28]
90011246:	fb91 f1fe 	sdiv	r1, r1, lr
9001124a:	fb9c fcfe 	sdiv	ip, ip, lr
9001124e:	4401      	add	r1, r0
90011250:	1a58      	subs	r0, r3, r1
90011252:	9b02      	ldr	r3, [sp, #8]
90011254:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
90011258:	4413      	add	r3, r2
9001125a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001125c:	448c      	add	ip, r1
9001125e:	eba3 030c 	sub.w	r3, r3, ip
90011262:	435b      	muls	r3, r3
90011264:	fb00 3300 	mla	r3, r0, r0, r3
90011268:	42ab      	cmp	r3, r5
9001126a:	d208      	bcs.n	9001127e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
9001126c:	990b      	ldr	r1, [sp, #44]	; 0x2c
9001126e:	461d      	mov	r5, r3
90011270:	9803      	ldr	r0, [sp, #12]
90011272:	6001      	str	r1, [r0, #0]
90011274:	992a      	ldr	r1, [sp, #168]	; 0xa8
90011276:	9805      	ldr	r0, [sp, #20]
90011278:	8008      	strh	r0, [r1, #0]
9001127a:	992b      	ldr	r1, [sp, #172]	; 0xac
9001127c:	800f      	strh	r7, [r1, #0]
9001127e:	4692      	mov	sl, r2
90011280:	f10b 0b01 	add.w	fp, fp, #1
90011284:	3408      	adds	r4, #8
90011286:	f1bb 0f04 	cmp.w	fp, #4
9001128a:	d19d      	bne.n	900111c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
9001128c:	9b00      	ldr	r3, [sp, #0]
9001128e:	9c08      	ldr	r4, [sp, #32]
90011290:	444b      	add	r3, r9
90011292:	4544      	cmp	r4, r8
90011294:	9300      	str	r3, [sp, #0]
90011296:	d188      	bne.n	900111aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
90011298:	b021      	add	sp, #132	; 0x84
9001129a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001129e:	f04f 35ff 	mov.w	r5, #4294967295
900112a2:	e767      	b.n	90011174 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
900112a4:	2402626c 	.word	0x2402626c
900112a8:	90023eb8 	.word	0x90023eb8

900112ac <_ZN8touchgfx4RectaNERKS0_>:
900112ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900112b0:	f9b1 7000 	ldrsh.w	r7, [r1]
900112b4:	888c      	ldrh	r4, [r1, #4]
900112b6:	f9b0 9000 	ldrsh.w	r9, [r0]
900112ba:	443c      	add	r4, r7
900112bc:	b2a4      	uxth	r4, r4
900112be:	fa0f f884 	sxth.w	r8, r4
900112c2:	45c1      	cmp	r9, r8
900112c4:	da2f      	bge.n	90011326 <_ZN8touchgfx4RectaNERKS0_+0x7a>
900112c6:	8882      	ldrh	r2, [r0, #4]
900112c8:	444a      	add	r2, r9
900112ca:	b292      	uxth	r2, r2
900112cc:	fa0f fe82 	sxth.w	lr, r2
900112d0:	4577      	cmp	r7, lr
900112d2:	da28      	bge.n	90011326 <_ZN8touchgfx4RectaNERKS0_+0x7a>
900112d4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
900112d8:	88cb      	ldrh	r3, [r1, #6]
900112da:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
900112de:	442b      	add	r3, r5
900112e0:	b21b      	sxth	r3, r3
900112e2:	429e      	cmp	r6, r3
900112e4:	da1f      	bge.n	90011326 <_ZN8touchgfx4RectaNERKS0_+0x7a>
900112e6:	88c3      	ldrh	r3, [r0, #6]
900112e8:	4433      	add	r3, r6
900112ea:	b29b      	uxth	r3, r3
900112ec:	fa0f fc83 	sxth.w	ip, r3
900112f0:	4565      	cmp	r5, ip
900112f2:	da18      	bge.n	90011326 <_ZN8touchgfx4RectaNERKS0_+0x7a>
900112f4:	454f      	cmp	r7, r9
900112f6:	bfb8      	it	lt
900112f8:	464f      	movlt	r7, r9
900112fa:	42b5      	cmp	r5, r6
900112fc:	bfb8      	it	lt
900112fe:	4635      	movlt	r5, r6
90011300:	45f0      	cmp	r8, lr
90011302:	bfd8      	it	le
90011304:	4622      	movle	r2, r4
90011306:	1bd2      	subs	r2, r2, r7
90011308:	8082      	strh	r2, [r0, #4]
9001130a:	884a      	ldrh	r2, [r1, #2]
9001130c:	88c9      	ldrh	r1, [r1, #6]
9001130e:	8007      	strh	r7, [r0, #0]
90011310:	440a      	add	r2, r1
90011312:	8045      	strh	r5, [r0, #2]
90011314:	b292      	uxth	r2, r2
90011316:	b211      	sxth	r1, r2
90011318:	458c      	cmp	ip, r1
9001131a:	bfa8      	it	ge
9001131c:	4613      	movge	r3, r2
9001131e:	1b5b      	subs	r3, r3, r5
90011320:	80c3      	strh	r3, [r0, #6]
90011322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90011326:	2300      	movs	r3, #0
90011328:	8003      	strh	r3, [r0, #0]
9001132a:	8043      	strh	r3, [r0, #2]
9001132c:	8083      	strh	r3, [r0, #4]
9001132e:	80c3      	strh	r3, [r0, #6]
90011330:	e7f7      	b.n	90011322 <_ZN8touchgfx4RectaNERKS0_+0x76>

90011332 <_ZNK8touchgfx4Rect7isEmptyEv>:
90011332:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90011336:	2b00      	cmp	r3, #0
90011338:	dd06      	ble.n	90011348 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
9001133a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
9001133e:	2800      	cmp	r0, #0
90011340:	bfcc      	ite	gt
90011342:	2000      	movgt	r0, #0
90011344:	2001      	movle	r0, #1
90011346:	4770      	bx	lr
90011348:	2001      	movs	r0, #1
9001134a:	4770      	bx	lr

9001134c <_ZNK8touchgfx9Container16getContainedAreaEv>:
9001134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011350:	2300      	movs	r3, #0
90011352:	4604      	mov	r4, r0
90011354:	6a8d      	ldr	r5, [r1, #40]	; 0x28
90011356:	8003      	strh	r3, [r0, #0]
90011358:	8043      	strh	r3, [r0, #2]
9001135a:	8083      	strh	r3, [r0, #4]
9001135c:	80c3      	strh	r3, [r0, #6]
9001135e:	2d00      	cmp	r5, #0
90011360:	d040      	beq.n	900113e4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
90011362:	1d28      	adds	r0, r5, #4
90011364:	f7ff ffe5 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
90011368:	b988      	cbnz	r0, 9001138e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
9001136a:	4620      	mov	r0, r4
9001136c:	f7ff ffe1 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
90011370:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
90011374:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90011378:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
9001137c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
90011380:	b138      	cbz	r0, 90011392 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
90011382:	8022      	strh	r2, [r4, #0]
90011384:	8063      	strh	r3, [r4, #2]
90011386:	f8a4 e004 	strh.w	lr, [r4, #4]
9001138a:	f8a4 c006 	strh.w	ip, [r4, #6]
9001138e:	69ad      	ldr	r5, [r5, #24]
90011390:	e7e5      	b.n	9001135e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
90011392:	f9b4 0000 	ldrsh.w	r0, [r4]
90011396:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
9001139a:	4290      	cmp	r0, r2
9001139c:	4607      	mov	r7, r0
9001139e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
900113a2:	460e      	mov	r6, r1
900113a4:	bfa8      	it	ge
900113a6:	4617      	movge	r7, r2
900113a8:	4299      	cmp	r1, r3
900113aa:	4472      	add	r2, lr
900113ac:	f8b4 e006 	ldrh.w	lr, [r4, #6]
900113b0:	bfa8      	it	ge
900113b2:	461e      	movge	r6, r3
900113b4:	4440      	add	r0, r8
900113b6:	4471      	add	r1, lr
900113b8:	4463      	add	r3, ip
900113ba:	b200      	sxth	r0, r0
900113bc:	8027      	strh	r7, [r4, #0]
900113be:	b212      	sxth	r2, r2
900113c0:	8066      	strh	r6, [r4, #2]
900113c2:	b209      	sxth	r1, r1
900113c4:	b21b      	sxth	r3, r3
900113c6:	4290      	cmp	r0, r2
900113c8:	bfac      	ite	ge
900113ca:	ebc7 0200 	rsbge	r2, r7, r0
900113ce:	ebc7 0202 	rsblt	r2, r7, r2
900113d2:	4299      	cmp	r1, r3
900113d4:	bfac      	ite	ge
900113d6:	ebc6 0301 	rsbge	r3, r6, r1
900113da:	ebc6 0303 	rsblt	r3, r6, r3
900113de:	80a2      	strh	r2, [r4, #4]
900113e0:	80e3      	strh	r3, [r4, #6]
900113e2:	e7d4      	b.n	9001138e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
900113e4:	4620      	mov	r0, r4
900113e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900113ea <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
900113ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
900113ee:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
900113f2:	b383      	cbz	r3, 90011456 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
900113f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
900113f6:	b374      	cbz	r4, 90011456 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
900113f8:	f9b1 5000 	ldrsh.w	r5, [r1]
900113fc:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
90011400:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
90011404:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
90011408:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
9001140c:	b303      	cbz	r3, 90011450 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
9001140e:	4668      	mov	r0, sp
90011410:	1d21      	adds	r1, r4, #4
90011412:	f8ad 5000 	strh.w	r5, [sp]
90011416:	f8ad 6002 	strh.w	r6, [sp, #2]
9001141a:	f8ad 7004 	strh.w	r7, [sp, #4]
9001141e:	f8ad 8006 	strh.w	r8, [sp, #6]
90011422:	f7ff ff43 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
90011426:	4668      	mov	r0, sp
90011428:	f7ff ff83 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
9001142c:	b980      	cbnz	r0, 90011450 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
9001142e:	f8bd 3000 	ldrh.w	r3, [sp]
90011432:	4669      	mov	r1, sp
90011434:	88a2      	ldrh	r2, [r4, #4]
90011436:	4620      	mov	r0, r4
90011438:	1a9b      	subs	r3, r3, r2
9001143a:	88e2      	ldrh	r2, [r4, #6]
9001143c:	f8ad 3000 	strh.w	r3, [sp]
90011440:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90011444:	1a9b      	subs	r3, r3, r2
90011446:	f8ad 3002 	strh.w	r3, [sp, #2]
9001144a:	6823      	ldr	r3, [r4, #0]
9001144c:	689b      	ldr	r3, [r3, #8]
9001144e:	4798      	blx	r3
90011450:	69a4      	ldr	r4, [r4, #24]
90011452:	2c00      	cmp	r4, #0
90011454:	d1d8      	bne.n	90011408 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
90011456:	b002      	add	sp, #8
90011458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

9001145c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
9001145c:	b573      	push	{r0, r1, r4, r5, r6, lr}
9001145e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
90011462:	460d      	mov	r5, r1
90011464:	4616      	mov	r6, r2
90011466:	b323      	cbz	r3, 900114b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90011468:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001146a:	b314      	cbz	r4, 900114b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
9001146c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90011470:	b1eb      	cbz	r3, 900114ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90011472:	6828      	ldr	r0, [r5, #0]
90011474:	466b      	mov	r3, sp
90011476:	6869      	ldr	r1, [r5, #4]
90011478:	c303      	stmia	r3!, {r0, r1}
9001147a:	4668      	mov	r0, sp
9001147c:	1d21      	adds	r1, r4, #4
9001147e:	f7ff ff15 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
90011482:	4668      	mov	r0, sp
90011484:	f7ff ff55 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
90011488:	b988      	cbnz	r0, 900114ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
9001148a:	f8bd 3000 	ldrh.w	r3, [sp]
9001148e:	4669      	mov	r1, sp
90011490:	88a2      	ldrh	r2, [r4, #4]
90011492:	4620      	mov	r0, r4
90011494:	1a9b      	subs	r3, r3, r2
90011496:	88e2      	ldrh	r2, [r4, #6]
90011498:	f8ad 3000 	strh.w	r3, [sp]
9001149c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900114a0:	1a9b      	subs	r3, r3, r2
900114a2:	4632      	mov	r2, r6
900114a4:	f8ad 3002 	strh.w	r3, [sp, #2]
900114a8:	6823      	ldr	r3, [r4, #0]
900114aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
900114ac:	4798      	blx	r3
900114ae:	69a4      	ldr	r4, [r4, #24]
900114b0:	e7db      	b.n	9001146a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
900114b2:	b002      	add	sp, #8
900114b4:	bd70      	pop	{r4, r5, r6, pc}

900114b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
900114b6:	6803      	ldr	r3, [r0, #0]
900114b8:	b513      	push	{r0, r1, r4, lr}
900114ba:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
900114be:	2300      	movs	r3, #0
900114c0:	e9cd 3300 	strd	r3, r3, [sp]
900114c4:	466b      	mov	r3, sp
900114c6:	47a0      	blx	r4
900114c8:	b002      	add	sp, #8
900114ca:	bd10      	pop	{r4, pc}

900114cc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
900114cc:	2301      	movs	r3, #1
900114ce:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
900114d2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
900114d6:	4770      	bx	lr

900114d8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
900114d8:	2301      	movs	r3, #1
900114da:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
900114de:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
900114e2:	4770      	bx	lr

900114e4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
900114e4:	6843      	ldr	r3, [r0, #4]
900114e6:	2201      	movs	r2, #1
900114e8:	725a      	strb	r2, [r3, #9]
900114ea:	6840      	ldr	r0, [r0, #4]
900114ec:	6803      	ldr	r3, [r0, #0]
900114ee:	691b      	ldr	r3, [r3, #16]
900114f0:	4718      	bx	r3

900114f2 <_ZN8touchgfx3HAL8flushDMAEv>:
900114f2:	6840      	ldr	r0, [r0, #4]
900114f4:	6803      	ldr	r3, [r0, #0]
900114f6:	689b      	ldr	r3, [r3, #8]
900114f8:	4718      	bx	r3

900114fa <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
900114fa:	b530      	push	{r4, r5, lr}
900114fc:	b08b      	sub	sp, #44	; 0x2c
900114fe:	6804      	ldr	r4, [r0, #0]
90011500:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
90011504:	9509      	str	r5, [sp, #36]	; 0x24
90011506:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
9001150a:	9508      	str	r5, [sp, #32]
9001150c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
90011510:	9507      	str	r5, [sp, #28]
90011512:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
90011516:	9506      	str	r5, [sp, #24]
90011518:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
9001151c:	9505      	str	r5, [sp, #20]
9001151e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
90011522:	9504      	str	r5, [sp, #16]
90011524:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
90011528:	9503      	str	r5, [sp, #12]
9001152a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
9001152e:	9502      	str	r5, [sp, #8]
90011530:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
90011534:	e9cd 3500 	strd	r3, r5, [sp]
90011538:	4613      	mov	r3, r2
9001153a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
9001153c:	2200      	movs	r2, #0
9001153e:	47a0      	blx	r4
90011540:	b00b      	add	sp, #44	; 0x2c
90011542:	bd30      	pop	{r4, r5, pc}

90011544 <_ZN8touchgfx3HAL10beginFrameEv>:
90011544:	4b04      	ldr	r3, [pc, #16]	; (90011558 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
90011546:	781b      	ldrb	r3, [r3, #0]
90011548:	b123      	cbz	r3, 90011554 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
9001154a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
9001154e:	f080 0001 	eor.w	r0, r0, #1
90011552:	4770      	bx	lr
90011554:	2001      	movs	r0, #1
90011556:	4770      	bx	lr
90011558:	2402626a 	.word	0x2402626a

9001155c <_ZN8touchgfx3HAL8endFrameEv>:
9001155c:	b510      	push	{r4, lr}
9001155e:	4604      	mov	r4, r0
90011560:	6840      	ldr	r0, [r0, #4]
90011562:	6803      	ldr	r3, [r0, #0]
90011564:	689b      	ldr	r3, [r3, #8]
90011566:	4798      	blx	r3
90011568:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
9001156c:	b113      	cbz	r3, 90011574 <_ZN8touchgfx3HAL8endFrameEv+0x18>
9001156e:	2301      	movs	r3, #1
90011570:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90011574:	bd10      	pop	{r4, pc}

90011576 <_ZN8touchgfx3HAL10initializeEv>:
90011576:	b510      	push	{r4, lr}
90011578:	4604      	mov	r4, r0
9001157a:	f7f0 f9e7 	bl	9000194c <_ZN8touchgfx10OSWrappers10initializeEv>
9001157e:	f7ee ffbf 	bl	90000500 <_ZN8touchgfx4GPIO4initEv>
90011582:	6860      	ldr	r0, [r4, #4]
90011584:	6803      	ldr	r3, [r0, #0]
90011586:	68db      	ldr	r3, [r3, #12]
90011588:	4798      	blx	r3
9001158a:	68e0      	ldr	r0, [r4, #12]
9001158c:	6803      	ldr	r3, [r0, #0]
9001158e:	689b      	ldr	r3, [r3, #8]
90011590:	4798      	blx	r3
90011592:	6823      	ldr	r3, [r4, #0]
90011594:	4620      	mov	r0, r4
90011596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90011598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001159c:	4718      	bx	r3
	...

900115a0 <_ZN8touchgfx3HAL4tickEv>:
900115a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
900115a2:	6803      	ldr	r3, [r0, #0]
900115a4:	4604      	mov	r4, r0
900115a6:	4d5b      	ldr	r5, [pc, #364]	; (90011714 <_ZN8touchgfx3HAL4tickEv+0x174>)
900115a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900115ac:	4798      	blx	r3
900115ae:	2800      	cmp	r0, #0
900115b0:	f000 8095 	beq.w	900116de <_ZN8touchgfx3HAL4tickEv+0x13e>
900115b4:	2001      	movs	r0, #1
900115b6:	2600      	movs	r6, #0
900115b8:	f7ee ffcc 	bl	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
900115bc:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
900115c0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
900115c4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
900115c8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
900115cc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
900115d0:	b133      	cbz	r3, 900115e0 <_ZN8touchgfx3HAL4tickEv+0x40>
900115d2:	6823      	ldr	r3, [r4, #0]
900115d4:	4620      	mov	r0, r4
900115d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
900115da:	4798      	blx	r3
900115dc:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
900115e0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
900115e4:	2601      	movs	r6, #1
900115e6:	6862      	ldr	r2, [r4, #4]
900115e8:	f083 0301 	eor.w	r3, r3, #1
900115ec:	702e      	strb	r6, [r5, #0]
900115ee:	7253      	strb	r3, [r2, #9]
900115f0:	f002 fd68 	bl	900140c4 <_ZN8touchgfx11Application11getInstanceEv>
900115f4:	6803      	ldr	r3, [r0, #0]
900115f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900115f8:	4798      	blx	r3
900115fa:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
900115fe:	b90b      	cbnz	r3, 90011604 <_ZN8touchgfx3HAL4tickEv+0x64>
90011600:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
90011604:	f002 fd5e 	bl	900140c4 <_ZN8touchgfx11Application11getInstanceEv>
90011608:	6803      	ldr	r3, [r0, #0]
9001160a:	695b      	ldr	r3, [r3, #20]
9001160c:	4798      	blx	r3
9001160e:	6da0      	ldr	r0, [r4, #88]	; 0x58
90011610:	6803      	ldr	r3, [r0, #0]
90011612:	691b      	ldr	r3, [r3, #16]
90011614:	4798      	blx	r3
90011616:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
9001161a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
9001161e:	3b01      	subs	r3, #1
90011620:	b2db      	uxtb	r3, r3
90011622:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
90011626:	b10a      	cbz	r2, 9001162c <_ZN8touchgfx3HAL4tickEv+0x8c>
90011628:	2b00      	cmp	r3, #0
9001162a:	d1eb      	bne.n	90011604 <_ZN8touchgfx3HAL4tickEv+0x64>
9001162c:	4a3a      	ldr	r2, [pc, #232]	; (90011718 <_ZN8touchgfx3HAL4tickEv+0x178>)
9001162e:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
90011632:	7813      	ldrb	r3, [r2, #0]
90011634:	3301      	adds	r3, #1
90011636:	b25b      	sxtb	r3, r3
90011638:	4299      	cmp	r1, r3
9001163a:	7013      	strb	r3, [r2, #0]
9001163c:	dc10      	bgt.n	90011660 <_ZN8touchgfx3HAL4tickEv+0xc0>
9001163e:	2300      	movs	r3, #0
90011640:	68e0      	ldr	r0, [r4, #12]
90011642:	a902      	add	r1, sp, #8
90011644:	7013      	strb	r3, [r2, #0]
90011646:	aa03      	add	r2, sp, #12
90011648:	6803      	ldr	r3, [r0, #0]
9001164a:	68db      	ldr	r3, [r3, #12]
9001164c:	4798      	blx	r3
9001164e:	6823      	ldr	r3, [r4, #0]
90011650:	2800      	cmp	r0, #0
90011652:	d050      	beq.n	900116f6 <_ZN8touchgfx3HAL4tickEv+0x156>
90011654:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90011658:	4620      	mov	r0, r4
9001165a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
9001165e:	4798      	blx	r3
90011660:	2300      	movs	r3, #0
90011662:	6960      	ldr	r0, [r4, #20]
90011664:	f88d 3007 	strb.w	r3, [sp, #7]
90011668:	b158      	cbz	r0, 90011682 <_ZN8touchgfx3HAL4tickEv+0xe2>
9001166a:	6803      	ldr	r3, [r0, #0]
9001166c:	f10d 0107 	add.w	r1, sp, #7
90011670:	68db      	ldr	r3, [r3, #12]
90011672:	4798      	blx	r3
90011674:	b128      	cbz	r0, 90011682 <_ZN8touchgfx3HAL4tickEv+0xe2>
90011676:	6da0      	ldr	r0, [r4, #88]	; 0x58
90011678:	f89d 1007 	ldrb.w	r1, [sp, #7]
9001167c:	6803      	ldr	r3, [r0, #0]
9001167e:	68db      	ldr	r3, [r3, #12]
90011680:	4798      	blx	r3
90011682:	f104 001c 	add.w	r0, r4, #28
90011686:	f011 fa63 	bl	90022b50 <_ZN8touchgfx8Gestures4tickEv>
9001168a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
9001168e:	b30b      	cbz	r3, 900116d4 <_ZN8touchgfx3HAL4tickEv+0x134>
90011690:	6920      	ldr	r0, [r4, #16]
90011692:	6803      	ldr	r3, [r0, #0]
90011694:	691b      	ldr	r3, [r3, #16]
90011696:	4798      	blx	r3
90011698:	6f23      	ldr	r3, [r4, #112]	; 0x70
9001169a:	4606      	mov	r6, r0
9001169c:	b903      	cbnz	r3, 900116a0 <_ZN8touchgfx3HAL4tickEv+0x100>
9001169e:	6720      	str	r0, [r4, #112]	; 0x70
900116a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
900116a2:	4a1e      	ldr	r2, [pc, #120]	; (9001171c <_ZN8touchgfx3HAL4tickEv+0x17c>)
900116a4:	1af3      	subs	r3, r6, r3
900116a6:	4293      	cmp	r3, r2
900116a8:	d914      	bls.n	900116d4 <_ZN8touchgfx3HAL4tickEv+0x134>
900116aa:	6920      	ldr	r0, [r4, #16]
900116ac:	6803      	ldr	r3, [r0, #0]
900116ae:	699b      	ldr	r3, [r3, #24]
900116b0:	4798      	blx	r3
900116b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
900116b4:	2264      	movs	r2, #100	; 0x64
900116b6:	1af3      	subs	r3, r6, r3
900116b8:	fbb3 f3f2 	udiv	r3, r3, r2
900116bc:	fbb0 f0f3 	udiv	r0, r0, r3
900116c0:	2800      	cmp	r0, #0
900116c2:	dc1d      	bgt.n	90011700 <_ZN8touchgfx3HAL4tickEv+0x160>
900116c4:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
900116c8:	6920      	ldr	r0, [r4, #16]
900116ca:	2100      	movs	r1, #0
900116cc:	6803      	ldr	r3, [r0, #0]
900116ce:	69db      	ldr	r3, [r3, #28]
900116d0:	4798      	blx	r3
900116d2:	6726      	str	r6, [r4, #112]	; 0x70
900116d4:	f002 fcf6 	bl	900140c4 <_ZN8touchgfx11Application11getInstanceEv>
900116d8:	6803      	ldr	r3, [r0, #0]
900116da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900116dc:	4798      	blx	r3
900116de:	6823      	ldr	r3, [r4, #0]
900116e0:	4620      	mov	r0, r4
900116e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
900116e6:	4798      	blx	r3
900116e8:	2001      	movs	r0, #1
900116ea:	f7ee ff67 	bl	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
900116ee:	2300      	movs	r3, #0
900116f0:	702b      	strb	r3, [r5, #0]
900116f2:	b004      	add	sp, #16
900116f4:	bd70      	pop	{r4, r5, r6, pc}
900116f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
900116fa:	4620      	mov	r0, r4
900116fc:	4798      	blx	r3
900116fe:	e7af      	b.n	90011660 <_ZN8touchgfx3HAL4tickEv+0xc0>
90011700:	2863      	cmp	r0, #99	; 0x63
90011702:	bfcb      	itete	gt
90011704:	2300      	movgt	r3, #0
90011706:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
9001170a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
9001170e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
90011712:	e7d9      	b.n	900116c8 <_ZN8touchgfx3HAL4tickEv+0x128>
90011714:	24026270 	.word	0x24026270
90011718:	24026271 	.word	0x24026271
9001171c:	05f5e100 	.word	0x05f5e100

90011720 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
90011720:	f7f0 b946 	b.w	900019b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90011724 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
90011724:	6581      	str	r1, [r0, #88]	; 0x58
90011726:	301c      	adds	r0, #28
90011728:	f011 ba10 	b.w	90022b4c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

9001172c <_ZN8touchgfx3HAL5touchEll>:
9001172c:	b530      	push	{r4, r5, lr}
9001172e:	b087      	sub	sp, #28
90011730:	4604      	mov	r4, r0
90011732:	a804      	add	r0, sp, #16
90011734:	e9cd 1204 	strd	r1, r2, [sp, #16]
90011738:	f002 fac2 	bl	90013cc0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
9001173c:	9b04      	ldr	r3, [sp, #16]
9001173e:	a906      	add	r1, sp, #24
90011740:	a803      	add	r0, sp, #12
90011742:	f8ad 300c 	strh.w	r3, [sp, #12]
90011746:	9b05      	ldr	r3, [sp, #20]
90011748:	f821 3d0a 	strh.w	r3, [r1, #-10]!
9001174c:	f002 fb0a 	bl	90013d64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
90011750:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
90011754:	f104 001c 	add.w	r0, r4, #28
90011758:	f8bd 200c 	ldrh.w	r2, [sp, #12]
9001175c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
90011760:	b189      	cbz	r1, 90011786 <_ZN8touchgfx3HAL5touchEll+0x5a>
90011762:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
90011766:	9300      	str	r3, [sp, #0]
90011768:	4613      	mov	r3, r2
9001176a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
9001176e:	462a      	mov	r2, r5
90011770:	f011 f9fc 	bl	90022b6c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
90011774:	b128      	cbz	r0, 90011782 <_ZN8touchgfx3HAL5touchEll+0x56>
90011776:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001177a:	65e3      	str	r3, [r4, #92]	; 0x5c
9001177c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90011780:	6623      	str	r3, [r4, #96]	; 0x60
90011782:	b007      	add	sp, #28
90011784:	bd30      	pop	{r4, r5, pc}
90011786:	f011 fa31 	bl	90022bec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
9001178a:	2301      	movs	r3, #1
9001178c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90011790:	e7f1      	b.n	90011776 <_ZN8touchgfx3HAL5touchEll+0x4a>

90011792 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
90011792:	b510      	push	{r4, lr}
90011794:	2b00      	cmp	r3, #0
90011796:	d046      	beq.n	90011826 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90011798:	ea81 0002 	eor.w	r0, r1, r2
9001179c:	07c4      	lsls	r4, r0, #31
9001179e:	d508      	bpl.n	900117b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
900117a0:	440b      	add	r3, r1
900117a2:	3a01      	subs	r2, #1
900117a4:	428b      	cmp	r3, r1
900117a6:	d93e      	bls.n	90011826 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
900117a8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
900117ac:	f801 0b01 	strb.w	r0, [r1], #1
900117b0:	e7f8      	b.n	900117a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
900117b2:	07d0      	lsls	r0, r2, #31
900117b4:	bf42      	ittt	mi
900117b6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
900117ba:	f103 33ff 	addmi.w	r3, r3, #4294967295
900117be:	f801 0b01 	strbmi.w	r0, [r1], #1
900117c2:	2b01      	cmp	r3, #1
900117c4:	d911      	bls.n	900117ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
900117c6:	ea81 0402 	eor.w	r4, r1, r2
900117ca:	4610      	mov	r0, r2
900117cc:	07a4      	lsls	r4, r4, #30
900117ce:	d022      	beq.n	90011816 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
900117d0:	f023 0401 	bic.w	r4, r3, #1
900117d4:	440c      	add	r4, r1
900117d6:	428c      	cmp	r4, r1
900117d8:	4602      	mov	r2, r0
900117da:	d904      	bls.n	900117e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
900117dc:	8812      	ldrh	r2, [r2, #0]
900117de:	3002      	adds	r0, #2
900117e0:	f821 2b02 	strh.w	r2, [r1], #2
900117e4:	e7f7      	b.n	900117d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
900117e6:	f003 0301 	and.w	r3, r3, #1
900117ea:	f023 0003 	bic.w	r0, r3, #3
900117ee:	4408      	add	r0, r1
900117f0:	4288      	cmp	r0, r1
900117f2:	4614      	mov	r4, r2
900117f4:	d904      	bls.n	90011800 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
900117f6:	6824      	ldr	r4, [r4, #0]
900117f8:	3204      	adds	r2, #4
900117fa:	f841 4b04 	str.w	r4, [r1], #4
900117fe:	e7f7      	b.n	900117f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
90011800:	f003 0303 	and.w	r3, r3, #3
90011804:	3a01      	subs	r2, #1
90011806:	440b      	add	r3, r1
90011808:	428b      	cmp	r3, r1
9001180a:	d90c      	bls.n	90011826 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
9001180c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90011810:	f801 0b01 	strb.w	r0, [r1], #1
90011814:	e7f8      	b.n	90011808 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
90011816:	0790      	lsls	r0, r2, #30
90011818:	d0e7      	beq.n	900117ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9001181a:	f832 0b02 	ldrh.w	r0, [r2], #2
9001181e:	3b02      	subs	r3, #2
90011820:	f821 0b02 	strh.w	r0, [r1], #2
90011824:	e7e1      	b.n	900117ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90011826:	2001      	movs	r0, #1
90011828:	bd10      	pop	{r4, pc}

9001182a <_ZN8touchgfx3HAL7noTouchEv>:
9001182a:	b510      	push	{r4, lr}
9001182c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
90011830:	4604      	mov	r4, r0
90011832:	b153      	cbz	r3, 9001184a <_ZN8touchgfx3HAL7noTouchEv+0x20>
90011834:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
90011838:	2101      	movs	r1, #1
9001183a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
9001183e:	301c      	adds	r0, #28
90011840:	f011 f9d4 	bl	90022bec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
90011844:	2300      	movs	r3, #0
90011846:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
9001184a:	bd10      	pop	{r4, pc}

9001184c <_ZN8touchgfx8Drawable5setXYEss>:
9001184c:	b570      	push	{r4, r5, r6, lr}
9001184e:	6803      	ldr	r3, [r0, #0]
90011850:	4604      	mov	r4, r0
90011852:	4615      	mov	r5, r2
90011854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90011856:	4798      	blx	r3
90011858:	6823      	ldr	r3, [r4, #0]
9001185a:	4629      	mov	r1, r5
9001185c:	4620      	mov	r0, r4
9001185e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90011860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011864:	4718      	bx	r3
	...

90011868 <_ZN8touchgfx3HAL3lcdEv>:
90011868:	4b04      	ldr	r3, [pc, #16]	; (9001187c <_ZN8touchgfx3HAL3lcdEv+0x14>)
9001186a:	681b      	ldr	r3, [r3, #0]
9001186c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90011870:	b10a      	cbz	r2, 90011876 <_ZN8touchgfx3HAL3lcdEv+0xe>
90011872:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90011874:	b900      	cbnz	r0, 90011878 <_ZN8touchgfx3HAL3lcdEv+0x10>
90011876:	6898      	ldr	r0, [r3, #8]
90011878:	4770      	bx	lr
9001187a:	bf00      	nop
9001187c:	2402626c 	.word	0x2402626c

90011880 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
90011880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011884:	b085      	sub	sp, #20
90011886:	4604      	mov	r4, r0
90011888:	2000      	movs	r0, #0
9001188a:	4699      	mov	r9, r3
9001188c:	ad04      	add	r5, sp, #16
9001188e:	460f      	mov	r7, r1
90011890:	4690      	mov	r8, r2
90011892:	f845 0d04 	str.w	r0, [r5, #-4]!
90011896:	69a0      	ldr	r0, [r4, #24]
90011898:	6806      	ldr	r6, [r0, #0]
9001189a:	9501      	str	r5, [sp, #4]
9001189c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
900118a0:	9500      	str	r5, [sp, #0]
900118a2:	6835      	ldr	r5, [r6, #0]
900118a4:	47a8      	blx	r5
900118a6:	4d10      	ldr	r5, [pc, #64]	; (900118e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
900118a8:	4606      	mov	r6, r0
900118aa:	f8a5 9000 	strh.w	r9, [r5]
900118ae:	f7ff ffdb 	bl	90011868 <_ZN8touchgfx3HAL3lcdEv>
900118b2:	6803      	ldr	r3, [r0, #0]
900118b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900118b6:	4798      	blx	r3
900118b8:	b128      	cbz	r0, 900118c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
900118ba:	2801      	cmp	r0, #1
900118bc:	d00b      	beq.n	900118d6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
900118be:	4630      	mov	r0, r6
900118c0:	b005      	add	sp, #20
900118c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900118c6:	882b      	ldrh	r3, [r5, #0]
900118c8:	fb08 7203 	mla	r2, r8, r3, r7
900118cc:	9b03      	ldr	r3, [sp, #12]
900118ce:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
900118d2:	63e3      	str	r3, [r4, #60]	; 0x3c
900118d4:	e7f3      	b.n	900118be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
900118d6:	882a      	ldrh	r2, [r5, #0]
900118d8:	9b03      	ldr	r3, [sp, #12]
900118da:	fb08 7202 	mla	r2, r8, r2, r7
900118de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900118e2:	1a9a      	subs	r2, r3, r2
900118e4:	63e2      	str	r2, [r4, #60]	; 0x3c
900118e6:	e7ea      	b.n	900118be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
900118e8:	24026266 	.word	0x24026266

900118ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
900118ec:	b5f0      	push	{r4, r5, r6, r7, lr}
900118ee:	b08b      	sub	sp, #44	; 0x2c
900118f0:	4617      	mov	r7, r2
900118f2:	4604      	mov	r4, r0
900118f4:	460e      	mov	r6, r1
900118f6:	461d      	mov	r5, r3
900118f8:	f7ff ffb6 	bl	90011868 <_ZN8touchgfx3HAL3lcdEv>
900118fc:	6803      	ldr	r3, [r0, #0]
900118fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011900:	4798      	blx	r3
90011902:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90011906:	9007      	str	r0, [sp, #28]
90011908:	4631      	mov	r1, r6
9001190a:	6822      	ldr	r2, [r4, #0]
9001190c:	e9cd 0308 	strd	r0, r3, [sp, #32]
90011910:	4b0c      	ldr	r3, [pc, #48]	; (90011944 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
90011912:	4620      	mov	r0, r4
90011914:	881b      	ldrh	r3, [r3, #0]
90011916:	9306      	str	r3, [sp, #24]
90011918:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
9001191c:	9305      	str	r3, [sp, #20]
9001191e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
90011922:	9304      	str	r3, [sp, #16]
90011924:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011928:	9303      	str	r3, [sp, #12]
9001192a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001192e:	9302      	str	r3, [sp, #8]
90011930:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90011934:	e9cd 5300 	strd	r5, r3, [sp]
90011938:	463b      	mov	r3, r7
9001193a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
9001193c:	2200      	movs	r2, #0
9001193e:	47a8      	blx	r5
90011940:	b00b      	add	sp, #44	; 0x2c
90011942:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011944:	24026266 	.word	0x24026266

90011948 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
90011948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001194c:	4698      	mov	r8, r3
9001194e:	6803      	ldr	r3, [r0, #0]
90011950:	b08b      	sub	sp, #44	; 0x2c
90011952:	4617      	mov	r7, r2
90011954:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
90011956:	460e      	mov	r6, r1
90011958:	4b13      	ldr	r3, [pc, #76]	; (900119a8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
9001195a:	4604      	mov	r4, r0
9001195c:	f8b3 9000 	ldrh.w	r9, [r3]
90011960:	f7ff ff82 	bl	90011868 <_ZN8touchgfx3HAL3lcdEv>
90011964:	6803      	ldr	r3, [r0, #0]
90011966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011968:	4798      	blx	r3
9001196a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
9001196e:	2200      	movs	r2, #0
90011970:	4631      	mov	r1, r6
90011972:	e9cd 0308 	strd	r0, r3, [sp, #32]
90011976:	2302      	movs	r3, #2
90011978:	4620      	mov	r0, r4
9001197a:	e9cd 9306 	strd	r9, r3, [sp, #24]
9001197e:	2301      	movs	r3, #1
90011980:	9305      	str	r3, [sp, #20]
90011982:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
90011986:	9304      	str	r3, [sp, #16]
90011988:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
9001198c:	9303      	str	r3, [sp, #12]
9001198e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011992:	9302      	str	r3, [sp, #8]
90011994:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011998:	e9cd 8300 	strd	r8, r3, [sp]
9001199c:	463b      	mov	r3, r7
9001199e:	47a8      	blx	r5
900119a0:	b00b      	add	sp, #44	; 0x2c
900119a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900119a6:	bf00      	nop
900119a8:	24026266 	.word	0x24026266

900119ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
900119ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900119b0:	4698      	mov	r8, r3
900119b2:	6803      	ldr	r3, [r0, #0]
900119b4:	b087      	sub	sp, #28
900119b6:	460e      	mov	r6, r1
900119b8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
900119ba:	4617      	mov	r7, r2
900119bc:	4b0f      	ldr	r3, [pc, #60]	; (900119fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
900119be:	4604      	mov	r4, r0
900119c0:	f8b3 9000 	ldrh.w	r9, [r3]
900119c4:	f7ff ff50 	bl	90011868 <_ZN8touchgfx3HAL3lcdEv>
900119c8:	6803      	ldr	r3, [r0, #0]
900119ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900119cc:	4798      	blx	r3
900119ce:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
900119d2:	463a      	mov	r2, r7
900119d4:	4631      	mov	r1, r6
900119d6:	f8cd 900c 	str.w	r9, [sp, #12]
900119da:	e9cd 0304 	strd	r0, r3, [sp, #16]
900119de:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
900119e2:	4620      	mov	r0, r4
900119e4:	9302      	str	r3, [sp, #8]
900119e6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
900119ea:	9301      	str	r3, [sp, #4]
900119ec:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
900119f0:	9300      	str	r3, [sp, #0]
900119f2:	4643      	mov	r3, r8
900119f4:	47a8      	blx	r5
900119f6:	b007      	add	sp, #28
900119f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900119fc:	24026266 	.word	0x24026266

90011a00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
90011a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011a04:	4604      	mov	r4, r0
90011a06:	b08f      	sub	sp, #60	; 0x3c
90011a08:	4610      	mov	r0, r2
90011a0a:	460d      	mov	r5, r1
90011a0c:	4691      	mov	r9, r2
90011a0e:	461e      	mov	r6, r3
90011a10:	f005 fade 	bl	90016fd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90011a14:	2800      	cmp	r0, #0
90011a16:	f000 809d 	beq.w	90011b54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
90011a1a:	6823      	ldr	r3, [r4, #0]
90011a1c:	4620      	mov	r0, r4
90011a1e:	f8df b198 	ldr.w	fp, [pc, #408]	; 90011bb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
90011a22:	f10d 0838 	add.w	r8, sp, #56	; 0x38
90011a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90011a28:	4798      	blx	r3
90011a2a:	6823      	ldr	r3, [r4, #0]
90011a2c:	4620      	mov	r0, r4
90011a2e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 90011bbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
90011a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011a34:	4798      	blx	r3
90011a36:	f8bb 3000 	ldrh.w	r3, [fp]
90011a3a:	4f5c      	ldr	r7, [pc, #368]	; (90011bac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011a3c:	9301      	str	r3, [sp, #4]
90011a3e:	f8ba 3000 	ldrh.w	r3, [sl]
90011a42:	f828 9d1c 	strh.w	r9, [r8, #-28]!
90011a46:	4640      	mov	r0, r8
90011a48:	9302      	str	r3, [sp, #8]
90011a4a:	883b      	ldrh	r3, [r7, #0]
90011a4c:	9303      	str	r3, [sp, #12]
90011a4e:	4b58      	ldr	r3, [pc, #352]	; (90011bb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011a50:	881a      	ldrh	r2, [r3, #0]
90011a52:	9305      	str	r3, [sp, #20]
90011a54:	9204      	str	r2, [sp, #16]
90011a56:	f005 fb4f 	bl	900170f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
90011a5a:	8038      	strh	r0, [r7, #0]
90011a5c:	4640      	mov	r0, r8
90011a5e:	f005 fb7f 	bl	90017160 <_ZNK8touchgfx6Bitmap9getHeightEv>
90011a62:	9b05      	ldr	r3, [sp, #20]
90011a64:	b280      	uxth	r0, r0
90011a66:	8018      	strh	r0, [r3, #0]
90011a68:	4b52      	ldr	r3, [pc, #328]	; (90011bb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
90011a6a:	781b      	ldrb	r3, [r3, #0]
90011a6c:	2b00      	cmp	r3, #0
90011a6e:	d174      	bne.n	90011b5a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
90011a70:	883b      	ldrh	r3, [r7, #0]
90011a72:	f8aa 0000 	strh.w	r0, [sl]
90011a76:	f8ab 3000 	strh.w	r3, [fp]
90011a7a:	4648      	mov	r0, r9
90011a7c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
90011a80:	f005 faa6 	bl	90016fd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90011a84:	2200      	movs	r2, #0
90011a86:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
90011a8a:	4611      	mov	r1, r2
90011a8c:	4628      	mov	r0, r5
90011a8e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
90011a92:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
90011a96:	f7ff fed9 	bl	9001184c <_ZN8touchgfx8Drawable5setXYEss>
90011a9a:	2301      	movs	r3, #1
90011a9c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
90011aa0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
90011aa4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90011aa8:	2b00      	cmp	r3, #0
90011aaa:	dd5c      	ble.n	90011b66 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90011aac:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90011ab0:	2b00      	cmp	r3, #0
90011ab2:	dd58      	ble.n	90011b66 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90011ab4:	462a      	mov	r2, r5
90011ab6:	ab0a      	add	r3, sp, #40	; 0x28
90011ab8:	f852 0f04 	ldr.w	r0, [r2, #4]!
90011abc:	6851      	ldr	r1, [r2, #4]
90011abe:	c303      	stmia	r3!, {r0, r1}
90011ac0:	4631      	mov	r1, r6
90011ac2:	a80a      	add	r0, sp, #40	; 0x28
90011ac4:	f7ff fbf2 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
90011ac8:	4b38      	ldr	r3, [pc, #224]	; (90011bac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011aca:	2100      	movs	r1, #0
90011acc:	f9b3 2000 	ldrsh.w	r2, [r3]
90011ad0:	4b37      	ldr	r3, [pc, #220]	; (90011bb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011ad2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
90011ad6:	aa0a      	add	r2, sp, #40	; 0x28
90011ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
90011adc:	910c      	str	r1, [sp, #48]	; 0x30
90011ade:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90011ae2:	ab08      	add	r3, sp, #32
90011ae4:	e892 0003 	ldmia.w	r2, {r0, r1}
90011ae8:	e883 0003 	stmia.w	r3, {r0, r1}
90011aec:	4618      	mov	r0, r3
90011aee:	a90c      	add	r1, sp, #48	; 0x30
90011af0:	f7ff fbdc 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
90011af4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
90011af6:	2b00      	cmp	r3, #0
90011af8:	d13c      	bne.n	90011b74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
90011afa:	2000      	movs	r0, #0
90011afc:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
90011b00:	2600      	movs	r6, #0
90011b02:	696b      	ldr	r3, [r5, #20]
90011b04:	a908      	add	r1, sp, #32
90011b06:	682a      	ldr	r2, [r5, #0]
90011b08:	4628      	mov	r0, r5
90011b0a:	9305      	str	r3, [sp, #20]
90011b0c:	616e      	str	r6, [r5, #20]
90011b0e:	6892      	ldr	r2, [r2, #8]
90011b10:	4790      	blx	r2
90011b12:	9b05      	ldr	r3, [sp, #20]
90011b14:	4652      	mov	r2, sl
90011b16:	4649      	mov	r1, r9
90011b18:	616b      	str	r3, [r5, #20]
90011b1a:	4628      	mov	r0, r5
90011b1c:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
90011b20:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
90011b24:	f7ff fe92 	bl	9001184c <_ZN8touchgfx8Drawable5setXYEss>
90011b28:	9a01      	ldr	r2, [sp, #4]
90011b2a:	4b23      	ldr	r3, [pc, #140]	; (90011bb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
90011b2c:	4620      	mov	r0, r4
90011b2e:	801a      	strh	r2, [r3, #0]
90011b30:	9a02      	ldr	r2, [sp, #8]
90011b32:	4b22      	ldr	r3, [pc, #136]	; (90011bbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
90011b34:	801a      	strh	r2, [r3, #0]
90011b36:	9a03      	ldr	r2, [sp, #12]
90011b38:	4b1c      	ldr	r3, [pc, #112]	; (90011bac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011b3a:	801a      	strh	r2, [r3, #0]
90011b3c:	4b1c      	ldr	r3, [pc, #112]	; (90011bb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011b3e:	9a04      	ldr	r2, [sp, #16]
90011b40:	801a      	strh	r2, [r3, #0]
90011b42:	6823      	ldr	r3, [r4, #0]
90011b44:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
90011b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90011b4a:	4798      	blx	r3
90011b4c:	6823      	ldr	r3, [r4, #0]
90011b4e:	4620      	mov	r0, r4
90011b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011b52:	4798      	blx	r3
90011b54:	b00f      	add	sp, #60	; 0x3c
90011b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011b5a:	883b      	ldrh	r3, [r7, #0]
90011b5c:	f8ab 0000 	strh.w	r0, [fp]
90011b60:	f8aa 3000 	strh.w	r3, [sl]
90011b64:	e789      	b.n	90011a7a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
90011b66:	462a      	mov	r2, r5
90011b68:	ab0a      	add	r3, sp, #40	; 0x28
90011b6a:	f852 0f04 	ldr.w	r0, [r2, #4]!
90011b6e:	6851      	ldr	r1, [r2, #4]
90011b70:	c303      	stmia	r3!, {r0, r1}
90011b72:	e7a9      	b.n	90011ac8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
90011b74:	a807      	add	r0, sp, #28
90011b76:	f005 fc2f 	bl	900173d8 <_ZNK8touchgfx6Bitmap9getFormatEv>
90011b7a:	4606      	mov	r6, r0
90011b7c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90011b7e:	6803      	ldr	r3, [r0, #0]
90011b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011b82:	4798      	blx	r3
90011b84:	4286      	cmp	r6, r0
90011b86:	d1b8      	bne.n	90011afa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
90011b88:	f7ff fe6e 	bl	90011868 <_ZN8touchgfx3HAL3lcdEv>
90011b8c:	6803      	ldr	r3, [r0, #0]
90011b8e:	4606      	mov	r6, r0
90011b90:	a807      	add	r0, sp, #28
90011b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90011b94:	9305      	str	r3, [sp, #20]
90011b96:	f005 fc1f 	bl	900173d8 <_ZNK8touchgfx6Bitmap9getFormatEv>
90011b9a:	9b05      	ldr	r3, [sp, #20]
90011b9c:	4601      	mov	r1, r0
90011b9e:	4630      	mov	r0, r6
90011ba0:	4798      	blx	r3
90011ba2:	f080 0001 	eor.w	r0, r0, #1
90011ba6:	b2c0      	uxtb	r0, r0
90011ba8:	e7a8      	b.n	90011afc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
90011baa:	bf00      	nop
90011bac:	24026260 	.word	0x24026260
90011bb0:	24026262 	.word	0x24026262
90011bb4:	24026264 	.word	0x24026264
90011bb8:	24026266 	.word	0x24026266
90011bbc:	24026268 	.word	0x24026268

90011bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
90011bc0:	4b07      	ldr	r3, [pc, #28]	; (90011be0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
90011bc2:	b510      	push	{r4, lr}
90011bc4:	781b      	ldrb	r3, [r3, #0]
90011bc6:	4604      	mov	r4, r0
90011bc8:	b13b      	cbz	r3, 90011bda <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90011bca:	6803      	ldr	r3, [r0, #0]
90011bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90011bce:	4798      	blx	r3
90011bd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90011bd2:	4283      	cmp	r3, r0
90011bd4:	d101      	bne.n	90011bda <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
90011bd6:	6c20      	ldr	r0, [r4, #64]	; 0x40
90011bd8:	bd10      	pop	{r4, pc}
90011bda:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90011bdc:	e7fc      	b.n	90011bd8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
90011bde:	bf00      	nop
90011be0:	2402626a 	.word	0x2402626a

90011be4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
90011be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011be8:	461d      	mov	r5, r3
90011bea:	b08a      	sub	sp, #40	; 0x28
90011bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
90011bf0:	4690      	mov	r8, r2
90011bf2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
90011bf6:	2400      	movs	r4, #0
90011bf8:	4607      	mov	r7, r0
90011bfa:	fb06 8505 	mla	r5, r6, r5, r8
90011bfe:	9404      	str	r4, [sp, #16]
90011c00:	f88d 4020 	strb.w	r4, [sp, #32]
90011c04:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011c08:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90011c0c:	f8ad 3018 	strh.w	r3, [sp, #24]
90011c10:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011c14:	f8ad 301a 	strh.w	r3, [sp, #26]
90011c18:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011c1c:	f8ad 301c 	strh.w	r3, [sp, #28]
90011c20:	f7ff ffce 	bl	90011bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011c24:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90011c28:	6878      	ldr	r0, [r7, #4]
90011c2a:	f8ad 601e 	strh.w	r6, [sp, #30]
90011c2e:	a901      	add	r1, sp, #4
90011c30:	9505      	str	r5, [sp, #20]
90011c32:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011c36:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
90011c3a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90011c3e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
90011c42:	6803      	ldr	r3, [r0, #0]
90011c44:	685b      	ldr	r3, [r3, #4]
90011c46:	4798      	blx	r3
90011c48:	b00a      	add	sp, #40	; 0x28
90011c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011c4e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
90011c4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011c52:	b08b      	sub	sp, #44	; 0x2c
90011c54:	2400      	movs	r4, #0
90011c56:	4691      	mov	r9, r2
90011c58:	461d      	mov	r5, r3
90011c5a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
90011c5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
90011c62:	4688      	mov	r8, r1
90011c64:	4607      	mov	r7, r0
90011c66:	9404      	str	r4, [sp, #16]
90011c68:	fb06 9505 	mla	r5, r6, r5, r9
90011c6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
90011c70:	f7ff ffa6 	bl	90011bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011c74:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011c78:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90011c7c:	6878      	ldr	r0, [r7, #4]
90011c7e:	f8ad 3018 	strh.w	r3, [sp, #24]
90011c82:	a901      	add	r1, sp, #4
90011c84:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011c88:	9505      	str	r5, [sp, #20]
90011c8a:	f8ad 301a 	strh.w	r3, [sp, #26]
90011c8e:	f8ad 401c 	strh.w	r4, [sp, #28]
90011c92:	f8ad 601e 	strh.w	r6, [sp, #30]
90011c96:	f8cd 8010 	str.w	r8, [sp, #16]
90011c9a:	f8ad 4020 	strh.w	r4, [sp, #32]
90011c9e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011ca2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90011ca6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
90011caa:	6803      	ldr	r3, [r0, #0]
90011cac:	685b      	ldr	r3, [r3, #4]
90011cae:	4798      	blx	r3
90011cb0:	b00b      	add	sp, #44	; 0x2c
90011cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

90011cb8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
90011cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011cbc:	b08a      	sub	sp, #40	; 0x28
90011cbe:	4698      	mov	r8, r3
90011cc0:	2300      	movs	r3, #0
90011cc2:	4606      	mov	r6, r0
90011cc4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
90011cc8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
90011ccc:	2d0b      	cmp	r5, #11
90011cce:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
90011cd2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
90011cd6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
90011cda:	9304      	str	r3, [sp, #16]
90011cdc:	d137      	bne.n	90011d4e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
90011cde:	2380      	movs	r3, #128	; 0x80
90011ce0:	f88d 0020 	strb.w	r0, [sp, #32]
90011ce4:	4630      	mov	r0, r6
90011ce6:	9203      	str	r2, [sp, #12]
90011ce8:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011cec:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011cf0:	f8ad 3018 	strh.w	r3, [sp, #24]
90011cf4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011cf8:	f8ad 301a 	strh.w	r3, [sp, #26]
90011cfc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011d00:	f8ad 301c 	strh.w	r3, [sp, #28]
90011d04:	f7ff ff5c 	bl	90011bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011d08:	2c0b      	cmp	r4, #11
90011d0a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
90011d0e:	f8ad 701e 	strh.w	r7, [sp, #30]
90011d12:	bf94      	ite	ls
90011d14:	4b19      	ldrls	r3, [pc, #100]	; (90011d7c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
90011d16:	2100      	movhi	r1, #0
90011d18:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
90011d1c:	bf98      	it	ls
90011d1e:	5d19      	ldrbls	r1, [r3, r4]
90011d20:	fb02 8307 	mla	r3, r2, r7, r8
90011d24:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011d28:	10c9      	asrs	r1, r1, #3
90011d2a:	fb01 0003 	mla	r0, r1, r3, r0
90011d2e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
90011d32:	a901      	add	r1, sp, #4
90011d34:	9005      	str	r0, [sp, #20]
90011d36:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90011d3a:	2300      	movs	r3, #0
90011d3c:	6870      	ldr	r0, [r6, #4]
90011d3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90011d42:	6803      	ldr	r3, [r0, #0]
90011d44:	685b      	ldr	r3, [r3, #4]
90011d46:	4798      	blx	r3
90011d48:	b00a      	add	sp, #40	; 0x28
90011d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011d4e:	2d02      	cmp	r5, #2
90011d50:	d109      	bne.n	90011d66 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
90011d52:	28ff      	cmp	r0, #255	; 0xff
90011d54:	d105      	bne.n	90011d62 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
90011d56:	f1bc 0f00 	cmp.w	ip, #0
90011d5a:	bf14      	ite	ne
90011d5c:	2340      	movne	r3, #64	; 0x40
90011d5e:	2320      	moveq	r3, #32
90011d60:	e7be      	b.n	90011ce0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011d62:	2340      	movs	r3, #64	; 0x40
90011d64:	e7bc      	b.n	90011ce0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011d66:	28ff      	cmp	r0, #255	; 0xff
90011d68:	d105      	bne.n	90011d76 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
90011d6a:	f1bc 0f00 	cmp.w	ip, #0
90011d6e:	bf14      	ite	ne
90011d70:	2304      	movne	r3, #4
90011d72:	2301      	moveq	r3, #1
90011d74:	e7b4      	b.n	90011ce0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011d76:	2304      	movs	r3, #4
90011d78:	e7b2      	b.n	90011ce0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011d7a:	bf00      	nop
90011d7c:	90026b04 	.word	0x90026b04

90011d80 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
90011d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011d84:	b08b      	sub	sp, #44	; 0x2c
90011d86:	461d      	mov	r5, r3
90011d88:	2400      	movs	r4, #0
90011d8a:	4688      	mov	r8, r1
90011d8c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
90011d90:	4693      	mov	fp, r2
90011d92:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
90011d96:	4607      	mov	r7, r0
90011d98:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90011d9c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
90011da0:	9404      	str	r4, [sp, #16]
90011da2:	bf14      	ite	ne
90011da4:	2308      	movne	r3, #8
90011da6:	2302      	moveq	r3, #2
90011da8:	fb05 b50a 	mla	r5, r5, sl, fp
90011dac:	e9cd 3401 	strd	r3, r4, [sp, #4]
90011db0:	f7ff ff06 	bl	90011bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011db4:	2e0b      	cmp	r6, #11
90011db6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90011dba:	a901      	add	r1, sp, #4
90011dbc:	bf98      	it	ls
90011dbe:	4b13      	ldrls	r3, [pc, #76]	; (90011e0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
90011dc0:	f8ad a01e 	strh.w	sl, [sp, #30]
90011dc4:	bf98      	it	ls
90011dc6:	5d9c      	ldrbls	r4, [r3, r6]
90011dc8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90011dcc:	10e4      	asrs	r4, r4, #3
90011dce:	f8cd 8010 	str.w	r8, [sp, #16]
90011dd2:	f8ad 3018 	strh.w	r3, [sp, #24]
90011dd6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90011dda:	fb04 0405 	mla	r4, r4, r5, r0
90011dde:	6878      	ldr	r0, [r7, #4]
90011de0:	f8ad 301a 	strh.w	r3, [sp, #26]
90011de4:	2300      	movs	r3, #0
90011de6:	9405      	str	r4, [sp, #20]
90011de8:	f8ad 301c 	strh.w	r3, [sp, #28]
90011dec:	f88d 9020 	strb.w	r9, [sp, #32]
90011df0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
90011df4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90011df8:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
90011dfc:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
90011e00:	6803      	ldr	r3, [r0, #0]
90011e02:	685b      	ldr	r3, [r3, #4]
90011e04:	4798      	blx	r3
90011e06:	b00b      	add	sp, #44	; 0x2c
90011e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011e0c:	90026b04 	.word	0x90026b04

90011e10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
90011e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011e14:	461e      	mov	r6, r3
90011e16:	4b0a      	ldr	r3, [pc, #40]	; (90011e40 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
90011e18:	460f      	mov	r7, r1
90011e1a:	4690      	mov	r8, r2
90011e1c:	881d      	ldrh	r5, [r3, #0]
90011e1e:	f7ff fd23 	bl	90011868 <_ZN8touchgfx3HAL3lcdEv>
90011e22:	6803      	ldr	r3, [r0, #0]
90011e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011e26:	4798      	blx	r3
90011e28:	280b      	cmp	r0, #11
90011e2a:	bf96      	itet	ls
90011e2c:	4b05      	ldrls	r3, [pc, #20]	; (90011e44 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
90011e2e:	2400      	movhi	r4, #0
90011e30:	5c1c      	ldrbls	r4, [r3, r0]
90011e32:	fb08 7005 	mla	r0, r8, r5, r7
90011e36:	10e4      	asrs	r4, r4, #3
90011e38:	fb04 6000 	mla	r0, r4, r0, r6
90011e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011e40:	24026266 	.word	0x24026266
90011e44:	90026b04 	.word	0x90026b04

90011e48 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
90011e48:	b5f0      	push	{r4, r5, r6, r7, lr}
90011e4a:	b08b      	sub	sp, #44	; 0x2c
90011e4c:	461f      	mov	r7, r3
90011e4e:	4604      	mov	r4, r0
90011e50:	4616      	mov	r6, r2
90011e52:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90011e56:	2500      	movs	r5, #0
90011e58:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011e5c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90011e60:	9504      	str	r5, [sp, #16]
90011e62:	f8ad 3018 	strh.w	r3, [sp, #24]
90011e66:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011e6a:	f8ad 301a 	strh.w	r3, [sp, #26]
90011e6e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011e72:	f8ad 301c 	strh.w	r3, [sp, #28]
90011e76:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90011e7a:	f88d 3020 	strb.w	r3, [sp, #32]
90011e7e:	f7ff fe9f 	bl	90011bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011e82:	463a      	mov	r2, r7
90011e84:	4631      	mov	r1, r6
90011e86:	4603      	mov	r3, r0
90011e88:	4620      	mov	r0, r4
90011e8a:	f7ff ffc1 	bl	90011e10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011e8e:	4b0e      	ldr	r3, [pc, #56]	; (90011ec8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
90011e90:	9005      	str	r0, [sp, #20]
90011e92:	881b      	ldrh	r3, [r3, #0]
90011e94:	f8ad 301e 	strh.w	r3, [sp, #30]
90011e98:	f7ff fce6 	bl	90011868 <_ZN8touchgfx3HAL3lcdEv>
90011e9c:	6803      	ldr	r3, [r0, #0]
90011e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011ea0:	4798      	blx	r3
90011ea2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90011ea4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
90011ea8:	a901      	add	r1, sp, #4
90011eaa:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
90011eae:	9304      	str	r3, [sp, #16]
90011eb0:	6860      	ldr	r0, [r4, #4]
90011eb2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90011eb6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
90011eba:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90011ebe:	6803      	ldr	r3, [r0, #0]
90011ec0:	685b      	ldr	r3, [r3, #4]
90011ec2:	4798      	blx	r3
90011ec4:	b00b      	add	sp, #44	; 0x2c
90011ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011ec8:	24026266 	.word	0x24026266

90011ecc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
90011ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
90011ece:	b08d      	sub	sp, #52	; 0x34
90011ed0:	2501      	movs	r5, #1
90011ed2:	4604      	mov	r4, r0
90011ed4:	466b      	mov	r3, sp
90011ed6:	9503      	str	r5, [sp, #12]
90011ed8:	e883 0006 	stmia.w	r3, {r1, r2}
90011edc:	2300      	movs	r3, #0
90011ede:	f8bd 6000 	ldrh.w	r6, [sp]
90011ee2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
90011ee6:	9306      	str	r3, [sp, #24]
90011ee8:	6803      	ldr	r3, [r0, #0]
90011eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90011eec:	4798      	blx	r3
90011eee:	463a      	mov	r2, r7
90011ef0:	4631      	mov	r1, r6
90011ef2:	4603      	mov	r3, r0
90011ef4:	4620      	mov	r0, r4
90011ef6:	f7ff ff8b 	bl	90011e10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011efa:	6c63      	ldr	r3, [r4, #68]	; 0x44
90011efc:	9004      	str	r0, [sp, #16]
90011efe:	9307      	str	r3, [sp, #28]
90011f00:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90011f04:	f8ad 3020 	strh.w	r3, [sp, #32]
90011f08:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90011f0c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90011f10:	4b0e      	ldr	r3, [pc, #56]	; (90011f4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
90011f12:	881b      	ldrh	r3, [r3, #0]
90011f14:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90011f18:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90011f1c:	f7ff fca4 	bl	90011868 <_ZN8touchgfx3HAL3lcdEv>
90011f20:	6803      	ldr	r3, [r0, #0]
90011f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011f24:	4798      	blx	r3
90011f26:	23ff      	movs	r3, #255	; 0xff
90011f28:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90011f2c:	a903      	add	r1, sp, #12
90011f2e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90011f32:	6860      	ldr	r0, [r4, #4]
90011f34:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90011f38:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90011f3c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90011f40:	6803      	ldr	r3, [r0, #0]
90011f42:	685b      	ldr	r3, [r3, #4]
90011f44:	4798      	blx	r3
90011f46:	6c60      	ldr	r0, [r4, #68]	; 0x44
90011f48:	b00d      	add	sp, #52	; 0x34
90011f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011f4c:	24026266 	.word	0x24026266

90011f50 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
90011f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011f54:	b08c      	sub	sp, #48	; 0x30
90011f56:	461e      	mov	r6, r3
90011f58:	2300      	movs	r3, #0
90011f5a:	4604      	mov	r4, r0
90011f5c:	466d      	mov	r5, sp
90011f5e:	9306      	str	r3, [sp, #24]
90011f60:	6803      	ldr	r3, [r0, #0]
90011f62:	e885 0006 	stmia.w	r5, {r1, r2}
90011f66:	2501      	movs	r5, #1
90011f68:	f8bd 7000 	ldrh.w	r7, [sp]
90011f6c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
90011f70:	9503      	str	r5, [sp, #12]
90011f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90011f74:	4798      	blx	r3
90011f76:	4642      	mov	r2, r8
90011f78:	4639      	mov	r1, r7
90011f7a:	4603      	mov	r3, r0
90011f7c:	4620      	mov	r0, r4
90011f7e:	f7ff ff47 	bl	90011e10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011f82:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90011f86:	9004      	str	r0, [sp, #16]
90011f88:	f8ad 3020 	strh.w	r3, [sp, #32]
90011f8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90011f90:	9607      	str	r6, [sp, #28]
90011f92:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90011f96:	4b10      	ldr	r3, [pc, #64]	; (90011fd8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
90011f98:	881b      	ldrh	r3, [r3, #0]
90011f9a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90011f9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
90011fa0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90011fa4:	f7ff fc60 	bl	90011868 <_ZN8touchgfx3HAL3lcdEv>
90011fa8:	6803      	ldr	r3, [r0, #0]
90011faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011fac:	4798      	blx	r3
90011fae:	23ff      	movs	r3, #255	; 0xff
90011fb0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90011fb4:	a903      	add	r1, sp, #12
90011fb6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90011fba:	6860      	ldr	r0, [r4, #4]
90011fbc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90011fc0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90011fc4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90011fc8:	6803      	ldr	r3, [r0, #0]
90011fca:	685b      	ldr	r3, [r3, #4]
90011fcc:	4798      	blx	r3
90011fce:	4630      	mov	r0, r6
90011fd0:	b00c      	add	sp, #48	; 0x30
90011fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011fd6:	bf00      	nop
90011fd8:	24026266 	.word	0x24026266

90011fdc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
90011fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
90011fde:	b085      	sub	sp, #20
90011fe0:	4605      	mov	r5, r0
90011fe2:	ac02      	add	r4, sp, #8
90011fe4:	e884 0006 	stmia.w	r4, {r1, r2}
90011fe8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
90011fec:	f8bd 700a 	ldrh.w	r7, [sp, #10]
90011ff0:	f7ff fde6 	bl	90011bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011ff4:	4631      	mov	r1, r6
90011ff6:	4603      	mov	r3, r0
90011ff8:	463a      	mov	r2, r7
90011ffa:	4628      	mov	r0, r5
90011ffc:	f7ff ff08 	bl	90011e10 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90012000:	4a05      	ldr	r2, [pc, #20]	; (90012018 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
90012002:	682b      	ldr	r3, [r5, #0]
90012004:	8812      	ldrh	r2, [r2, #0]
90012006:	9200      	str	r2, [sp, #0]
90012008:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001200a:	4603      	mov	r3, r0
9001200c:	4628      	mov	r0, r5
9001200e:	e894 0006 	ldmia.w	r4, {r1, r2}
90012012:	47b0      	blx	r6
90012014:	b005      	add	sp, #20
90012016:	bdf0      	pop	{r4, r5, r6, r7, pc}
90012018:	24026266 	.word	0x24026266

9001201c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
9001201c:	b570      	push	{r4, r5, r6, lr}
9001201e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
90012022:	4604      	mov	r4, r0
90012024:	b19b      	cbz	r3, 9001204e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
90012026:	2002      	movs	r0, #2
90012028:	f7ee fafc 	bl	90000624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
9001202c:	2300      	movs	r3, #0
9001202e:	4620      	mov	r0, r4
90012030:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90012034:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
90012038:	6823      	ldr	r3, [r4, #0]
9001203a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
9001203e:	f7ff fdbf 	bl	90011bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90012042:	4601      	mov	r1, r0
90012044:	4620      	mov	r0, r4
90012046:	462b      	mov	r3, r5
90012048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001204c:	4718      	bx	r3
9001204e:	bd70      	pop	{r4, r5, r6, pc}

90012050 <_ZN8touchgfx3HAL12setMCUActiveEb>:
90012050:	b570      	push	{r4, r5, r6, lr}
90012052:	4605      	mov	r5, r0
90012054:	460c      	mov	r4, r1
90012056:	2003      	movs	r0, #3
90012058:	b149      	cbz	r1, 9001206e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
9001205a:	f7ee fa7b 	bl	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
9001205e:	6928      	ldr	r0, [r5, #16]
90012060:	b168      	cbz	r0, 9001207e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90012062:	6803      	ldr	r3, [r0, #0]
90012064:	2101      	movs	r1, #1
90012066:	695b      	ldr	r3, [r3, #20]
90012068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001206c:	4718      	bx	r3
9001206e:	f7ee faa5 	bl	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90012072:	6928      	ldr	r0, [r5, #16]
90012074:	b118      	cbz	r0, 9001207e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90012076:	6803      	ldr	r3, [r0, #0]
90012078:	4621      	mov	r1, r4
9001207a:	695b      	ldr	r3, [r3, #20]
9001207c:	e7f4      	b.n	90012068 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
9001207e:	bd70      	pop	{r4, r5, r6, pc}

90012080 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
90012080:	b538      	push	{r3, r4, r5, lr}
90012082:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
90012086:	4604      	mov	r4, r0
90012088:	460d      	mov	r5, r1
9001208a:	428b      	cmp	r3, r1
9001208c:	d006      	beq.n	9001209c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
9001208e:	6803      	ldr	r3, [r0, #0]
90012090:	b929      	cbnz	r1, 9001209e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
90012092:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
90012096:	4798      	blx	r3
90012098:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
9001209c:	bd38      	pop	{r3, r4, r5, pc}
9001209e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
900120a2:	e7f8      	b.n	90012096 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

900120a4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
900120a4:	4b0d      	ldr	r3, [pc, #52]	; (900120dc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
900120a6:	b510      	push	{r4, lr}
900120a8:	781b      	ldrb	r3, [r3, #0]
900120aa:	4604      	mov	r4, r0
900120ac:	b95b      	cbnz	r3, 900120c6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900120ae:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
900120b2:	2b02      	cmp	r3, #2
900120b4:	d007      	beq.n	900120c6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900120b6:	6840      	ldr	r0, [r0, #4]
900120b8:	f000 f900 	bl	900122bc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
900120bc:	b118      	cbz	r0, 900120c6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900120be:	6862      	ldr	r2, [r4, #4]
900120c0:	7a53      	ldrb	r3, [r2, #9]
900120c2:	2b00      	cmp	r3, #0
900120c4:	d0fc      	beq.n	900120c0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
900120c6:	f7ef fc6b 	bl	900019a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
900120ca:	4620      	mov	r0, r4
900120cc:	2100      	movs	r1, #0
900120ce:	f7ff ffd7 	bl	90012080 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
900120d2:	4620      	mov	r0, r4
900120d4:	f7ff fd74 	bl	90011bc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900120d8:	bd10      	pop	{r4, pc}
900120da:	bf00      	nop
900120dc:	2402626a 	.word	0x2402626a

900120e0 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
900120e0:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
900120e4:	1a13      	subs	r3, r2, r0
900120e6:	4258      	negs	r0, r3
900120e8:	4158      	adcs	r0, r3
900120ea:	4770      	bx	lr

900120ec <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
900120ec:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
900120f0:	1a9b      	subs	r3, r3, r2
900120f2:	2b00      	cmp	r3, #0
900120f4:	bfdc      	itt	le
900120f6:	6882      	ldrle	r2, [r0, #8]
900120f8:	189b      	addle	r3, r3, r2
900120fa:	2b01      	cmp	r3, #1
900120fc:	bfcc      	ite	gt
900120fe:	2000      	movgt	r0, #0
90012100:	2001      	movle	r0, #1
90012102:	4770      	bx	lr

90012104 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
90012104:	6902      	ldr	r2, [r0, #16]
90012106:	6843      	ldr	r3, [r0, #4]
90012108:	2024      	movs	r0, #36	; 0x24
9001210a:	fb00 3002 	mla	r0, r0, r2, r3
9001210e:	4770      	bx	lr

90012110 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
90012110:	6803      	ldr	r3, [r0, #0]
90012112:	691b      	ldr	r3, [r3, #16]
90012114:	4718      	bx	r3

90012116 <_ZN8touchgfx13DMA_Interface7executeEv>:
90012116:	2301      	movs	r3, #1
90012118:	b570      	push	{r4, r5, r6, lr}
9001211a:	7203      	strb	r3, [r0, #8]
9001211c:	4604      	mov	r4, r0
9001211e:	6840      	ldr	r0, [r0, #4]
90012120:	6803      	ldr	r3, [r0, #0]
90012122:	699b      	ldr	r3, [r3, #24]
90012124:	4798      	blx	r3
90012126:	6803      	ldr	r3, [r0, #0]
90012128:	4605      	mov	r5, r0
9001212a:	2b40      	cmp	r3, #64	; 0x40
9001212c:	d00c      	beq.n	90012148 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
9001212e:	d810      	bhi.n	90012152 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
90012130:	2b04      	cmp	r3, #4
90012132:	d01d      	beq.n	90012170 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
90012134:	d804      	bhi.n	90012140 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
90012136:	2b01      	cmp	r3, #1
90012138:	d006      	beq.n	90012148 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
9001213a:	2b02      	cmp	r3, #2
9001213c:	d02c      	beq.n	90012198 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
9001213e:	bd70      	pop	{r4, r5, r6, pc}
90012140:	2b08      	cmp	r3, #8
90012142:	d01d      	beq.n	90012180 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
90012144:	2b20      	cmp	r3, #32
90012146:	d1fa      	bne.n	9001213e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
90012148:	6823      	ldr	r3, [r4, #0]
9001214a:	4620      	mov	r0, r4
9001214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001214e:	4798      	blx	r3
90012150:	e013      	b.n	9001217a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
90012152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90012156:	d0f7      	beq.n	90012148 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90012158:	d804      	bhi.n	90012164 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
9001215a:	2b80      	cmp	r3, #128	; 0x80
9001215c:	d0f4      	beq.n	90012148 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
9001215e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90012162:	e7f0      	b.n	90012146 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
90012164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90012168:	d0ee      	beq.n	90012148 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
9001216a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
9001216e:	e7e5      	b.n	9001213c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
90012170:	6823      	ldr	r3, [r4, #0]
90012172:	7f01      	ldrb	r1, [r0, #28]
90012174:	4620      	mov	r0, r4
90012176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90012178:	4798      	blx	r3
9001217a:	6823      	ldr	r3, [r4, #0]
9001217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001217e:	e006      	b.n	9001218e <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
90012180:	6823      	ldr	r3, [r4, #0]
90012182:	7f01      	ldrb	r1, [r0, #28]
90012184:	4620      	mov	r0, r4
90012186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90012188:	4798      	blx	r3
9001218a:	6823      	ldr	r3, [r4, #0]
9001218c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9001218e:	4629      	mov	r1, r5
90012190:	4620      	mov	r0, r4
90012192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012196:	4718      	bx	r3
90012198:	6823      	ldr	r3, [r4, #0]
9001219a:	4620      	mov	r0, r4
9001219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001219e:	4798      	blx	r3
900121a0:	e7f3      	b.n	9001218a <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

900121a2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
900121a2:	4770      	bx	lr

900121a4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
900121a4:	4770      	bx	lr

900121a6 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
900121a6:	4770      	bx	lr

900121a8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
900121a8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
900121ac:	b510      	push	{r4, lr}
900121ae:	1ad2      	subs	r2, r2, r3
900121b0:	2a00      	cmp	r2, #0
900121b2:	bfdc      	itt	le
900121b4:	6884      	ldrle	r4, [r0, #8]
900121b6:	1912      	addle	r2, r2, r4
900121b8:	2a01      	cmp	r2, #1
900121ba:	dd16      	ble.n	900121ea <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
900121bc:	6842      	ldr	r2, [r0, #4]
900121be:	2424      	movs	r4, #36	; 0x24
900121c0:	fb04 2303 	mla	r3, r4, r3, r2
900121c4:	f101 0220 	add.w	r2, r1, #32
900121c8:	f851 4b04 	ldr.w	r4, [r1], #4
900121cc:	4291      	cmp	r1, r2
900121ce:	f843 4b04 	str.w	r4, [r3], #4
900121d2:	d1f9      	bne.n	900121c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
900121d4:	780a      	ldrb	r2, [r1, #0]
900121d6:	701a      	strb	r2, [r3, #0]
900121d8:	68c3      	ldr	r3, [r0, #12]
900121da:	6882      	ldr	r2, [r0, #8]
900121dc:	f3bf 8f5b 	dmb	ish
900121e0:	3301      	adds	r3, #1
900121e2:	429a      	cmp	r2, r3
900121e4:	bfd8      	it	le
900121e6:	1a9b      	suble	r3, r3, r2
900121e8:	60c3      	str	r3, [r0, #12]
900121ea:	bd10      	pop	{r4, pc}

900121ec <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
900121ec:	6903      	ldr	r3, [r0, #16]
900121ee:	6882      	ldr	r2, [r0, #8]
900121f0:	f3bf 8f5b 	dmb	ish
900121f4:	3301      	adds	r3, #1
900121f6:	429a      	cmp	r2, r3
900121f8:	bfd8      	it	le
900121fa:	1a9b      	suble	r3, r3, r2
900121fc:	6103      	str	r3, [r0, #16]
900121fe:	4770      	bx	lr

90012200 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
90012200:	b570      	push	{r4, r5, r6, lr}
90012202:	4604      	mov	r4, r0
90012204:	460e      	mov	r6, r1
90012206:	6860      	ldr	r0, [r4, #4]
90012208:	6803      	ldr	r3, [r0, #0]
9001220a:	685b      	ldr	r3, [r3, #4]
9001220c:	4798      	blx	r3
9001220e:	2800      	cmp	r0, #0
90012210:	d1f9      	bne.n	90012206 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
90012212:	4d0d      	ldr	r5, [pc, #52]	; (90012248 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
90012214:	6828      	ldr	r0, [r5, #0]
90012216:	6803      	ldr	r3, [r0, #0]
90012218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9001221a:	4798      	blx	r3
9001221c:	f7ef fbce 	bl	900019bc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
90012220:	6828      	ldr	r0, [r5, #0]
90012222:	2101      	movs	r1, #1
90012224:	f7ff ff2c 	bl	90012080 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90012228:	6860      	ldr	r0, [r4, #4]
9001222a:	4631      	mov	r1, r6
9001222c:	6803      	ldr	r3, [r0, #0]
9001222e:	689b      	ldr	r3, [r3, #8]
90012230:	4798      	blx	r3
90012232:	6823      	ldr	r3, [r4, #0]
90012234:	4620      	mov	r0, r4
90012236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012238:	4798      	blx	r3
9001223a:	6828      	ldr	r0, [r5, #0]
9001223c:	6803      	ldr	r3, [r0, #0]
9001223e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90012244:	4718      	bx	r3
90012246:	bf00      	nop
90012248:	2402626c 	.word	0x2402626c

9001224c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
9001224c:	b508      	push	{r3, lr}
9001224e:	f7ef fba7 	bl	900019a0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90012252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
90012256:	f7ef bbab 	b.w	900019b0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

9001225a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
9001225a:	b510      	push	{r4, lr}
9001225c:	4604      	mov	r4, r0
9001225e:	2114      	movs	r1, #20
90012260:	f010 fd2b 	bl	90022cba <_ZdlPvj>
90012264:	4620      	mov	r0, r4
90012266:	bd10      	pop	{r4, pc}

90012268 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
90012268:	b570      	push	{r4, r5, r6, lr}
9001226a:	4604      	mov	r4, r0
9001226c:	6840      	ldr	r0, [r0, #4]
9001226e:	6803      	ldr	r3, [r0, #0]
90012270:	681b      	ldr	r3, [r3, #0]
90012272:	4798      	blx	r3
90012274:	4605      	mov	r5, r0
90012276:	b930      	cbnz	r0, 90012286 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90012278:	7a23      	ldrb	r3, [r4, #8]
9001227a:	b123      	cbz	r3, 90012286 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
9001227c:	6860      	ldr	r0, [r4, #4]
9001227e:	6803      	ldr	r3, [r0, #0]
90012280:	695b      	ldr	r3, [r3, #20]
90012282:	4798      	blx	r3
90012284:	7225      	strb	r5, [r4, #8]
90012286:	6860      	ldr	r0, [r4, #4]
90012288:	6803      	ldr	r3, [r0, #0]
9001228a:	681b      	ldr	r3, [r3, #0]
9001228c:	4798      	blx	r3
9001228e:	b928      	cbnz	r0, 9001229c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
90012290:	6823      	ldr	r3, [r4, #0]
90012292:	4620      	mov	r0, r4
90012294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90012296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001229a:	4718      	bx	r3
9001229c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900122a0:	f7ef bb94 	b.w	900019cc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

900122a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
900122a4:	b510      	push	{r4, lr}
900122a6:	6082      	str	r2, [r0, #8]
900122a8:	2200      	movs	r2, #0
900122aa:	4c03      	ldr	r4, [pc, #12]	; (900122b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
900122ac:	e9c0 2203 	strd	r2, r2, [r0, #12]
900122b0:	e9c0 4100 	strd	r4, r1, [r0]
900122b4:	bd10      	pop	{r4, pc}
900122b6:	bf00      	nop
900122b8:	90026b18 	.word	0x90026b18

900122bc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
900122bc:	6840      	ldr	r0, [r0, #4]
900122be:	6803      	ldr	r3, [r0, #0]
900122c0:	681b      	ldr	r3, [r3, #0]
900122c2:	4718      	bx	r3

900122c4 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
900122c4:	4b07      	ldr	r3, [pc, #28]	; (900122e4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
900122c6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900122c8:	881b      	ldrh	r3, [r3, #0]
900122ca:	4293      	cmp	r3, r2
900122cc:	bf81      	itttt	hi
900122ce:	4b06      	ldrhi	r3, [pc, #24]	; (900122e8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
900122d0:	681b      	ldrhi	r3, [r3, #0]
900122d2:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
900122d6:	7858      	ldrbhi	r0, [r3, #1]
900122d8:	bf8c      	ite	hi
900122da:	f000 0003 	andhi.w	r0, r0, #3
900122de:	2000      	movls	r0, #0
900122e0:	4770      	bx	lr
900122e2:	bf00      	nop
900122e4:	240262c0 	.word	0x240262c0
900122e8:	240262bc 	.word	0x240262bc

900122ec <_ZNK8touchgfx8TextArea13getTextHeightEv>:
900122ec:	4b11      	ldr	r3, [pc, #68]	; (90012334 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
900122ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900122f2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
900122f4:	4604      	mov	r4, r0
900122f6:	881b      	ldrh	r3, [r3, #0]
900122f8:	428b      	cmp	r3, r1
900122fa:	d918      	bls.n	9001232e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
900122fc:	6803      	ldr	r3, [r0, #0]
900122fe:	6f9d      	ldr	r5, [r3, #120]	; 0x78
90012300:	4b0d      	ldr	r3, [pc, #52]	; (90012338 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
90012302:	6818      	ldr	r0, [r3, #0]
90012304:	f7f3 fa3a 	bl	9000577c <_ZNK8touchgfx5Texts7getTextEt>
90012308:	6823      	ldr	r3, [r4, #0]
9001230a:	4606      	mov	r6, r0
9001230c:	4620      	mov	r0, r4
9001230e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90012310:	4798      	blx	r3
90012312:	6823      	ldr	r3, [r4, #0]
90012314:	4607      	mov	r7, r0
90012316:	4620      	mov	r0, r4
90012318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9001231c:	4798      	blx	r3
9001231e:	463a      	mov	r2, r7
90012320:	4603      	mov	r3, r0
90012322:	4631      	mov	r1, r6
90012324:	4620      	mov	r0, r4
90012326:	46ac      	mov	ip, r5
90012328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
9001232c:	4760      	bx	ip
9001232e:	2000      	movs	r0, #0
90012330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90012334:	240262c0 	.word	0x240262c0
90012338:	240262c8 	.word	0x240262c8

9001233c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
9001233c:	4b18      	ldr	r3, [pc, #96]	; (900123a0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
9001233e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90012342:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90012344:	4604      	mov	r4, r0
90012346:	881b      	ldrh	r3, [r3, #0]
90012348:	428b      	cmp	r3, r1
9001234a:	d926      	bls.n	9001239a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
9001234c:	4b15      	ldr	r3, [pc, #84]	; (900123a4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
9001234e:	681b      	ldr	r3, [r3, #0]
90012350:	eb03 0241 	add.w	r2, r3, r1, lsl #1
90012354:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
90012358:	4b13      	ldr	r3, [pc, #76]	; (900123a8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
9001235a:	7855      	ldrb	r5, [r2, #1]
9001235c:	681b      	ldr	r3, [r3, #0]
9001235e:	f3c5 0581 	ubfx	r5, r5, #2, #2
90012362:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
90012366:	6833      	ldr	r3, [r6, #0]
90012368:	69df      	ldr	r7, [r3, #28]
9001236a:	4b10      	ldr	r3, [pc, #64]	; (900123ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
9001236c:	6818      	ldr	r0, [r3, #0]
9001236e:	f7f3 fa05 	bl	9000577c <_ZNK8touchgfx5Texts7getTextEt>
90012372:	6823      	ldr	r3, [r4, #0]
90012374:	4680      	mov	r8, r0
90012376:	4620      	mov	r0, r4
90012378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9001237a:	4798      	blx	r3
9001237c:	6823      	ldr	r3, [r4, #0]
9001237e:	4681      	mov	r9, r0
90012380:	4620      	mov	r0, r4
90012382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90012386:	4798      	blx	r3
90012388:	464b      	mov	r3, r9
9001238a:	9000      	str	r0, [sp, #0]
9001238c:	4642      	mov	r2, r8
9001238e:	4629      	mov	r1, r5
90012390:	4630      	mov	r0, r6
90012392:	47b8      	blx	r7
90012394:	b003      	add	sp, #12
90012396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001239a:	2000      	movs	r0, #0
9001239c:	e7fa      	b.n	90012394 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
9001239e:	bf00      	nop
900123a0:	240262c0 	.word	0x240262c0
900123a4:	240262bc 	.word	0x240262bc
900123a8:	240262c4 	.word	0x240262c4
900123ac:	240262c8 	.word	0x240262c8

900123b0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
900123b0:	b40e      	push	{r1, r2, r3}
900123b2:	4b30      	ldr	r3, [pc, #192]	; (90012474 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
900123b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900123b8:	881a      	ldrh	r2, [r3, #0]
900123ba:	b09d      	sub	sp, #116	; 0x74
900123bc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
900123be:	4604      	mov	r4, r0
900123c0:	429a      	cmp	r2, r3
900123c2:	d954      	bls.n	9001246e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
900123c4:	aa26      	add	r2, sp, #152	; 0x98
900123c6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 90012478 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
900123ca:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 9001247c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
900123ce:	9202      	str	r2, [sp, #8]
900123d0:	f8d9 2000 	ldr.w	r2, [r9]
900123d4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
900123d8:	f8d8 3000 	ldr.w	r3, [r8]
900123dc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
900123e0:	682b      	ldr	r3, [r5, #0]
900123e2:	4628      	mov	r0, r5
900123e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900123e6:	4798      	blx	r3
900123e8:	4606      	mov	r6, r0
900123ea:	b207      	sxth	r7, r0
900123ec:	a803      	add	r0, sp, #12
900123ee:	f003 fb09 	bl	90015a04 <_ZN8touchgfx12TextProviderC1Ev>
900123f2:	682b      	ldr	r3, [r5, #0]
900123f4:	4628      	mov	r0, r5
900123f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900123f8:	4798      	blx	r3
900123fa:	682b      	ldr	r3, [r5, #0]
900123fc:	4682      	mov	sl, r0
900123fe:	4628      	mov	r0, r5
90012400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90012402:	4798      	blx	r3
90012404:	4653      	mov	r3, sl
90012406:	9000      	str	r0, [sp, #0]
90012408:	a803      	add	r0, sp, #12
9001240a:	9a02      	ldr	r2, [sp, #8]
9001240c:	9925      	ldr	r1, [sp, #148]	; 0x94
9001240e:	f003 fb4c 	bl	90015aaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90012412:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90012414:	f8d9 3000 	ldr.w	r3, [r9]
90012418:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
9001241c:	8925      	ldrh	r5, [r4, #8]
9001241e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
90012422:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
90012426:	eba5 050c 	sub.w	r5, r5, ip
9001242a:	784a      	ldrb	r2, [r1, #1]
9001242c:	f8d8 3000 	ldr.w	r3, [r8]
90012430:	b22d      	sxth	r5, r5
90012432:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
90012436:	f3c2 0281 	ubfx	r2, r2, #2, #2
9001243a:	9500      	str	r5, [sp, #0]
9001243c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
90012440:	a803      	add	r0, sp, #12
90012442:	f001 f9cb 	bl	900137dc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
90012446:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
9001244a:	b203      	sxth	r3, r0
9001244c:	18b9      	adds	r1, r7, r2
9001244e:	2900      	cmp	r1, #0
90012450:	dd0b      	ble.n	9001246a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
90012452:	3b01      	subs	r3, #1
90012454:	fb13 f302 	smulbb	r3, r3, r2
90012458:	fb16 3300 	smlabb	r3, r6, r0, r3
9001245c:	b21f      	sxth	r7, r3
9001245e:	4638      	mov	r0, r7
90012460:	b01d      	add	sp, #116	; 0x74
90012462:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90012466:	b003      	add	sp, #12
90012468:	4770      	bx	lr
9001246a:	2b00      	cmp	r3, #0
9001246c:	dcf7      	bgt.n	9001245e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
9001246e:	2700      	movs	r7, #0
90012470:	e7f5      	b.n	9001245e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90012472:	bf00      	nop
90012474:	240262c0 	.word	0x240262c0
90012478:	240262bc 	.word	0x240262bc
9001247c:	240262c4 	.word	0x240262c4

90012480 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
90012480:	b570      	push	{r4, r5, r6, lr}
90012482:	6803      	ldr	r3, [r0, #0]
90012484:	4604      	mov	r4, r0
90012486:	4615      	mov	r5, r2
90012488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001248a:	4798      	blx	r3
9001248c:	6823      	ldr	r3, [r4, #0]
9001248e:	4629      	mov	r1, r5
90012490:	4620      	mov	r0, r4
90012492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90012494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012498:	4718      	bx	r3
	...

9001249c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
9001249c:	b538      	push	{r3, r4, r5, lr}
9001249e:	4b0e      	ldr	r3, [pc, #56]	; (900124d8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
900124a0:	4604      	mov	r4, r0
900124a2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900124a4:	881b      	ldrh	r3, [r3, #0]
900124a6:	429a      	cmp	r2, r3
900124a8:	d214      	bcs.n	900124d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
900124aa:	6803      	ldr	r3, [r0, #0]
900124ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900124ae:	4798      	blx	r3
900124b0:	6823      	ldr	r3, [r4, #0]
900124b2:	4605      	mov	r5, r0
900124b4:	4620      	mov	r0, r4
900124b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900124b8:	4798      	blx	r3
900124ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900124be:	b22d      	sxth	r5, r5
900124c0:	4601      	mov	r1, r0
900124c2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
900124c6:	bf06      	itte	eq
900124c8:	4602      	moveq	r2, r0
900124ca:	4629      	moveq	r1, r5
900124cc:	462a      	movne	r2, r5
900124ce:	4620      	mov	r0, r4
900124d0:	f7ff ffd6 	bl	90012480 <_ZN8touchgfx8Drawable14setWidthHeightEss>
900124d4:	bd38      	pop	{r3, r4, r5, pc}
900124d6:	bf00      	nop
900124d8:	240262c0 	.word	0x240262c0

900124dc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
900124dc:	b530      	push	{r4, r5, lr}
900124de:	888b      	ldrh	r3, [r1, #4]
900124e0:	b085      	sub	sp, #20
900124e2:	4604      	mov	r4, r0
900124e4:	8583      	strh	r3, [r0, #44]	; 0x2c
900124e6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
900124ea:	b923      	cbnz	r3, 900124f6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
900124ec:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
900124f0:	b90b      	cbnz	r3, 900124f6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
900124f2:	f7ff ffd3 	bl	9001249c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
900124f6:	6823      	ldr	r3, [r4, #0]
900124f8:	466d      	mov	r5, sp
900124fa:	4621      	mov	r1, r4
900124fc:	343c      	adds	r4, #60	; 0x3c
900124fe:	4628      	mov	r0, r5
90012500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90012504:	4798      	blx	r3
90012506:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
9001250a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
9001250e:	b005      	add	sp, #20
90012510:	bd30      	pop	{r4, r5, pc}

90012512 <_ZNK8touchgfx3Box12getSolidRectEv>:
90012512:	2300      	movs	r3, #0
90012514:	8083      	strh	r3, [r0, #4]
90012516:	80c3      	strh	r3, [r0, #6]
90012518:	8003      	strh	r3, [r0, #0]
9001251a:	8043      	strh	r3, [r0, #2]
9001251c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
90012520:	2bff      	cmp	r3, #255	; 0xff
90012522:	bf01      	itttt	eq
90012524:	890b      	ldrheq	r3, [r1, #8]
90012526:	8083      	strheq	r3, [r0, #4]
90012528:	894b      	ldrheq	r3, [r1, #10]
9001252a:	80c3      	strheq	r3, [r0, #6]
9001252c:	4770      	bx	lr
	...

90012530 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
90012530:	b537      	push	{r0, r1, r2, r4, r5, lr}
90012532:	4604      	mov	r4, r0
90012534:	466b      	mov	r3, sp
90012536:	6808      	ldr	r0, [r1, #0]
90012538:	6849      	ldr	r1, [r1, #4]
9001253a:	c303      	stmia	r3!, {r0, r1}
9001253c:	6823      	ldr	r3, [r4, #0]
9001253e:	4669      	mov	r1, sp
90012540:	4620      	mov	r0, r4
90012542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012544:	4798      	blx	r3
90012546:	4b08      	ldr	r3, [pc, #32]	; (90012568 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
90012548:	681b      	ldr	r3, [r3, #0]
9001254a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
9001254e:	b10a      	cbz	r2, 90012554 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
90012550:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90012552:	b900      	cbnz	r0, 90012556 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
90012554:	6898      	ldr	r0, [r3, #8]
90012556:	6803      	ldr	r3, [r0, #0]
90012558:	4669      	mov	r1, sp
9001255a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9001255c:	6a1d      	ldr	r5, [r3, #32]
9001255e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
90012562:	47a8      	blx	r5
90012564:	b003      	add	sp, #12
90012566:	bd30      	pop	{r4, r5, pc}
90012568:	2402626c 	.word	0x2402626c

9001256c <_ZN8touchgfx3BoxD1Ev>:
9001256c:	4770      	bx	lr

9001256e <_ZN8touchgfx3BoxD0Ev>:
9001256e:	b510      	push	{r4, lr}
90012570:	4604      	mov	r4, r0
90012572:	212c      	movs	r1, #44	; 0x2c
90012574:	f010 fba1 	bl	90022cba <_ZdlPvj>
90012578:	4620      	mov	r0, r4
9001257a:	bd10      	pop	{r4, pc}

9001257c <_ZNK8touchgfx3Box17invalidateContentEv>:
9001257c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
90012580:	b12a      	cbz	r2, 9001258e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
90012582:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90012586:	b112      	cbz	r2, 9001258e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
90012588:	6803      	ldr	r3, [r0, #0]
9001258a:	695b      	ldr	r3, [r3, #20]
9001258c:	4718      	bx	r3
9001258e:	4770      	bx	lr

90012590 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
90012590:	4b30      	ldr	r3, [pc, #192]	; (90012654 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
90012592:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012596:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90012598:	b08d      	sub	sp, #52	; 0x34
9001259a:	881b      	ldrh	r3, [r3, #0]
9001259c:	4604      	mov	r4, r0
9001259e:	460f      	mov	r7, r1
900125a0:	4293      	cmp	r3, r2
900125a2:	d954      	bls.n	9001264e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
900125a4:	4b2c      	ldr	r3, [pc, #176]	; (90012658 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
900125a6:	6819      	ldr	r1, [r3, #0]
900125a8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
900125ac:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
900125b0:	4a2a      	ldr	r2, [pc, #168]	; (9001265c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
900125b2:	6812      	ldr	r2, [r2, #0]
900125b4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
900125b8:	2900      	cmp	r1, #0
900125ba:	d048      	beq.n	9001264e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
900125bc:	785a      	ldrb	r2, [r3, #1]
900125be:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
900125c2:	f3c2 0801 	ubfx	r8, r2, #0, #2
900125c6:	f3c2 0281 	ubfx	r2, r2, #2, #2
900125ca:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
900125ce:	4b24      	ldr	r3, [pc, #144]	; (90012660 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
900125d0:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
900125d4:	681a      	ldr	r2, [r3, #0]
900125d6:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
900125da:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
900125de:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
900125e2:	6b26      	ldr	r6, [r4, #48]	; 0x30
900125e4:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
900125e8:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
900125ec:	9107      	str	r1, [sp, #28]
900125ee:	f88d 8020 	strb.w	r8, [sp, #32]
900125f2:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
900125f6:	9609      	str	r6, [sp, #36]	; 0x24
900125f8:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
900125fc:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
90012600:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
90012604:	b10b      	cbz	r3, 9001260a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
90012606:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
90012608:	b905      	cbnz	r5, 9001260c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
9001260a:	6895      	ldr	r5, [r2, #8]
9001260c:	ae05      	add	r6, sp, #20
9001260e:	4621      	mov	r1, r4
90012610:	4630      	mov	r0, r6
90012612:	f002 fe37 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90012616:	4b13      	ldr	r3, [pc, #76]	; (90012664 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
90012618:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
9001261a:	6818      	ldr	r0, [r3, #0]
9001261c:	f7f3 f8ae 	bl	9000577c <_ZNK8touchgfx5Texts7getTextEt>
90012620:	6823      	ldr	r3, [r4, #0]
90012622:	4680      	mov	r8, r0
90012624:	4620      	mov	r0, r4
90012626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90012628:	4798      	blx	r3
9001262a:	6823      	ldr	r3, [r4, #0]
9001262c:	4681      	mov	r9, r0
9001262e:	4620      	mov	r0, r4
90012630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90012634:	4798      	blx	r3
90012636:	ab07      	add	r3, sp, #28
90012638:	f8cd 8004 	str.w	r8, [sp, #4]
9001263c:	9300      	str	r3, [sp, #0]
9001263e:	463b      	mov	r3, r7
90012640:	e9cd 9002 	strd	r9, r0, [sp, #8]
90012644:	4628      	mov	r0, r5
90012646:	e896 0006 	ldmia.w	r6, {r1, r2}
9001264a:	f7f3 f847 	bl	900056dc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
9001264e:	b00d      	add	sp, #52	; 0x34
90012650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012654:	240262c0 	.word	0x240262c0
90012658:	240262bc 	.word	0x240262bc
9001265c:	240262c4 	.word	0x240262c4
90012660:	2402626c 	.word	0x2402626c
90012664:	240262c8 	.word	0x240262c8

90012668 <_ZN8touchgfx5ImageD1Ev>:
90012668:	4770      	bx	lr

9001266a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
9001266a:	b570      	push	{r4, r5, r6, lr}
9001266c:	880b      	ldrh	r3, [r1, #0]
9001266e:	460d      	mov	r5, r1
90012670:	4604      	mov	r4, r0
90012672:	84c3      	strh	r3, [r0, #38]	; 0x26
90012674:	4608      	mov	r0, r1
90012676:	f004 fd3f 	bl	900170f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001267a:	4606      	mov	r6, r0
9001267c:	4628      	mov	r0, r5
9001267e:	f004 fd6f 	bl	90017160 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012682:	6823      	ldr	r3, [r4, #0]
90012684:	4605      	mov	r5, r0
90012686:	4631      	mov	r1, r6
90012688:	4620      	mov	r0, r4
9001268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001268c:	4798      	blx	r3
9001268e:	6823      	ldr	r3, [r4, #0]
90012690:	4629      	mov	r1, r5
90012692:	4620      	mov	r0, r4
90012694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90012696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001269a:	4718      	bx	r3

9001269c <_ZN8touchgfx5ImageD0Ev>:
9001269c:	b510      	push	{r4, lr}
9001269e:	4604      	mov	r4, r0
900126a0:	212c      	movs	r1, #44	; 0x2c
900126a2:	f010 fb0a 	bl	90022cba <_ZdlPvj>
900126a6:	4620      	mov	r0, r4
900126a8:	bd10      	pop	{r4, pc}

900126aa <_ZNK8touchgfx5Image12getSolidRectEv>:
900126aa:	b510      	push	{r4, lr}
900126ac:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
900126b0:	4604      	mov	r4, r0
900126b2:	2bff      	cmp	r3, #255	; 0xff
900126b4:	d006      	beq.n	900126c4 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
900126b6:	2300      	movs	r3, #0
900126b8:	8003      	strh	r3, [r0, #0]
900126ba:	8043      	strh	r3, [r0, #2]
900126bc:	8083      	strh	r3, [r0, #4]
900126be:	80c3      	strh	r3, [r0, #6]
900126c0:	4620      	mov	r0, r4
900126c2:	bd10      	pop	{r4, pc}
900126c4:	3126      	adds	r1, #38	; 0x26
900126c6:	f004 fd7f 	bl	900171c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
900126ca:	e7f9      	b.n	900126c0 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

900126cc <_ZNK8touchgfx5Image17invalidateContentEv>:
900126cc:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
900126d0:	b12a      	cbz	r2, 900126de <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
900126d2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900126d6:	b112      	cbz	r2, 900126de <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
900126d8:	6803      	ldr	r3, [r0, #0]
900126da:	695b      	ldr	r3, [r3, #20]
900126dc:	4718      	bx	r3
900126de:	4770      	bx	lr

900126e0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
900126e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900126e4:	4604      	mov	r4, r0
900126e6:	b088      	sub	sp, #32
900126e8:	2500      	movs	r5, #0
900126ea:	460f      	mov	r7, r1
900126ec:	f854 3b26 	ldr.w	r3, [r4], #38
900126f0:	a904      	add	r1, sp, #16
900126f2:	4606      	mov	r6, r0
900126f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900126f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
900126fa:	4798      	blx	r3
900126fc:	4620      	mov	r0, r4
900126fe:	f004 fcfb 	bl	900170f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012702:	4680      	mov	r8, r0
90012704:	4620      	mov	r0, r4
90012706:	f004 fd2b 	bl	90017160 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001270a:	9506      	str	r5, [sp, #24]
9001270c:	ad06      	add	r5, sp, #24
9001270e:	f8ad 001e 	strh.w	r0, [sp, #30]
90012712:	4639      	mov	r1, r7
90012714:	f8ad 801c 	strh.w	r8, [sp, #28]
90012718:	4628      	mov	r0, r5
9001271a:	f7fe fdc7 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
9001271e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90012722:	2b00      	cmp	r3, #0
90012724:	dd19      	ble.n	9001275a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90012726:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
9001272a:	2b00      	cmp	r3, #0
9001272c:	dd15      	ble.n	9001275a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
9001272e:	4b0c      	ldr	r3, [pc, #48]	; (90012760 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
90012730:	681b      	ldr	r3, [r3, #0]
90012732:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90012736:	b10a      	cbz	r2, 9001273c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
90012738:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9001273a:	b900      	cbnz	r0, 9001273e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
9001273c:	6898      	ldr	r0, [r3, #8]
9001273e:	2701      	movs	r7, #1
90012740:	6801      	ldr	r1, [r0, #0]
90012742:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90012746:	9702      	str	r7, [sp, #8]
90012748:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
9001274c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90012750:	e9cd 5600 	strd	r5, r6, [sp]
90012754:	688d      	ldr	r5, [r1, #8]
90012756:	4621      	mov	r1, r4
90012758:	47a8      	blx	r5
9001275a:	b008      	add	sp, #32
9001275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90012760:	2402626c 	.word	0x2402626c

90012764 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
90012764:	b510      	push	{r4, lr}
90012766:	6803      	ldr	r3, [r0, #0]
90012768:	460c      	mov	r4, r1
9001276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001276c:	4798      	blx	r3
9001276e:	1b03      	subs	r3, r0, r4
90012770:	4258      	negs	r0, r3
90012772:	4158      	adcs	r0, r3
90012774:	bd10      	pop	{r4, pc}
	...

90012778 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
90012778:	4b01      	ldr	r3, [pc, #4]	; (90012780 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
9001277a:	6019      	str	r1, [r3, #0]
9001277c:	4770      	bx	lr
9001277e:	bf00      	nop
90012780:	24026274 	.word	0x24026274

90012784 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90012784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012788:	4696      	mov	lr, r2
9001278a:	b097      	sub	sp, #92	; 0x5c
9001278c:	4605      	mov	r5, r0
9001278e:	4614      	mov	r4, r2
90012790:	460e      	mov	r6, r1
90012792:	461f      	mov	r7, r3
90012794:	f10d 0c1c 	add.w	ip, sp, #28
90012798:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
9001279c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
900127a0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
900127a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900127a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900127ac:	f8de 3000 	ldr.w	r3, [lr]
900127b0:	f104 0e14 	add.w	lr, r4, #20
900127b4:	f8cc 3000 	str.w	r3, [ip]
900127b8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
900127bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900127c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900127c4:	f8de 3000 	ldr.w	r3, [lr]
900127c8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
900127cc:	f8cc 3000 	str.w	r3, [ip]
900127d0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
900127d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900127d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900127dc:	f8de 3000 	ldr.w	r3, [lr]
900127e0:	4631      	mov	r1, r6
900127e2:	9a21      	ldr	r2, [sp, #132]	; 0x84
900127e4:	4628      	mov	r0, r5
900127e6:	f8cc 3000 	str.w	r3, [ip]
900127ea:	682b      	ldr	r3, [r5, #0]
900127ec:	9201      	str	r2, [sp, #4]
900127ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
900127f0:	f8cd 8008 	str.w	r8, [sp, #8]
900127f4:	9200      	str	r2, [sp, #0]
900127f6:	aa07      	add	r2, sp, #28
900127f8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
900127fc:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
90012800:	463b      	mov	r3, r7
90012802:	47d8      	blx	fp
90012804:	46a6      	mov	lr, r4
90012806:	f10d 0c1c 	add.w	ip, sp, #28
9001280a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001280e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90012812:	f8de 3000 	ldr.w	r3, [lr]
90012816:	f104 0e28 	add.w	lr, r4, #40	; 0x28
9001281a:	343c      	adds	r4, #60	; 0x3c
9001281c:	f8cc 3000 	str.w	r3, [ip]
90012820:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90012824:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90012828:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001282c:	f8de 3000 	ldr.w	r3, [lr]
90012830:	f8cc 3000 	str.w	r3, [ip]
90012834:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
90012838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9001283a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001283e:	6823      	ldr	r3, [r4, #0]
90012840:	4631      	mov	r1, r6
90012842:	4628      	mov	r0, r5
90012844:	f8cc 3000 	str.w	r3, [ip]
90012848:	682b      	ldr	r3, [r5, #0]
9001284a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
9001284e:	9a21      	ldr	r2, [sp, #132]	; 0x84
90012850:	f8cd 8008 	str.w	r8, [sp, #8]
90012854:	9201      	str	r2, [sp, #4]
90012856:	9a20      	ldr	r2, [sp, #128]	; 0x80
90012858:	9200      	str	r2, [sp, #0]
9001285a:	aa07      	add	r2, sp, #28
9001285c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
9001285e:	463b      	mov	r3, r7
90012860:	47a0      	blx	r4
90012862:	b017      	add	sp, #92	; 0x5c
90012864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90012868 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
90012868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001286c:	b08d      	sub	sp, #52	; 0x34
9001286e:	4688      	mov	r8, r1
90012870:	f8d3 c000 	ldr.w	ip, [r3]
90012874:	9916      	ldr	r1, [sp, #88]	; 0x58
90012876:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
9001287a:	680f      	ldr	r7, [r1, #0]
9001287c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
90012880:	eba7 070c 	sub.w	r7, r7, ip
90012884:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
90012888:	edd3 6a07 	vldr	s13, [r3, #28]
9001288c:	42bc      	cmp	r4, r7
9001288e:	9918      	ldr	r1, [sp, #96]	; 0x60
90012890:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
90012894:	bfa8      	it	ge
90012896:	463c      	movge	r4, r7
90012898:	f9b1 9000 	ldrsh.w	r9, [r1]
9001289c:	f9ba 1000 	ldrsh.w	r1, [sl]
900128a0:	ee07 4a90 	vmov	s15, r4
900128a4:	eb09 0e0c 	add.w	lr, r9, ip
900128a8:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
900128ac:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
900128b0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
900128b4:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
900128b8:	4571      	cmp	r1, lr
900128ba:	ee25 4a04 	vmul.f32	s8, s10, s8
900128be:	ee65 4a24 	vmul.f32	s9, s10, s9
900128c2:	ee25 5a27 	vmul.f32	s10, s10, s15
900128c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
900128ca:	ee71 0aa4 	vadd.f32	s1, s3, s9
900128ce:	ee32 1a05 	vadd.f32	s2, s4, s10
900128d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
900128d6:	ee36 0a84 	vadd.f32	s0, s13, s8
900128da:	ee61 1a87 	vmul.f32	s3, s3, s14
900128de:	ee22 2a07 	vmul.f32	s4, s4, s14
900128e2:	f340 808c 	ble.w	900129fe <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
900128e6:	eba1 060e 	sub.w	r6, r1, lr
900128ea:	fb96 f5f4 	sdiv	r5, r6, r4
900128ee:	ee07 5a10 	vmov	s14, r5
900128f2:	2d00      	cmp	r5, #0
900128f4:	fb04 6615 	mls	r6, r4, r5, r6
900128f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900128fc:	eea7 0a04 	vfma.f32	s0, s14, s8
90012900:	eee7 0a24 	vfma.f32	s1, s14, s9
90012904:	eea7 1a05 	vfma.f32	s2, s14, s10
90012908:	dd12      	ble.n	90012930 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
9001290a:	ee70 6a44 	vsub.f32	s13, s0, s8
9001290e:	ee70 1ae4 	vsub.f32	s3, s1, s9
90012912:	ee31 2a45 	vsub.f32	s4, s2, s10
90012916:	eef5 6a40 	vcmp.f32	s13, #0.0
9001291a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001291e:	bf14      	ite	ne
90012920:	ee87 7aa6 	vdivne.f32	s14, s15, s13
90012924:	eeb0 7a67 	vmoveq.f32	s14, s15
90012928:	ee61 1a87 	vmul.f32	s3, s3, s14
9001292c:	ee22 2a07 	vmul.f32	s4, s4, s14
90012930:	fb05 f204 	mul.w	r2, r5, r4
90012934:	1abf      	subs	r7, r7, r2
90012936:	4494      	add	ip, r2
90012938:	f8ba 2004 	ldrh.w	r2, [sl, #4]
9001293c:	4411      	add	r1, r2
9001293e:	eb09 020c 	add.w	r2, r9, ip
90012942:	b209      	sxth	r1, r1
90012944:	443a      	add	r2, r7
90012946:	428a      	cmp	r2, r1
90012948:	bfc4      	itt	gt
9001294a:	eba1 0209 	subgt.w	r2, r1, r9
9001294e:	eba2 070c 	subgt.w	r7, r2, ip
90012952:	2f00      	cmp	r7, #0
90012954:	dd50      	ble.n	900129f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
90012956:	fb97 f1f4 	sdiv	r1, r7, r4
9001295a:	fb04 7211 	mls	r2, r4, r1, r7
9001295e:	b90a      	cbnz	r2, 90012964 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
90012960:	3901      	subs	r1, #1
90012962:	4622      	mov	r2, r4
90012964:	eec7 3a80 	vdiv.f32	s7, s15, s0
90012968:	6840      	ldr	r0, [r0, #4]
9001296a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
9001296e:	44b6      	add	lr, r6
90012970:	f8d0 a000 	ldr.w	sl, [r0]
90012974:	2900      	cmp	r1, #0
90012976:	bfcc      	ite	gt
90012978:	46a1      	movgt	r9, r4
9001297a:	4691      	movle	r9, r2
9001297c:	900b      	str	r0, [sp, #44]	; 0x2c
9001297e:	9817      	ldr	r0, [sp, #92]	; 0x5c
90012980:	fb04 e505 	mla	r5, r4, r5, lr
90012984:	eef0 6a42 	vmov.f32	s13, s4
90012988:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
9001298c:	9008      	str	r0, [sp, #32]
9001298e:	eeb0 7a61 	vmov.f32	s14, s3
90012992:	9818      	ldr	r0, [sp, #96]	; 0x60
90012994:	695b      	ldr	r3, [r3, #20]
90012996:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001299a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
9001299e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
900129a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
900129a4:	445b      	add	r3, fp
900129a6:	9307      	str	r3, [sp, #28]
900129a8:	ee16 3a90 	vmov	r3, s13
900129ac:	e9cd 8505 	strd	r8, r5, [sp, #20]
900129b0:	ee60 2aa3 	vmul.f32	s5, s1, s7
900129b4:	ee21 3a23 	vmul.f32	s6, s2, s7
900129b8:	ee72 7ae1 	vsub.f32	s15, s5, s3
900129bc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
900129c0:	ee17 7a90 	vmov	r7, s15
900129c4:	ee73 7a42 	vsub.f32	s15, s6, s4
900129c8:	fb97 f7f4 	sdiv	r7, r7, r4
900129cc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
900129d0:	ee17 ca90 	vmov	ip, s15
900129d4:	fb9c fcf4 	sdiv	ip, ip, r4
900129d8:	fb0c 3306 	mla	r3, ip, r6, r3
900129dc:	9302      	str	r3, [sp, #8]
900129de:	ee17 3a10 	vmov	r3, s14
900129e2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
900129e6:	fb07 3706 	mla	r7, r7, r6, r3
900129ea:	eba9 0306 	sub.w	r3, r9, r6
900129ee:	e9cd 4700 	strd	r4, r7, [sp]
900129f2:	f8da 4008 	ldr.w	r4, [sl, #8]
900129f6:	47a0      	blx	r4
900129f8:	b00d      	add	sp, #52	; 0x34
900129fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900129fe:	2500      	movs	r5, #0
90012a00:	462e      	mov	r6, r5
90012a02:	e799      	b.n	90012938 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

90012a04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90012a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012a08:	b0db      	sub	sp, #364	; 0x16c
90012a0a:	461d      	mov	r5, r3
90012a0c:	4614      	mov	r4, r2
90012a0e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
90012a12:	910f      	str	r1, [sp, #60]	; 0x3c
90012a14:	4629      	mov	r1, r5
90012a16:	930a      	str	r3, [sp, #40]	; 0x28
90012a18:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
90012a1c:	9009      	str	r0, [sp, #36]	; 0x24
90012a1e:	930b      	str	r3, [sp, #44]	; 0x2c
90012a20:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
90012a24:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
90012a28:	9310      	str	r3, [sp, #64]	; 0x40
90012a2a:	6803      	ldr	r3, [r0, #0]
90012a2c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
90012a2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
90012a32:	47b8      	blx	r7
90012a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012a36:	6058      	str	r0, [r3, #4]
90012a38:	2800      	cmp	r0, #0
90012a3a:	f000 83a1 	beq.w	90013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012a3e:	682b      	ldr	r3, [r5, #0]
90012a40:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
90012a44:	ed94 7a02 	vldr	s14, [r4, #8]
90012a48:	9314      	str	r3, [sp, #80]	; 0x50
90012a4a:	686b      	ldr	r3, [r5, #4]
90012a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
90012a50:	9315      	str	r3, [sp, #84]	; 0x54
90012a52:	4bc1      	ldr	r3, [pc, #772]	; (90012d58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
90012a54:	7819      	ldrb	r1, [r3, #0]
90012a56:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
90012a5a:	2900      	cmp	r1, #0
90012a5c:	bf16      	itet	ne
90012a5e:	4619      	movne	r1, r3
90012a60:	4611      	moveq	r1, r2
90012a62:	4613      	movne	r3, r2
90012a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012a68:	9116      	str	r1, [sp, #88]	; 0x58
90012a6a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
90012a6e:	f240 8387 	bls.w	90013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012a72:	ed94 7a07 	vldr	s14, [r4, #28]
90012a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
90012a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012a7e:	f240 837f 	bls.w	90013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012a82:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
90012a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
90012a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90012a8e:	f240 8377 	bls.w	90013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012a92:	6822      	ldr	r2, [r4, #0]
90012a94:	4bb1      	ldr	r3, [pc, #708]	; (90012d5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
90012a96:	429a      	cmp	r2, r3
90012a98:	f2c0 8372 	blt.w	90013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012a9c:	49b0      	ldr	r1, [pc, #704]	; (90012d60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
90012a9e:	6963      	ldr	r3, [r4, #20]
90012aa0:	428a      	cmp	r2, r1
90012aa2:	f300 836d 	bgt.w	90013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012aa6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90012aaa:	48ae      	ldr	r0, [pc, #696]	; (90012d64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
90012aac:	33ff      	adds	r3, #255	; 0xff
90012aae:	4283      	cmp	r3, r0
90012ab0:	f200 8366 	bhi.w	90013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012ab4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90012ab6:	4dac      	ldr	r5, [pc, #688]	; (90012d68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
90012ab8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90012abc:	33ff      	adds	r3, #255	; 0xff
90012abe:	42ab      	cmp	r3, r5
90012ac0:	f200 835e 	bhi.w	90013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012ac4:	6862      	ldr	r2, [r4, #4]
90012ac6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
90012aca:	33ff      	adds	r3, #255	; 0xff
90012acc:	4283      	cmp	r3, r0
90012ace:	f200 8357 	bhi.w	90013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012ad2:	69a1      	ldr	r1, [r4, #24]
90012ad4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
90012ad8:	33ff      	adds	r3, #255	; 0xff
90012ada:	4283      	cmp	r3, r0
90012adc:	f200 8350 	bhi.w	90013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012ae0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90012ae2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
90012ae6:	30ff      	adds	r0, #255	; 0xff
90012ae8:	42a8      	cmp	r0, r5
90012aea:	f200 8349 	bhi.w	90013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90012aee:	428a      	cmp	r2, r1
90012af0:	f280 8110 	bge.w	90012d14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
90012af4:	429a      	cmp	r2, r3
90012af6:	f300 8119 	bgt.w	90012d2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
90012afa:	4299      	cmp	r1, r3
90012afc:	f280 811d 	bge.w	90012d3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
90012b00:	2502      	movs	r5, #2
90012b02:	2701      	movs	r7, #1
90012b04:	46a9      	mov	r9, r5
90012b06:	46b8      	mov	r8, r7
90012b08:	f04f 0a00 	mov.w	sl, #0
90012b0c:	4621      	mov	r1, r4
90012b0e:	a849      	add	r0, sp, #292	; 0x124
90012b10:	f003 fcaa 	bl	90016468 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
90012b14:	4622      	mov	r2, r4
90012b16:	4653      	mov	r3, sl
90012b18:	a949      	add	r1, sp, #292	; 0x124
90012b1a:	f8cd 9000 	str.w	r9, [sp]
90012b1e:	a819      	add	r0, sp, #100	; 0x64
90012b20:	f003 fdd2 	bl	900166c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012b24:	4622      	mov	r2, r4
90012b26:	4653      	mov	r3, sl
90012b28:	a949      	add	r1, sp, #292	; 0x124
90012b2a:	f8cd 8000 	str.w	r8, [sp]
90012b2e:	a829      	add	r0, sp, #164	; 0xa4
90012b30:	f003 fdca 	bl	900166c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012b34:	4643      	mov	r3, r8
90012b36:	4622      	mov	r2, r4
90012b38:	a949      	add	r1, sp, #292	; 0x124
90012b3a:	f8cd 9000 	str.w	r9, [sp]
90012b3e:	a839      	add	r0, sp, #228	; 0xe4
90012b40:	f003 fdc2 	bl	900166c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90012b44:	42af      	cmp	r7, r5
90012b46:	af12      	add	r7, sp, #72	; 0x48
90012b48:	bfb7      	itett	lt
90012b4a:	2300      	movlt	r3, #0
90012b4c:	2301      	movge	r3, #1
90012b4e:	ad29      	addlt	r5, sp, #164	; 0xa4
90012b50:	ac19      	addlt	r4, sp, #100	; 0x64
90012b52:	bfb1      	iteee	lt
90012b54:	930e      	strlt	r3, [sp, #56]	; 0x38
90012b56:	ad19      	addge	r5, sp, #100	; 0x64
90012b58:	930e      	strge	r3, [sp, #56]	; 0x38
90012b5a:	ac29      	addge	r4, sp, #164	; 0xa4
90012b5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90012b5e:	e893 0003 	ldmia.w	r3, {r0, r1}
90012b62:	e887 0003 	stmia.w	r7, {r0, r1}
90012b66:	b928      	cbnz	r0, 90012b74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
90012b68:	4b80      	ldr	r3, [pc, #512]	; (90012d6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
90012b6a:	6818      	ldr	r0, [r3, #0]
90012b6c:	6803      	ldr	r3, [r0, #0]
90012b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90012b70:	4798      	blx	r3
90012b72:	6038      	str	r0, [r7, #0]
90012b74:	9b64      	ldr	r3, [sp, #400]	; 0x190
90012b76:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90012b7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90012b7e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
90012b80:	930c      	str	r3, [sp, #48]	; 0x30
90012b82:	990c      	ldr	r1, [sp, #48]	; 0x30
90012b84:	6963      	ldr	r3, [r4, #20]
90012b86:	440b      	add	r3, r1
90012b88:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90012b8c:	4408      	add	r0, r1
90012b8e:	b200      	sxth	r0, r0
90012b90:	4283      	cmp	r3, r0
90012b92:	900d      	str	r0, [sp, #52]	; 0x34
90012b94:	f280 80dd 	bge.w	90012d52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
90012b98:	428b      	cmp	r3, r1
90012b9a:	da08      	bge.n	90012bae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90012b9c:	2a00      	cmp	r2, #0
90012b9e:	dd06      	ble.n	90012bae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90012ba0:	1acb      	subs	r3, r1, r3
90012ba2:	429a      	cmp	r2, r3
90012ba4:	f2c0 80e4 	blt.w	90012d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
90012ba8:	2b00      	cmp	r3, #0
90012baa:	f300 80e2 	bgt.w	90012d72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
90012bae:	6967      	ldr	r7, [r4, #20]
90012bb0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90012bb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90012bb6:	443b      	add	r3, r7
90012bb8:	461f      	mov	r7, r3
90012bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90012bbc:	1bdf      	subs	r7, r3, r7
90012bbe:	4297      	cmp	r7, r2
90012bc0:	bfa8      	it	ge
90012bc2:	4617      	movge	r7, r2
90012bc4:	2f00      	cmp	r7, #0
90012bc6:	f340 8166 	ble.w	90012e96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
90012bca:	9b64      	ldr	r3, [sp, #400]	; 0x190
90012bcc:	6829      	ldr	r1, [r5, #0]
90012bce:	f9b3 2000 	ldrsh.w	r2, [r3]
90012bd2:	f9bb 3000 	ldrsh.w	r3, [fp]
90012bd6:	4411      	add	r1, r2
90012bd8:	6820      	ldr	r0, [r4, #0]
90012bda:	4299      	cmp	r1, r3
90012bdc:	dd1a      	ble.n	90012c14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90012bde:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90012be2:	4402      	add	r2, r0
90012be4:	440b      	add	r3, r1
90012be6:	b21b      	sxth	r3, r3
90012be8:	429a      	cmp	r2, r3
90012bea:	dc13      	bgt.n	90012c14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90012bec:	9a10      	ldr	r2, [sp, #64]	; 0x40
90012bee:	a912      	add	r1, sp, #72	; 0x48
90012bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
90012bf4:	681b      	ldr	r3, [r3, #0]
90012bf6:	9206      	str	r2, [sp, #24]
90012bf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90012bfa:	9500      	str	r5, [sp, #0]
90012bfc:	9205      	str	r2, [sp, #20]
90012bfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90012c00:	e9cd b203 	strd	fp, r2, [sp, #12]
90012c04:	9a64      	ldr	r2, [sp, #400]	; 0x190
90012c06:	e9cd 8201 	strd	r8, r2, [sp, #4]
90012c0a:	aa49      	add	r2, sp, #292	; 0x124
90012c0c:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90012c10:	4623      	mov	r3, r4
90012c12:	47c8      	blx	r9
90012c14:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90012c18:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90012c1c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90012c20:	ee37 7a27 	vadd.f32	s14, s14, s15
90012c24:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90012c28:	68a1      	ldr	r1, [r4, #8]
90012c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
90012c2e:	ed94 6a08 	vldr	s12, [r4, #32]
90012c32:	edd4 6a07 	vldr	s13, [r4, #28]
90012c36:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90012c3a:	ee76 6a86 	vadd.f32	s13, s13, s12
90012c3e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90012c42:	e9d4 2300 	ldrd	r2, r3, [r4]
90012c46:	edc4 6a07 	vstr	s13, [r4, #28]
90012c4a:	441a      	add	r2, r3
90012c4c:	6963      	ldr	r3, [r4, #20]
90012c4e:	3301      	adds	r3, #1
90012c50:	6022      	str	r2, [r4, #0]
90012c52:	6163      	str	r3, [r4, #20]
90012c54:	69a3      	ldr	r3, [r4, #24]
90012c56:	3b01      	subs	r3, #1
90012c58:	61a3      	str	r3, [r4, #24]
90012c5a:	6923      	ldr	r3, [r4, #16]
90012c5c:	440b      	add	r3, r1
90012c5e:	68e1      	ldr	r1, [r4, #12]
90012c60:	428b      	cmp	r3, r1
90012c62:	6123      	str	r3, [r4, #16]
90012c64:	db15      	blt.n	90012c92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
90012c66:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90012c6a:	3201      	adds	r2, #1
90012c6c:	1a5b      	subs	r3, r3, r1
90012c6e:	ee76 6a26 	vadd.f32	s13, s12, s13
90012c72:	6022      	str	r2, [r4, #0]
90012c74:	6123      	str	r3, [r4, #16]
90012c76:	edc4 6a07 	vstr	s13, [r4, #28]
90012c7a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90012c7e:	ee36 7a87 	vadd.f32	s14, s13, s14
90012c82:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90012c86:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90012c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
90012c8e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90012c92:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90012c96:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90012c9a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90012c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
90012ca2:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90012ca6:	68a9      	ldr	r1, [r5, #8]
90012ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
90012cac:	ed95 6a08 	vldr	s12, [r5, #32]
90012cb0:	edd5 6a07 	vldr	s13, [r5, #28]
90012cb4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90012cb8:	ee76 6a86 	vadd.f32	s13, s13, s12
90012cbc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90012cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
90012cc4:	edc5 6a07 	vstr	s13, [r5, #28]
90012cc8:	441a      	add	r2, r3
90012cca:	696b      	ldr	r3, [r5, #20]
90012ccc:	3301      	adds	r3, #1
90012cce:	602a      	str	r2, [r5, #0]
90012cd0:	616b      	str	r3, [r5, #20]
90012cd2:	69ab      	ldr	r3, [r5, #24]
90012cd4:	3b01      	subs	r3, #1
90012cd6:	61ab      	str	r3, [r5, #24]
90012cd8:	692b      	ldr	r3, [r5, #16]
90012cda:	440b      	add	r3, r1
90012cdc:	68e9      	ldr	r1, [r5, #12]
90012cde:	428b      	cmp	r3, r1
90012ce0:	612b      	str	r3, [r5, #16]
90012ce2:	db15      	blt.n	90012d10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
90012ce4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90012ce8:	3201      	adds	r2, #1
90012cea:	1a5b      	subs	r3, r3, r1
90012cec:	ee76 6a26 	vadd.f32	s13, s12, s13
90012cf0:	602a      	str	r2, [r5, #0]
90012cf2:	612b      	str	r3, [r5, #16]
90012cf4:	edc5 6a07 	vstr	s13, [r5, #28]
90012cf8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90012cfc:	ee36 7a87 	vadd.f32	s14, s13, s14
90012d00:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90012d04:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90012d08:	ee77 7a27 	vadd.f32	s15, s14, s15
90012d0c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90012d10:	3f01      	subs	r7, #1
90012d12:	e757      	b.n	90012bc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
90012d14:	4299      	cmp	r1, r3
90012d16:	dc13      	bgt.n	90012d40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
90012d18:	429a      	cmp	r2, r3
90012d1a:	da14      	bge.n	90012d46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
90012d1c:	2502      	movs	r5, #2
90012d1e:	2703      	movs	r7, #3
90012d20:	f04f 0800 	mov.w	r8, #0
90012d24:	46a9      	mov	r9, r5
90012d26:	f04f 0a01 	mov.w	sl, #1
90012d2a:	e6ef      	b.n	90012b0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90012d2c:	2501      	movs	r5, #1
90012d2e:	2700      	movs	r7, #0
90012d30:	46a9      	mov	r9, r5
90012d32:	46b8      	mov	r8, r7
90012d34:	f04f 0a02 	mov.w	sl, #2
90012d38:	e6e8      	b.n	90012b0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90012d3a:	2501      	movs	r5, #1
90012d3c:	2702      	movs	r7, #2
90012d3e:	e6e1      	b.n	90012b04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90012d40:	2500      	movs	r5, #0
90012d42:	2701      	movs	r7, #1
90012d44:	e7f4      	b.n	90012d30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
90012d46:	2702      	movs	r7, #2
90012d48:	2503      	movs	r5, #3
90012d4a:	f04f 0900 	mov.w	r9, #0
90012d4e:	46b8      	mov	r8, r7
90012d50:	e7e9      	b.n	90012d26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
90012d52:	4613      	mov	r3, r2
90012d54:	e728      	b.n	90012ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
90012d56:	bf00      	nop
90012d58:	24026264 	.word	0x24026264
90012d5c:	fffd8f01 	.word	0xfffd8f01
90012d60:	00027100 	.word	0x00027100
90012d64:	0004e1ff 	.word	0x0004e1ff
90012d68:	0004e1fe 	.word	0x0004e1fe
90012d6c:	2402626c 	.word	0x2402626c
90012d70:	4613      	mov	r3, r2
90012d72:	992b      	ldr	r1, [sp, #172]	; 0xac
90012d74:	469e      	mov	lr, r3
90012d76:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
90012d78:	469c      	mov	ip, r3
90012d7a:	9111      	str	r1, [sp, #68]	; 0x44
90012d7c:	f04f 0900 	mov.w	r9, #0
90012d80:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
90012d84:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
90012d88:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
90012d8c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
90012d90:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
90012d94:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
90012d98:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
90012d9c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
90012da0:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
90012da4:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
90012da8:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
90012dac:	f1bc 0f00 	cmp.w	ip, #0
90012db0:	d147      	bne.n	90012e42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
90012db2:	eb03 0c07 	add.w	ip, r3, r7
90012db6:	1ad7      	subs	r7, r2, r3
90012db8:	f1b9 0f00 	cmp.w	r9, #0
90012dbc:	d009      	beq.n	90012dd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90012dbe:	9029      	str	r0, [sp, #164]	; 0xa4
90012dc0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
90012dc4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
90012dc8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
90012dcc:	912d      	str	r1, [sp, #180]	; 0xb4
90012dce:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
90012dd2:	991b      	ldr	r1, [sp, #108]	; 0x6c
90012dd4:	f04f 0800 	mov.w	r8, #0
90012dd8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90012ddc:	9111      	str	r1, [sp, #68]	; 0x44
90012dde:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90012de2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90012de6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90012dea:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90012dee:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90012df2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90012df6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90012dfa:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90012dfe:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90012e02:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90012e06:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90012e0a:	f1be 0f00 	cmp.w	lr, #0
90012e0e:	d031      	beq.n	90012e74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
90012e10:	9e11      	ldr	r6, [sp, #68]	; 0x44
90012e12:	4450      	add	r0, sl
90012e14:	ee76 6aa4 	vadd.f32	s13, s13, s9
90012e18:	4431      	add	r1, r6
90012e1a:	ee37 7a04 	vadd.f32	s14, s14, s8
90012e1e:	ee77 7aa3 	vadd.f32	s15, s15, s7
90012e22:	4549      	cmp	r1, r9
90012e24:	db08      	blt.n	90012e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
90012e26:	ee77 7a85 	vadd.f32	s15, s15, s10
90012e2a:	3001      	adds	r0, #1
90012e2c:	ee76 6aa5 	vadd.f32	s13, s13, s11
90012e30:	eba1 0109 	sub.w	r1, r1, r9
90012e34:	ee37 7a06 	vadd.f32	s14, s14, s12
90012e38:	f10e 3eff 	add.w	lr, lr, #4294967295
90012e3c:	f04f 0801 	mov.w	r8, #1
90012e40:	e7e3      	b.n	90012e0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90012e42:	9e11      	ldr	r6, [sp, #68]	; 0x44
90012e44:	4450      	add	r0, sl
90012e46:	ee37 7a24 	vadd.f32	s14, s14, s9
90012e4a:	4431      	add	r1, r6
90012e4c:	ee77 7a84 	vadd.f32	s15, s15, s8
90012e50:	ee76 6aa3 	vadd.f32	s13, s13, s7
90012e54:	4541      	cmp	r1, r8
90012e56:	db08      	blt.n	90012e6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
90012e58:	ee76 6a85 	vadd.f32	s13, s13, s10
90012e5c:	3001      	adds	r0, #1
90012e5e:	ee37 7a25 	vadd.f32	s14, s14, s11
90012e62:	eba1 0108 	sub.w	r1, r1, r8
90012e66:	ee77 7a86 	vadd.f32	s15, s15, s12
90012e6a:	f10c 3cff 	add.w	ip, ip, #4294967295
90012e6e:	f04f 0901 	mov.w	r9, #1
90012e72:	e79b      	b.n	90012dac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90012e74:	449c      	add	ip, r3
90012e76:	1aff      	subs	r7, r7, r3
90012e78:	f1b8 0f00 	cmp.w	r8, #0
90012e7c:	d009      	beq.n	90012e92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
90012e7e:	9019      	str	r0, [sp, #100]	; 0x64
90012e80:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90012e84:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90012e88:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90012e8c:	911d      	str	r1, [sp, #116]	; 0x74
90012e8e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90012e92:	1ad2      	subs	r2, r2, r3
90012e94:	e68b      	b.n	90012bae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90012e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90012e98:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
90012e9a:	2b00      	cmp	r3, #0
90012e9c:	f000 80d1 	beq.w	90013042 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
90012ea0:	ad19      	add	r5, sp, #100	; 0x64
90012ea2:	ac39      	add	r4, sp, #228	; 0xe4
90012ea4:	9b64      	ldr	r3, [sp, #400]	; 0x190
90012ea6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90012eaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90012eae:	930c      	str	r3, [sp, #48]	; 0x30
90012eb0:	990c      	ldr	r1, [sp, #48]	; 0x30
90012eb2:	6963      	ldr	r3, [r4, #20]
90012eb4:	440b      	add	r3, r1
90012eb6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90012eba:	4408      	add	r0, r1
90012ebc:	b200      	sxth	r0, r0
90012ebe:	4283      	cmp	r3, r0
90012ec0:	900d      	str	r0, [sp, #52]	; 0x34
90012ec2:	f280 80c1 	bge.w	90013048 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
90012ec6:	428b      	cmp	r3, r1
90012ec8:	da08      	bge.n	90012edc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90012eca:	2a00      	cmp	r2, #0
90012ecc:	dd06      	ble.n	90012edc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90012ece:	1acb      	subs	r3, r1, r3
90012ed0:	429a      	cmp	r2, r3
90012ed2:	f2c0 80bb 	blt.w	9001304c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
90012ed6:	2b00      	cmp	r3, #0
90012ed8:	f300 80b9 	bgt.w	9001304e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90012edc:	6967      	ldr	r7, [r4, #20]
90012ede:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90012ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90012ee4:	443b      	add	r3, r7
90012ee6:	461f      	mov	r7, r3
90012ee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90012eea:	1bdf      	subs	r7, r3, r7
90012eec:	4297      	cmp	r7, r2
90012eee:	bfa8      	it	ge
90012ef0:	4617      	movge	r7, r2
90012ef2:	2f00      	cmp	r7, #0
90012ef4:	f340 813c 	ble.w	90013170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
90012ef8:	9b64      	ldr	r3, [sp, #400]	; 0x190
90012efa:	6829      	ldr	r1, [r5, #0]
90012efc:	f9b3 2000 	ldrsh.w	r2, [r3]
90012f00:	f9bb 3000 	ldrsh.w	r3, [fp]
90012f04:	4411      	add	r1, r2
90012f06:	6820      	ldr	r0, [r4, #0]
90012f08:	4299      	cmp	r1, r3
90012f0a:	dd1a      	ble.n	90012f42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90012f0c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90012f10:	4402      	add	r2, r0
90012f12:	440b      	add	r3, r1
90012f14:	b21b      	sxth	r3, r3
90012f16:	429a      	cmp	r2, r3
90012f18:	dc13      	bgt.n	90012f42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90012f1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
90012f1c:	a912      	add	r1, sp, #72	; 0x48
90012f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012f20:	9809      	ldr	r0, [sp, #36]	; 0x24
90012f22:	681b      	ldr	r3, [r3, #0]
90012f24:	9206      	str	r2, [sp, #24]
90012f26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90012f28:	9500      	str	r5, [sp, #0]
90012f2a:	9205      	str	r2, [sp, #20]
90012f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90012f2e:	e9cd b203 	strd	fp, r2, [sp, #12]
90012f32:	9a64      	ldr	r2, [sp, #400]	; 0x190
90012f34:	e9cd 8201 	strd	r8, r2, [sp, #4]
90012f38:	aa49      	add	r2, sp, #292	; 0x124
90012f3a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90012f3e:	4623      	mov	r3, r4
90012f40:	47c8      	blx	r9
90012f42:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90012f46:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90012f4a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90012f4e:	ee37 7a27 	vadd.f32	s14, s14, s15
90012f52:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90012f56:	68a1      	ldr	r1, [r4, #8]
90012f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
90012f5c:	ed94 6a08 	vldr	s12, [r4, #32]
90012f60:	edd4 6a07 	vldr	s13, [r4, #28]
90012f64:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90012f68:	ee76 6a86 	vadd.f32	s13, s13, s12
90012f6c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90012f70:	e9d4 2300 	ldrd	r2, r3, [r4]
90012f74:	edc4 6a07 	vstr	s13, [r4, #28]
90012f78:	441a      	add	r2, r3
90012f7a:	6963      	ldr	r3, [r4, #20]
90012f7c:	3301      	adds	r3, #1
90012f7e:	6022      	str	r2, [r4, #0]
90012f80:	6163      	str	r3, [r4, #20]
90012f82:	69a3      	ldr	r3, [r4, #24]
90012f84:	3b01      	subs	r3, #1
90012f86:	61a3      	str	r3, [r4, #24]
90012f88:	6923      	ldr	r3, [r4, #16]
90012f8a:	440b      	add	r3, r1
90012f8c:	68e1      	ldr	r1, [r4, #12]
90012f8e:	428b      	cmp	r3, r1
90012f90:	6123      	str	r3, [r4, #16]
90012f92:	db15      	blt.n	90012fc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
90012f94:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90012f98:	3201      	adds	r2, #1
90012f9a:	1a5b      	subs	r3, r3, r1
90012f9c:	ee76 6a26 	vadd.f32	s13, s12, s13
90012fa0:	6022      	str	r2, [r4, #0]
90012fa2:	6123      	str	r3, [r4, #16]
90012fa4:	edc4 6a07 	vstr	s13, [r4, #28]
90012fa8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90012fac:	ee36 7a87 	vadd.f32	s14, s13, s14
90012fb0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90012fb4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90012fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
90012fbc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90012fc0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90012fc4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90012fc8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90012fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
90012fd0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90012fd4:	68a9      	ldr	r1, [r5, #8]
90012fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
90012fda:	ed95 6a08 	vldr	s12, [r5, #32]
90012fde:	edd5 6a07 	vldr	s13, [r5, #28]
90012fe2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90012fe6:	ee76 6a86 	vadd.f32	s13, s13, s12
90012fea:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90012fee:	e9d5 2300 	ldrd	r2, r3, [r5]
90012ff2:	edc5 6a07 	vstr	s13, [r5, #28]
90012ff6:	441a      	add	r2, r3
90012ff8:	696b      	ldr	r3, [r5, #20]
90012ffa:	3301      	adds	r3, #1
90012ffc:	602a      	str	r2, [r5, #0]
90012ffe:	616b      	str	r3, [r5, #20]
90013000:	69ab      	ldr	r3, [r5, #24]
90013002:	3b01      	subs	r3, #1
90013004:	61ab      	str	r3, [r5, #24]
90013006:	692b      	ldr	r3, [r5, #16]
90013008:	440b      	add	r3, r1
9001300a:	68e9      	ldr	r1, [r5, #12]
9001300c:	428b      	cmp	r3, r1
9001300e:	612b      	str	r3, [r5, #16]
90013010:	db15      	blt.n	9001303e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
90013012:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90013016:	3201      	adds	r2, #1
90013018:	1a5b      	subs	r3, r3, r1
9001301a:	ee76 6a26 	vadd.f32	s13, s12, s13
9001301e:	602a      	str	r2, [r5, #0]
90013020:	612b      	str	r3, [r5, #16]
90013022:	edc5 6a07 	vstr	s13, [r5, #28]
90013026:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
9001302a:	ee36 7a87 	vadd.f32	s14, s13, s14
9001302e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90013032:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90013036:	ee77 7a27 	vadd.f32	s15, s14, s15
9001303a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
9001303e:	3f01      	subs	r7, #1
90013040:	e757      	b.n	90012ef2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
90013042:	ad39      	add	r5, sp, #228	; 0xe4
90013044:	ac19      	add	r4, sp, #100	; 0x64
90013046:	e72d      	b.n	90012ea4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
90013048:	4613      	mov	r3, r2
9001304a:	e744      	b.n	90012ed6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
9001304c:	4613      	mov	r3, r2
9001304e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
90013050:	469e      	mov	lr, r3
90013052:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
90013056:	461f      	mov	r7, r3
90013058:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
9001305c:	f04f 0900 	mov.w	r9, #0
90013060:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
90013064:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
90013068:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
9001306c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
90013070:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
90013074:	993d      	ldr	r1, [sp, #244]	; 0xf4
90013076:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
9001307a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
9001307e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
90013082:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
90013086:	960e      	str	r6, [sp, #56]	; 0x38
90013088:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
9001308c:	2f00      	cmp	r7, #0
9001308e:	d146      	bne.n	9001311e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
90013090:	449c      	add	ip, r3
90013092:	1ad7      	subs	r7, r2, r3
90013094:	f1b9 0f00 	cmp.w	r9, #0
90013098:	d009      	beq.n	900130ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
9001309a:	9039      	str	r0, [sp, #228]	; 0xe4
9001309c:	913d      	str	r1, [sp, #244]	; 0xf4
9001309e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
900130a2:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
900130a6:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
900130aa:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
900130ae:	991b      	ldr	r1, [sp, #108]	; 0x6c
900130b0:	f04f 0800 	mov.w	r8, #0
900130b4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
900130b8:	910e      	str	r1, [sp, #56]	; 0x38
900130ba:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
900130be:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
900130c2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
900130c6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
900130ca:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
900130ce:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
900130d2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
900130d6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
900130da:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
900130de:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
900130e2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
900130e6:	f1be 0f00 	cmp.w	lr, #0
900130ea:	d030      	beq.n	9001314e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
900130ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
900130ee:	4450      	add	r0, sl
900130f0:	ee76 6aa4 	vadd.f32	s13, s13, s9
900130f4:	4431      	add	r1, r6
900130f6:	ee37 7a04 	vadd.f32	s14, s14, s8
900130fa:	ee77 7aa3 	vadd.f32	s15, s15, s7
900130fe:	4549      	cmp	r1, r9
90013100:	db08      	blt.n	90013114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
90013102:	ee77 7a85 	vadd.f32	s15, s15, s10
90013106:	3001      	adds	r0, #1
90013108:	ee76 6aa5 	vadd.f32	s13, s13, s11
9001310c:	eba1 0109 	sub.w	r1, r1, r9
90013110:	ee37 7a06 	vadd.f32	s14, s14, s12
90013114:	f10e 3eff 	add.w	lr, lr, #4294967295
90013118:	f04f 0801 	mov.w	r8, #1
9001311c:	e7e3      	b.n	900130e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
9001311e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90013120:	4450      	add	r0, sl
90013122:	ee37 7a24 	vadd.f32	s14, s14, s9
90013126:	4431      	add	r1, r6
90013128:	ee77 7a84 	vadd.f32	s15, s15, s8
9001312c:	ee76 6aa3 	vadd.f32	s13, s13, s7
90013130:	4541      	cmp	r1, r8
90013132:	db08      	blt.n	90013146 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
90013134:	ee76 6a85 	vadd.f32	s13, s13, s10
90013138:	3001      	adds	r0, #1
9001313a:	ee37 7a25 	vadd.f32	s14, s14, s11
9001313e:	eba1 0108 	sub.w	r1, r1, r8
90013142:	ee77 7a86 	vadd.f32	s15, s15, s12
90013146:	3f01      	subs	r7, #1
90013148:	f04f 0901 	mov.w	r9, #1
9001314c:	e79e      	b.n	9001308c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
9001314e:	449c      	add	ip, r3
90013150:	1aff      	subs	r7, r7, r3
90013152:	f1b8 0f00 	cmp.w	r8, #0
90013156:	d009      	beq.n	9001316c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
90013158:	9019      	str	r0, [sp, #100]	; 0x64
9001315a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
9001315e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90013162:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90013166:	911d      	str	r1, [sp, #116]	; 0x74
90013168:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
9001316c:	1ad2      	subs	r2, r2, r3
9001316e:	e6b5      	b.n	90012edc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90013170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90013172:	681b      	ldr	r3, [r3, #0]
90013174:	b923      	cbnz	r3, 90013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90013176:	4b04      	ldr	r3, [pc, #16]	; (90013188 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
90013178:	6818      	ldr	r0, [r3, #0]
9001317a:	6803      	ldr	r3, [r0, #0]
9001317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001317e:	4798      	blx	r3
90013180:	b05b      	add	sp, #364	; 0x16c
90013182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013186:	bf00      	nop
90013188:	2402626c 	.word	0x2402626c

9001318c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
9001318c:	b570      	push	{r4, r5, r6, lr}
9001318e:	4604      	mov	r4, r0
90013190:	2500      	movs	r5, #0
90013192:	9805      	ldr	r0, [sp, #20]
90013194:	f89d 601c 	ldrb.w	r6, [sp, #28]
90013198:	6061      	str	r1, [r4, #4]
9001319a:	8263      	strh	r3, [r4, #18]
9001319c:	f89d 1010 	ldrb.w	r1, [sp, #16]
900131a0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900131a4:	8025      	strh	r5, [r4, #0]
900131a6:	7221      	strb	r1, [r4, #8]
900131a8:	7266      	strb	r6, [r4, #9]
900131aa:	60e0      	str	r0, [r4, #12]
900131ac:	8222      	strh	r2, [r4, #16]
900131ae:	82a3      	strh	r3, [r4, #20]
900131b0:	82e5      	strh	r5, [r4, #22]
900131b2:	8325      	strh	r5, [r4, #24]
900131b4:	8365      	strh	r5, [r4, #26]
900131b6:	83a5      	strh	r5, [r4, #28]
900131b8:	83e5      	strh	r5, [r4, #30]
900131ba:	8425      	strh	r5, [r4, #32]
900131bc:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
900131c0:	b32e      	cbz	r6, 9001320e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
900131c2:	6803      	ldr	r3, [r0, #0]
900131c4:	695b      	ldr	r3, [r3, #20]
900131c6:	4798      	blx	r3
900131c8:	4606      	mov	r6, r0
900131ca:	b300      	cbz	r0, 9001320e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
900131cc:	68e0      	ldr	r0, [r4, #12]
900131ce:	4631      	mov	r1, r6
900131d0:	6803      	ldr	r3, [r0, #0]
900131d2:	68db      	ldr	r3, [r3, #12]
900131d4:	4798      	blx	r3
900131d6:	4605      	mov	r5, r0
900131d8:	b1c8      	cbz	r0, 9001320e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
900131da:	7b43      	ldrb	r3, [r0, #13]
900131dc:	7a82      	ldrb	r2, [r0, #10]
900131de:	005b      	lsls	r3, r3, #1
900131e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
900131e4:	4313      	orrs	r3, r2
900131e6:	8423      	strh	r3, [r4, #32]
900131e8:	7a63      	ldrb	r3, [r4, #9]
900131ea:	2b06      	cmp	r3, #6
900131ec:	d10f      	bne.n	9001320e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
900131ee:	68e0      	ldr	r0, [r4, #12]
900131f0:	462a      	mov	r2, r5
900131f2:	4631      	mov	r1, r6
900131f4:	6803      	ldr	r3, [r0, #0]
900131f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900131f8:	4798      	blx	r3
900131fa:	7b6b      	ldrb	r3, [r5, #13]
900131fc:	005b      	lsls	r3, r3, #1
900131fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
90013202:	7aab      	ldrb	r3, [r5, #10]
90013204:	4313      	orrs	r3, r2
90013206:	4418      	add	r0, r3
90013208:	8c23      	ldrh	r3, [r4, #32]
9001320a:	4418      	add	r0, r3
9001320c:	8420      	strh	r0, [r4, #32]
9001320e:	4620      	mov	r0, r4
90013210:	bd70      	pop	{r4, r5, r6, pc}

90013212 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
90013212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013216:	2400      	movs	r4, #0
90013218:	b085      	sub	sp, #20
9001321a:	4681      	mov	r9, r0
9001321c:	4688      	mov	r8, r1
9001321e:	4692      	mov	sl, r2
90013220:	469b      	mov	fp, r3
90013222:	4627      	mov	r7, r4
90013224:	4625      	mov	r5, r4
90013226:	4626      	mov	r6, r4
90013228:	4554      	cmp	r4, sl
9001322a:	da2a      	bge.n	90013282 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
9001322c:	2300      	movs	r3, #0
9001322e:	9303      	str	r3, [sp, #12]
90013230:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013234:	429d      	cmp	r5, r3
90013236:	d004      	beq.n	90013242 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
90013238:	f242 030b 	movw	r3, #8203	; 0x200b
9001323c:	429d      	cmp	r5, r3
9001323e:	bf18      	it	ne
90013240:	462f      	movne	r7, r5
90013242:	ab03      	add	r3, sp, #12
90013244:	4642      	mov	r2, r8
90013246:	4659      	mov	r1, fp
90013248:	4648      	mov	r0, r9
9001324a:	f002 ff23 	bl	90016094 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
9001324e:	4605      	mov	r5, r0
90013250:	b1b8      	cbz	r0, 90013282 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90013252:	280a      	cmp	r0, #10
90013254:	d015      	beq.n	90013282 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90013256:	9a03      	ldr	r2, [sp, #12]
90013258:	b18a      	cbz	r2, 9001327e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
9001325a:	7b50      	ldrb	r0, [r2, #13]
9001325c:	4639      	mov	r1, r7
9001325e:	7a93      	ldrb	r3, [r2, #10]
90013260:	0040      	lsls	r0, r0, #1
90013262:	8895      	ldrh	r5, [r2, #4]
90013264:	f400 7080 	and.w	r0, r0, #256	; 0x100
90013268:	4303      	orrs	r3, r0
9001326a:	4640      	mov	r0, r8
9001326c:	9301      	str	r3, [sp, #4]
9001326e:	f8d8 3000 	ldr.w	r3, [r8]
90013272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013274:	4798      	blx	r3
90013276:	9b01      	ldr	r3, [sp, #4]
90013278:	4418      	add	r0, r3
9001327a:	4406      	add	r6, r0
9001327c:	b2b6      	uxth	r6, r6
9001327e:	3401      	adds	r4, #1
90013280:	e7d2      	b.n	90013228 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
90013282:	4630      	mov	r0, r6
90013284:	b005      	add	sp, #20
90013286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001328a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
9001328a:	2a02      	cmp	r2, #2
9001328c:	b530      	push	{r4, r5, lr}
9001328e:	d011      	beq.n	900132b4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
90013290:	2a03      	cmp	r2, #3
90013292:	d01c      	beq.n	900132ce <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
90013294:	2a01      	cmp	r2, #1
90013296:	d10c      	bne.n	900132b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90013298:	888b      	ldrh	r3, [r1, #4]
9001329a:	8801      	ldrh	r1, [r0, #0]
9001329c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
900132a0:	1a5b      	subs	r3, r3, r1
900132a2:	8844      	ldrh	r4, [r0, #2]
900132a4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
900132a8:	1a9b      	subs	r3, r3, r2
900132aa:	8004      	strh	r4, [r0, #0]
900132ac:	8081      	strh	r1, [r0, #4]
900132ae:	8043      	strh	r3, [r0, #2]
900132b0:	80c2      	strh	r2, [r0, #6]
900132b2:	bd30      	pop	{r4, r5, pc}
900132b4:	88cb      	ldrh	r3, [r1, #6]
900132b6:	8842      	ldrh	r2, [r0, #2]
900132b8:	1a9b      	subs	r3, r3, r2
900132ba:	88c2      	ldrh	r2, [r0, #6]
900132bc:	1a9b      	subs	r3, r3, r2
900132be:	888a      	ldrh	r2, [r1, #4]
900132c0:	8801      	ldrh	r1, [r0, #0]
900132c2:	8043      	strh	r3, [r0, #2]
900132c4:	1a52      	subs	r2, r2, r1
900132c6:	8881      	ldrh	r1, [r0, #4]
900132c8:	1a52      	subs	r2, r2, r1
900132ca:	8002      	strh	r2, [r0, #0]
900132cc:	e7f1      	b.n	900132b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
900132ce:	88cb      	ldrh	r3, [r1, #6]
900132d0:	8841      	ldrh	r1, [r0, #2]
900132d2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
900132d6:	1a5b      	subs	r3, r3, r1
900132d8:	f9b0 5000 	ldrsh.w	r5, [r0]
900132dc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
900132e0:	1a9b      	subs	r3, r3, r2
900132e2:	8045      	strh	r5, [r0, #2]
900132e4:	8082      	strh	r2, [r0, #4]
900132e6:	8003      	strh	r3, [r0, #0]
900132e8:	80c4      	strh	r4, [r0, #6]
900132ea:	e7e2      	b.n	900132b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

900132ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
900132ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900132f0:	b09f      	sub	sp, #124	; 0x7c
900132f2:	9116      	str	r1, [sp, #88]	; 0x58
900132f4:	9317      	str	r3, [sp, #92]	; 0x5c
900132f6:	9929      	ldr	r1, [sp, #164]	; 0xa4
900132f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900132fa:	8809      	ldrh	r1, [r1, #0]
900132fc:	889b      	ldrh	r3, [r3, #4]
900132fe:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
90013302:	440b      	add	r3, r1
90013304:	9212      	str	r2, [sp, #72]	; 0x48
90013306:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
9001330a:	b21b      	sxth	r3, r3
9001330c:	9011      	str	r0, [sp, #68]	; 0x44
9001330e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
90013312:	9310      	str	r3, [sp, #64]	; 0x40
90013314:	f8d8 3000 	ldr.w	r3, [r8]
90013318:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
9001331c:	7b19      	ldrb	r1, [r3, #12]
9001331e:	7adb      	ldrb	r3, [r3, #11]
90013320:	9114      	str	r1, [sp, #80]	; 0x50
90013322:	9315      	str	r3, [sp, #84]	; 0x54
90013324:	2a00      	cmp	r2, #0
90013326:	d06a      	beq.n	900133fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
90013328:	f898 3010 	ldrb.w	r3, [r8, #16]
9001332c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
9001332e:	2b06      	cmp	r3, #6
90013330:	bf14      	ite	ne
90013332:	2301      	movne	r3, #1
90013334:	2302      	moveq	r3, #2
90013336:	4413      	add	r3, r2
90013338:	f04f 0900 	mov.w	r9, #0
9001333c:	930f      	str	r3, [sp, #60]	; 0x3c
9001333e:	464c      	mov	r4, r9
90013340:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
90013344:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
90013348:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
9001334c:	4293      	cmp	r3, r2
9001334e:	f280 808f 	bge.w	90013470 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90013352:	2300      	movs	r3, #0
90013354:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
90013358:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
9001335c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013360:	429c      	cmp	r4, r3
90013362:	d006      	beq.n	90013372 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
90013364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90013366:	f242 020b 	movw	r2, #8203	; 0x200b
9001336a:	4294      	cmp	r4, r2
9001336c:	bf18      	it	ne
9001336e:	4623      	movne	r3, r4
90013370:	930d      	str	r3, [sp, #52]	; 0x34
90013372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90013374:	992d      	ldr	r1, [sp, #180]	; 0xb4
90013376:	f8d8 2000 	ldr.w	r2, [r8]
9001337a:	428b      	cmp	r3, r1
9001337c:	db41      	blt.n	90013402 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
9001337e:	6813      	ldr	r3, [r2, #0]
90013380:	4610      	mov	r0, r2
90013382:	695b      	ldr	r3, [r3, #20]
90013384:	4798      	blx	r3
90013386:	4604      	mov	r4, r0
90013388:	f8d8 0000 	ldr.w	r0, [r8]
9001338c:	aa1d      	add	r2, sp, #116	; 0x74
9001338e:	4621      	mov	r1, r4
90013390:	6803      	ldr	r3, [r0, #0]
90013392:	689d      	ldr	r5, [r3, #8]
90013394:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90013398:	47a8      	blx	r5
9001339a:	901c      	str	r0, [sp, #112]	; 0x70
9001339c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900133a0:	429c      	cmp	r4, r3
900133a2:	f000 80ec 	beq.w	9001357e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900133a6:	f242 030b 	movw	r3, #8203	; 0x200b
900133aa:	429c      	cmp	r4, r3
900133ac:	f000 80e7 	beq.w	9001357e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900133b0:	2c00      	cmp	r4, #0
900133b2:	f000 80f9 	beq.w	900135a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
900133b6:	2c0a      	cmp	r4, #10
900133b8:	d060      	beq.n	9001347c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
900133ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
900133bc:	b36a      	cbz	r2, 9001341a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
900133be:	8894      	ldrh	r4, [r2, #4]
900133c0:	f1bb 0f00 	cmp.w	fp, #0
900133c4:	d03b      	beq.n	9001343e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
900133c6:	f892 900d 	ldrb.w	r9, [r2, #13]
900133ca:	f1bb 0f01 	cmp.w	fp, #1
900133ce:	ea4f 0949 	mov.w	r9, r9, lsl #1
900133d2:	f409 7380 	and.w	r3, r9, #256	; 0x100
900133d6:	f892 900a 	ldrb.w	r9, [r2, #10]
900133da:	ea49 0903 	orr.w	r9, r9, r3
900133de:	d134      	bne.n	9001344a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
900133e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900133e2:	eba6 0609 	sub.w	r6, r6, r9
900133e6:	2b00      	cmp	r3, #0
900133e8:	d14f      	bne.n	9001348a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
900133ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
900133ec:	eb09 0306 	add.w	r3, r9, r6
900133f0:	4413      	add	r3, r2
900133f2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
900133f4:	f9b2 2000 	ldrsh.w	r2, [r2]
900133f8:	4293      	cmp	r3, r2
900133fa:	da51      	bge.n	900134a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
900133fc:	e038      	b.n	90013470 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
900133fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90013400:	e79a      	b.n	90013338 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
90013402:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90013406:	4659      	mov	r1, fp
90013408:	982c      	ldr	r0, [sp, #176]	; 0xb0
9001340a:	9301      	str	r3, [sp, #4]
9001340c:	ab1d      	add	r3, sp, #116	; 0x74
9001340e:	9300      	str	r3, [sp, #0]
90013410:	ab1c      	add	r3, sp, #112	; 0x70
90013412:	f002 fe88 	bl	90016126 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
90013416:	4604      	mov	r4, r0
90013418:	e7c0      	b.n	9001339c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
9001341a:	f8d8 0000 	ldr.w	r0, [r8]
9001341e:	6803      	ldr	r3, [r0, #0]
90013420:	691b      	ldr	r3, [r3, #16]
90013422:	4798      	blx	r3
90013424:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013428:	4298      	cmp	r0, r3
9001342a:	f000 80a8 	beq.w	9001357e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001342e:	f242 030b 	movw	r3, #8203	; 0x200b
90013432:	4298      	cmp	r0, r3
90013434:	f000 80a3 	beq.w	9001357e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013438:	f1bb 0f00 	cmp.w	fp, #0
9001343c:	d100      	bne.n	90013440 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
9001343e:	444e      	add	r6, r9
90013440:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90013442:	2a00      	cmp	r2, #0
90013444:	d1bf      	bne.n	900133c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
90013446:	4691      	mov	r9, r2
90013448:	e099      	b.n	9001357e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001344a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001344c:	2b00      	cmp	r3, #0
9001344e:	f000 80ad 	beq.w	900135ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
90013452:	f1bb 0f00 	cmp.w	fp, #0
90013456:	d118      	bne.n	9001348a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90013458:	f8d8 0000 	ldr.w	r0, [r8]
9001345c:	990d      	ldr	r1, [sp, #52]	; 0x34
9001345e:	6803      	ldr	r3, [r0, #0]
90013460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013462:	4798      	blx	r3
90013464:	4406      	add	r6, r0
90013466:	9b15      	ldr	r3, [sp, #84]	; 0x54
90013468:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001346a:	1af3      	subs	r3, r6, r3
9001346c:	4293      	cmp	r3, r2
9001346e:	dd17      	ble.n	900134a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90013470:	2c00      	cmp	r4, #0
90013472:	f000 8099 	beq.w	900135a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90013476:	2c0a      	cmp	r4, #10
90013478:	f040 8087 	bne.w	9001358a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
9001347c:	240a      	movs	r4, #10
9001347e:	fab4 f084 	clz	r0, r4
90013482:	0940      	lsrs	r0, r0, #5
90013484:	b01f      	add	sp, #124	; 0x7c
90013486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001348a:	f8d8 0000 	ldr.w	r0, [r8]
9001348e:	990d      	ldr	r1, [sp, #52]	; 0x34
90013490:	6803      	ldr	r3, [r0, #0]
90013492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013494:	4798      	blx	r3
90013496:	f1bb 0f01 	cmp.w	fp, #1
9001349a:	eba6 0600 	sub.w	r6, r6, r0
9001349e:	d0a4      	beq.n	900133ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
900134a0:	981c      	ldr	r0, [sp, #112]	; 0x70
900134a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900134a4:	f990 1009 	ldrsb.w	r1, [r0, #9]
900134a8:	f9b3 7000 	ldrsh.w	r7, [r3]
900134ac:	7b43      	ldrb	r3, [r0, #13]
900134ae:	4431      	add	r1, r6
900134b0:	015b      	lsls	r3, r3, #5
900134b2:	f403 7280 	and.w	r2, r3, #256	; 0x100
900134b6:	7983      	ldrb	r3, [r0, #6]
900134b8:	4313      	orrs	r3, r2
900134ba:	440b      	add	r3, r1
900134bc:	42bb      	cmp	r3, r7
900134be:	db5e      	blt.n	9001357e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900134c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
900134c2:	4299      	cmp	r1, r3
900134c4:	da5b      	bge.n	9001357e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900134c6:	f8d8 0000 	ldr.w	r0, [r8]
900134ca:	42b7      	cmp	r7, r6
900134cc:	6803      	ldr	r3, [r0, #0]
900134ce:	bfcc      	ite	gt
900134d0:	1bbf      	subgt	r7, r7, r6
900134d2:	2700      	movle	r7, #0
900134d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900134d6:	bfc8      	it	gt
900134d8:	b2bf      	uxthgt	r7, r7
900134da:	4798      	blx	r3
900134dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900134de:	7b5a      	ldrb	r2, [r3, #13]
900134e0:	00d1      	lsls	r1, r2, #3
900134e2:	f401 7580 	and.w	r5, r1, #256	; 0x100
900134e6:	7a19      	ldrb	r1, [r3, #8]
900134e8:	4329      	orrs	r1, r5
900134ea:	0655      	lsls	r5, r2, #25
900134ec:	9d17      	ldr	r5, [sp, #92]	; 0x5c
900134ee:	bf48      	it	mi
900134f0:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
900134f4:	4405      	add	r5, r0
900134f6:	bf48      	it	mi
900134f8:	b209      	sxthmi	r1, r1
900134fa:	1a6d      	subs	r5, r5, r1
900134fc:	9929      	ldr	r1, [sp, #164]	; 0xa4
900134fe:	b2ad      	uxth	r5, r5
90013500:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
90013504:	fa0f fa85 	sxth.w	sl, r5
90013508:	4551      	cmp	r1, sl
9001350a:	dd3c      	ble.n	90013586 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
9001350c:	0112      	lsls	r2, r2, #4
9001350e:	79d8      	ldrb	r0, [r3, #7]
90013510:	f402 7280 	and.w	r2, r2, #256	; 0x100
90013514:	4302      	orrs	r2, r0
90013516:	4492      	add	sl, r2
90013518:	4551      	cmp	r1, sl
9001351a:	dc30      	bgt.n	9001357e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001351c:	1b4d      	subs	r5, r1, r5
9001351e:	468a      	mov	sl, r1
90013520:	b22d      	sxth	r5, r5
90013522:	9319      	str	r3, [sp, #100]	; 0x64
90013524:	b2ad      	uxth	r5, r5
90013526:	9b11      	ldr	r3, [sp, #68]	; 0x44
90013528:	f8d8 0000 	ldr.w	r0, [r8]
9001352c:	681a      	ldr	r2, [r3, #0]
9001352e:	6801      	ldr	r1, [r0, #0]
90013530:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
90013532:	9a1d      	ldr	r2, [sp, #116]	; 0x74
90013534:	9313      	str	r3, [sp, #76]	; 0x4c
90013536:	9218      	str	r2, [sp, #96]	; 0x60
90013538:	6c09      	ldr	r1, [r1, #64]	; 0x40
9001353a:	4788      	blx	r1
9001353c:	f898 1006 	ldrb.w	r1, [r8, #6]
90013540:	9b19      	ldr	r3, [sp, #100]	; 0x64
90013542:	910b      	str	r1, [sp, #44]	; 0x2c
90013544:	f898 100e 	ldrb.w	r1, [r8, #14]
90013548:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001354a:	910a      	str	r1, [sp, #40]	; 0x28
9001354c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
90013550:	9109      	str	r1, [sp, #36]	; 0x24
90013552:	f8d8 1008 	ldr.w	r1, [r8, #8]
90013556:	9305      	str	r3, [sp, #20]
90013558:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001355a:	9206      	str	r2, [sp, #24]
9001355c:	9304      	str	r3, [sp, #16]
9001355e:	9b12      	ldr	r3, [sp, #72]	; 0x48
90013560:	f8cd a004 	str.w	sl, [sp, #4]
90013564:	e9cd 7502 	strd	r7, r5, [sp, #8]
90013568:	4437      	add	r7, r6
9001356a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001356c:	b23f      	sxth	r7, r7
9001356e:	e9cd 0107 	strd	r0, r1, [sp, #28]
90013572:	9700      	str	r7, [sp, #0]
90013574:	9916      	ldr	r1, [sp, #88]	; 0x58
90013576:	681a      	ldr	r2, [r3, #0]
90013578:	9811      	ldr	r0, [sp, #68]	; 0x44
9001357a:	685b      	ldr	r3, [r3, #4]
9001357c:	47a8      	blx	r5
9001357e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90013580:	3301      	adds	r3, #1
90013582:	930e      	str	r3, [sp, #56]	; 0x38
90013584:	e6e0      	b.n	90013348 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
90013586:	2500      	movs	r5, #0
90013588:	e7cb      	b.n	90013522 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
9001358a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001358c:	3501      	adds	r5, #1
9001358e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90013590:	429d      	cmp	r5, r3
90013592:	f6bf af74 	bge.w	9001347e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
90013596:	4659      	mov	r1, fp
90013598:	982c      	ldr	r0, [sp, #176]	; 0xb0
9001359a:	f7f2 f84d 	bl	90005638 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001359e:	4604      	mov	r4, r0
900135a0:	b110      	cbz	r0, 900135a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
900135a2:	280a      	cmp	r0, #10
900135a4:	d1f2      	bne.n	9001358c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
900135a6:	e769      	b.n	9001347c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
900135a8:	2400      	movs	r4, #0
900135aa:	e768      	b.n	9001347e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
900135ac:	f1bb 0f00 	cmp.w	fp, #0
900135b0:	f43f af59 	beq.w	90013466 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
900135b4:	e774      	b.n	900134a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

900135b6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
900135b6:	b530      	push	{r4, r5, lr}
900135b8:	8ac4      	ldrh	r4, [r0, #22]
900135ba:	8b45      	ldrh	r5, [r0, #26]
900135bc:	8343      	strh	r3, [r0, #26]
900135be:	442c      	add	r4, r5
900135c0:	1ae4      	subs	r4, r4, r3
900135c2:	8b83      	ldrh	r3, [r0, #28]
900135c4:	82c4      	strh	r4, [r0, #22]
900135c6:	8b04      	ldrh	r4, [r0, #24]
900135c8:	4422      	add	r2, r4
900135ca:	440c      	add	r4, r1
900135cc:	1a59      	subs	r1, r3, r1
900135ce:	83c2      	strh	r2, [r0, #30]
900135d0:	8304      	strh	r4, [r0, #24]
900135d2:	8381      	strh	r1, [r0, #28]
900135d4:	bd30      	pop	{r4, r5, pc}

900135d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
900135d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900135da:	4604      	mov	r4, r0
900135dc:	8a47      	ldrh	r7, [r0, #18]
900135de:	68c0      	ldr	r0, [r0, #12]
900135e0:	b085      	sub	sp, #20
900135e2:	6803      	ldr	r3, [r0, #0]
900135e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900135e6:	4798      	blx	r3
900135e8:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
900135ec:	7a63      	ldrb	r3, [r4, #9]
900135ee:	eb06 0640 	add.w	r6, r6, r0, lsl #1
900135f2:	3b01      	subs	r3, #1
900135f4:	42b7      	cmp	r7, r6
900135f6:	bfac      	ite	ge
900135f8:	f04f 0900 	movge.w	r9, #0
900135fc:	f04f 0901 	movlt.w	r9, #1
90013600:	2b05      	cmp	r3, #5
90013602:	d804      	bhi.n	9001360e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
90013604:	e8df f003 	tbb	[pc, r3]
90013608:	470f0854 	.word	0x470f0854
9001360c:	4c4c      	.short	0x4c4c
9001360e:	2500      	movs	r5, #0
90013610:	46a9      	mov	r9, r5
90013612:	462e      	mov	r6, r5
90013614:	462f      	mov	r7, r5
90013616:	e00e      	b.n	90013636 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90013618:	42b7      	cmp	r7, r6
9001361a:	f04f 0500 	mov.w	r5, #0
9001361e:	bfb4      	ite	lt
90013620:	2600      	movlt	r6, #0
90013622:	2601      	movge	r6, #1
90013624:	e7f6      	b.n	90013614 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
90013626:	42b7      	cmp	r7, r6
90013628:	464d      	mov	r5, r9
9001362a:	f04f 0900 	mov.w	r9, #0
9001362e:	bfb4      	ite	lt
90013630:	2600      	movlt	r6, #0
90013632:	2601      	movge	r6, #1
90013634:	464f      	mov	r7, r9
90013636:	f04f 0800 	mov.w	r8, #0
9001363a:	f8a4 8016 	strh.w	r8, [r4, #22]
9001363e:	f8a4 8018 	strh.w	r8, [r4, #24]
90013642:	f8cd 8004 	str.w	r8, [sp, #4]
90013646:	2300      	movs	r3, #0
90013648:	9303      	str	r3, [sp, #12]
9001364a:	8823      	ldrh	r3, [r4, #0]
9001364c:	2b20      	cmp	r3, #32
9001364e:	d033      	beq.n	900136b8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
90013650:	f242 010b 	movw	r1, #8203	; 0x200b
90013654:	1a5a      	subs	r2, r3, r1
90013656:	f1d2 0a00 	rsbs	sl, r2, #0
9001365a:	eb4a 0a02 	adc.w	sl, sl, r2
9001365e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
90013662:	4293      	cmp	r3, r2
90013664:	d008      	beq.n	90013678 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
90013666:	428b      	cmp	r3, r1
90013668:	9a01      	ldr	r2, [sp, #4]
9001366a:	bf0e      	itee	eq
9001366c:	f04f 0a01 	moveq.w	sl, #1
90013670:	461a      	movne	r2, r3
90013672:	f04f 0a00 	movne.w	sl, #0
90013676:	9201      	str	r2, [sp, #4]
90013678:	ab03      	add	r3, sp, #12
9001367a:	68e2      	ldr	r2, [r4, #12]
9001367c:	7a21      	ldrb	r1, [r4, #8]
9001367e:	6860      	ldr	r0, [r4, #4]
90013680:	f002 fd08 	bl	90016094 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013684:	8020      	strh	r0, [r4, #0]
90013686:	b9d8      	cbnz	r0, 900136c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
90013688:	8ba2      	ldrh	r2, [r4, #28]
9001368a:	2300      	movs	r3, #0
9001368c:	4611      	mov	r1, r2
9001368e:	4620      	mov	r0, r4
90013690:	f7ff ff91 	bl	900135b6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90013694:	e06e      	b.n	90013774 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
90013696:	2500      	movs	r5, #0
90013698:	2701      	movs	r7, #1
9001369a:	46a9      	mov	r9, r5
9001369c:	462e      	mov	r6, r5
9001369e:	e7ca      	b.n	90013636 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900136a0:	42b7      	cmp	r7, r6
900136a2:	f04f 0500 	mov.w	r5, #0
900136a6:	bfb4      	ite	lt
900136a8:	2700      	movlt	r7, #0
900136aa:	2701      	movge	r7, #1
900136ac:	462e      	mov	r6, r5
900136ae:	e7c2      	b.n	90013636 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900136b0:	2500      	movs	r5, #0
900136b2:	2601      	movs	r6, #1
900136b4:	46a9      	mov	r9, r5
900136b6:	e7ad      	b.n	90013614 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
900136b8:	9301      	str	r3, [sp, #4]
900136ba:	f04f 0a01 	mov.w	sl, #1
900136be:	e7db      	b.n	90013678 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
900136c0:	8b63      	ldrh	r3, [r4, #26]
900136c2:	280a      	cmp	r0, #10
900136c4:	f103 0301 	add.w	r3, r3, #1
900136c8:	8363      	strh	r3, [r4, #26]
900136ca:	d0dd      	beq.n	90013688 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
900136cc:	9a03      	ldr	r2, [sp, #12]
900136ce:	bb62      	cbnz	r2, 9001372a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
900136d0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900136d4:	4298      	cmp	r0, r3
900136d6:	d003      	beq.n	900136e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
900136d8:	f242 030b 	movw	r3, #8203	; 0x200b
900136dc:	4298      	cmp	r0, r3
900136de:	d1b2      	bne.n	90013646 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900136e0:	8823      	ldrh	r3, [r4, #0]
900136e2:	8ba1      	ldrh	r1, [r4, #28]
900136e4:	2b20      	cmp	r3, #32
900136e6:	d003      	beq.n	900136f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
900136e8:	f242 000b 	movw	r0, #8203	; 0x200b
900136ec:	4283      	cmp	r3, r0
900136ee:	d131      	bne.n	90013754 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
900136f0:	f1ba 0f00 	cmp.w	sl, #0
900136f4:	bf0a      	itet	eq
900136f6:	4688      	moveq	r8, r1
900136f8:	4650      	movne	r0, sl
900136fa:	2001      	moveq	r0, #1
900136fc:	440a      	add	r2, r1
900136fe:	8b23      	ldrh	r3, [r4, #24]
90013700:	f8b4 c010 	ldrh.w	ip, [r4, #16]
90013704:	b292      	uxth	r2, r2
90013706:	83a2      	strh	r2, [r4, #28]
90013708:	4413      	add	r3, r2
9001370a:	f1b9 0f00 	cmp.w	r9, #0
9001370e:	d102      	bne.n	90013716 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
90013710:	2d00      	cmp	r5, #0
90013712:	d042      	beq.n	9001379a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
90013714:	b300      	cbz	r0, 90013758 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
90013716:	8c21      	ldrh	r1, [r4, #32]
90013718:	4419      	add	r1, r3
9001371a:	458c      	cmp	ip, r1
9001371c:	da37      	bge.n	9001378e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
9001371e:	8ae1      	ldrh	r1, [r4, #22]
90013720:	2900      	cmp	r1, #0
90013722:	d034      	beq.n	9001378e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
90013724:	4563      	cmp	r3, ip
90013726:	dd8e      	ble.n	90013646 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013728:	e01d      	b.n	90013766 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
9001372a:	8893      	ldrh	r3, [r2, #4]
9001372c:	9901      	ldr	r1, [sp, #4]
9001372e:	8023      	strh	r3, [r4, #0]
90013730:	f892 b00d 	ldrb.w	fp, [r2, #13]
90013734:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
90013738:	f40b 7080 	and.w	r0, fp, #256	; 0x100
9001373c:	f892 b00a 	ldrb.w	fp, [r2, #10]
90013740:	ea4b 0b00 	orr.w	fp, fp, r0
90013744:	68e0      	ldr	r0, [r4, #12]
90013746:	6803      	ldr	r3, [r0, #0]
90013748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001374a:	4798      	blx	r3
9001374c:	eb0b 0200 	add.w	r2, fp, r0
90013750:	b292      	uxth	r2, r2
90013752:	e7c5      	b.n	900136e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
90013754:	2000      	movs	r0, #0
90013756:	e7d1      	b.n	900136fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
90013758:	4563      	cmp	r3, ip
9001375a:	f77f af74 	ble.w	90013646 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001375e:	8ae3      	ldrh	r3, [r4, #22]
90013760:	2b00      	cmp	r3, #0
90013762:	f43f af70 	beq.w	90013646 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013766:	2301      	movs	r3, #1
90013768:	8c22      	ldrh	r2, [r4, #32]
9001376a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
9001376e:	8be3      	ldrh	r3, [r4, #30]
90013770:	4413      	add	r3, r2
90013772:	83e3      	strh	r3, [r4, #30]
90013774:	68e0      	ldr	r0, [r4, #12]
90013776:	6803      	ldr	r3, [r0, #0]
90013778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001377a:	4798      	blx	r3
9001377c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
90013780:	4418      	add	r0, r3
90013782:	8a63      	ldrh	r3, [r4, #18]
90013784:	1a18      	subs	r0, r3, r0
90013786:	8260      	strh	r0, [r4, #18]
90013788:	b005      	add	sp, #20
9001378a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001378e:	2300      	movs	r3, #0
90013790:	4611      	mov	r1, r2
90013792:	4620      	mov	r0, r4
90013794:	f7ff ff0f 	bl	900135b6 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90013798:	e755      	b.n	90013646 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001379a:	4563      	cmp	r3, ip
9001379c:	dd14      	ble.n	900137c8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
9001379e:	b117      	cbz	r7, 900137a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
900137a0:	2301      	movs	r3, #1
900137a2:	460a      	mov	r2, r1
900137a4:	e772      	b.n	9001368c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
900137a6:	2e00      	cmp	r6, #0
900137a8:	f43f af4d 	beq.w	90013646 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900137ac:	2800      	cmp	r0, #0
900137ae:	f47f af4a 	bne.w	90013646 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900137b2:	f1ba 0f00 	cmp.w	sl, #0
900137b6:	d002      	beq.n	900137be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
900137b8:	2301      	movs	r3, #1
900137ba:	4642      	mov	r2, r8
900137bc:	e767      	b.n	9001368e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
900137be:	8ae3      	ldrh	r3, [r4, #22]
900137c0:	2b00      	cmp	r3, #0
900137c2:	f43f af40 	beq.w	90013646 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900137c6:	e7d5      	b.n	90013774 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
900137c8:	2800      	cmp	r0, #0
900137ca:	f47f af3c 	bne.w	90013646 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900137ce:	f1ba 0f00 	cmp.w	sl, #0
900137d2:	f43f af38 	beq.w	90013646 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900137d6:	2301      	movs	r3, #1
900137d8:	4642      	mov	r2, r8
900137da:	e7da      	b.n	90013792 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

900137dc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
900137dc:	b5f0      	push	{r4, r5, r6, r7, lr}
900137de:	4605      	mov	r5, r0
900137e0:	b08f      	sub	sp, #60	; 0x3c
900137e2:	4617      	mov	r7, r2
900137e4:	461c      	mov	r4, r3
900137e6:	460e      	mov	r6, r1
900137e8:	b1d1      	cbz	r1, 90013820 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
900137ea:	681b      	ldr	r3, [r3, #0]
900137ec:	4620      	mov	r0, r4
900137ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900137f0:	4798      	blx	r3
900137f2:	4240      	negs	r0, r0
900137f4:	9603      	str	r6, [sp, #12]
900137f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
900137fa:	b200      	sxth	r0, r0
900137fc:	9700      	str	r7, [sp, #0]
900137fe:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
90013802:	4629      	mov	r1, r5
90013804:	e9cd 4001 	strd	r4, r0, [sp, #4]
90013808:	2401      	movs	r4, #1
9001380a:	a805      	add	r0, sp, #20
9001380c:	f7ff fcbe 	bl	9001318c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90013810:	a805      	add	r0, sp, #20
90013812:	f7ff fee0 	bl	900135d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90013816:	f8bd 3014 	ldrh.w	r3, [sp, #20]
9001381a:	b163      	cbz	r3, 90013836 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
9001381c:	3401      	adds	r4, #1
9001381e:	e7f7      	b.n	90013810 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
90013820:	2401      	movs	r4, #1
90013822:	f002 fd03 	bl	9001622c <_ZN8touchgfx12TextProvider11getNextCharEv>
90013826:	280a      	cmp	r0, #10
90013828:	4628      	mov	r0, r5
9001382a:	bf08      	it	eq
9001382c:	3401      	addeq	r4, #1
9001382e:	f002 fcfd 	bl	9001622c <_ZN8touchgfx12TextProvider11getNextCharEv>
90013832:	2800      	cmp	r0, #0
90013834:	d1f7      	bne.n	90013826 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
90013836:	b2a0      	uxth	r0, r4
90013838:	b00f      	add	sp, #60	; 0x3c
9001383a:	bdf0      	pop	{r4, r5, r6, r7, pc}

9001383c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
9001383c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013840:	b0e3      	sub	sp, #396	; 0x18c
90013842:	461c      	mov	r4, r3
90013844:	4683      	mov	fp, r0
90013846:	4688      	mov	r8, r1
90013848:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
9001384a:	2b00      	cmp	r3, #0
9001384c:	f000 810f 	beq.w	90013a6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013850:	6823      	ldr	r3, [r4, #0]
90013852:	2b00      	cmp	r3, #0
90013854:	f000 810b 	beq.w	90013a6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013858:	7ba3      	ldrb	r3, [r4, #14]
9001385a:	2b00      	cmp	r3, #0
9001385c:	f000 8107 	beq.w	90013a6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013860:	ad0a      	add	r5, sp, #40	; 0x28
90013862:	6810      	ldr	r0, [r2, #0]
90013864:	6851      	ldr	r1, [r2, #4]
90013866:	462b      	mov	r3, r5
90013868:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
9001386c:	c303      	stmia	r3!, {r0, r1}
9001386e:	2100      	movs	r1, #0
90013870:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
90013874:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
90013878:	4628      	mov	r0, r5
9001387a:	910c      	str	r1, [sp, #48]	; 0x30
9001387c:	a90c      	add	r1, sp, #48	; 0x30
9001387e:	79a2      	ldrb	r2, [r4, #6]
90013880:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90013884:	f7ff fd01 	bl	9001328a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
90013888:	a90c      	add	r1, sp, #48	; 0x30
9001388a:	79a2      	ldrb	r2, [r4, #6]
9001388c:	4608      	mov	r0, r1
9001388e:	f7ff fcfc 	bl	9001328a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
90013892:	a817      	add	r0, sp, #92	; 0x5c
90013894:	f002 f8b6 	bl	90015a04 <_ZN8touchgfx12TextProviderC1Ev>
90013898:	6820      	ldr	r0, [r4, #0]
9001389a:	6803      	ldr	r3, [r0, #0]
9001389c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001389e:	4798      	blx	r3
900138a0:	4606      	mov	r6, r0
900138a2:	6820      	ldr	r0, [r4, #0]
900138a4:	6803      	ldr	r3, [r0, #0]
900138a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900138a8:	4798      	blx	r3
900138aa:	4633      	mov	r3, r6
900138ac:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
900138ae:	996c      	ldr	r1, [sp, #432]	; 0x1b0
900138b0:	9000      	str	r0, [sp, #0]
900138b2:	a817      	add	r0, sp, #92	; 0x5c
900138b4:	f002 f8f9 	bl	90015aaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900138b8:	6820      	ldr	r0, [r4, #0]
900138ba:	f894 a004 	ldrb.w	sl, [r4, #4]
900138be:	6803      	ldr	r3, [r0, #0]
900138c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900138c2:	4798      	blx	r3
900138c4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
900138c8:	6823      	ldr	r3, [r4, #0]
900138ca:	4607      	mov	r7, r0
900138cc:	4406      	add	r6, r0
900138ce:	a830      	add	r0, sp, #192	; 0xc0
900138d0:	f893 9009 	ldrb.w	r9, [r3, #9]
900138d4:	f002 f896 	bl	90015a04 <_ZN8touchgfx12TextProviderC1Ev>
900138d8:	7c23      	ldrb	r3, [r4, #16]
900138da:	b17b      	cbz	r3, 900138fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
900138dc:	6820      	ldr	r0, [r4, #0]
900138de:	6803      	ldr	r3, [r0, #0]
900138e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900138e2:	4798      	blx	r3
900138e4:	9009      	str	r0, [sp, #36]	; 0x24
900138e6:	6820      	ldr	r0, [r4, #0]
900138e8:	6802      	ldr	r2, [r0, #0]
900138ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
900138ec:	4790      	blx	r2
900138ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
900138f0:	9000      	str	r0, [sp, #0]
900138f2:	a830      	add	r0, sp, #192	; 0xc0
900138f4:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
900138f6:	996c      	ldr	r1, [sp, #432]	; 0x1b0
900138f8:	f002 f8d7 	bl	90015aaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900138fc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
90013900:	a80e      	add	r0, sp, #56	; 0x38
90013902:	7be2      	ldrb	r2, [r4, #15]
90013904:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90013908:	1a8a      	subs	r2, r1, r2
9001390a:	7c21      	ldrb	r1, [r4, #16]
9001390c:	9103      	str	r1, [sp, #12]
9001390e:	b292      	uxth	r2, r2
90013910:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
90013914:	9102      	str	r1, [sp, #8]
90013916:	6821      	ldr	r1, [r4, #0]
90013918:	9101      	str	r1, [sp, #4]
9001391a:	7961      	ldrb	r1, [r4, #5]
9001391c:	9100      	str	r1, [sp, #0]
9001391e:	a930      	add	r1, sp, #192	; 0xc0
90013920:	f7ff fc34 	bl	9001318c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90013924:	2e00      	cmp	r6, #0
90013926:	dc5b      	bgt.n	900139e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
90013928:	af17      	add	r7, sp, #92	; 0x5c
9001392a:	f04f 0900 	mov.w	r9, #0
9001392e:	7c23      	ldrb	r3, [r4, #16]
90013930:	2b00      	cmp	r3, #0
90013932:	f000 80ae 	beq.w	90013a92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
90013936:	a80e      	add	r0, sp, #56	; 0x38
90013938:	f7ff fe4d 	bl	900135d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
9001393c:	f1ba 0f00 	cmp.w	sl, #0
90013940:	f000 80a2 	beq.w	90013a88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90013944:	7c23      	ldrb	r3, [r4, #16]
90013946:	2264      	movs	r2, #100	; 0x64
90013948:	4639      	mov	r1, r7
9001394a:	a849      	add	r0, sp, #292	; 0x124
9001394c:	9309      	str	r3, [sp, #36]	; 0x24
9001394e:	f00f fa65 	bl	90022e1c <memcpy>
90013952:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013954:	2b00      	cmp	r3, #0
90013956:	f000 80a4 	beq.w	90013aa2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
9001395a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
9001395e:	7922      	ldrb	r2, [r4, #4]
90013960:	2a01      	cmp	r2, #1
90013962:	f040 8087 	bne.w	90013a74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
90013966:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
9001396a:	1ac0      	subs	r0, r0, r3
9001396c:	2302      	movs	r3, #2
9001396e:	fb90 f0f3 	sdiv	r0, r0, r3
90013972:	b200      	sxth	r0, r0
90013974:	7c23      	ldrb	r3, [r4, #16]
90013976:	2b00      	cmp	r3, #0
90013978:	f000 8088 	beq.w	90013a8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
9001397c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
90013980:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
90013984:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90013988:	e9cd 2105 	strd	r2, r1, [sp, #20]
9001398c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
90013990:	2100      	movs	r1, #0
90013992:	4410      	add	r0, r2
90013994:	4642      	mov	r2, r8
90013996:	b200      	sxth	r0, r0
90013998:	e9cd 9703 	strd	r9, r7, [sp, #12]
9001399c:	9000      	str	r0, [sp, #0]
9001399e:	4658      	mov	r0, fp
900139a0:	e9cd 5401 	strd	r5, r4, [sp, #4]
900139a4:	f7ff fca2 	bl	900132ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
900139a8:	2800      	cmp	r0, #0
900139aa:	d160      	bne.n	90013a6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900139ac:	b2b2      	uxth	r2, r6
900139ae:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
900139b2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
900139b6:	4413      	add	r3, r2
900139b8:	1a8a      	subs	r2, r1, r2
900139ba:	b21b      	sxth	r3, r3
900139bc:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
900139c0:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
900139c4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
900139c8:	2a00      	cmp	r2, #0
900139ca:	d150      	bne.n	90013a6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900139cc:	6822      	ldr	r2, [r4, #0]
900139ce:	8869      	ldrh	r1, [r5, #2]
900139d0:	7a12      	ldrb	r2, [r2, #8]
900139d2:	1a9b      	subs	r3, r3, r2
900139d4:	88ea      	ldrh	r2, [r5, #6]
900139d6:	440a      	add	r2, r1
900139d8:	b212      	sxth	r2, r2
900139da:	4293      	cmp	r3, r2
900139dc:	dda7      	ble.n	9001392e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
900139de:	e046      	b.n	90013a6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900139e0:	7c23      	ldrb	r3, [r4, #16]
900139e2:	444f      	add	r7, r9
900139e4:	b1c3      	cbz	r3, 90013a18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
900139e6:	f64f 79ff 	movw	r9, #65535	; 0xffff
900139ea:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
900139ee:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900139f2:	443b      	add	r3, r7
900139f4:	4293      	cmp	r3, r2
900139f6:	da97      	bge.n	90013928 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
900139f8:	a80e      	add	r0, sp, #56	; 0x38
900139fa:	f7ff fdec 	bl	900135d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900139fe:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
90013a02:	3b01      	subs	r3, #1
90013a04:	b29b      	uxth	r3, r3
90013a06:	454b      	cmp	r3, r9
90013a08:	9309      	str	r3, [sp, #36]	; 0x24
90013a0a:	d021      	beq.n	90013a50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
90013a0c:	7961      	ldrb	r1, [r4, #5]
90013a0e:	a817      	add	r0, sp, #92	; 0x5c
90013a10:	f7f1 fe12 	bl	90005638 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90013a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013a16:	e7f4      	b.n	90013a02 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
90013a18:	fa1f f986 	uxth.w	r9, r6
90013a1c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90013a20:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90013a24:	443b      	add	r3, r7
90013a26:	4293      	cmp	r3, r2
90013a28:	f6bf af7e 	bge.w	90013928 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90013a2c:	a817      	add	r0, sp, #92	; 0x5c
90013a2e:	f002 fbfd 	bl	9001622c <_ZN8touchgfx12TextProvider11getNextCharEv>
90013a32:	b1e0      	cbz	r0, 90013a6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90013a34:	280a      	cmp	r0, #10
90013a36:	d1f1      	bne.n	90013a1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90013a38:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90013a3c:	444b      	add	r3, r9
90013a3e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90013a42:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90013a46:	eba3 0309 	sub.w	r3, r3, r9
90013a4a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90013a4e:	e7e5      	b.n	90013a1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90013a50:	b2b3      	uxth	r3, r6
90013a52:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
90013a56:	441a      	add	r2, r3
90013a58:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
90013a5c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
90013a60:	1ad3      	subs	r3, r2, r3
90013a62:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90013a66:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90013a6a:	2b00      	cmp	r3, #0
90013a6c:	d1bd      	bne.n	900139ea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
90013a6e:	b063      	add	sp, #396	; 0x18c
90013a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013a74:	2a02      	cmp	r2, #2
90013a76:	d105      	bne.n	90013a84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
90013a78:	7be2      	ldrb	r2, [r4, #15]
90013a7a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90013a7e:	1a80      	subs	r0, r0, r2
90013a80:	1ac0      	subs	r0, r0, r3
90013a82:	e776      	b.n	90013972 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
90013a84:	2000      	movs	r0, #0
90013a86:	e775      	b.n	90013974 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90013a88:	7be0      	ldrb	r0, [r4, #15]
90013a8a:	e773      	b.n	90013974 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90013a8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
90013a90:	e776      	b.n	90013980 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
90013a92:	f1ba 0f00 	cmp.w	sl, #0
90013a96:	d0f7      	beq.n	90013a88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90013a98:	2264      	movs	r2, #100	; 0x64
90013a9a:	4639      	mov	r1, r7
90013a9c:	a849      	add	r0, sp, #292	; 0x124
90013a9e:	f00f f9bd 	bl	90022e1c <memcpy>
90013aa2:	2300      	movs	r3, #0
90013aa4:	f647 72ff 	movw	r2, #32767	; 0x7fff
90013aa8:	6821      	ldr	r1, [r4, #0]
90013aaa:	a849      	add	r0, sp, #292	; 0x124
90013aac:	f7ff fbb1 	bl	90013212 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90013ab0:	b203      	sxth	r3, r0
90013ab2:	e754      	b.n	9001395e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

90013ab4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
90013ab4:	2b03      	cmp	r3, #3
90013ab6:	d818      	bhi.n	90013aea <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
90013ab8:	e8df f003 	tbb	[pc, r3]
90013abc:	130d0602 	.word	0x130d0602
90013ac0:	f9b0 2000 	ldrsh.w	r2, [r0]
90013ac4:	1850      	adds	r0, r2, r1
90013ac6:	4770      	bx	lr
90013ac8:	8803      	ldrh	r3, [r0, #0]
90013aca:	8880      	ldrh	r0, [r0, #4]
90013acc:	4418      	add	r0, r3
90013ace:	b200      	sxth	r0, r0
90013ad0:	1a80      	subs	r0, r0, r2
90013ad2:	3801      	subs	r0, #1
90013ad4:	4770      	bx	lr
90013ad6:	8803      	ldrh	r3, [r0, #0]
90013ad8:	8880      	ldrh	r0, [r0, #4]
90013ada:	4418      	add	r0, r3
90013adc:	b200      	sxth	r0, r0
90013ade:	1a40      	subs	r0, r0, r1
90013ae0:	e7f7      	b.n	90013ad2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
90013ae2:	f9b0 0000 	ldrsh.w	r0, [r0]
90013ae6:	4410      	add	r0, r2
90013ae8:	4770      	bx	lr
90013aea:	2000      	movs	r0, #0
90013aec:	4770      	bx	lr

90013aee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
90013aee:	2b03      	cmp	r3, #3
90013af0:	d817      	bhi.n	90013b22 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
90013af2:	e8df f003 	tbb	[pc, r3]
90013af6:	0602      	.short	0x0602
90013af8:	1009      	.short	0x1009
90013afa:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90013afe:	1850      	adds	r0, r2, r1
90013b00:	4770      	bx	lr
90013b02:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90013b06:	e7fa      	b.n	90013afe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
90013b08:	8843      	ldrh	r3, [r0, #2]
90013b0a:	88c0      	ldrh	r0, [r0, #6]
90013b0c:	4418      	add	r0, r3
90013b0e:	b200      	sxth	r0, r0
90013b10:	1a80      	subs	r0, r0, r2
90013b12:	3801      	subs	r0, #1
90013b14:	4770      	bx	lr
90013b16:	8843      	ldrh	r3, [r0, #2]
90013b18:	88c0      	ldrh	r0, [r0, #6]
90013b1a:	4418      	add	r0, r3
90013b1c:	b200      	sxth	r0, r0
90013b1e:	1a40      	subs	r0, r0, r1
90013b20:	e7f7      	b.n	90013b12 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
90013b22:	2000      	movs	r0, #0
90013b24:	4770      	bx	lr
	...

90013b28 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
90013b28:	4b01      	ldr	r3, [pc, #4]	; (90013b30 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
90013b2a:	2200      	movs	r2, #0
90013b2c:	601a      	str	r2, [r3, #0]
90013b2e:	4770      	bx	lr
90013b30:	24026274 	.word	0x24026274

90013b34 <_ZN8touchgfx16TouchCalibration4clzuEm>:
90013b34:	4603      	mov	r3, r0
90013b36:	b1c8      	cbz	r0, 90013b6c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
90013b38:	0c02      	lsrs	r2, r0, #16
90013b3a:	0412      	lsls	r2, r2, #16
90013b3c:	b9a2      	cbnz	r2, 90013b68 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
90013b3e:	0403      	lsls	r3, r0, #16
90013b40:	2010      	movs	r0, #16
90013b42:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
90013b46:	bf04      	itt	eq
90013b48:	021b      	lsleq	r3, r3, #8
90013b4a:	3008      	addeq	r0, #8
90013b4c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90013b50:	bf04      	itt	eq
90013b52:	011b      	lsleq	r3, r3, #4
90013b54:	3004      	addeq	r0, #4
90013b56:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
90013b5a:	bf04      	itt	eq
90013b5c:	009b      	lsleq	r3, r3, #2
90013b5e:	3002      	addeq	r0, #2
90013b60:	2b00      	cmp	r3, #0
90013b62:	db04      	blt.n	90013b6e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
90013b64:	3001      	adds	r0, #1
90013b66:	4770      	bx	lr
90013b68:	2000      	movs	r0, #0
90013b6a:	e7ea      	b.n	90013b42 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
90013b6c:	2020      	movs	r0, #32
90013b6e:	4770      	bx	lr

90013b70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
90013b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013b74:	b087      	sub	sp, #28
90013b76:	4681      	mov	r9, r0
90013b78:	4698      	mov	r8, r3
90013b7a:	4610      	mov	r0, r2
90013b7c:	460d      	mov	r5, r1
90013b7e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
90013b82:	b981      	cbnz	r1, 90013ba6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
90013b84:	b14b      	cbz	r3, 90013b9a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
90013b86:	460b      	mov	r3, r1
90013b88:	464a      	mov	r2, r9
90013b8a:	4641      	mov	r1, r8
90013b8c:	e9cd 4700 	strd	r4, r7, [sp]
90013b90:	f7ff ffee 	bl	90013b70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013b94:	b007      	add	sp, #28
90013b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013b9a:	f04f 33ff 	mov.w	r3, #4294967295
90013b9e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
90013ba2:	603b      	str	r3, [r7, #0]
90013ba4:	e7f6      	b.n	90013b94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90013ba6:	fa32 fa01 	lsrs.w	sl, r2, r1
90013baa:	d107      	bne.n	90013bbc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
90013bac:	fb09 f602 	mul.w	r6, r9, r2
90013bb0:	fbb6 f0f4 	udiv	r0, r6, r4
90013bb4:	fb04 6610 	mls	r6, r4, r0, r6
90013bb8:	603e      	str	r6, [r7, #0]
90013bba:	e7eb      	b.n	90013b94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90013bbc:	2601      	movs	r6, #1
90013bbe:	fa09 fb01 	lsl.w	fp, r9, r1
90013bc2:	408e      	lsls	r6, r1
90013bc4:	fbbb f3f4 	udiv	r3, fp, r4
90013bc8:	3e01      	subs	r6, #1
90013bca:	9302      	str	r3, [sp, #8]
90013bcc:	fb0a f303 	mul.w	r3, sl, r3
90013bd0:	4016      	ands	r6, r2
90013bd2:	9303      	str	r3, [sp, #12]
90013bd4:	4630      	mov	r0, r6
90013bd6:	f7ff ffad 	bl	90013b34 <_ZN8touchgfx16TouchCalibration4clzuEm>
90013bda:	464a      	mov	r2, r9
90013bdc:	460b      	mov	r3, r1
90013bde:	4601      	mov	r1, r0
90013be0:	4630      	mov	r0, r6
90013be2:	e9cd 4700 	strd	r4, r7, [sp]
90013be6:	f7ff ffc3 	bl	90013b70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013bea:	9b02      	ldr	r3, [sp, #8]
90013bec:	4606      	mov	r6, r0
90013bee:	eb05 0108 	add.w	r1, r5, r8
90013bf2:	fb04 bb13 	mls	fp, r4, r3, fp
90013bf6:	4658      	mov	r0, fp
90013bf8:	f7ff ff9c 	bl	90013b34 <_ZN8touchgfx16TouchCalibration4clzuEm>
90013bfc:	ab05      	add	r3, sp, #20
90013bfe:	465a      	mov	r2, fp
90013c00:	e9cd 4300 	strd	r4, r3, [sp]
90013c04:	4603      	mov	r3, r0
90013c06:	4650      	mov	r0, sl
90013c08:	f7ff ffb2 	bl	90013b70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013c0c:	6839      	ldr	r1, [r7, #0]
90013c0e:	9a05      	ldr	r2, [sp, #20]
90013c10:	9b03      	ldr	r3, [sp, #12]
90013c12:	4411      	add	r1, r2
90013c14:	fbb1 f2f4 	udiv	r2, r1, r4
90013c18:	18d3      	adds	r3, r2, r3
90013c1a:	fb04 1412 	mls	r4, r4, r2, r1
90013c1e:	441e      	add	r6, r3
90013c20:	603c      	str	r4, [r7, #0]
90013c22:	4430      	add	r0, r6
90013c24:	e7b6      	b.n	90013b94 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

90013c26 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
90013c26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90013c2a:	b085      	sub	sp, #20
90013c2c:	f1b0 0900 	subs.w	r9, r0, #0
90013c30:	461d      	mov	r5, r3
90013c32:	4617      	mov	r7, r2
90013c34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90013c36:	bfbb      	ittet	lt
90013c38:	f1c9 0900 	rsblt	r9, r9, #0
90013c3c:	f04f 36ff 	movlt.w	r6, #4294967295
90013c40:	2601      	movge	r6, #1
90013c42:	6823      	ldrlt	r3, [r4, #0]
90013c44:	bfbc      	itt	lt
90013c46:	425b      	neglt	r3, r3
90013c48:	6023      	strlt	r3, [r4, #0]
90013c4a:	2a00      	cmp	r2, #0
90013c4c:	da04      	bge.n	90013c58 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
90013c4e:	6823      	ldr	r3, [r4, #0]
90013c50:	4257      	negs	r7, r2
90013c52:	4276      	negs	r6, r6
90013c54:	425b      	negs	r3, r3
90013c56:	6023      	str	r3, [r4, #0]
90013c58:	2d00      	cmp	r5, #0
90013c5a:	4638      	mov	r0, r7
90013c5c:	bfba      	itte	lt
90013c5e:	426d      	neglt	r5, r5
90013c60:	f04f 38ff 	movlt.w	r8, #4294967295
90013c64:	f04f 0801 	movge.w	r8, #1
90013c68:	f7ff ff64 	bl	90013b34 <_ZN8touchgfx16TouchCalibration4clzuEm>
90013c6c:	ab03      	add	r3, sp, #12
90013c6e:	463a      	mov	r2, r7
90013c70:	e9cd 5300 	strd	r5, r3, [sp]
90013c74:	4603      	mov	r3, r0
90013c76:	4648      	mov	r0, r9
90013c78:	f7ff ff7a 	bl	90013b70 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90013c7c:	6823      	ldr	r3, [r4, #0]
90013c7e:	9a03      	ldr	r2, [sp, #12]
90013c80:	4546      	cmp	r6, r8
90013c82:	441a      	add	r2, r3
90013c84:	fb92 f3f5 	sdiv	r3, r2, r5
90013c88:	4418      	add	r0, r3
90013c8a:	fb05 2313 	mls	r3, r5, r3, r2
90013c8e:	bf18      	it	ne
90013c90:	4240      	negne	r0, r0
90013c92:	1c72      	adds	r2, r6, #1
90013c94:	6023      	str	r3, [r4, #0]
90013c96:	d105      	bne.n	90013ca4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
90013c98:	2b00      	cmp	r3, #0
90013c9a:	f1c3 0200 	rsb	r2, r3, #0
90013c9e:	db0b      	blt.n	90013cb8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
90013ca0:	6022      	str	r2, [r4, #0]
90013ca2:	e006      	b.n	90013cb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90013ca4:	2e01      	cmp	r6, #1
90013ca6:	d104      	bne.n	90013cb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90013ca8:	2b00      	cmp	r3, #0
90013caa:	da02      	bge.n	90013cb2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90013cac:	442b      	add	r3, r5
90013cae:	3801      	subs	r0, #1
90013cb0:	6023      	str	r3, [r4, #0]
90013cb2:	b005      	add	sp, #20
90013cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90013cb8:	3801      	subs	r0, #1
90013cba:	1b52      	subs	r2, r2, r5
90013cbc:	e7f0      	b.n	90013ca0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

90013cc0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
90013cc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90013cc4:	4c1c      	ldr	r4, [pc, #112]	; (90013d38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
90013cc6:	4605      	mov	r5, r0
90013cc8:	6807      	ldr	r7, [r0, #0]
90013cca:	69a3      	ldr	r3, [r4, #24]
90013ccc:	b92b      	cbnz	r3, 90013cda <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
90013cce:	6840      	ldr	r0, [r0, #4]
90013cd0:	e9c5 7000 	strd	r7, r0, [r5]
90013cd4:	b004      	add	sp, #16
90013cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013cda:	f04f 0802 	mov.w	r8, #2
90013cde:	68a2      	ldr	r2, [r4, #8]
90013ce0:	ae04      	add	r6, sp, #16
90013ce2:	6820      	ldr	r0, [r4, #0]
90013ce4:	fb93 f1f8 	sdiv	r1, r3, r8
90013ce8:	440a      	add	r2, r1
90013cea:	69e1      	ldr	r1, [r4, #28]
90013cec:	f846 2d04 	str.w	r2, [r6, #-4]!
90013cf0:	463a      	mov	r2, r7
90013cf2:	9600      	str	r6, [sp, #0]
90013cf4:	f7ff ff97 	bl	90013c26 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013cf8:	69a3      	ldr	r3, [r4, #24]
90013cfa:	4607      	mov	r7, r0
90013cfc:	686a      	ldr	r2, [r5, #4]
90013cfe:	6a21      	ldr	r1, [r4, #32]
90013d00:	9600      	str	r6, [sp, #0]
90013d02:	6860      	ldr	r0, [r4, #4]
90013d04:	f7ff ff8f 	bl	90013c26 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013d08:	69a3      	ldr	r3, [r4, #24]
90013d0a:	6962      	ldr	r2, [r4, #20]
90013d0c:	4407      	add	r7, r0
90013d0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90013d10:	9600      	str	r6, [sp, #0]
90013d12:	68e0      	ldr	r0, [r4, #12]
90013d14:	fb93 f8f8 	sdiv	r8, r3, r8
90013d18:	4442      	add	r2, r8
90013d1a:	9203      	str	r2, [sp, #12]
90013d1c:	682a      	ldr	r2, [r5, #0]
90013d1e:	f7ff ff82 	bl	90013c26 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013d22:	4680      	mov	r8, r0
90013d24:	9600      	str	r6, [sp, #0]
90013d26:	69a3      	ldr	r3, [r4, #24]
90013d28:	686a      	ldr	r2, [r5, #4]
90013d2a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90013d2c:	6920      	ldr	r0, [r4, #16]
90013d2e:	f7ff ff7a 	bl	90013c26 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90013d32:	4440      	add	r0, r8
90013d34:	e7cc      	b.n	90013cd0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
90013d36:	bf00      	nop
90013d38:	24026278 	.word	0x24026278

90013d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
90013d3c:	4b07      	ldr	r3, [pc, #28]	; (90013d5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
90013d3e:	781b      	ldrb	r3, [r3, #0]
90013d40:	2b01      	cmp	r3, #1
90013d42:	d109      	bne.n	90013d58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
90013d44:	f9b1 3000 	ldrsh.w	r3, [r1]
90013d48:	f9b0 2000 	ldrsh.w	r2, [r0]
90013d4c:	8003      	strh	r3, [r0, #0]
90013d4e:	4b04      	ldr	r3, [pc, #16]	; (90013d60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90013d50:	881b      	ldrh	r3, [r3, #0]
90013d52:	3b01      	subs	r3, #1
90013d54:	1a9b      	subs	r3, r3, r2
90013d56:	800b      	strh	r3, [r1, #0]
90013d58:	4770      	bx	lr
90013d5a:	bf00      	nop
90013d5c:	24026264 	.word	0x24026264
90013d60:	24026260 	.word	0x24026260

90013d64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
90013d64:	4b07      	ldr	r3, [pc, #28]	; (90013d84 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
90013d66:	b510      	push	{r4, lr}
90013d68:	781b      	ldrb	r3, [r3, #0]
90013d6a:	2b01      	cmp	r3, #1
90013d6c:	d108      	bne.n	90013d80 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
90013d6e:	4b06      	ldr	r3, [pc, #24]	; (90013d88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
90013d70:	880c      	ldrh	r4, [r1, #0]
90013d72:	881b      	ldrh	r3, [r3, #0]
90013d74:	f9b0 2000 	ldrsh.w	r2, [r0]
90013d78:	3b01      	subs	r3, #1
90013d7a:	1b1b      	subs	r3, r3, r4
90013d7c:	8003      	strh	r3, [r0, #0]
90013d7e:	800a      	strh	r2, [r1, #0]
90013d80:	bd10      	pop	{r4, pc}
90013d82:	bf00      	nop
90013d84:	24026264 	.word	0x24026264
90013d88:	24026260 	.word	0x24026260

90013d8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
90013d8c:	4b0a      	ldr	r3, [pc, #40]	; (90013db8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
90013d8e:	b510      	push	{r4, lr}
90013d90:	781b      	ldrb	r3, [r3, #0]
90013d92:	2b01      	cmp	r3, #1
90013d94:	d10e      	bne.n	90013db4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
90013d96:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90013d9a:	8843      	ldrh	r3, [r0, #2]
90013d9c:	f9b0 4000 	ldrsh.w	r4, [r0]
90013da0:	18ca      	adds	r2, r1, r3
90013da2:	4b06      	ldr	r3, [pc, #24]	; (90013dbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
90013da4:	8044      	strh	r4, [r0, #2]
90013da6:	881b      	ldrh	r3, [r3, #0]
90013da8:	1a9b      	subs	r3, r3, r2
90013daa:	8003      	strh	r3, [r0, #0]
90013dac:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90013db0:	8081      	strh	r1, [r0, #4]
90013db2:	80c3      	strh	r3, [r0, #6]
90013db4:	bd10      	pop	{r4, pc}
90013db6:	bf00      	nop
90013db8:	24026264 	.word	0x24026264
90013dbc:	24026260 	.word	0x24026260

90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
90013dc0:	4b08      	ldr	r3, [pc, #32]	; (90013de4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
90013dc2:	781b      	ldrb	r3, [r3, #0]
90013dc4:	2b01      	cmp	r3, #1
90013dc6:	d10c      	bne.n	90013de2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
90013dc8:	8803      	ldrh	r3, [r0, #0]
90013dca:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
90013dce:	8842      	ldrh	r2, [r0, #2]
90013dd0:	8002      	strh	r2, [r0, #0]
90013dd2:	185a      	adds	r2, r3, r1
90013dd4:	4b04      	ldr	r3, [pc, #16]	; (90013de8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
90013dd6:	881b      	ldrh	r3, [r3, #0]
90013dd8:	1a9b      	subs	r3, r3, r2
90013dda:	8043      	strh	r3, [r0, #2]
90013ddc:	88c3      	ldrh	r3, [r0, #6]
90013dde:	80c1      	strh	r1, [r0, #6]
90013de0:	8083      	strh	r3, [r0, #4]
90013de2:	4770      	bx	lr
90013de4:	24026264 	.word	0x24026264
90013de8:	24026260 	.word	0x24026260

90013dec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
90013dec:	4b07      	ldr	r3, [pc, #28]	; (90013e0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
90013dee:	b510      	push	{r4, lr}
90013df0:	781b      	ldrb	r3, [r3, #0]
90013df2:	2b01      	cmp	r3, #1
90013df4:	d108      	bne.n	90013e08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
90013df6:	f9b1 3000 	ldrsh.w	r3, [r1]
90013dfa:	f9b0 4000 	ldrsh.w	r4, [r0]
90013dfe:	8003      	strh	r3, [r0, #0]
90013e00:	8893      	ldrh	r3, [r2, #4]
90013e02:	3b01      	subs	r3, #1
90013e04:	1b1b      	subs	r3, r3, r4
90013e06:	800b      	strh	r3, [r1, #0]
90013e08:	bd10      	pop	{r4, pc}
90013e0a:	bf00      	nop
90013e0c:	24026264 	.word	0x24026264

90013e10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
90013e10:	4b0a      	ldr	r3, [pc, #40]	; (90013e3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
90013e12:	460a      	mov	r2, r1
90013e14:	b510      	push	{r4, lr}
90013e16:	781b      	ldrb	r3, [r3, #0]
90013e18:	2b01      	cmp	r3, #1
90013e1a:	d10d      	bne.n	90013e38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
90013e1c:	8881      	ldrh	r1, [r0, #4]
90013e1e:	8803      	ldrh	r3, [r0, #0]
90013e20:	440b      	add	r3, r1
90013e22:	4601      	mov	r1, r0
90013e24:	3b01      	subs	r3, #1
90013e26:	f821 3b02 	strh.w	r3, [r1], #2
90013e2a:	f7ff ffdf 	bl	90013dec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
90013e2e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90013e32:	88c2      	ldrh	r2, [r0, #6]
90013e34:	80c3      	strh	r3, [r0, #6]
90013e36:	8082      	strh	r2, [r0, #4]
90013e38:	bd10      	pop	{r4, pc}
90013e3a:	bf00      	nop
90013e3c:	24026264 	.word	0x24026264

90013e40 <_ZN8touchgfx11Application19changeToStartScreenEv>:
90013e40:	4770      	bx	lr
	...

90013e44 <_ZN8touchgfx11Application13requestRedrawEv>:
90013e44:	4b06      	ldr	r3, [pc, #24]	; (90013e60 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
90013e46:	2100      	movs	r1, #0
90013e48:	f9b3 2000 	ldrsh.w	r2, [r3]
90013e4c:	4b05      	ldr	r3, [pc, #20]	; (90013e64 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
90013e4e:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
90013e52:	f9b3 3000 	ldrsh.w	r3, [r3]
90013e56:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
90013e5a:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
90013e5e:	4770      	bx	lr
90013e60:	24026260 	.word	0x24026260
90013e64:	24026262 	.word	0x24026262

90013e68 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
90013e68:	4b03      	ldr	r3, [pc, #12]	; (90013e78 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
90013e6a:	6818      	ldr	r0, [r3, #0]
90013e6c:	b110      	cbz	r0, 90013e74 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
90013e6e:	6803      	ldr	r3, [r0, #0]
90013e70:	699b      	ldr	r3, [r3, #24]
90013e72:	4718      	bx	r3
90013e74:	4770      	bx	lr
90013e76:	bf00      	nop
90013e78:	240262a8 	.word	0x240262a8

90013e7c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
90013e7c:	4770      	bx	lr
	...

90013e80 <_ZN8touchgfx11Application4drawEv>:
90013e80:	4b09      	ldr	r3, [pc, #36]	; (90013ea8 <_ZN8touchgfx11Application4drawEv+0x28>)
90013e82:	b507      	push	{r0, r1, r2, lr}
90013e84:	f9b3 2000 	ldrsh.w	r2, [r3]
90013e88:	2100      	movs	r1, #0
90013e8a:	4b08      	ldr	r3, [pc, #32]	; (90013eac <_ZN8touchgfx11Application4drawEv+0x2c>)
90013e8c:	9100      	str	r1, [sp, #0]
90013e8e:	4669      	mov	r1, sp
90013e90:	f9b3 3000 	ldrsh.w	r3, [r3]
90013e94:	f8ad 2004 	strh.w	r2, [sp, #4]
90013e98:	f8ad 3006 	strh.w	r3, [sp, #6]
90013e9c:	6803      	ldr	r3, [r0, #0]
90013e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90013ea0:	4798      	blx	r3
90013ea2:	b003      	add	sp, #12
90013ea4:	f85d fb04 	ldr.w	pc, [sp], #4
90013ea8:	24026260 	.word	0x24026260
90013eac:	24026262 	.word	0x24026262

90013eb0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
90013eb0:	4b03      	ldr	r3, [pc, #12]	; (90013ec0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
90013eb2:	6818      	ldr	r0, [r3, #0]
90013eb4:	b110      	cbz	r0, 90013ebc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
90013eb6:	6803      	ldr	r3, [r0, #0]
90013eb8:	69db      	ldr	r3, [r3, #28]
90013eba:	4718      	bx	r3
90013ebc:	4770      	bx	lr
90013ebe:	bf00      	nop
90013ec0:	240262a8 	.word	0x240262a8

90013ec4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
90013ec4:	4b03      	ldr	r3, [pc, #12]	; (90013ed4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
90013ec6:	6818      	ldr	r0, [r3, #0]
90013ec8:	b110      	cbz	r0, 90013ed0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
90013eca:	6803      	ldr	r3, [r0, #0]
90013ecc:	6a1b      	ldr	r3, [r3, #32]
90013ece:	4718      	bx	r3
90013ed0:	4770      	bx	lr
90013ed2:	bf00      	nop
90013ed4:	240262a8 	.word	0x240262a8

90013ed8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
90013ed8:	2300      	movs	r3, #0
90013eda:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
90013ede:	4770      	bx	lr

90013ee0 <_ZN8touchgfx11Application14handleKeyEventEh>:
90013ee0:	4b03      	ldr	r3, [pc, #12]	; (90013ef0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
90013ee2:	6818      	ldr	r0, [r3, #0]
90013ee4:	b110      	cbz	r0, 90013eec <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
90013ee6:	6803      	ldr	r3, [r0, #0]
90013ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013eea:	4718      	bx	r3
90013eec:	4770      	bx	lr
90013eee:	bf00      	nop
90013ef0:	240262a8 	.word	0x240262a8

90013ef4 <_ZN8touchgfx11ApplicationD1Ev>:
90013ef4:	4770      	bx	lr

90013ef6 <_ZN8touchgfx11ApplicationD0Ev>:
90013ef6:	b510      	push	{r4, lr}
90013ef8:	4604      	mov	r4, r0
90013efa:	f44f 719e 	mov.w	r1, #316	; 0x13c
90013efe:	f00e fedc 	bl	90022cba <_ZdlPvj>
90013f02:	4620      	mov	r0, r4
90013f04:	bd10      	pop	{r4, pc}

90013f06 <_ZNK8touchgfx4Rect9intersectERKS0_>:
90013f06:	b510      	push	{r4, lr}
90013f08:	f9b1 4000 	ldrsh.w	r4, [r1]
90013f0c:	888a      	ldrh	r2, [r1, #4]
90013f0e:	f9b0 3000 	ldrsh.w	r3, [r0]
90013f12:	4422      	add	r2, r4
90013f14:	b212      	sxth	r2, r2
90013f16:	4293      	cmp	r3, r2
90013f18:	da15      	bge.n	90013f46 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90013f1a:	8882      	ldrh	r2, [r0, #4]
90013f1c:	4413      	add	r3, r2
90013f1e:	b21b      	sxth	r3, r3
90013f20:	429c      	cmp	r4, r3
90013f22:	da10      	bge.n	90013f46 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90013f24:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90013f28:	88c9      	ldrh	r1, [r1, #6]
90013f2a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90013f2e:	4419      	add	r1, r3
90013f30:	b209      	sxth	r1, r1
90013f32:	428a      	cmp	r2, r1
90013f34:	da07      	bge.n	90013f46 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90013f36:	88c0      	ldrh	r0, [r0, #6]
90013f38:	4410      	add	r0, r2
90013f3a:	b200      	sxth	r0, r0
90013f3c:	4283      	cmp	r3, r0
90013f3e:	bfac      	ite	ge
90013f40:	2000      	movge	r0, #0
90013f42:	2001      	movlt	r0, #1
90013f44:	bd10      	pop	{r4, pc}
90013f46:	2000      	movs	r0, #0
90013f48:	e7fc      	b.n	90013f44 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

90013f4a <_ZN8touchgfx4Rect10restrictToEss>:
90013f4a:	f9b0 3000 	ldrsh.w	r3, [r0]
90013f4e:	2b00      	cmp	r3, #0
90013f50:	b510      	push	{r4, lr}
90013f52:	da04      	bge.n	90013f5e <_ZN8touchgfx4Rect10restrictToEss+0x14>
90013f54:	8884      	ldrh	r4, [r0, #4]
90013f56:	4423      	add	r3, r4
90013f58:	8083      	strh	r3, [r0, #4]
90013f5a:	2300      	movs	r3, #0
90013f5c:	8003      	strh	r3, [r0, #0]
90013f5e:	f9b0 4000 	ldrsh.w	r4, [r0]
90013f62:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90013f66:	1b09      	subs	r1, r1, r4
90013f68:	428b      	cmp	r3, r1
90013f6a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90013f6e:	bfc8      	it	gt
90013f70:	8081      	strhgt	r1, [r0, #4]
90013f72:	2b00      	cmp	r3, #0
90013f74:	da04      	bge.n	90013f80 <_ZN8touchgfx4Rect10restrictToEss+0x36>
90013f76:	88c1      	ldrh	r1, [r0, #6]
90013f78:	440b      	add	r3, r1
90013f7a:	80c3      	strh	r3, [r0, #6]
90013f7c:	2300      	movs	r3, #0
90013f7e:	8043      	strh	r3, [r0, #2]
90013f80:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90013f84:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
90013f88:	1a52      	subs	r2, r2, r1
90013f8a:	4293      	cmp	r3, r2
90013f8c:	bfc8      	it	gt
90013f8e:	80c2      	strhgt	r2, [r0, #6]
90013f90:	bd10      	pop	{r4, pc}
	...

90013f94 <_ZN8touchgfx11Application4drawERNS_4RectE>:
90013f94:	4b10      	ldr	r3, [pc, #64]	; (90013fd8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
90013f96:	b510      	push	{r4, lr}
90013f98:	460c      	mov	r4, r1
90013f9a:	f9b3 2000 	ldrsh.w	r2, [r3]
90013f9e:	4b0f      	ldr	r3, [pc, #60]	; (90013fdc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
90013fa0:	4620      	mov	r0, r4
90013fa2:	f9b3 1000 	ldrsh.w	r1, [r3]
90013fa6:	f7ff ffd0 	bl	90013f4a <_ZN8touchgfx4Rect10restrictToEss>
90013faa:	4b0d      	ldr	r3, [pc, #52]	; (90013fe0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
90013fac:	6818      	ldr	r0, [r3, #0]
90013fae:	b190      	cbz	r0, 90013fd6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
90013fb0:	6803      	ldr	r3, [r0, #0]
90013fb2:	4621      	mov	r1, r4
90013fb4:	689b      	ldr	r3, [r3, #8]
90013fb6:	4798      	blx	r3
90013fb8:	4b0a      	ldr	r3, [pc, #40]	; (90013fe4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
90013fba:	6818      	ldr	r0, [r3, #0]
90013fbc:	b118      	cbz	r0, 90013fc6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
90013fbe:	6803      	ldr	r3, [r0, #0]
90013fc0:	4621      	mov	r1, r4
90013fc2:	689b      	ldr	r3, [r3, #8]
90013fc4:	4798      	blx	r3
90013fc6:	4b08      	ldr	r3, [pc, #32]	; (90013fe8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
90013fc8:	4621      	mov	r1, r4
90013fca:	6818      	ldr	r0, [r3, #0]
90013fcc:	6803      	ldr	r3, [r0, #0]
90013fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90013fd2:	69db      	ldr	r3, [r3, #28]
90013fd4:	4718      	bx	r3
90013fd6:	bd10      	pop	{r4, pc}
90013fd8:	24026262 	.word	0x24026262
90013fdc:	24026260 	.word	0x24026260
90013fe0:	240262a8 	.word	0x240262a8
90013fe4:	240262a4 	.word	0x240262a4
90013fe8:	2402626c 	.word	0x2402626c

90013fec <_ZNK8touchgfx4Rect8includesERKS0_>:
90013fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90013fee:	4606      	mov	r6, r0
90013ff0:	4608      	mov	r0, r1
90013ff2:	460f      	mov	r7, r1
90013ff4:	f7fd f99d 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
90013ff8:	b9e8      	cbnz	r0, 90014036 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90013ffa:	f9b7 5000 	ldrsh.w	r5, [r7]
90013ffe:	f9b6 4000 	ldrsh.w	r4, [r6]
90014002:	42a5      	cmp	r5, r4
90014004:	db17      	blt.n	90014036 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90014006:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
9001400a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
9001400e:	429a      	cmp	r2, r3
90014010:	db11      	blt.n	90014036 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90014012:	88b9      	ldrh	r1, [r7, #4]
90014014:	440d      	add	r5, r1
90014016:	88b1      	ldrh	r1, [r6, #4]
90014018:	440c      	add	r4, r1
9001401a:	b22d      	sxth	r5, r5
9001401c:	b224      	sxth	r4, r4
9001401e:	42a5      	cmp	r5, r4
90014020:	dc09      	bgt.n	90014036 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
90014022:	88f8      	ldrh	r0, [r7, #6]
90014024:	4410      	add	r0, r2
90014026:	88f2      	ldrh	r2, [r6, #6]
90014028:	4413      	add	r3, r2
9001402a:	b200      	sxth	r0, r0
9001402c:	b21b      	sxth	r3, r3
9001402e:	4298      	cmp	r0, r3
90014030:	bfcc      	ite	gt
90014032:	2000      	movgt	r0, #0
90014034:	2001      	movle	r0, #1
90014036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90014038 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
90014038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001403a:	4604      	mov	r4, r0
9001403c:	4608      	mov	r0, r1
9001403e:	460d      	mov	r5, r1
90014040:	f7fd f977 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
90014044:	b978      	cbnz	r0, 90014066 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
90014046:	4620      	mov	r0, r4
90014048:	f7fd f973 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
9001404c:	f9b5 6000 	ldrsh.w	r6, [r5]
90014050:	b150      	cbz	r0, 90014068 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
90014052:	8026      	strh	r6, [r4, #0]
90014054:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90014058:	8063      	strh	r3, [r4, #2]
9001405a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
9001405e:	80a3      	strh	r3, [r4, #4]
90014060:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90014064:	80e3      	strh	r3, [r4, #6]
90014066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90014068:	f9b4 1000 	ldrsh.w	r1, [r4]
9001406c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90014070:	42b1      	cmp	r1, r6
90014072:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
90014076:	f8b5 c004 	ldrh.w	ip, [r5, #4]
9001407a:	460f      	mov	r7, r1
9001407c:	88ed      	ldrh	r5, [r5, #6]
9001407e:	bfa8      	it	ge
90014080:	4637      	movge	r7, r6
90014082:	4293      	cmp	r3, r2
90014084:	4618      	mov	r0, r3
90014086:	4466      	add	r6, ip
90014088:	f8b4 c004 	ldrh.w	ip, [r4, #4]
9001408c:	bfa8      	it	ge
9001408e:	4610      	movge	r0, r2
90014090:	442a      	add	r2, r5
90014092:	88e5      	ldrh	r5, [r4, #6]
90014094:	4461      	add	r1, ip
90014096:	b236      	sxth	r6, r6
90014098:	8027      	strh	r7, [r4, #0]
9001409a:	442b      	add	r3, r5
9001409c:	b209      	sxth	r1, r1
9001409e:	b212      	sxth	r2, r2
900140a0:	8060      	strh	r0, [r4, #2]
900140a2:	b21b      	sxth	r3, r3
900140a4:	428e      	cmp	r6, r1
900140a6:	bfac      	ite	ge
900140a8:	ebc7 0106 	rsbge	r1, r7, r6
900140ac:	ebc7 0101 	rsblt	r1, r7, r1
900140b0:	429a      	cmp	r2, r3
900140b2:	bfac      	ite	ge
900140b4:	ebc0 0202 	rsbge	r2, r0, r2
900140b8:	ebc0 0203 	rsblt	r2, r0, r3
900140bc:	80a1      	strh	r1, [r4, #4]
900140be:	80e2      	strh	r2, [r4, #6]
900140c0:	e7d1      	b.n	90014066 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

900140c4 <_ZN8touchgfx11Application11getInstanceEv>:
900140c4:	4b01      	ldr	r3, [pc, #4]	; (900140cc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
900140c6:	6818      	ldr	r0, [r3, #0]
900140c8:	4770      	bx	lr
900140ca:	bf00      	nop
900140cc:	240262b8 	.word	0x240262b8

900140d0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
900140d0:	2300      	movs	r3, #0
900140d2:	b510      	push	{r4, lr}
900140d4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
900140d8:	4604      	mov	r4, r0
900140da:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
900140de:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
900140e2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
900140e6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
900140ea:	429a      	cmp	r2, r3
900140ec:	d90e      	bls.n	9001410c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
900140ee:	18e2      	adds	r2, r4, r3
900140f0:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
900140f4:	b122      	cbz	r2, 90014100 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
900140f6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
900140fa:	6803      	ldr	r3, [r0, #0]
900140fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900140fe:	4798      	blx	r3
90014100:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
90014104:	3301      	adds	r3, #1
90014106:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
9001410a:	e7ea      	b.n	900140e2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
9001410c:	bd10      	pop	{r4, pc}

9001410e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
9001410e:	2300      	movs	r3, #0
90014110:	f100 0284 	add.w	r2, r0, #132	; 0x84
90014114:	30a4      	adds	r0, #164	; 0xa4
90014116:	f820 3c24 	strh.w	r3, [r0, #-36]
9001411a:	f802 3b01 	strb.w	r3, [r2], #1
9001411e:	4282      	cmp	r2, r0
90014120:	d1fb      	bne.n	9001411a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
90014122:	4770      	bx	lr

90014124 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
90014124:	b570      	push	{r4, r5, r6, lr}
90014126:	4c0b      	ldr	r4, [pc, #44]	; (90014154 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
90014128:	4605      	mov	r5, r0
9001412a:	460e      	mov	r6, r1
9001412c:	6820      	ldr	r0, [r4, #0]
9001412e:	b110      	cbz	r0, 90014136 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
90014130:	6803      	ldr	r3, [r0, #0]
90014132:	695b      	ldr	r3, [r3, #20]
90014134:	4798      	blx	r3
90014136:	1d28      	adds	r0, r5, #4
90014138:	f7ff ffe9 	bl	9001410e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
9001413c:	6026      	str	r6, [r4, #0]
9001413e:	6833      	ldr	r3, [r6, #0]
90014140:	4630      	mov	r0, r6
90014142:	68db      	ldr	r3, [r3, #12]
90014144:	4798      	blx	r3
90014146:	682b      	ldr	r3, [r5, #0]
90014148:	4628      	mov	r0, r5
9001414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001414c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014150:	4718      	bx	r3
90014152:	bf00      	nop
90014154:	240262a8 	.word	0x240262a8

90014158 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
90014158:	2300      	movs	r3, #0
9001415a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
9001415e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
90014162:	461a      	mov	r2, r3
90014164:	b5f0      	push	{r4, r5, r6, r7, lr}
90014166:	461c      	mov	r4, r3
90014168:	461d      	mov	r5, r3
9001416a:	459c      	cmp	ip, r3
9001416c:	dd1a      	ble.n	900141a4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
9001416e:	18c6      	adds	r6, r0, r3
90014170:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
90014174:	b16e      	cbz	r6, 90014192 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
90014176:	429a      	cmp	r2, r3
90014178:	d008      	beq.n	9001418c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
9001417a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
9001417e:	fa1f fe82 	uxth.w	lr, r2
90014182:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
90014186:	1887      	adds	r7, r0, r2
90014188:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
9001418c:	3201      	adds	r2, #1
9001418e:	3301      	adds	r3, #1
90014190:	e7eb      	b.n	9001416a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
90014192:	4299      	cmp	r1, r3
90014194:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
90014198:	bfa8      	it	ge
9001419a:	3501      	addge	r5, #1
9001419c:	429e      	cmp	r6, r3
9001419e:	bfc8      	it	gt
900141a0:	3401      	addgt	r4, #1
900141a2:	e7f4      	b.n	9001418e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
900141a4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
900141a8:	1b49      	subs	r1, r1, r5
900141aa:	1b1b      	subs	r3, r3, r4
900141ac:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
900141b0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
900141b4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
900141b8:	4293      	cmp	r3, r2
900141ba:	dd03      	ble.n	900141c4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
900141bc:	3b01      	subs	r3, #1
900141be:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
900141c2:	e7f7      	b.n	900141b4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
900141c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

900141c8 <_ZN8touchgfx11Application15handleTickEventEv>:
900141c8:	b570      	push	{r4, r5, r6, lr}
900141ca:	4d16      	ldr	r5, [pc, #88]	; (90014224 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
900141cc:	4604      	mov	r4, r0
900141ce:	6828      	ldr	r0, [r5, #0]
900141d0:	b140      	cbz	r0, 900141e4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
900141d2:	7a03      	ldrb	r3, [r0, #8]
900141d4:	b933      	cbnz	r3, 900141e4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
900141d6:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
900141da:	6803      	ldr	r3, [r0, #0]
900141dc:	689b      	ldr	r3, [r3, #8]
900141de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900141e2:	4718      	bx	r3
900141e4:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
900141e8:	4e0f      	ldr	r6, [pc, #60]	; (90014228 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
900141ea:	b973      	cbnz	r3, 9001420a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
900141ec:	b168      	cbz	r0, 9001420a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
900141ee:	7a03      	ldrb	r3, [r0, #8]
900141f0:	b15b      	cbz	r3, 9001420a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
900141f2:	6830      	ldr	r0, [r6, #0]
900141f4:	b110      	cbz	r0, 900141fc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
900141f6:	6803      	ldr	r3, [r0, #0]
900141f8:	691b      	ldr	r3, [r3, #16]
900141fa:	4798      	blx	r3
900141fc:	6828      	ldr	r0, [r5, #0]
900141fe:	6803      	ldr	r3, [r0, #0]
90014200:	68db      	ldr	r3, [r3, #12]
90014202:	4798      	blx	r3
90014204:	2301      	movs	r3, #1
90014206:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
9001420a:	3404      	adds	r4, #4
9001420c:	4620      	mov	r0, r4
9001420e:	f7ff ff5f 	bl	900140d0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
90014212:	4620      	mov	r0, r4
90014214:	f7ff ffa0 	bl	90014158 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90014218:	6830      	ldr	r0, [r6, #0]
9001421a:	b110      	cbz	r0, 90014222 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
9001421c:	6803      	ldr	r3, [r0, #0]
9001421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90014220:	e7dd      	b.n	900141de <_ZN8touchgfx11Application15handleTickEventEv+0x16>
90014222:	bd70      	pop	{r4, r5, r6, pc}
90014224:	240262ac 	.word	0x240262ac
90014228:	240262a8 	.word	0x240262a8

9001422c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
9001422c:	4603      	mov	r3, r0
9001422e:	f100 0140 	add.w	r1, r0, #64	; 0x40
90014232:	2200      	movs	r2, #0
90014234:	801a      	strh	r2, [r3, #0]
90014236:	3308      	adds	r3, #8
90014238:	f823 2c06 	strh.w	r2, [r3, #-6]
9001423c:	f823 2c04 	strh.w	r2, [r3, #-4]
90014240:	f823 2c02 	strh.w	r2, [r3, #-2]
90014244:	428b      	cmp	r3, r1
90014246:	d1f5      	bne.n	90014234 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
90014248:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
9001424c:	4770      	bx	lr
	...

90014250 <_ZN8touchgfx11ApplicationC1Ev>:
90014250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014252:	4b1d      	ldr	r3, [pc, #116]	; (900142c8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
90014254:	4606      	mov	r6, r0
90014256:	4604      	mov	r4, r0
90014258:	2500      	movs	r5, #0
9001425a:	f846 3b04 	str.w	r3, [r6], #4
9001425e:	22a8      	movs	r2, #168	; 0xa8
90014260:	2100      	movs	r1, #0
90014262:	4630      	mov	r0, r6
90014264:	f00e fde8 	bl	90022e38 <memset>
90014268:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
9001426c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90014270:	4f16      	ldr	r7, [pc, #88]	; (900142cc <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
90014272:	f7ff ffdb 	bl	9001422c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90014276:	f104 00ee 	add.w	r0, r4, #238	; 0xee
9001427a:	f7ff ffd7 	bl	9001422c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
9001427e:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
90014282:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
90014286:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
9001428a:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
9001428e:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
90014292:	490f      	ldr	r1, [pc, #60]	; (900142d0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
90014294:	480f      	ldr	r0, [pc, #60]	; (900142d4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
90014296:	f00e fc07 	bl	90022aa8 <CRC_Lock>
9001429a:	4b0f      	ldr	r3, [pc, #60]	; (900142d8 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
9001429c:	b158      	cbz	r0, 900142b6 <_ZN8touchgfx11ApplicationC1Ev+0x66>
9001429e:	801d      	strh	r5, [r3, #0]
900142a0:	2300      	movs	r3, #0
900142a2:	4a0e      	ldr	r2, [pc, #56]	; (900142dc <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
900142a4:	4630      	mov	r0, r6
900142a6:	6013      	str	r3, [r2, #0]
900142a8:	4a0d      	ldr	r2, [pc, #52]	; (900142e0 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
900142aa:	603b      	str	r3, [r7, #0]
900142ac:	6013      	str	r3, [r2, #0]
900142ae:	f7ff ff2e 	bl	9001410e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
900142b2:	4620      	mov	r0, r4
900142b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900142b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
900142ba:	2002      	movs	r0, #2
900142bc:	801a      	strh	r2, [r3, #0]
900142be:	6038      	str	r0, [r7, #0]
900142c0:	f001 fa26 	bl	90015710 <_ZN8touchgfx6Screen4drawEv>
900142c4:	e7ec      	b.n	900142a0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
900142c6:	bf00      	nop
900142c8:	90026c10 	.word	0x90026c10
900142cc:	240262a8 	.word	0x240262a8
900142d0:	b5e8b5cd 	.word	0xb5e8b5cd
900142d4:	f407a5c2 	.word	0xf407a5c2
900142d8:	24000068 	.word	0x24000068
900142dc:	240262b8 	.word	0x240262b8
900142e0:	240262ac 	.word	0x240262ac

900142e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
900142e4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
900142e8:	3b01      	subs	r3, #1
900142ea:	b29b      	uxth	r3, r3
900142ec:	428b      	cmp	r3, r1
900142ee:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
900142f2:	b510      	push	{r4, lr}
900142f4:	d908      	bls.n	90014308 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
900142f6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
900142fa:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
900142fe:	681a      	ldr	r2, [r3, #0]
90014300:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
90014304:	685a      	ldr	r2, [r3, #4]
90014306:	6062      	str	r2, [r4, #4]
90014308:	bd10      	pop	{r4, pc}
	...

9001430c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
9001430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014310:	b08f      	sub	sp, #60	; 0x3c
90014312:	4b8f      	ldr	r3, [pc, #572]	; (90014550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
90014314:	4683      	mov	fp, r0
90014316:	ac0a      	add	r4, sp, #40	; 0x28
90014318:	e884 0006 	stmia.w	r4, {r1, r2}
9001431c:	f9b3 2000 	ldrsh.w	r2, [r3]
90014320:	4620      	mov	r0, r4
90014322:	4b8c      	ldr	r3, [pc, #560]	; (90014554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
90014324:	f9b3 1000 	ldrsh.w	r1, [r3]
90014328:	f7ff fe0f 	bl	90013f4a <_ZN8touchgfx4Rect10restrictToEss>
9001432c:	4620      	mov	r0, r4
9001432e:	f7fd f800 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
90014332:	2800      	cmp	r0, #0
90014334:	d16a      	bne.n	9001440c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90014336:	9403      	str	r4, [sp, #12]
90014338:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
9001433c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
90014340:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
90014344:	9301      	str	r3, [sp, #4]
90014346:	35a4      	adds	r5, #164	; 0xa4
90014348:	b15c      	cbz	r4, 90014362 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
9001434a:	4629      	mov	r1, r5
9001434c:	9803      	ldr	r0, [sp, #12]
9001434e:	f7ff fe4d 	bl	90013fec <_ZNK8touchgfx4Rect8includesERKS0_>
90014352:	3c01      	subs	r4, #1
90014354:	b118      	cbz	r0, 9001435e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
90014356:	b2a1      	uxth	r1, r4
90014358:	9801      	ldr	r0, [sp, #4]
9001435a:	f7ff ffc3 	bl	900142e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
9001435e:	3d08      	subs	r5, #8
90014360:	e7f2      	b.n	90014348 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
90014362:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
90014366:	f108 33ff 	add.w	r3, r8, #4294967295
9001436a:	f8cd 8010 	str.w	r8, [sp, #16]
9001436e:	9302      	str	r3, [sp, #8]
90014370:	ea4f 03c8 	mov.w	r3, r8, lsl #3
90014374:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
90014378:	9306      	str	r3, [sp, #24]
9001437a:	445c      	add	r4, fp
9001437c:	2500      	movs	r5, #0
9001437e:	4626      	mov	r6, r4
90014380:	f8cd 8014 	str.w	r8, [sp, #20]
90014384:	462f      	mov	r7, r5
90014386:	9b05      	ldr	r3, [sp, #20]
90014388:	2b00      	cmp	r3, #0
9001438a:	d073      	beq.n	90014474 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
9001438c:	9903      	ldr	r1, [sp, #12]
9001438e:	4630      	mov	r0, r6
90014390:	f7ff fdb9 	bl	90013f06 <_ZNK8touchgfx4Rect9intersectERKS0_>
90014394:	b350      	cbz	r0, 900143ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90014396:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
9001439a:	f9b6 c000 	ldrsh.w	ip, [r6]
9001439e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
900143a2:	45e6      	cmp	lr, ip
900143a4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
900143a8:	db33      	blt.n	90014412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
900143aa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
900143ae:	88b3      	ldrh	r3, [r6, #4]
900143b0:	4472      	add	r2, lr
900143b2:	4463      	add	r3, ip
900143b4:	b212      	sxth	r2, r2
900143b6:	b21b      	sxth	r3, r3
900143b8:	429a      	cmp	r2, r3
900143ba:	dc2a      	bgt.n	90014412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
900143bc:	fa1f f289 	uxth.w	r2, r9
900143c0:	88f3      	ldrh	r3, [r6, #6]
900143c2:	45ca      	cmp	sl, r9
900143c4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
900143c8:	4413      	add	r3, r2
900143ca:	fa1f fc8a 	uxth.w	ip, sl
900143ce:	b29b      	uxth	r3, r3
900143d0:	fa0f fe83 	sxth.w	lr, r3
900143d4:	db0f      	blt.n	900143f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
900143d6:	eba3 030c 	sub.w	r3, r3, ip
900143da:	1ac9      	subs	r1, r1, r3
900143dc:	b209      	sxth	r1, r1
900143de:	2900      	cmp	r1, #0
900143e0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900143e4:	dd12      	ble.n	9001440c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900143e6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
900143ea:	4605      	mov	r5, r0
900143ec:	9b05      	ldr	r3, [sp, #20]
900143ee:	3e08      	subs	r6, #8
900143f0:	3b01      	subs	r3, #1
900143f2:	9305      	str	r3, [sp, #20]
900143f4:	e7c7      	b.n	90014386 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
900143f6:	4461      	add	r1, ip
900143f8:	b209      	sxth	r1, r1
900143fa:	4571      	cmp	r1, lr
900143fc:	dc38      	bgt.n	90014470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
900143fe:	eba2 020c 	sub.w	r2, r2, ip
90014402:	b212      	sxth	r2, r2
90014404:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90014408:	2a00      	cmp	r2, #0
9001440a:	dcee      	bgt.n	900143ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
9001440c:	b00f      	add	sp, #60	; 0x3c
9001440e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014412:	45ca      	cmp	sl, r9
90014414:	db2c      	blt.n	90014470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90014416:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
9001441a:	449a      	add	sl, r3
9001441c:	88f3      	ldrh	r3, [r6, #6]
9001441e:	4499      	add	r9, r3
90014420:	fa0f fa8a 	sxth.w	sl, sl
90014424:	fa0f f989 	sxth.w	r9, r9
90014428:	45ca      	cmp	sl, r9
9001442a:	dc21      	bgt.n	90014470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
9001442c:	fa1f f28c 	uxth.w	r2, ip
90014430:	88b3      	ldrh	r3, [r6, #4]
90014432:	45e6      	cmp	lr, ip
90014434:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
90014438:	4413      	add	r3, r2
9001443a:	fa1f f98e 	uxth.w	r9, lr
9001443e:	b29b      	uxth	r3, r3
90014440:	fa0f fa83 	sxth.w	sl, r3
90014444:	db0a      	blt.n	9001445c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
90014446:	eba3 0309 	sub.w	r3, r3, r9
9001444a:	1ac9      	subs	r1, r1, r3
9001444c:	b209      	sxth	r1, r1
9001444e:	2900      	cmp	r1, #0
90014450:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
90014454:	ddda      	ble.n	9001440c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90014456:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
9001445a:	e7c6      	b.n	900143ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
9001445c:	4449      	add	r1, r9
9001445e:	b209      	sxth	r1, r1
90014460:	4551      	cmp	r1, sl
90014462:	dc05      	bgt.n	90014470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90014464:	eba2 0209 	sub.w	r2, r2, r9
90014468:	b212      	sxth	r2, r2
9001446a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
9001446e:	e7cb      	b.n	90014408 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
90014470:	4607      	mov	r7, r0
90014472:	e7bb      	b.n	900143ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90014474:	2d00      	cmp	r5, #0
90014476:	d181      	bne.n	9001437c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
90014478:	2f00      	cmp	r7, #0
9001447a:	f000 81dd 	beq.w	90014838 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
9001447e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
90014482:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
90014486:	b2b3      	uxth	r3, r6
90014488:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
9001448c:	b2b9      	uxth	r1, r7
9001448e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
90014492:	441a      	add	r2, r3
90014494:	448a      	add	sl, r1
90014496:	9105      	str	r1, [sp, #20]
90014498:	b292      	uxth	r2, r2
9001449a:	fa1f fa8a 	uxth.w	sl, sl
9001449e:	fa0f f882 	sxth.w	r8, r2
900144a2:	fa0f f98a 	sxth.w	r9, sl
900144a6:	e9cd 2307 	strd	r2, r3, [sp, #28]
900144aa:	9b04      	ldr	r3, [sp, #16]
900144ac:	2b00      	cmp	r3, #0
900144ae:	d053      	beq.n	90014558 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
900144b0:	9903      	ldr	r1, [sp, #12]
900144b2:	4620      	mov	r0, r4
900144b4:	f7ff fd27 	bl	90013f06 <_ZNK8touchgfx4Rect9intersectERKS0_>
900144b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
900144bc:	b1c0      	cbz	r0, 900144f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
900144be:	f9b4 e000 	ldrsh.w	lr, [r4]
900144c2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
900144c6:	4576      	cmp	r6, lr
900144c8:	dc23      	bgt.n	90014512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
900144ca:	f8b4 c004 	ldrh.w	ip, [r4, #4]
900144ce:	44f4      	add	ip, lr
900144d0:	fa0f fc8c 	sxth.w	ip, ip
900144d4:	45e0      	cmp	r8, ip
900144d6:	db1c      	blt.n	90014512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
900144d8:	428f      	cmp	r7, r1
900144da:	fa1f fc81 	uxth.w	ip, r1
900144de:	88e1      	ldrh	r1, [r4, #6]
900144e0:	dc0d      	bgt.n	900144fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
900144e2:	ebaa 0c0c 	sub.w	ip, sl, ip
900144e6:	f8a4 9002 	strh.w	r9, [r4, #2]
900144ea:	eba1 010c 	sub.w	r1, r1, ip
900144ee:	80e1      	strh	r1, [r4, #6]
900144f0:	4628      	mov	r0, r5
900144f2:	9904      	ldr	r1, [sp, #16]
900144f4:	3c08      	subs	r4, #8
900144f6:	4605      	mov	r5, r0
900144f8:	3901      	subs	r1, #1
900144fa:	9104      	str	r1, [sp, #16]
900144fc:	e7d3      	b.n	900144a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
900144fe:	4461      	add	r1, ip
90014500:	b209      	sxth	r1, r1
90014502:	4549      	cmp	r1, r9
90014504:	dcf5      	bgt.n	900144f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90014506:	9905      	ldr	r1, [sp, #20]
90014508:	eba1 0c0c 	sub.w	ip, r1, ip
9001450c:	f8a4 c006 	strh.w	ip, [r4, #6]
90014510:	e7ee      	b.n	900144f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90014512:	428f      	cmp	r7, r1
90014514:	dced      	bgt.n	900144f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90014516:	f8b4 c006 	ldrh.w	ip, [r4, #6]
9001451a:	4461      	add	r1, ip
9001451c:	b209      	sxth	r1, r1
9001451e:	4589      	cmp	r9, r1
90014520:	dbe7      	blt.n	900144f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90014522:	4576      	cmp	r6, lr
90014524:	fa1f fc8e 	uxth.w	ip, lr
90014528:	88a1      	ldrh	r1, [r4, #4]
9001452a:	dc07      	bgt.n	9001453c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
9001452c:	eba2 0c0c 	sub.w	ip, r2, ip
90014530:	f8a4 8000 	strh.w	r8, [r4]
90014534:	eba1 010c 	sub.w	r1, r1, ip
90014538:	80a1      	strh	r1, [r4, #4]
9001453a:	e7d9      	b.n	900144f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001453c:	4461      	add	r1, ip
9001453e:	b209      	sxth	r1, r1
90014540:	4588      	cmp	r8, r1
90014542:	dbd6      	blt.n	900144f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90014544:	eba3 0c0c 	sub.w	ip, r3, ip
90014548:	f8a4 c004 	strh.w	ip, [r4, #4]
9001454c:	e7d0      	b.n	900144f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
9001454e:	bf00      	nop
90014550:	24026262 	.word	0x24026262
90014554:	24026260 	.word	0x24026260
90014558:	2d00      	cmp	r5, #0
9001455a:	f000 816d 	beq.w	90014838 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
9001455e:	9b06      	ldr	r3, [sp, #24]
90014560:	445b      	add	r3, fp
90014562:	461c      	mov	r4, r3
90014564:	9b02      	ldr	r3, [sp, #8]
90014566:	3301      	adds	r3, #1
90014568:	f000 8166 	beq.w	90014838 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
9001456c:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
90014570:	9803      	ldr	r0, [sp, #12]
90014572:	4629      	mov	r1, r5
90014574:	f7ff fd3a 	bl	90013fec <_ZNK8touchgfx4Rect8includesERKS0_>
90014578:	b120      	cbz	r0, 90014584 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
9001457a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001457e:	9801      	ldr	r0, [sp, #4]
90014580:	f7ff feb0 	bl	900142e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014584:	9903      	ldr	r1, [sp, #12]
90014586:	4628      	mov	r0, r5
90014588:	f7ff fcbd 	bl	90013f06 <_ZNK8touchgfx4Rect9intersectERKS0_>
9001458c:	2800      	cmp	r0, #0
9001458e:	f000 809c 	beq.w	900146ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
90014592:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
90014596:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
9001459a:	fa1f f189 	uxth.w	r1, r9
9001459e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
900145a2:	9309      	str	r3, [sp, #36]	; 0x24
900145a4:	eb01 0c03 	add.w	ip, r1, r3
900145a8:	b283      	uxth	r3, r0
900145aa:	4548      	cmp	r0, r9
900145ac:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
900145b0:	fa1f fa8c 	uxth.w	sl, ip
900145b4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
900145b8:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
900145bc:	eb03 050c 	add.w	r5, r3, ip
900145c0:	b2ad      	uxth	r5, r5
900145c2:	9505      	str	r5, [sp, #20]
900145c4:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
900145c8:	9504      	str	r5, [sp, #16]
900145ca:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
900145ce:	f340 8099 	ble.w	90014704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
900145d2:	1a5b      	subs	r3, r3, r1
900145d4:	4596      	cmp	lr, r2
900145d6:	fa0f f08a 	sxth.w	r0, sl
900145da:	b29b      	uxth	r3, r3
900145dc:	b21e      	sxth	r6, r3
900145de:	dd2e      	ble.n	9001463e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
900145e0:	9f02      	ldr	r7, [sp, #8]
900145e2:	fa1f fe8e 	uxth.w	lr, lr
900145e6:	b292      	uxth	r2, r2
900145e8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
900145ec:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
900145f0:	9f04      	ldr	r7, [sp, #16]
900145f2:	ebae 0102 	sub.w	r1, lr, r2
900145f6:	44a6      	add	lr, r4
900145f8:	1a3f      	subs	r7, r7, r0
900145fa:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
900145fe:	b289      	uxth	r1, r1
90014600:	4402      	add	r2, r0
90014602:	fa0f fe8e 	sxth.w	lr, lr
90014606:	b20d      	sxth	r5, r1
90014608:	b212      	sxth	r2, r2
9001460a:	436f      	muls	r7, r5
9001460c:	ebae 0202 	sub.w	r2, lr, r2
90014610:	4372      	muls	r2, r6
90014612:	4297      	cmp	r7, r2
90014614:	db09      	blt.n	9001462a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
90014616:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
9001461a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
9001461e:	449c      	add	ip, r3
90014620:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90014624:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
90014628:	e686      	b.n	90014338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
9001462a:	4421      	add	r1, r4
9001462c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
90014630:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
90014634:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90014638:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001463c:	e67c      	b.n	90014338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
9001463e:	9f04      	ldr	r7, [sp, #16]
90014640:	42b8      	cmp	r0, r7
90014642:	da27      	bge.n	90014694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
90014644:	9902      	ldr	r1, [sp, #8]
90014646:	1a3f      	subs	r7, r7, r0
90014648:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
9001464c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
90014650:	eb05 010e 	add.w	r1, r5, lr
90014654:	fa1f f881 	uxth.w	r8, r1
90014658:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
9001465c:	4411      	add	r1, r2
9001465e:	fa0f f988 	sxth.w	r9, r8
90014662:	eba2 020e 	sub.w	r2, r2, lr
90014666:	eba1 0108 	sub.w	r1, r1, r8
9001466a:	4372      	muls	r2, r6
9001466c:	b289      	uxth	r1, r1
9001466e:	fa0f f881 	sxth.w	r8, r1
90014672:	fb08 f707 	mul.w	r7, r8, r7
90014676:	42ba      	cmp	r2, r7
90014678:	dc06      	bgt.n	90014688 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
9001467a:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
9001467e:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
90014682:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
90014686:	e7ca      	b.n	9001461e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
90014688:	4429      	add	r1, r5
9001468a:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
9001468e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90014692:	e651      	b.n	90014338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014694:	9805      	ldr	r0, [sp, #20]
90014696:	2d06      	cmp	r5, #6
90014698:	ebaa 0000 	sub.w	r0, sl, r0
9001469c:	b280      	uxth	r0, r0
9001469e:	fa0f fe80 	sxth.w	lr, r0
900146a2:	d817      	bhi.n	900146d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
900146a4:	9b04      	ldr	r3, [sp, #16]
900146a6:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
900146aa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
900146ae:	1c6b      	adds	r3, r5, #1
900146b0:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
900146b4:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
900146b8:	9b01      	ldr	r3, [sp, #4]
900146ba:	9801      	ldr	r0, [sp, #4]
900146bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
900146c0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
900146c4:	805a      	strh	r2, [r3, #2]
900146c6:	809e      	strh	r6, [r3, #4]
900146c8:	80d9      	strh	r1, [r3, #6]
900146ca:	9b02      	ldr	r3, [sp, #8]
900146cc:	3c08      	subs	r4, #8
900146ce:	3b01      	subs	r3, #1
900146d0:	9302      	str	r3, [sp, #8]
900146d2:	e747      	b.n	90014564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
900146d4:	9a02      	ldr	r2, [sp, #8]
900146d6:	45b6      	cmp	lr, r6
900146d8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
900146dc:	db0d      	blt.n	900146fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
900146de:	449c      	add	ip, r3
900146e0:	445a      	add	r2, fp
900146e2:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
900146e6:	fa1f fc8c 	uxth.w	ip, ip
900146ea:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
900146ee:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
900146f2:	448c      	add	ip, r1
900146f4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
900146f8:	e61e      	b.n	90014338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900146fa:	445a      	add	r2, fp
900146fc:	4484      	add	ip, r0
900146fe:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
90014702:	e78f      	b.n	90014624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90014704:	fa1f f18e 	uxth.w	r1, lr
90014708:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
9001470c:	b293      	uxth	r3, r2
9001470e:	4596      	cmp	lr, r2
90014710:	eb01 0806 	add.w	r8, r1, r6
90014714:	9306      	str	r3, [sp, #24]
90014716:	fa1f f888 	uxth.w	r8, r8
9001471a:	9f06      	ldr	r7, [sp, #24]
9001471c:	fa0f f388 	sxth.w	r3, r8
90014720:	9307      	str	r3, [sp, #28]
90014722:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
90014726:	443b      	add	r3, r7
90014728:	b29b      	uxth	r3, r3
9001472a:	9308      	str	r3, [sp, #32]
9001472c:	da24      	bge.n	90014778 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
9001472e:	9905      	ldr	r1, [sp, #20]
90014730:	eba3 0308 	sub.w	r3, r3, r8
90014734:	eba2 020e 	sub.w	r2, r2, lr
90014738:	eba9 0000 	sub.w	r0, r9, r0
9001473c:	ebaa 0401 	sub.w	r4, sl, r1
90014740:	b29b      	uxth	r3, r3
90014742:	b2a4      	uxth	r4, r4
90014744:	b219      	sxth	r1, r3
90014746:	b225      	sxth	r5, r4
90014748:	4348      	muls	r0, r1
9001474a:	436a      	muls	r2, r5
9001474c:	4282      	cmp	r2, r0
9001474e:	9a02      	ldr	r2, [sp, #8]
90014750:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90014754:	445a      	add	r2, fp
90014756:	dc06      	bgt.n	90014766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
90014758:	9b07      	ldr	r3, [sp, #28]
9001475a:	44a4      	add	ip, r4
9001475c:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
90014760:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
90014764:	e75e      	b.n	90014624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90014766:	9904      	ldr	r1, [sp, #16]
90014768:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
9001476c:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
90014770:	4433      	add	r3, r6
90014772:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
90014776:	e5df      	b.n	90014338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014778:	9f06      	ldr	r7, [sp, #24]
9001477a:	9b04      	ldr	r3, [sp, #16]
9001477c:	1bc9      	subs	r1, r1, r7
9001477e:	fa0f f78a 	sxth.w	r7, sl
90014782:	b289      	uxth	r1, r1
90014784:	429f      	cmp	r7, r3
90014786:	fa0f fe81 	sxth.w	lr, r1
9001478a:	dd23      	ble.n	900147d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
9001478c:	9a05      	ldr	r2, [sp, #20]
9001478e:	eba9 0000 	sub.w	r0, r9, r0
90014792:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90014796:	ebaa 0202 	sub.w	r2, sl, r2
9001479a:	9d07      	ldr	r5, [sp, #28]
9001479c:	fb0e f000 	mul.w	r0, lr, r0
900147a0:	b292      	uxth	r2, r2
900147a2:	eba5 0a03 	sub.w	sl, r5, r3
900147a6:	9b02      	ldr	r3, [sp, #8]
900147a8:	b214      	sxth	r4, r2
900147aa:	00db      	lsls	r3, r3, #3
900147ac:	fb04 fa0a 	mul.w	sl, r4, sl
900147b0:	445b      	add	r3, fp
900147b2:	4550      	cmp	r0, sl
900147b4:	db03      	blt.n	900147be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
900147b6:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
900147ba:	4494      	add	ip, r2
900147bc:	e732      	b.n	90014624 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
900147be:	9a04      	ldr	r2, [sp, #16]
900147c0:	4431      	add	r1, r6
900147c2:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
900147c6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
900147ca:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
900147ce:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
900147d2:	e75c      	b.n	9001468e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
900147d4:	9b08      	ldr	r3, [sp, #32]
900147d6:	2d06      	cmp	r5, #6
900147d8:	eba3 0308 	sub.w	r3, r3, r8
900147dc:	b29b      	uxth	r3, r3
900147de:	b218      	sxth	r0, r3
900147e0:	d813      	bhi.n	9001480a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
900147e2:	9b07      	ldr	r3, [sp, #28]
900147e4:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
900147e8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
900147ec:	1c6b      	adds	r3, r5, #1
900147ee:	9901      	ldr	r1, [sp, #4]
900147f0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
900147f4:	9b01      	ldr	r3, [sp, #4]
900147f6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
900147fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
900147fe:	805a      	strh	r2, [r3, #2]
90014800:	9a09      	ldr	r2, [sp, #36]	; 0x24
90014802:	f8a3 e006 	strh.w	lr, [r3, #6]
90014806:	809a      	strh	r2, [r3, #4]
90014808:	e75f      	b.n	900146ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
9001480a:	9c02      	ldr	r4, [sp, #8]
9001480c:	4570      	cmp	r0, lr
9001480e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
90014812:	db0d      	blt.n	90014830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
90014814:	4431      	add	r1, r6
90014816:	9b06      	ldr	r3, [sp, #24]
90014818:	445c      	add	r4, fp
9001481a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001481e:	b289      	uxth	r1, r1
90014820:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
90014824:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90014828:	4419      	add	r1, r3
9001482a:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
9001482e:	e583      	b.n	90014338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014830:	445c      	add	r4, fp
90014832:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
90014836:	e79b      	b.n	90014770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
90014838:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
9001483c:	2e07      	cmp	r6, #7
9001483e:	ea4f 04c6 	mov.w	r4, r6, lsl #3
90014842:	d812      	bhi.n	9001486a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
90014844:	1c75      	adds	r5, r6, #1
90014846:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
9001484a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
9001484e:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
90014852:	9d01      	ldr	r5, [sp, #4]
90014854:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
90014858:	442c      	add	r4, r5
9001485a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
9001485e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
90014862:	8061      	strh	r1, [r4, #2]
90014864:	80a2      	strh	r2, [r4, #4]
90014866:	80e3      	strh	r3, [r4, #6]
90014868:	e5d0      	b.n	9001440c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
9001486a:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
9001486e:	3e01      	subs	r6, #1
90014870:	445c      	add	r4, fp
90014872:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
90014876:	f04f 37ff 	mov.w	r7, #4294967295
9001487a:	2500      	movs	r5, #0
9001487c:	9305      	str	r3, [sp, #20]
9001487e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
90014882:	1e72      	subs	r2, r6, #1
90014884:	9302      	str	r3, [sp, #8]
90014886:	4691      	mov	r9, r2
90014888:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
9001488c:	9304      	str	r3, [sp, #16]
9001488e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
90014892:	f1b9 3fff 	cmp.w	r9, #4294967295
90014896:	6818      	ldr	r0, [r3, #0]
90014898:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
9001489c:	9207      	str	r2, [sp, #28]
9001489e:	bf16      	itet	ne
900148a0:	9905      	ldrne	r1, [sp, #20]
900148a2:	f8dd e00c 	ldreq.w	lr, [sp, #12]
900148a6:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
900148aa:	9306      	str	r3, [sp, #24]
900148ac:	f8be 1006 	ldrh.w	r1, [lr, #6]
900148b0:	f8be 8004 	ldrh.w	r8, [lr, #4]
900148b4:	fb18 f801 	smulbb	r8, r8, r1
900148b8:	6859      	ldr	r1, [r3, #4]
900148ba:	e8ac 0003 	stmia.w	ip!, {r0, r1}
900148be:	4671      	mov	r1, lr
900148c0:	a80c      	add	r0, sp, #48	; 0x30
900148c2:	f7ff fbb9 	bl	90014038 <_ZN8touchgfx4Rect11expandToFitERKS0_>
900148c6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
900148ca:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
900148ce:	f04f 0c08 	mov.w	ip, #8
900148d2:	9b04      	ldr	r3, [sp, #16]
900148d4:	9a02      	ldr	r2, [sp, #8]
900148d6:	fb10 f001 	smulbb	r0, r0, r1
900148da:	fb02 8803 	mla	r8, r2, r3, r8
900148de:	eba0 0108 	sub.w	r1, r0, r8
900148e2:	fb90 f0fc 	sdiv	r0, r0, ip
900148e6:	4288      	cmp	r0, r1
900148e8:	dc20      	bgt.n	9001492c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
900148ea:	4551      	cmp	r1, sl
900148ec:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
900148f0:	da03      	bge.n	900148fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
900148f2:	b1d9      	cbz	r1, 9001492c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
900148f4:	468a      	mov	sl, r1
900148f6:	464f      	mov	r7, r9
900148f8:	4635      	mov	r5, r6
900148fa:	f109 39ff 	add.w	r9, r9, #4294967295
900148fe:	f119 0f02 	cmn.w	r9, #2
90014902:	d1c6      	bne.n	90014892 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
90014904:	4616      	mov	r6, r2
90014906:	3201      	adds	r2, #1
90014908:	f1a4 0408 	sub.w	r4, r4, #8
9001490c:	d1b7      	bne.n	9001487e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
9001490e:	9b01      	ldr	r3, [sp, #4]
90014910:	b2ac      	uxth	r4, r5
90014912:	00ed      	lsls	r5, r5, #3
90014914:	1958      	adds	r0, r3, r5
90014916:	1c7b      	adds	r3, r7, #1
90014918:	d10b      	bne.n	90014932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
9001491a:	4601      	mov	r1, r0
9001491c:	9803      	ldr	r0, [sp, #12]
9001491e:	f7ff fb8b 	bl	90014038 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014922:	4621      	mov	r1, r4
90014924:	9801      	ldr	r0, [sp, #4]
90014926:	f7ff fcdd 	bl	900142e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
9001492a:	e505      	b.n	90014338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
9001492c:	464f      	mov	r7, r9
9001492e:	4635      	mov	r5, r6
90014930:	e7ed      	b.n	9001490e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
90014932:	9b01      	ldr	r3, [sp, #4]
90014934:	00ff      	lsls	r7, r7, #3
90014936:	445d      	add	r5, fp
90014938:	19d9      	adds	r1, r3, r7
9001493a:	445f      	add	r7, fp
9001493c:	f7ff fb7c 	bl	90014038 <_ZN8touchgfx4Rect11expandToFitERKS0_>
90014940:	9b03      	ldr	r3, [sp, #12]
90014942:	cb03      	ldmia	r3!, {r0, r1}
90014944:	9b03      	ldr	r3, [sp, #12]
90014946:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
9001494a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
9001494e:	f855 0fac 	ldr.w	r0, [r5, #172]!
90014952:	6869      	ldr	r1, [r5, #4]
90014954:	c303      	stmia	r3!, {r0, r1}
90014956:	e7e4      	b.n	90014922 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

90014958 <_ZN8touchgfx11Application10invalidateEv>:
90014958:	4b09      	ldr	r3, [pc, #36]	; (90014980 <_ZN8touchgfx11Application10invalidateEv+0x28>)
9001495a:	b082      	sub	sp, #8
9001495c:	2100      	movs	r1, #0
9001495e:	f9b3 2000 	ldrsh.w	r2, [r3]
90014962:	4b08      	ldr	r3, [pc, #32]	; (90014984 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
90014964:	9100      	str	r1, [sp, #0]
90014966:	f9b3 3000 	ldrsh.w	r3, [r3]
9001496a:	f8ad 2004 	strh.w	r2, [sp, #4]
9001496e:	f8ad 3006 	strh.w	r3, [sp, #6]
90014972:	ab02      	add	r3, sp, #8
90014974:	e913 0006 	ldmdb	r3, {r1, r2}
90014978:	b002      	add	sp, #8
9001497a:	f7ff bcc7 	b.w	9001430c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
9001497e:	bf00      	nop
90014980:	24026260 	.word	0x24026260
90014984:	24026262 	.word	0x24026262

90014988 <_ZN8touchgfx11Application15drawCachedAreasEv>:
90014988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001498c:	f500 7698 	add.w	r6, r0, #304	; 0x130
90014990:	b09b      	sub	sp, #108	; 0x6c
90014992:	4604      	mov	r4, r0
90014994:	4630      	mov	r0, r6
90014996:	f7fc fccc 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
9001499a:	4605      	mov	r5, r0
9001499c:	b940      	cbnz	r0, 900149b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
9001499e:	4620      	mov	r0, r4
900149a0:	e896 0006 	ldmia.w	r6, {r1, r2}
900149a4:	f7ff fcb2 	bl	9001430c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900149a8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
900149ac:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
900149b0:	4bc8      	ldr	r3, [pc, #800]	; (90014cd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
900149b2:	681b      	ldr	r3, [r3, #0]
900149b4:	2b00      	cmp	r3, #0
900149b6:	d03e      	beq.n	90014a36 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
900149b8:	4dc7      	ldr	r5, [pc, #796]	; (90014cd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
900149ba:	4628      	mov	r0, r5
900149bc:	f7fc fcb9 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
900149c0:	4606      	mov	r6, r0
900149c2:	2800      	cmp	r0, #0
900149c4:	d137      	bne.n	90014a36 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
900149c6:	4628      	mov	r0, r5
900149c8:	f7ff f9e0 	bl	90013d8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
900149cc:	6829      	ldr	r1, [r5, #0]
900149ce:	686a      	ldr	r2, [r5, #4]
900149d0:	4620      	mov	r0, r4
900149d2:	f7ff fc9b 	bl	9001430c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900149d6:	802e      	strh	r6, [r5, #0]
900149d8:	806e      	strh	r6, [r5, #2]
900149da:	80ae      	strh	r6, [r5, #4]
900149dc:	80ee      	strh	r6, [r5, #6]
900149de:	ae09      	add	r6, sp, #36	; 0x24
900149e0:	4630      	mov	r0, r6
900149e2:	f7ff fc23 	bl	9001422c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
900149e6:	4abd      	ldr	r2, [pc, #756]	; (90014cdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
900149e8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
900149ec:	f104 00ac 	add.w	r0, r4, #172	; 0xac
900149f0:	8815      	ldrh	r5, [r2, #0]
900149f2:	9202      	str	r2, [sp, #8]
900149f4:	462b      	mov	r3, r5
900149f6:	429f      	cmp	r7, r3
900149f8:	d924      	bls.n	90014a44 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
900149fa:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
900149fe:	2907      	cmp	r1, #7
90014a00:	d816      	bhi.n	90014a30 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
90014a02:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
90014a06:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
90014a0a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
90014a0e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
90014a12:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
90014a16:	1c4a      	adds	r2, r1, #1
90014a18:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
90014a1c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
90014a20:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
90014a24:	f8a2 9002 	strh.w	r9, [r2, #2]
90014a28:	f8a2 e004 	strh.w	lr, [r2, #4]
90014a2c:	f8a2 c006 	strh.w	ip, [r2, #6]
90014a30:	3301      	adds	r3, #1
90014a32:	b29b      	uxth	r3, r3
90014a34:	e7df      	b.n	900149f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
90014a36:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90014a3a:	2b00      	cmp	r3, #0
90014a3c:	d1cf      	bne.n	900149de <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
90014a3e:	b01b      	add	sp, #108	; 0x6c
90014a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014a44:	462f      	mov	r7, r5
90014a46:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
90014a4a:	42bb      	cmp	r3, r7
90014a4c:	d90b      	bls.n	90014a66 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
90014a4e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
90014a52:	3701      	adds	r7, #1
90014a54:	4620      	mov	r0, r4
90014a56:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
90014a5a:	b2bf      	uxth	r7, r7
90014a5c:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
90014a60:	f7ff fc54 	bl	9001430c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90014a64:	e7ef      	b.n	90014a46 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
90014a66:	4a9e      	ldr	r2, [pc, #632]	; (90014ce0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
90014a68:	6813      	ldr	r3, [r2, #0]
90014a6a:	4690      	mov	r8, r2
90014a6c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
90014a70:	2b01      	cmp	r3, #1
90014a72:	f040 80e4 	bne.w	90014c3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
90014a76:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
90014a7a:	4629      	mov	r1, r5
90014a7c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90014a80:	2500      	movs	r5, #0
90014a82:	33ae      	adds	r3, #174	; 0xae
90014a84:	428f      	cmp	r7, r1
90014a86:	f103 0308 	add.w	r3, r3, #8
90014a8a:	dd0a      	ble.n	90014aa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
90014a8c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
90014a90:	3101      	adds	r1, #1
90014a92:	f833 0c04 	ldrh.w	r0, [r3, #-4]
90014a96:	4402      	add	r2, r0
90014a98:	b212      	sxth	r2, r2
90014a9a:	4295      	cmp	r5, r2
90014a9c:	bfb8      	it	lt
90014a9e:	4615      	movlt	r5, r2
90014aa0:	e7f0      	b.n	90014a84 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
90014aa2:	4b90      	ldr	r3, [pc, #576]	; (90014ce4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
90014aa4:	f8df b238 	ldr.w	fp, [pc, #568]	; 90014ce0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
90014aa8:	881b      	ldrh	r3, [r3, #0]
90014aaa:	46d8      	mov	r8, fp
90014aac:	2b0f      	cmp	r3, #15
90014aae:	bf8c      	ite	hi
90014ab0:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
90014ab4:	f04f 0a01 	movls.w	sl, #1
90014ab8:	2300      	movs	r3, #0
90014aba:	e9cd 3305 	strd	r3, r3, [sp, #20]
90014abe:	f8bd 701a 	ldrh.w	r7, [sp, #26]
90014ac2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
90014ac6:	4438      	add	r0, r7
90014ac8:	b207      	sxth	r7, r0
90014aca:	f8db 0000 	ldr.w	r0, [fp]
90014ace:	42bd      	cmp	r5, r7
90014ad0:	6803      	ldr	r3, [r0, #0]
90014ad2:	f340 8084 	ble.w	90014bde <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
90014ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90014ada:	4798      	blx	r3
90014adc:	eb07 030a 	add.w	r3, r7, sl
90014ae0:	4298      	cmp	r0, r3
90014ae2:	da07      	bge.n	90014af4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90014ae4:	4285      	cmp	r5, r0
90014ae6:	dd05      	ble.n	90014af4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90014ae8:	4287      	cmp	r7, r0
90014aea:	dd6d      	ble.n	90014bc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90014aec:	2f00      	cmp	r7, #0
90014aee:	dd6b      	ble.n	90014bc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90014af0:	4628      	mov	r0, r5
90014af2:	e004      	b.n	90014afe <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
90014af4:	4287      	cmp	r7, r0
90014af6:	dcfb      	bgt.n	90014af0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
90014af8:	42a8      	cmp	r0, r5
90014afa:	bfa8      	it	ge
90014afc:	4628      	movge	r0, r5
90014afe:	4b7a      	ldr	r3, [pc, #488]	; (90014ce8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
90014b00:	1bc0      	subs	r0, r0, r7
90014b02:	2200      	movs	r2, #0
90014b04:	f8ad 7016 	strh.w	r7, [sp, #22]
90014b08:	f9b3 3000 	ldrsh.w	r3, [r3]
90014b0c:	f8ad 2014 	strh.w	r2, [sp, #20]
90014b10:	f8ad 3018 	strh.w	r3, [sp, #24]
90014b14:	9b02      	ldr	r3, [sp, #8]
90014b16:	f8ad 001a 	strh.w	r0, [sp, #26]
90014b1a:	881f      	ldrh	r7, [r3, #0]
90014b1c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90014b20:	42bb      	cmp	r3, r7
90014b22:	d9cc      	bls.n	90014abe <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90014b24:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
90014b28:	ab07      	add	r3, sp, #28
90014b2a:	f852 0fac 	ldr.w	r0, [r2, #172]!
90014b2e:	6851      	ldr	r1, [r2, #4]
90014b30:	c303      	stmia	r3!, {r0, r1}
90014b32:	a905      	add	r1, sp, #20
90014b34:	a807      	add	r0, sp, #28
90014b36:	f7ff f9e6 	bl	90013f06 <_ZNK8touchgfx4Rect9intersectERKS0_>
90014b3a:	2800      	cmp	r0, #0
90014b3c:	d04c      	beq.n	90014bd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
90014b3e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
90014b42:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
90014b46:	f8bd 9020 	ldrh.w	r9, [sp, #32]
90014b4a:	4686      	mov	lr, r0
90014b4c:	4290      	cmp	r0, r2
90014b4e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
90014b52:	4448      	add	r0, r9
90014b54:	f8bd 9018 	ldrh.w	r9, [sp, #24]
90014b58:	bfb8      	it	lt
90014b5a:	4696      	movlt	lr, r2
90014b5c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90014b60:	444a      	add	r2, r9
90014b62:	b280      	uxth	r0, r0
90014b64:	4299      	cmp	r1, r3
90014b66:	468c      	mov	ip, r1
90014b68:	b292      	uxth	r2, r2
90014b6a:	9303      	str	r3, [sp, #12]
90014b6c:	bfb8      	it	lt
90014b6e:	469c      	movlt	ip, r3
90014b70:	b203      	sxth	r3, r0
90014b72:	fa0f f982 	sxth.w	r9, r2
90014b76:	f8ad e01c 	strh.w	lr, [sp, #28]
90014b7a:	f8ad c01e 	strh.w	ip, [sp, #30]
90014b7e:	454b      	cmp	r3, r9
90014b80:	bfb8      	it	lt
90014b82:	4602      	movlt	r2, r0
90014b84:	9b03      	ldr	r3, [sp, #12]
90014b86:	eba2 020e 	sub.w	r2, r2, lr
90014b8a:	f8ad 2020 	strh.w	r2, [sp, #32]
90014b8e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
90014b92:	4411      	add	r1, r2
90014b94:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90014b98:	4413      	add	r3, r2
90014b9a:	b289      	uxth	r1, r1
90014b9c:	b29b      	uxth	r3, r3
90014b9e:	b208      	sxth	r0, r1
90014ba0:	b21a      	sxth	r2, r3
90014ba2:	4290      	cmp	r0, r2
90014ba4:	bfb8      	it	lt
90014ba6:	460b      	movlt	r3, r1
90014ba8:	eba3 030c 	sub.w	r3, r3, ip
90014bac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90014bb0:	a807      	add	r0, sp, #28
90014bb2:	f7fc fbbe 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
90014bb6:	b920      	cbnz	r0, 90014bc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
90014bb8:	6823      	ldr	r3, [r4, #0]
90014bba:	a907      	add	r1, sp, #28
90014bbc:	4620      	mov	r0, r4
90014bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90014bc0:	4798      	blx	r3
90014bc2:	3701      	adds	r7, #1
90014bc4:	b2bf      	uxth	r7, r7
90014bc6:	e7a9      	b.n	90014b1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
90014bc8:	f8d8 0000 	ldr.w	r0, [r8]
90014bcc:	2101      	movs	r1, #1
90014bce:	6803      	ldr	r3, [r0, #0]
90014bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90014bd4:	4798      	blx	r3
90014bd6:	e772      	b.n	90014abe <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90014bd8:	e9cd 0007 	strd	r0, r0, [sp, #28]
90014bdc:	e7e8      	b.n	90014bb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
90014bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90014be0:	4798      	blx	r3
90014be2:	4b42      	ldr	r3, [pc, #264]	; (90014cec <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
90014be4:	781b      	ldrb	r3, [r3, #0]
90014be6:	2b00      	cmp	r3, #0
90014be8:	f43f af29 	beq.w	90014a3e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90014bec:	2300      	movs	r3, #0
90014bee:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
90014bf2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90014bf6:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
90014bfa:	9b02      	ldr	r3, [sp, #8]
90014bfc:	881b      	ldrh	r3, [r3, #0]
90014bfe:	429d      	cmp	r5, r3
90014c00:	f67f af1d 	bls.w	90014a3e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90014c04:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
90014c08:	2907      	cmp	r1, #7
90014c0a:	d815      	bhi.n	90014c38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
90014c0c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
90014c10:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
90014c14:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
90014c18:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
90014c1c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
90014c20:	1c4a      	adds	r2, r1, #1
90014c22:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
90014c26:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
90014c2a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
90014c2e:	f8a2 e002 	strh.w	lr, [r2, #2]
90014c32:	f8a2 c004 	strh.w	ip, [r2, #4]
90014c36:	80d7      	strh	r7, [r2, #6]
90014c38:	3301      	adds	r3, #1
90014c3a:	b29b      	uxth	r3, r3
90014c3c:	e7df      	b.n	90014bfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
90014c3e:	2b02      	cmp	r3, #2
90014c40:	f040 8135 	bne.w	90014eae <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90014c44:	4b2a      	ldr	r3, [pc, #168]	; (90014cf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
90014c46:	f104 09ac 	add.w	r9, r4, #172	; 0xac
90014c4a:	781b      	ldrb	r3, [r3, #0]
90014c4c:	2b01      	cmp	r3, #1
90014c4e:	f000 809c 	beq.w	90014d8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90014c52:	9b02      	ldr	r3, [sp, #8]
90014c54:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
90014c58:	f8b3 b000 	ldrh.w	fp, [r3]
90014c5c:	f10b 0b01 	add.w	fp, fp, #1
90014c60:	fa1f fb8b 	uxth.w	fp, fp
90014c64:	2a00      	cmp	r2, #0
90014c66:	d0bc      	beq.n	90014be2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90014c68:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
90014c6c:	4659      	mov	r1, fp
90014c6e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
90014c72:	f04f 0800 	mov.w	r8, #0
90014c76:	441d      	add	r5, r3
90014c78:	b22d      	sxth	r5, r5
90014c7a:	b28b      	uxth	r3, r1
90014c7c:	ea4f 07c8 	mov.w	r7, r8, lsl #3
90014c80:	429a      	cmp	r2, r3
90014c82:	f240 80c0 	bls.w	90014e06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
90014c86:	4427      	add	r7, r4
90014c88:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
90014c8c:	4608      	mov	r0, r1
90014c8e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
90014c92:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
90014c96:	4563      	cmp	r3, ip
90014c98:	f340 80a2 	ble.w	90014de0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
90014c9c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
90014ca0:	4465      	add	r5, ip
90014ca2:	b22d      	sxth	r5, r5
90014ca4:	429d      	cmp	r5, r3
90014ca6:	bfa8      	it	ge
90014ca8:	461d      	movge	r5, r3
90014caa:	3101      	adds	r1, #1
90014cac:	4680      	mov	r8, r0
90014cae:	e7e4      	b.n	90014c7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
90014cb0:	d10b      	bne.n	90014cca <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
90014cb2:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
90014cb6:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
90014cba:	458c      	cmp	ip, r1
90014cbc:	bfb4      	ite	lt
90014cbe:	469c      	movlt	ip, r3
90014cc0:	46bc      	movge	ip, r7
90014cc2:	4572      	cmp	r2, lr
90014cc4:	bfb8      	it	lt
90014cc6:	4672      	movlt	r2, lr
90014cc8:	e087      	b.n	90014dda <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90014cca:	428a      	cmp	r2, r1
90014ccc:	46bc      	mov	ip, r7
90014cce:	bfb8      	it	lt
90014cd0:	460a      	movlt	r2, r1
90014cd2:	e082      	b.n	90014dda <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90014cd4:	240262a4 	.word	0x240262a4
90014cd8:	240262b0 	.word	0x240262b0
90014cdc:	24000068 	.word	0x24000068
90014ce0:	2402626c 	.word	0x2402626c
90014ce4:	24026262 	.word	0x24026262
90014ce8:	24026260 	.word	0x24026260
90014cec:	2402626a 	.word	0x2402626a
90014cf0:	24026264 	.word	0x24026264
90014cf4:	1961      	adds	r1, r4, r5
90014cf6:	ab07      	add	r3, sp, #28
90014cf8:	f851 0fac 	ldr.w	r0, [r1, #172]!
90014cfc:	6849      	ldr	r1, [r1, #4]
90014cfe:	c303      	stmia	r3!, {r0, r1}
90014d00:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90014d04:	a807      	add	r0, sp, #28
90014d06:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90014d0a:	2b13      	cmp	r3, #19
90014d0c:	440b      	add	r3, r1
90014d0e:	bfd8      	it	le
90014d10:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
90014d14:	1a9b      	subs	r3, r3, r2
90014d16:	f8ad 201c 	strh.w	r2, [sp, #28]
90014d1a:	f8ad 3020 	strh.w	r3, [sp, #32]
90014d1e:	f7ff f84f 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90014d22:	a807      	add	r0, sp, #28
90014d24:	f7fc fb05 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
90014d28:	bb78      	cbnz	r0, 90014d8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90014d2a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
90014d2e:	4425      	add	r5, r4
90014d30:	f8d8 0000 	ldr.w	r0, [r8]
90014d34:	f1bc 0f14 	cmp.w	ip, #20
90014d38:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90014d3c:	f8d0 e000 	ldr.w	lr, [r0]
90014d40:	bfa8      	it	ge
90014d42:	f04f 0c14 	movge.w	ip, #20
90014d46:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90014d4a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90014d4e:	fa1f fc8c 	uxth.w	ip, ip
90014d52:	f8cd c000 	str.w	ip, [sp]
90014d56:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
90014d5a:	47d0      	blx	sl
90014d5c:	4682      	mov	sl, r0
90014d5e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90014d62:	a807      	add	r0, sp, #28
90014d64:	f7ff f812 	bl	90013d8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90014d68:	6823      	ldr	r3, [r4, #0]
90014d6a:	4620      	mov	r0, r4
90014d6c:	a907      	add	r1, sp, #28
90014d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90014d70:	4798      	blx	r3
90014d72:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
90014d76:	eba0 000a 	sub.w	r0, r0, sl
90014d7a:	b200      	sxth	r0, r0
90014d7c:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
90014d80:	b918      	cbnz	r0, 90014d8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90014d82:	b2b9      	uxth	r1, r7
90014d84:	4648      	mov	r0, r9
90014d86:	f7ff faad 	bl	900142e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014d8a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
90014d8e:	f1bb 0f00 	cmp.w	fp, #0
90014d92:	f43f af26 	beq.w	90014be2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90014d96:	9b02      	ldr	r3, [sp, #8]
90014d98:	2700      	movs	r7, #0
90014d9a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
90014d9e:	881b      	ldrh	r3, [r3, #0]
90014da0:	3301      	adds	r3, #1
90014da2:	b29b      	uxth	r3, r3
90014da4:	b299      	uxth	r1, r3
90014da6:	00fd      	lsls	r5, r7, #3
90014da8:	458b      	cmp	fp, r1
90014daa:	d9a3      	bls.n	90014cf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
90014dac:	4425      	add	r5, r4
90014dae:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
90014db2:	469c      	mov	ip, r3
90014db4:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
90014db8:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
90014dbc:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
90014dc0:	4408      	add	r0, r1
90014dc2:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
90014dc6:	4471      	add	r1, lr
90014dc8:	b200      	sxth	r0, r0
90014dca:	b209      	sxth	r1, r1
90014dcc:	4288      	cmp	r0, r1
90014dce:	f6bf af6f 	bge.w	90014cb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
90014dd2:	4586      	cmp	lr, r0
90014dd4:	4672      	mov	r2, lr
90014dd6:	bfb8      	it	lt
90014dd8:	4602      	movlt	r2, r0
90014dda:	3301      	adds	r3, #1
90014ddc:	4667      	mov	r7, ip
90014dde:	e7e1      	b.n	90014da4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
90014de0:	d10c      	bne.n	90014dfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
90014de2:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
90014de6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
90014dea:	4287      	cmp	r7, r0
90014dec:	bfb4      	ite	lt
90014dee:	4608      	movlt	r0, r1
90014df0:	4640      	movge	r0, r8
90014df2:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
90014df6:	443b      	add	r3, r7
90014df8:	b21b      	sxth	r3, r3
90014dfa:	e753      	b.n	90014ca4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
90014dfc:	4565      	cmp	r5, ip
90014dfe:	4640      	mov	r0, r8
90014e00:	bfa8      	it	ge
90014e02:	4665      	movge	r5, ip
90014e04:	e751      	b.n	90014caa <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
90014e06:	eb09 0007 	add.w	r0, r9, r7
90014e0a:	4427      	add	r7, r4
90014e0c:	9203      	str	r2, [sp, #12]
90014e0e:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
90014e12:	f1ba 0f13 	cmp.w	sl, #19
90014e16:	bfde      	ittt	le
90014e18:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
90014e1c:	4455      	addle	r5, sl
90014e1e:	b22d      	sxthle	r5, r5
90014e20:	f7fc fa87 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
90014e24:	9a03      	ldr	r2, [sp, #12]
90014e26:	2800      	cmp	r0, #0
90014e28:	f47f af1c 	bne.w	90014c64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
90014e2c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
90014e30:	fa1f fa8a 	uxth.w	sl, sl
90014e34:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90014e38:	1aad      	subs	r5, r5, r2
90014e3a:	4829      	ldr	r0, [pc, #164]	; (90014ee0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
90014e3c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
90014e40:	2d14      	cmp	r5, #20
90014e42:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
90014e46:	6800      	ldr	r0, [r0, #0]
90014e48:	bfa8      	it	ge
90014e4a:	2514      	movge	r5, #20
90014e4c:	f8ad 101c 	strh.w	r1, [sp, #28]
90014e50:	f8ad 201e 	strh.w	r2, [sp, #30]
90014e54:	b289      	uxth	r1, r1
90014e56:	f8ad 3020 	strh.w	r3, [sp, #32]
90014e5a:	b2ad      	uxth	r5, r5
90014e5c:	f8d0 c000 	ldr.w	ip, [r0]
90014e60:	b292      	uxth	r2, r2
90014e62:	4555      	cmp	r5, sl
90014e64:	bf94      	ite	ls
90014e66:	9500      	strls	r5, [sp, #0]
90014e68:	f8cd a000 	strhi.w	sl, [sp]
90014e6c:	b29b      	uxth	r3, r3
90014e6e:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
90014e72:	47a8      	blx	r5
90014e74:	6823      	ldr	r3, [r4, #0]
90014e76:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90014e7a:	a907      	add	r1, sp, #28
90014e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90014e7e:	4620      	mov	r0, r4
90014e80:	4798      	blx	r3
90014e82:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
90014e86:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
90014e8a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
90014e8e:	1a5b      	subs	r3, r3, r1
90014e90:	440a      	add	r2, r1
90014e92:	b21b      	sxth	r3, r3
90014e94:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
90014e98:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
90014e9c:	2b00      	cmp	r3, #0
90014e9e:	f47f aed8 	bne.w	90014c52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90014ea2:	fa1f f188 	uxth.w	r1, r8
90014ea6:	4648      	mov	r0, r9
90014ea8:	f7ff fa1c 	bl	900142e4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014eac:	e6d1      	b.n	90014c52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90014eae:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90014eb2:	42ab      	cmp	r3, r5
90014eb4:	f67f ae95 	bls.w	90014be2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90014eb8:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
90014ebc:	ab07      	add	r3, sp, #28
90014ebe:	f852 0fac 	ldr.w	r0, [r2, #172]!
90014ec2:	6851      	ldr	r1, [r2, #4]
90014ec4:	c303      	stmia	r3!, {r0, r1}
90014ec6:	a807      	add	r0, sp, #28
90014ec8:	f7fc fa33 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
90014ecc:	b920      	cbnz	r0, 90014ed8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
90014ece:	6823      	ldr	r3, [r4, #0]
90014ed0:	a907      	add	r1, sp, #28
90014ed2:	4620      	mov	r0, r4
90014ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90014ed6:	4798      	blx	r3
90014ed8:	3501      	adds	r5, #1
90014eda:	b2ad      	uxth	r5, r5
90014edc:	e7e7      	b.n	90014eae <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90014ede:	bf00      	nop
90014ee0:	2402626c 	.word	0x2402626c

90014ee4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
90014ee4:	4b03      	ldr	r3, [pc, #12]	; (90014ef4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
90014ee6:	2200      	movs	r2, #0
90014ee8:	801a      	strh	r2, [r3, #0]
90014eea:	805a      	strh	r2, [r3, #2]
90014eec:	809a      	strh	r2, [r3, #4]
90014eee:	80da      	strh	r2, [r3, #6]
90014ef0:	4770      	bx	lr
90014ef2:	bf00      	nop
90014ef4:	240262b0 	.word	0x240262b0

90014ef8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
90014ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014efc:	b09d      	sub	sp, #116	; 0x74
90014efe:	4606      	mov	r6, r0
90014f00:	4614      	mov	r4, r2
90014f02:	468a      	mov	sl, r1
90014f04:	a803      	add	r0, sp, #12
90014f06:	461d      	mov	r5, r3
90014f08:	f000 fd7c 	bl	90015a04 <_ZN8touchgfx12TextProviderC1Ev>
90014f0c:	6833      	ldr	r3, [r6, #0]
90014f0e:	4630      	mov	r0, r6
90014f10:	f242 0b0b 	movw	fp, #8203	; 0x200b
90014f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014f16:	4798      	blx	r3
90014f18:	6833      	ldr	r3, [r6, #0]
90014f1a:	4607      	mov	r7, r0
90014f1c:	4630      	mov	r0, r6
90014f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90014f20:	4798      	blx	r3
90014f22:	462a      	mov	r2, r5
90014f24:	2500      	movs	r5, #0
90014f26:	4621      	mov	r1, r4
90014f28:	9000      	str	r0, [sp, #0]
90014f2a:	463b      	mov	r3, r7
90014f2c:	462c      	mov	r4, r5
90014f2e:	46a9      	mov	r9, r5
90014f30:	46a8      	mov	r8, r5
90014f32:	a803      	add	r0, sp, #12
90014f34:	f000 fdb9 	bl	90015aaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90014f38:	2300      	movs	r3, #0
90014f3a:	9302      	str	r3, [sp, #8]
90014f3c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90014f40:	429c      	cmp	r4, r3
90014f42:	d002      	beq.n	90014f4a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
90014f44:	455c      	cmp	r4, fp
90014f46:	bf18      	it	ne
90014f48:	4625      	movne	r5, r4
90014f4a:	ab02      	add	r3, sp, #8
90014f4c:	4632      	mov	r2, r6
90014f4e:	4651      	mov	r1, sl
90014f50:	a803      	add	r0, sp, #12
90014f52:	f001 f89f 	bl	90016094 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90014f56:	4604      	mov	r4, r0
90014f58:	b108      	cbz	r0, 90014f5e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
90014f5a:	280a      	cmp	r0, #10
90014f5c:	d10a      	bne.n	90014f74 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
90014f5e:	45c1      	cmp	r9, r8
90014f60:	bf38      	it	cc
90014f62:	46c1      	movcc	r9, r8
90014f64:	f04f 0800 	mov.w	r8, #0
90014f68:	2c00      	cmp	r4, #0
90014f6a:	d1e5      	bne.n	90014f38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90014f6c:	4648      	mov	r0, r9
90014f6e:	b01d      	add	sp, #116	; 0x74
90014f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014f74:	9a02      	ldr	r2, [sp, #8]
90014f76:	2a00      	cmp	r2, #0
90014f78:	d0de      	beq.n	90014f38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90014f7a:	7b57      	ldrb	r7, [r2, #13]
90014f7c:	4629      	mov	r1, r5
90014f7e:	6833      	ldr	r3, [r6, #0]
90014f80:	007f      	lsls	r7, r7, #1
90014f82:	8894      	ldrh	r4, [r2, #4]
90014f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90014f86:	f407 7080 	and.w	r0, r7, #256	; 0x100
90014f8a:	7a97      	ldrb	r7, [r2, #10]
90014f8c:	4307      	orrs	r7, r0
90014f8e:	4630      	mov	r0, r6
90014f90:	4798      	blx	r3
90014f92:	4438      	add	r0, r7
90014f94:	4480      	add	r8, r0
90014f96:	fa1f f888 	uxth.w	r8, r8
90014f9a:	e7e5      	b.n	90014f68 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

90014f9c <_ZNK8touchgfx4Font12getCharWidthEt>:
90014f9c:	b508      	push	{r3, lr}
90014f9e:	6803      	ldr	r3, [r0, #0]
90014fa0:	68db      	ldr	r3, [r3, #12]
90014fa2:	4798      	blx	r3
90014fa4:	b128      	cbz	r0, 90014fb2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
90014fa6:	7b43      	ldrb	r3, [r0, #13]
90014fa8:	7a80      	ldrb	r0, [r0, #10]
90014faa:	005b      	lsls	r3, r3, #1
90014fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
90014fb0:	4318      	orrs	r0, r3
90014fb2:	bd08      	pop	{r3, pc}

90014fb4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
90014fb4:	b40e      	push	{r1, r2, r3}
90014fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
90014fb8:	b09e      	sub	sp, #120	; 0x78
90014fba:	4605      	mov	r5, r0
90014fbc:	ab23      	add	r3, sp, #140	; 0x8c
90014fbe:	a805      	add	r0, sp, #20
90014fc0:	f853 4b04 	ldr.w	r4, [r3], #4
90014fc4:	9303      	str	r3, [sp, #12]
90014fc6:	f000 fd1d 	bl	90015a04 <_ZN8touchgfx12TextProviderC1Ev>
90014fca:	682b      	ldr	r3, [r5, #0]
90014fcc:	4628      	mov	r0, r5
90014fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014fd0:	4798      	blx	r3
90014fd2:	682b      	ldr	r3, [r5, #0]
90014fd4:	4606      	mov	r6, r0
90014fd6:	4628      	mov	r0, r5
90014fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90014fda:	4798      	blx	r3
90014fdc:	4633      	mov	r3, r6
90014fde:	4621      	mov	r1, r4
90014fe0:	ae1e      	add	r6, sp, #120	; 0x78
90014fe2:	2400      	movs	r4, #0
90014fe4:	9000      	str	r0, [sp, #0]
90014fe6:	9a03      	ldr	r2, [sp, #12]
90014fe8:	a805      	add	r0, sp, #20
90014fea:	f000 fd5e 	bl	90015aaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90014fee:	f846 4d68 	str.w	r4, [r6, #-104]!
90014ff2:	462a      	mov	r2, r5
90014ff4:	4633      	mov	r3, r6
90014ff6:	4621      	mov	r1, r4
90014ff8:	a805      	add	r0, sp, #20
90014ffa:	f001 f84b 	bl	90016094 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90014ffe:	b300      	cbz	r0, 90015042 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
90015000:	280a      	cmp	r0, #10
90015002:	d01a      	beq.n	9001503a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90015004:	9f04      	ldr	r7, [sp, #16]
90015006:	b1c7      	cbz	r7, 9001503a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
90015008:	7b78      	ldrb	r0, [r7, #13]
9001500a:	7a3b      	ldrb	r3, [r7, #8]
9001500c:	00c1      	lsls	r1, r0, #3
9001500e:	88ea      	ldrh	r2, [r5, #6]
90015010:	f401 7180 	and.w	r1, r1, #256	; 0x100
90015014:	4319      	orrs	r1, r3
90015016:	0643      	lsls	r3, r0, #25
90015018:	ea4f 1000 	mov.w	r0, r0, lsl #4
9001501c:	bf48      	it	mi
9001501e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
90015022:	f400 7080 	and.w	r0, r0, #256	; 0x100
90015026:	bf48      	it	mi
90015028:	b219      	sxthmi	r1, r3
9001502a:	79fb      	ldrb	r3, [r7, #7]
9001502c:	4303      	orrs	r3, r0
9001502e:	4413      	add	r3, r2
90015030:	1a5b      	subs	r3, r3, r1
90015032:	b21b      	sxth	r3, r3
90015034:	429c      	cmp	r4, r3
90015036:	bfb8      	it	lt
90015038:	461c      	movlt	r4, r3
9001503a:	4633      	mov	r3, r6
9001503c:	462a      	mov	r2, r5
9001503e:	2100      	movs	r1, #0
90015040:	e7da      	b.n	90014ff8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
90015042:	b2a0      	uxth	r0, r4
90015044:	b01e      	add	sp, #120	; 0x78
90015046:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
9001504a:	b003      	add	sp, #12
9001504c:	4770      	bx	lr

9001504e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
9001504e:	7a43      	ldrb	r3, [r0, #9]
90015050:	8880      	ldrh	r0, [r0, #4]
90015052:	4418      	add	r0, r3
90015054:	b280      	uxth	r0, r0
90015056:	4770      	bx	lr

90015058 <_ZNK8touchgfx4Font13getFontHeightEv>:
90015058:	6803      	ldr	r3, [r0, #0]
9001505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001505c:	4718      	bx	r3

9001505e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
9001505e:	b40e      	push	{r1, r2, r3}
90015060:	b570      	push	{r4, r5, r6, lr}
90015062:	b09d      	sub	sp, #116	; 0x74
90015064:	4604      	mov	r4, r0
90015066:	ab21      	add	r3, sp, #132	; 0x84
90015068:	a803      	add	r0, sp, #12
9001506a:	f853 5b04 	ldr.w	r5, [r3], #4
9001506e:	9302      	str	r3, [sp, #8]
90015070:	f000 fcc8 	bl	90015a04 <_ZN8touchgfx12TextProviderC1Ev>
90015074:	6823      	ldr	r3, [r4, #0]
90015076:	4620      	mov	r0, r4
90015078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001507a:	4798      	blx	r3
9001507c:	6823      	ldr	r3, [r4, #0]
9001507e:	4606      	mov	r6, r0
90015080:	4620      	mov	r0, r4
90015082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90015084:	2401      	movs	r4, #1
90015086:	4798      	blx	r3
90015088:	4633      	mov	r3, r6
9001508a:	9000      	str	r0, [sp, #0]
9001508c:	4629      	mov	r1, r5
9001508e:	9a02      	ldr	r2, [sp, #8]
90015090:	a803      	add	r0, sp, #12
90015092:	f000 fd0a 	bl	90015aaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90015096:	a803      	add	r0, sp, #12
90015098:	f001 f8c8 	bl	9001622c <_ZN8touchgfx12TextProvider11getNextCharEv>
9001509c:	b2a3      	uxth	r3, r4
9001509e:	b138      	cbz	r0, 900150b0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
900150a0:	280a      	cmp	r0, #10
900150a2:	a803      	add	r0, sp, #12
900150a4:	bf04      	itt	eq
900150a6:	3301      	addeq	r3, #1
900150a8:	b21c      	sxtheq	r4, r3
900150aa:	f001 f8bf 	bl	9001622c <_ZN8touchgfx12TextProvider11getNextCharEv>
900150ae:	e7f5      	b.n	9001509c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
900150b0:	4618      	mov	r0, r3
900150b2:	b01d      	add	sp, #116	; 0x74
900150b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900150b8:	b003      	add	sp, #12
900150ba:	4770      	bx	lr

900150bc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
900150bc:	b40e      	push	{r1, r2, r3}
900150be:	b5f0      	push	{r4, r5, r6, r7, lr}
900150c0:	b09e      	sub	sp, #120	; 0x78
900150c2:	4604      	mov	r4, r0
900150c4:	ab23      	add	r3, sp, #140	; 0x8c
900150c6:	a805      	add	r0, sp, #20
900150c8:	f853 5b04 	ldr.w	r5, [r3], #4
900150cc:	9303      	str	r3, [sp, #12]
900150ce:	f000 fc99 	bl	90015a04 <_ZN8touchgfx12TextProviderC1Ev>
900150d2:	6823      	ldr	r3, [r4, #0]
900150d4:	4620      	mov	r0, r4
900150d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900150d8:	4798      	blx	r3
900150da:	6823      	ldr	r3, [r4, #0]
900150dc:	4606      	mov	r6, r0
900150de:	4620      	mov	r0, r4
900150e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900150e2:	4798      	blx	r3
900150e4:	4633      	mov	r3, r6
900150e6:	4629      	mov	r1, r5
900150e8:	9000      	str	r0, [sp, #0]
900150ea:	9a03      	ldr	r2, [sp, #12]
900150ec:	a805      	add	r0, sp, #20
900150ee:	f000 fcdc 	bl	90015aaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900150f2:	ad1e      	add	r5, sp, #120	; 0x78
900150f4:	2100      	movs	r1, #0
900150f6:	f647 76ff 	movw	r6, #32767	; 0x7fff
900150fa:	4622      	mov	r2, r4
900150fc:	a805      	add	r0, sp, #20
900150fe:	f845 1d68 	str.w	r1, [r5, #-104]!
90015102:	462b      	mov	r3, r5
90015104:	f000 ffc6 	bl	90016094 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90015108:	b1d8      	cbz	r0, 90015142 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
9001510a:	280a      	cmp	r0, #10
9001510c:	d012      	beq.n	90015134 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
9001510e:	9804      	ldr	r0, [sp, #16]
90015110:	b180      	cbz	r0, 90015134 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
90015112:	7b47      	ldrb	r7, [r0, #13]
90015114:	88e2      	ldrh	r2, [r4, #6]
90015116:	00fb      	lsls	r3, r7, #3
90015118:	f403 7180 	and.w	r1, r3, #256	; 0x100
9001511c:	7a03      	ldrb	r3, [r0, #8]
9001511e:	430b      	orrs	r3, r1
90015120:	0679      	lsls	r1, r7, #25
90015122:	bf44      	itt	mi
90015124:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015128:	b21b      	sxthmi	r3, r3
9001512a:	1ad3      	subs	r3, r2, r3
9001512c:	b21b      	sxth	r3, r3
9001512e:	429e      	cmp	r6, r3
90015130:	bfa8      	it	ge
90015132:	461e      	movge	r6, r3
90015134:	462b      	mov	r3, r5
90015136:	4622      	mov	r2, r4
90015138:	2100      	movs	r1, #0
9001513a:	a805      	add	r0, sp, #20
9001513c:	f000 ffaa 	bl	90016094 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90015140:	e7e2      	b.n	90015108 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
90015142:	4630      	mov	r0, r6
90015144:	b01e      	add	sp, #120	; 0x78
90015146:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
9001514a:	b003      	add	sp, #12
9001514c:	4770      	bx	lr

9001514e <_ZNK8touchgfx8Drawable10invalidateEv>:
9001514e:	b513      	push	{r0, r1, r4, lr}
90015150:	6803      	ldr	r3, [r0, #0]
90015152:	2400      	movs	r4, #0
90015154:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90015158:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9001515c:	f8ad 1004 	strh.w	r1, [sp, #4]
90015160:	4669      	mov	r1, sp
90015162:	691b      	ldr	r3, [r3, #16]
90015164:	9400      	str	r4, [sp, #0]
90015166:	f8ad 2006 	strh.w	r2, [sp, #6]
9001516a:	4798      	blx	r3
9001516c:	b002      	add	sp, #8
9001516e:	bd10      	pop	{r4, pc}

90015170 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
90015170:	b538      	push	{r3, r4, r5, lr}
90015172:	680b      	ldr	r3, [r1, #0]
90015174:	460c      	mov	r4, r1
90015176:	4605      	mov	r5, r0
90015178:	68db      	ldr	r3, [r3, #12]
9001517a:	4798      	blx	r3
9001517c:	6823      	ldr	r3, [r4, #0]
9001517e:	4620      	mov	r0, r4
90015180:	4629      	mov	r1, r5
90015182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015184:	4798      	blx	r3
90015186:	4628      	mov	r0, r5
90015188:	bd38      	pop	{r3, r4, r5, pc}

9001518a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
9001518a:	b410      	push	{r4}
9001518c:	880a      	ldrh	r2, [r1, #0]
9001518e:	8884      	ldrh	r4, [r0, #4]
90015190:	4422      	add	r2, r4
90015192:	800a      	strh	r2, [r1, #0]
90015194:	884a      	ldrh	r2, [r1, #2]
90015196:	88c4      	ldrh	r4, [r0, #6]
90015198:	4422      	add	r2, r4
9001519a:	804a      	strh	r2, [r1, #2]
9001519c:	6940      	ldr	r0, [r0, #20]
9001519e:	b120      	cbz	r0, 900151aa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
900151a0:	6803      	ldr	r3, [r0, #0]
900151a2:	f85d 4b04 	ldr.w	r4, [sp], #4
900151a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900151a8:	4718      	bx	r3
900151aa:	f85d 4b04 	ldr.w	r4, [sp], #4
900151ae:	4770      	bx	lr

900151b0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
900151b0:	b570      	push	{r4, r5, r6, lr}
900151b2:	8882      	ldrh	r2, [r0, #4]
900151b4:	460c      	mov	r4, r1
900151b6:	880b      	ldrh	r3, [r1, #0]
900151b8:	4605      	mov	r5, r0
900151ba:	4413      	add	r3, r2
900151bc:	800b      	strh	r3, [r1, #0]
900151be:	884b      	ldrh	r3, [r1, #2]
900151c0:	88c2      	ldrh	r2, [r0, #6]
900151c2:	4413      	add	r3, r2
900151c4:	804b      	strh	r3, [r1, #2]
900151c6:	1d01      	adds	r1, r0, #4
900151c8:	4620      	mov	r0, r4
900151ca:	f7fc f86f 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
900151ce:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
900151d2:	2b00      	cmp	r3, #0
900151d4:	dd0b      	ble.n	900151ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
900151d6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
900151da:	2b00      	cmp	r3, #0
900151dc:	dd07      	ble.n	900151ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
900151de:	6968      	ldr	r0, [r5, #20]
900151e0:	b128      	cbz	r0, 900151ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
900151e2:	6803      	ldr	r3, [r0, #0]
900151e4:	4621      	mov	r1, r4
900151e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900151e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900151ec:	4718      	bx	r3
900151ee:	bd70      	pop	{r4, r5, r6, pc}

900151f0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
900151f0:	b570      	push	{r4, r5, r6, lr}
900151f2:	8882      	ldrh	r2, [r0, #4]
900151f4:	460c      	mov	r4, r1
900151f6:	880b      	ldrh	r3, [r1, #0]
900151f8:	4605      	mov	r5, r0
900151fa:	4413      	add	r3, r2
900151fc:	800b      	strh	r3, [r1, #0]
900151fe:	884b      	ldrh	r3, [r1, #2]
90015200:	88c2      	ldrh	r2, [r0, #6]
90015202:	4413      	add	r3, r2
90015204:	804b      	strh	r3, [r1, #2]
90015206:	1d01      	adds	r1, r0, #4
90015208:	4620      	mov	r0, r4
9001520a:	f7fc f84f 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
9001520e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90015212:	2b00      	cmp	r3, #0
90015214:	dd18      	ble.n	90015248 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90015216:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
9001521a:	2b00      	cmp	r3, #0
9001521c:	dd14      	ble.n	90015248 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
9001521e:	6968      	ldr	r0, [r5, #20]
90015220:	b128      	cbz	r0, 9001522e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
90015222:	6803      	ldr	r3, [r0, #0]
90015224:	4621      	mov	r1, r4
90015226:	691b      	ldr	r3, [r3, #16]
90015228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001522c:	4718      	bx	r3
9001522e:	4b07      	ldr	r3, [pc, #28]	; (9001524c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
90015230:	681b      	ldr	r3, [r3, #0]
90015232:	3304      	adds	r3, #4
90015234:	429d      	cmp	r5, r3
90015236:	d107      	bne.n	90015248 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90015238:	f7fe ff44 	bl	900140c4 <_ZN8touchgfx11Application11getInstanceEv>
9001523c:	6821      	ldr	r1, [r4, #0]
9001523e:	6862      	ldr	r2, [r4, #4]
90015240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015244:	f7ff b862 	b.w	9001430c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90015248:	bd70      	pop	{r4, r5, r6, pc}
9001524a:	bf00      	nop
9001524c:	240262a8 	.word	0x240262a8

90015250 <_ZN8touchgfx8Drawable12moveRelativeEss>:
90015250:	b570      	push	{r4, r5, r6, lr}
90015252:	4604      	mov	r4, r0
90015254:	4616      	mov	r6, r2
90015256:	460d      	mov	r5, r1
90015258:	b901      	cbnz	r1, 9001525c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
9001525a:	b192      	cbz	r2, 90015282 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
9001525c:	6823      	ldr	r3, [r4, #0]
9001525e:	4620      	mov	r0, r4
90015260:	699b      	ldr	r3, [r3, #24]
90015262:	4798      	blx	r3
90015264:	88e2      	ldrh	r2, [r4, #6]
90015266:	88a1      	ldrh	r1, [r4, #4]
90015268:	4620      	mov	r0, r4
9001526a:	4432      	add	r2, r6
9001526c:	4429      	add	r1, r5
9001526e:	b212      	sxth	r2, r2
90015270:	b209      	sxth	r1, r1
90015272:	f7fc faeb 	bl	9001184c <_ZN8touchgfx8Drawable5setXYEss>
90015276:	6823      	ldr	r3, [r4, #0]
90015278:	4620      	mov	r0, r4
9001527a:	699b      	ldr	r3, [r3, #24]
9001527c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015280:	4718      	bx	r3
90015282:	bd70      	pop	{r4, r5, r6, pc}

90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
90015284:	b510      	push	{r4, lr}
90015286:	2300      	movs	r3, #0
90015288:	4604      	mov	r4, r0
9001528a:	4608      	mov	r0, r1
9001528c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
90015290:	8023      	strh	r3, [r4, #0]
90015292:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90015296:	8063      	strh	r3, [r4, #2]
90015298:	6803      	ldr	r3, [r0, #0]
9001529a:	80a1      	strh	r1, [r4, #4]
9001529c:	4621      	mov	r1, r4
9001529e:	80e2      	strh	r2, [r4, #6]
900152a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900152a2:	4798      	blx	r3
900152a4:	4620      	mov	r0, r4
900152a6:	bd10      	pop	{r4, pc}

900152a8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
900152a8:	b530      	push	{r4, r5, lr}
900152aa:	8083      	strh	r3, [r0, #4]
900152ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
900152b0:	f89d 5018 	ldrb.w	r5, [sp, #24]
900152b4:	80c3      	strh	r3, [r0, #6]
900152b6:	f89d 3010 	ldrb.w	r3, [sp, #16]
900152ba:	6141      	str	r1, [r0, #20]
900152bc:	7203      	strb	r3, [r0, #8]
900152be:	f89d 3014 	ldrb.w	r3, [sp, #20]
900152c2:	8302      	strh	r2, [r0, #24]
900152c4:	7243      	strb	r3, [r0, #9]
900152c6:	7a83      	ldrb	r3, [r0, #10]
900152c8:	f365 0306 	bfi	r3, r5, #0, #7
900152cc:	f89d 501c 	ldrb.w	r5, [sp, #28]
900152d0:	f365 13c7 	bfi	r3, r5, #7, #1
900152d4:	7283      	strb	r3, [r0, #10]
900152d6:	f89d 3020 	ldrb.w	r3, [sp, #32]
900152da:	72c3      	strb	r3, [r0, #11]
900152dc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
900152e0:	7303      	strb	r3, [r0, #12]
900152e2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
900152e6:	81c3      	strh	r3, [r0, #14]
900152e8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
900152ec:	8203      	strh	r3, [r0, #16]
900152ee:	4b01      	ldr	r3, [pc, #4]	; (900152f4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
900152f0:	6003      	str	r3, [r0, #0]
900152f2:	bd30      	pop	{r4, r5, pc}
900152f4:	90026c5c 	.word	0x90026c5c

900152f8 <_ZNK8touchgfx9ConstFont4findEt>:
900152f8:	b5f0      	push	{r4, r5, r6, r7, lr}
900152fa:	6944      	ldr	r4, [r0, #20]
900152fc:	b3bc      	cbz	r4, 9001536e <_ZNK8touchgfx9ConstFont4findEt+0x76>
900152fe:	88a3      	ldrh	r3, [r4, #4]
90015300:	8b02      	ldrh	r2, [r0, #24]
90015302:	1acb      	subs	r3, r1, r3
90015304:	f102 32ff 	add.w	r2, r2, #4294967295
90015308:	d431      	bmi.n	9001536e <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001530a:	4293      	cmp	r3, r2
9001530c:	dd0c      	ble.n	90015328 <_ZNK8touchgfx9ConstFont4findEt+0x30>
9001530e:	230e      	movs	r3, #14
90015310:	fb03 4302 	mla	r3, r3, r2, r4
90015314:	889b      	ldrh	r3, [r3, #4]
90015316:	1a5b      	subs	r3, r3, r1
90015318:	1ad3      	subs	r3, r2, r3
9001531a:	429a      	cmp	r2, r3
9001531c:	db27      	blt.n	9001536e <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001531e:	2b00      	cmp	r3, #0
90015320:	bfbc      	itt	lt
90015322:	2302      	movlt	r3, #2
90015324:	fb92 f3f3 	sdivlt	r3, r2, r3
90015328:	2500      	movs	r5, #0
9001532a:	260e      	movs	r6, #14
9001532c:	4295      	cmp	r5, r2
9001532e:	dc1e      	bgt.n	9001536e <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015330:	fb06 4003 	mla	r0, r6, r3, r4
90015334:	8887      	ldrh	r7, [r0, #4]
90015336:	42b9      	cmp	r1, r7
90015338:	d01a      	beq.n	90015370 <_ZNK8touchgfx9ConstFont4findEt+0x78>
9001533a:	d20d      	bcs.n	90015358 <_ZNK8touchgfx9ConstFont4findEt+0x60>
9001533c:	1e5a      	subs	r2, r3, #1
9001533e:	4295      	cmp	r5, r2
90015340:	dc15      	bgt.n	9001536e <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015342:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
90015346:	1a5b      	subs	r3, r3, r1
90015348:	1ad3      	subs	r3, r2, r3
9001534a:	429a      	cmp	r2, r3
9001534c:	db0f      	blt.n	9001536e <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001534e:	429d      	cmp	r5, r3
90015350:	ddec      	ble.n	9001532c <_ZNK8touchgfx9ConstFont4findEt+0x34>
90015352:	1953      	adds	r3, r2, r5
90015354:	105b      	asrs	r3, r3, #1
90015356:	e7e9      	b.n	9001532c <_ZNK8touchgfx9ConstFont4findEt+0x34>
90015358:	1c5d      	adds	r5, r3, #1
9001535a:	42aa      	cmp	r2, r5
9001535c:	db07      	blt.n	9001536e <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001535e:	8a43      	ldrh	r3, [r0, #18]
90015360:	1acb      	subs	r3, r1, r3
90015362:	442b      	add	r3, r5
90015364:	429d      	cmp	r5, r3
90015366:	dc02      	bgt.n	9001536e <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015368:	429a      	cmp	r2, r3
9001536a:	dadf      	bge.n	9001532c <_ZNK8touchgfx9ConstFont4findEt+0x34>
9001536c:	e7f1      	b.n	90015352 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
9001536e:	2000      	movs	r0, #0
90015370:	bdf0      	pop	{r4, r5, r6, r7, pc}

90015372 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
90015372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90015374:	4604      	mov	r4, r0
90015376:	4617      	mov	r7, r2
90015378:	461e      	mov	r6, r3
9001537a:	b911      	cbnz	r1, 90015382 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
9001537c:	2500      	movs	r5, #0
9001537e:	4628      	mov	r0, r5
90015380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90015382:	290a      	cmp	r1, #10
90015384:	d0fa      	beq.n	9001537c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90015386:	f64f 62ff 	movw	r2, #65279	; 0xfeff
9001538a:	4291      	cmp	r1, r2
9001538c:	d0f6      	beq.n	9001537c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001538e:	f242 020b 	movw	r2, #8203	; 0x200b
90015392:	4291      	cmp	r1, r2
90015394:	d0f2      	beq.n	9001537c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90015396:	f7ff ffaf 	bl	900152f8 <_ZNK8touchgfx9ConstFont4findEt>
9001539a:	4605      	mov	r5, r0
9001539c:	b950      	cbnz	r0, 900153b4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
9001539e:	6823      	ldr	r3, [r4, #0]
900153a0:	4620      	mov	r0, r4
900153a2:	691b      	ldr	r3, [r3, #16]
900153a4:	4798      	blx	r3
900153a6:	4601      	mov	r1, r0
900153a8:	4620      	mov	r0, r4
900153aa:	f7ff ffa5 	bl	900152f8 <_ZNK8touchgfx9ConstFont4findEt>
900153ae:	4605      	mov	r5, r0
900153b0:	2800      	cmp	r0, #0
900153b2:	d0e3      	beq.n	9001537c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
900153b4:	6823      	ldr	r3, [r4, #0]
900153b6:	4629      	mov	r1, r5
900153b8:	4620      	mov	r0, r4
900153ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900153bc:	4798      	blx	r3
900153be:	6038      	str	r0, [r7, #0]
900153c0:	6823      	ldr	r3, [r4, #0]
900153c2:	4620      	mov	r0, r4
900153c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900153c6:	4798      	blx	r3
900153c8:	7030      	strb	r0, [r6, #0]
900153ca:	e7d8      	b.n	9001537e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

900153cc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
900153cc:	2000      	movs	r0, #0
900153ce:	4770      	bx	lr

900153d0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
900153d0:	2001      	movs	r0, #1
900153d2:	4770      	bx	lr

900153d4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
900153d4:	2002      	movs	r0, #2
900153d6:	4770      	bx	lr

900153d8 <_ZN8touchgfx6ScreenD1Ev>:
900153d8:	4770      	bx	lr

900153da <_ZN8touchgfx6Screen11setupScreenEv>:
900153da:	4770      	bx	lr

900153dc <_ZN8touchgfx12GestureEventD1Ev>:
900153dc:	4770      	bx	lr

900153de <_ZN8touchgfx9DragEventD1Ev>:
900153de:	4770      	bx	lr

900153e0 <_ZN8touchgfx10ClickEventD1Ev>:
900153e0:	4770      	bx	lr

900153e2 <_ZN8touchgfx10ClickEventD0Ev>:
900153e2:	b510      	push	{r4, lr}
900153e4:	4604      	mov	r4, r0
900153e6:	210c      	movs	r1, #12
900153e8:	f00d fc67 	bl	90022cba <_ZdlPvj>
900153ec:	4620      	mov	r0, r4
900153ee:	bd10      	pop	{r4, pc}

900153f0 <_ZN8touchgfx9DragEventD0Ev>:
900153f0:	b510      	push	{r4, lr}
900153f2:	4604      	mov	r4, r0
900153f4:	2110      	movs	r1, #16
900153f6:	f00d fc60 	bl	90022cba <_ZdlPvj>
900153fa:	4620      	mov	r0, r4
900153fc:	bd10      	pop	{r4, pc}

900153fe <_ZN8touchgfx12GestureEventD0Ev>:
900153fe:	b510      	push	{r4, lr}
90015400:	4604      	mov	r4, r0
90015402:	210c      	movs	r1, #12
90015404:	f00d fc59 	bl	90022cba <_ZdlPvj>
90015408:	4620      	mov	r0, r4
9001540a:	bd10      	pop	{r4, pc}

9001540c <_ZN8touchgfx6ScreenD0Ev>:
9001540c:	b510      	push	{r4, lr}
9001540e:	4604      	mov	r4, r0
90015410:	213c      	movs	r1, #60	; 0x3c
90015412:	f00d fc52 	bl	90022cba <_ZdlPvj>
90015416:	4620      	mov	r0, r4
90015418:	bd10      	pop	{r4, pc}
	...

9001541c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
9001541c:	b530      	push	{r4, r5, lr}
9001541e:	460d      	mov	r5, r1
90015420:	6b01      	ldr	r1, [r0, #48]	; 0x30
90015422:	b087      	sub	sp, #28
90015424:	4604      	mov	r4, r0
90015426:	b301      	cbz	r1, 9001546a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
90015428:	a801      	add	r0, sp, #4
9001542a:	f7ff ff2b 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001542e:	892a      	ldrh	r2, [r5, #8]
90015430:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90015434:	7928      	ldrb	r0, [r5, #4]
90015436:	1ad2      	subs	r2, r2, r3
90015438:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
9001543a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
9001543e:	441a      	add	r2, r3
90015440:	896b      	ldrh	r3, [r5, #10]
90015442:	f8bd 5006 	ldrh.w	r5, [sp, #6]
90015446:	f88d 0010 	strb.w	r0, [sp, #16]
9001544a:	1b5b      	subs	r3, r3, r5
9001544c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
9001544e:	6b20      	ldr	r0, [r4, #48]	; 0x30
90015450:	442b      	add	r3, r5
90015452:	4d07      	ldr	r5, [pc, #28]	; (90015470 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
90015454:	f8ad 1012 	strh.w	r1, [sp, #18]
90015458:	a903      	add	r1, sp, #12
9001545a:	9503      	str	r5, [sp, #12]
9001545c:	f8ad 2014 	strh.w	r2, [sp, #20]
90015460:	f8ad 3016 	strh.w	r3, [sp, #22]
90015464:	6803      	ldr	r3, [r0, #0]
90015466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90015468:	4798      	blx	r3
9001546a:	b007      	add	sp, #28
9001546c:	bd30      	pop	{r4, r5, pc}
9001546e:	bf00      	nop
90015470:	90026ce4 	.word	0x90026ce4

90015474 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
90015474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015478:	6b03      	ldr	r3, [r0, #48]	; 0x30
9001547a:	b08a      	sub	sp, #40	; 0x28
9001547c:	4604      	mov	r4, r0
9001547e:	460d      	mov	r5, r1
90015480:	b113      	cbz	r3, 90015488 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
90015482:	790b      	ldrb	r3, [r1, #4]
90015484:	2b00      	cmp	r3, #0
90015486:	d044      	beq.n	90015512 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90015488:	f104 0804 	add.w	r8, r4, #4
9001548c:	a803      	add	r0, sp, #12
9001548e:	4641      	mov	r1, r8
90015490:	f7ff fef8 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015494:	792b      	ldrb	r3, [r5, #4]
90015496:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001549a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
9001549e:	b983      	cbnz	r3, 900154c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
900154a0:	f104 0336 	add.w	r3, r4, #54	; 0x36
900154a4:	892a      	ldrh	r2, [r5, #8]
900154a6:	88e9      	ldrh	r1, [r5, #6]
900154a8:	4640      	mov	r0, r8
900154aa:	1b92      	subs	r2, r2, r6
900154ac:	9301      	str	r3, [sp, #4]
900154ae:	1bc9      	subs	r1, r1, r7
900154b0:	f104 0334 	add.w	r3, r4, #52	; 0x34
900154b4:	b212      	sxth	r2, r2
900154b6:	9300      	str	r3, [sp, #0]
900154b8:	b209      	sxth	r1, r1
900154ba:	f104 0330 	add.w	r3, r4, #48	; 0x30
900154be:	f7fb fe13 	bl	900110e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
900154c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
900154c4:	b329      	cbz	r1, 90015512 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
900154c6:	a805      	add	r0, sp, #20
900154c8:	f7ff fedc 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900154cc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
900154d0:	792b      	ldrb	r3, [r5, #4]
900154d2:	a907      	add	r1, sp, #28
900154d4:	1abf      	subs	r7, r7, r2
900154d6:	88ea      	ldrh	r2, [r5, #6]
900154d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
900154da:	4417      	add	r7, r2
900154dc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
900154de:	f88d 3020 	strb.w	r3, [sp, #32]
900154e2:	4417      	add	r7, r2
900154e4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
900154e8:	1ab6      	subs	r6, r6, r2
900154ea:	892a      	ldrh	r2, [r5, #8]
900154ec:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
900154f0:	4416      	add	r6, r2
900154f2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
900154f4:	4416      	add	r6, r2
900154f6:	4a08      	ldr	r2, [pc, #32]	; (90015518 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
900154f8:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
900154fc:	2600      	movs	r6, #0
900154fe:	9207      	str	r2, [sp, #28]
90015500:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
90015504:	6803      	ldr	r3, [r0, #0]
90015506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90015508:	4798      	blx	r3
9001550a:	792b      	ldrb	r3, [r5, #4]
9001550c:	b10b      	cbz	r3, 90015512 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
9001550e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
90015512:	b00a      	add	sp, #40	; 0x28
90015514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015518:	90026cbc 	.word	0x90026cbc

9001551c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
9001551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015520:	460c      	mov	r4, r1
90015522:	6b01      	ldr	r1, [r0, #48]	; 0x30
90015524:	b088      	sub	sp, #32
90015526:	4605      	mov	r5, r0
90015528:	2900      	cmp	r1, #0
9001552a:	d06d      	beq.n	90015608 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
9001552c:	4668      	mov	r0, sp
9001552e:	f7ff fea9 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015532:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
90015534:	88e3      	ldrh	r3, [r4, #6]
90015536:	f9bd 8000 	ldrsh.w	r8, [sp]
9001553a:	440b      	add	r3, r1
9001553c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
90015540:	b21b      	sxth	r3, r3
90015542:	4543      	cmp	r3, r8
90015544:	db31      	blt.n	900155aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90015546:	f8bd c004 	ldrh.w	ip, [sp, #4]
9001554a:	44c4      	add	ip, r8
9001554c:	fa0f fc8c 	sxth.w	ip, ip
90015550:	4563      	cmp	r3, ip
90015552:	da2a      	bge.n	900155aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90015554:	8eea      	ldrh	r2, [r5, #54]	; 0x36
90015556:	8926      	ldrh	r6, [r4, #8]
90015558:	4416      	add	r6, r2
9001555a:	b236      	sxth	r6, r6
9001555c:	42be      	cmp	r6, r7
9001555e:	db24      	blt.n	900155aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90015560:	f8bd 0006 	ldrh.w	r0, [sp, #6]
90015564:	4438      	add	r0, r7
90015566:	b200      	sxth	r0, r0
90015568:	4286      	cmp	r6, r0
9001556a:	da1e      	bge.n	900155aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
9001556c:	8963      	ldrh	r3, [r4, #10]
9001556e:	4419      	add	r1, r3
90015570:	b209      	sxth	r1, r1
90015572:	4541      	cmp	r1, r8
90015574:	db08      	blt.n	90015588 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90015576:	4561      	cmp	r1, ip
90015578:	da06      	bge.n	90015588 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
9001557a:	89a3      	ldrh	r3, [r4, #12]
9001557c:	441a      	add	r2, r3
9001557e:	b212      	sxth	r2, r2
90015580:	42ba      	cmp	r2, r7
90015582:	db01      	blt.n	90015588 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90015584:	4282      	cmp	r2, r0
90015586:	db10      	blt.n	900155aa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90015588:	4b21      	ldr	r3, [pc, #132]	; (90015610 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
9001558a:	a904      	add	r1, sp, #16
9001558c:	6b28      	ldr	r0, [r5, #48]	; 0x30
9001558e:	9304      	str	r3, [sp, #16]
90015590:	2302      	movs	r3, #2
90015592:	f88d 3014 	strb.w	r3, [sp, #20]
90015596:	2300      	movs	r3, #0
90015598:	f8ad 3016 	strh.w	r3, [sp, #22]
9001559c:	f8ad 3018 	strh.w	r3, [sp, #24]
900155a0:	f8ad 301a 	strh.w	r3, [sp, #26]
900155a4:	6803      	ldr	r3, [r0, #0]
900155a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900155a8:	4798      	blx	r3
900155aa:	1d29      	adds	r1, r5, #4
900155ac:	a802      	add	r0, sp, #8
900155ae:	f7ff fe69 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900155b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
900155b6:	88e0      	ldrh	r0, [r4, #6]
900155b8:	eba3 0808 	sub.w	r8, r3, r8
900155bc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900155c0:	7921      	ldrb	r1, [r4, #4]
900155c2:	fa1f f888 	uxth.w	r8, r8
900155c6:	1bdf      	subs	r7, r3, r7
900155c8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
900155cc:	b2bb      	uxth	r3, r7
900155ce:	4440      	add	r0, r8
900155d0:	8922      	ldrh	r2, [r4, #8]
900155d2:	8967      	ldrh	r7, [r4, #10]
900155d4:	4460      	add	r0, ip
900155d6:	89a4      	ldrh	r4, [r4, #12]
900155d8:	441a      	add	r2, r3
900155da:	8eee      	ldrh	r6, [r5, #54]	; 0x36
900155dc:	44b8      	add	r8, r7
900155de:	4423      	add	r3, r4
900155e0:	f8ad 0016 	strh.w	r0, [sp, #22]
900155e4:	4432      	add	r2, r6
900155e6:	44e0      	add	r8, ip
900155e8:	4433      	add	r3, r6
900155ea:	4c0a      	ldr	r4, [pc, #40]	; (90015614 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
900155ec:	6b28      	ldr	r0, [r5, #48]	; 0x30
900155ee:	f88d 1014 	strb.w	r1, [sp, #20]
900155f2:	a904      	add	r1, sp, #16
900155f4:	9404      	str	r4, [sp, #16]
900155f6:	f8ad 2018 	strh.w	r2, [sp, #24]
900155fa:	f8ad 801a 	strh.w	r8, [sp, #26]
900155fe:	f8ad 301c 	strh.w	r3, [sp, #28]
90015602:	6803      	ldr	r3, [r0, #0]
90015604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90015606:	4798      	blx	r3
90015608:	b008      	add	sp, #32
9001560a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001560e:	bf00      	nop
90015610:	90026cbc 	.word	0x90026cbc
90015614:	90026cd0 	.word	0x90026cd0

90015618 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
90015618:	b537      	push	{r0, r1, r2, r4, r5, lr}
9001561a:	4604      	mov	r4, r0
9001561c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
90015620:	3201      	adds	r2, #1
90015622:	d112      	bne.n	9001564a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
90015624:	2500      	movs	r5, #0
90015626:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
9001562a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9001562e:	6803      	ldr	r3, [r0, #0]
90015630:	9500      	str	r5, [sp, #0]
90015632:	466d      	mov	r5, sp
90015634:	f8ad 1004 	strh.w	r1, [sp, #4]
90015638:	f8ad 2006 	strh.w	r2, [sp, #6]
9001563c:	4629      	mov	r1, r5
9001563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90015640:	4798      	blx	r3
90015642:	e895 0003 	ldmia.w	r5, {r0, r1}
90015646:	e884 0003 	stmia.w	r4, {r0, r1}
9001564a:	4620      	mov	r0, r4
9001564c:	b003      	add	sp, #12
9001564e:	bd30      	pop	{r4, r5, pc}

90015650 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
90015650:	b513      	push	{r0, r1, r4, lr}
90015652:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
90015656:	4604      	mov	r4, r0
90015658:	3301      	adds	r3, #1
9001565a:	d109      	bne.n	90015670 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
9001565c:	4601      	mov	r1, r0
9001565e:	4668      	mov	r0, sp
90015660:	f7ff fe10 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015664:	f8bd 3000 	ldrh.w	r3, [sp]
90015668:	8423      	strh	r3, [r4, #32]
9001566a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9001566e:	8463      	strh	r3, [r4, #34]	; 0x22
90015670:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
90015674:	b002      	add	sp, #8
90015676:	bd10      	pop	{r4, pc}

90015678 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
90015678:	b513      	push	{r0, r1, r4, lr}
9001567a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
9001567e:	4604      	mov	r4, r0
90015680:	3301      	adds	r3, #1
90015682:	d109      	bne.n	90015698 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
90015684:	4601      	mov	r1, r0
90015686:	4668      	mov	r0, sp
90015688:	f7ff fdfc 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001568c:	f8bd 3000 	ldrh.w	r3, [sp]
90015690:	8423      	strh	r3, [r4, #32]
90015692:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90015696:	8463      	strh	r3, [r4, #34]	; 0x22
90015698:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
9001569c:	b002      	add	sp, #8
9001569e:	bd10      	pop	{r4, pc}

900156a0 <_ZN8touchgfx6ScreenC1Ev>:
900156a0:	b570      	push	{r4, r5, r6, lr}
900156a2:	4b17      	ldr	r3, [pc, #92]	; (90015700 <_ZN8touchgfx6ScreenC1Ev+0x60>)
900156a4:	4605      	mov	r5, r0
900156a6:	4a17      	ldr	r2, [pc, #92]	; (90015704 <_ZN8touchgfx6ScreenC1Ev+0x64>)
900156a8:	2101      	movs	r1, #1
900156aa:	f845 3b04 	str.w	r3, [r5], #4
900156ae:	2300      	movs	r3, #0
900156b0:	6042      	str	r2, [r0, #4]
900156b2:	4604      	mov	r4, r0
900156b4:	8103      	strh	r3, [r0, #8]
900156b6:	8143      	strh	r3, [r0, #10]
900156b8:	8183      	strh	r3, [r0, #12]
900156ba:	81c3      	strh	r3, [r0, #14]
900156bc:	8203      	strh	r3, [r0, #16]
900156be:	8243      	strh	r3, [r0, #18]
900156c0:	8283      	strh	r3, [r0, #20]
900156c2:	82c3      	strh	r3, [r0, #22]
900156c4:	6203      	str	r3, [r0, #32]
900156c6:	8483      	strh	r3, [r0, #36]	; 0x24
900156c8:	84c3      	strh	r3, [r0, #38]	; 0x26
900156ca:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
900156ce:	6343      	str	r3, [r0, #52]	; 0x34
900156d0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
900156d4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
900156d8:	e9c0 3306 	strd	r3, r3, [r0, #24]
900156dc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
900156e0:	4b09      	ldr	r3, [pc, #36]	; (90015708 <_ZN8touchgfx6ScreenC1Ev+0x68>)
900156e2:	4628      	mov	r0, r5
900156e4:	f9b3 6000 	ldrsh.w	r6, [r3]
900156e8:	6b93      	ldr	r3, [r2, #56]	; 0x38
900156ea:	4a08      	ldr	r2, [pc, #32]	; (9001570c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
900156ec:	f9b2 1000 	ldrsh.w	r1, [r2]
900156f0:	4798      	blx	r3
900156f2:	6863      	ldr	r3, [r4, #4]
900156f4:	4628      	mov	r0, r5
900156f6:	4631      	mov	r1, r6
900156f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900156fa:	4798      	blx	r3
900156fc:	4620      	mov	r0, r4
900156fe:	bd70      	pop	{r4, r5, r6, pc}
90015700:	90026cf8 	.word	0x90026cf8
90015704:	90026a7c 	.word	0x90026a7c
90015708:	24026262 	.word	0x24026262
9001570c:	24026260 	.word	0x24026260

90015710 <_ZN8touchgfx6Screen4drawEv>:
90015710:	4b09      	ldr	r3, [pc, #36]	; (90015738 <_ZN8touchgfx6Screen4drawEv+0x28>)
90015712:	b507      	push	{r0, r1, r2, lr}
90015714:	f9b3 2000 	ldrsh.w	r2, [r3]
90015718:	2100      	movs	r1, #0
9001571a:	4b08      	ldr	r3, [pc, #32]	; (9001573c <_ZN8touchgfx6Screen4drawEv+0x2c>)
9001571c:	9100      	str	r1, [sp, #0]
9001571e:	4669      	mov	r1, sp
90015720:	f9b3 3000 	ldrsh.w	r3, [r3]
90015724:	f8ad 2004 	strh.w	r2, [sp, #4]
90015728:	f8ad 3006 	strh.w	r3, [sp, #6]
9001572c:	6803      	ldr	r3, [r0, #0]
9001572e:	689b      	ldr	r3, [r3, #8]
90015730:	4798      	blx	r3
90015732:	b003      	add	sp, #12
90015734:	f85d fb04 	ldr.w	pc, [sp], #4
90015738:	24026260 	.word	0x24026260
9001573c:	24026262 	.word	0x24026262

90015740 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
90015740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015744:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
90015748:	b089      	sub	sp, #36	; 0x24
9001574a:	4680      	mov	r8, r0
9001574c:	460c      	mov	r4, r1
9001574e:	2b00      	cmp	r3, #0
90015750:	4615      	mov	r5, r2
90015752:	dd0e      	ble.n	90015772 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90015754:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
90015758:	2b00      	cmp	r3, #0
9001575a:	dd0a      	ble.n	90015772 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001575c:	4628      	mov	r0, r5
9001575e:	f7ff ff5b 	bl	90015618 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90015762:	4621      	mov	r1, r4
90015764:	f7fe fbcf 	bl	90013f06 <_ZNK8touchgfx4Rect9intersectERKS0_>
90015768:	69eb      	ldr	r3, [r5, #28]
9001576a:	b928      	cbnz	r0, 90015778 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
9001576c:	461d      	mov	r5, r3
9001576e:	2b00      	cmp	r3, #0
90015770:	d1f4      	bne.n	9001575c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
90015772:	b009      	add	sp, #36	; 0x24
90015774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90015778:	ae04      	add	r6, sp, #16
9001577a:	2b00      	cmp	r3, #0
9001577c:	f000 80b5 	beq.w	900158ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90015780:	682b      	ldr	r3, [r5, #0]
90015782:	4629      	mov	r1, r5
90015784:	a802      	add	r0, sp, #8
90015786:	68db      	ldr	r3, [r3, #12]
90015788:	4798      	blx	r3
9001578a:	4628      	mov	r0, r5
9001578c:	f7ff ff60 	bl	90015650 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90015790:	f8bd 7008 	ldrh.w	r7, [sp, #8]
90015794:	4407      	add	r7, r0
90015796:	4628      	mov	r0, r5
90015798:	f7ff ff6e 	bl	90015678 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
9001579c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900157a0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
900157a4:	b23f      	sxth	r7, r7
900157a6:	4418      	add	r0, r3
900157a8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
900157ac:	4621      	mov	r1, r4
900157ae:	f8ad 2014 	strh.w	r2, [sp, #20]
900157b2:	f8ad 0012 	strh.w	r0, [sp, #18]
900157b6:	4630      	mov	r0, r6
900157b8:	f8ad 3016 	strh.w	r3, [sp, #22]
900157bc:	f8ad 7010 	strh.w	r7, [sp, #16]
900157c0:	f7fb fd74 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
900157c4:	4628      	mov	r0, r5
900157c6:	f7ff ff27 	bl	90015618 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900157ca:	ab06      	add	r3, sp, #24
900157cc:	4602      	mov	r2, r0
900157ce:	e896 0003 	ldmia.w	r6, {r0, r1}
900157d2:	e883 0003 	stmia.w	r3, {r0, r1}
900157d6:	4611      	mov	r1, r2
900157d8:	4618      	mov	r0, r3
900157da:	f7fb fd67 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
900157de:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900157e2:	f9b4 1000 	ldrsh.w	r1, [r4]
900157e6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
900157ea:	4299      	cmp	r1, r3
900157ec:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
900157f0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
900157f4:	d10b      	bne.n	9001580e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
900157f6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
900157fa:	4552      	cmp	r2, sl
900157fc:	d107      	bne.n	9001580e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
900157fe:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
90015802:	455a      	cmp	r2, fp
90015804:	d103      	bne.n	9001580e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90015806:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
9001580a:	454a      	cmp	r2, r9
9001580c:	d06d      	beq.n	900158ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
9001580e:	f1bb 0f00 	cmp.w	fp, #0
90015812:	dd65      	ble.n	900158e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90015814:	f1b9 0f00 	cmp.w	r9, #0
90015818:	dd62      	ble.n	900158e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
9001581a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001581e:	fa1f f08a 	uxth.w	r0, sl
90015822:	4552      	cmp	r2, sl
90015824:	9000      	str	r0, [sp, #0]
90015826:	da12      	bge.n	9001584e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
90015828:	9301      	str	r3, [sp, #4]
9001582a:	9b00      	ldr	r3, [sp, #0]
9001582c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90015830:	f8ad 2012 	strh.w	r2, [sp, #18]
90015834:	1a9a      	subs	r2, r3, r2
90015836:	f8ad 1010 	strh.w	r1, [sp, #16]
9001583a:	4631      	mov	r1, r6
9001583c:	f8ad 0014 	strh.w	r0, [sp, #20]
90015840:	4640      	mov	r0, r8
90015842:	f8ad 2016 	strh.w	r2, [sp, #22]
90015846:	69ea      	ldr	r2, [r5, #28]
90015848:	f7ff ff7a 	bl	90015740 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001584c:	9b01      	ldr	r3, [sp, #4]
9001584e:	f9b4 2000 	ldrsh.w	r2, [r4]
90015852:	b29f      	uxth	r7, r3
90015854:	429a      	cmp	r2, r3
90015856:	da0d      	bge.n	90015874 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
90015858:	f8ad 2010 	strh.w	r2, [sp, #16]
9001585c:	1aba      	subs	r2, r7, r2
9001585e:	f8ad a012 	strh.w	sl, [sp, #18]
90015862:	4631      	mov	r1, r6
90015864:	f8ad 2014 	strh.w	r2, [sp, #20]
90015868:	4640      	mov	r0, r8
9001586a:	f8ad 9016 	strh.w	r9, [sp, #22]
9001586e:	69ea      	ldr	r2, [r5, #28]
90015870:	f7ff ff66 	bl	90015740 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90015874:	8822      	ldrh	r2, [r4, #0]
90015876:	445f      	add	r7, fp
90015878:	88a3      	ldrh	r3, [r4, #4]
9001587a:	b2bf      	uxth	r7, r7
9001587c:	4413      	add	r3, r2
9001587e:	b23a      	sxth	r2, r7
90015880:	b29b      	uxth	r3, r3
90015882:	b219      	sxth	r1, r3
90015884:	4291      	cmp	r1, r2
90015886:	dd0d      	ble.n	900158a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
90015888:	1bdb      	subs	r3, r3, r7
9001588a:	f8ad 2010 	strh.w	r2, [sp, #16]
9001588e:	f8ad a012 	strh.w	sl, [sp, #18]
90015892:	4631      	mov	r1, r6
90015894:	f8ad 3014 	strh.w	r3, [sp, #20]
90015898:	4640      	mov	r0, r8
9001589a:	f8ad 9016 	strh.w	r9, [sp, #22]
9001589e:	69ea      	ldr	r2, [r5, #28]
900158a0:	f7ff ff4e 	bl	90015740 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900158a4:	88e2      	ldrh	r2, [r4, #6]
900158a6:	8863      	ldrh	r3, [r4, #2]
900158a8:	4413      	add	r3, r2
900158aa:	9a00      	ldr	r2, [sp, #0]
900158ac:	444a      	add	r2, r9
900158ae:	b29b      	uxth	r3, r3
900158b0:	fa1f f982 	uxth.w	r9, r2
900158b4:	b219      	sxth	r1, r3
900158b6:	fa0f f289 	sxth.w	r2, r9
900158ba:	428a      	cmp	r2, r1
900158bc:	da15      	bge.n	900158ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
900158be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
900158c2:	eba3 0309 	sub.w	r3, r3, r9
900158c6:	f9b4 0000 	ldrsh.w	r0, [r4]
900158ca:	f8ad 1014 	strh.w	r1, [sp, #20]
900158ce:	4631      	mov	r1, r6
900158d0:	f8ad 0010 	strh.w	r0, [sp, #16]
900158d4:	f8ad 2012 	strh.w	r2, [sp, #18]
900158d8:	f8ad 3016 	strh.w	r3, [sp, #22]
900158dc:	69ea      	ldr	r2, [r5, #28]
900158de:	e001      	b.n	900158e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
900158e0:	69ea      	ldr	r2, [r5, #28]
900158e2:	4621      	mov	r1, r4
900158e4:	4640      	mov	r0, r8
900158e6:	f7ff ff2b 	bl	90015740 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900158ea:	4628      	mov	r0, r5
900158ec:	f7ff fe94 	bl	90015618 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900158f0:	6861      	ldr	r1, [r4, #4]
900158f2:	4602      	mov	r2, r0
900158f4:	4633      	mov	r3, r6
900158f6:	6820      	ldr	r0, [r4, #0]
900158f8:	c303      	stmia	r3!, {r0, r1}
900158fa:	4611      	mov	r1, r2
900158fc:	4630      	mov	r0, r6
900158fe:	f7fb fcd5 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
90015902:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
90015906:	2b00      	cmp	r3, #0
90015908:	f77f af33 	ble.w	90015772 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001590c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90015910:	2b00      	cmp	r3, #0
90015912:	f77f af2e 	ble.w	90015772 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90015916:	4628      	mov	r0, r5
90015918:	f7ff fe9a 	bl	90015650 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
9001591c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
90015920:	1a18      	subs	r0, r3, r0
90015922:	f8ad 0010 	strh.w	r0, [sp, #16]
90015926:	4628      	mov	r0, r5
90015928:	f7ff fea6 	bl	90015678 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
9001592c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90015930:	4631      	mov	r1, r6
90015932:	1a18      	subs	r0, r3, r0
90015934:	f8ad 0012 	strh.w	r0, [sp, #18]
90015938:	4628      	mov	r0, r5
9001593a:	682b      	ldr	r3, [r5, #0]
9001593c:	689b      	ldr	r3, [r3, #8]
9001593e:	4798      	blx	r3
90015940:	e717      	b.n	90015772 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

90015942 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
90015942:	b570      	push	{r4, r5, r6, lr}
90015944:	1d06      	adds	r6, r0, #4
90015946:	b086      	sub	sp, #24
90015948:	460c      	mov	r4, r1
9001594a:	2300      	movs	r3, #0
9001594c:	4631      	mov	r1, r6
9001594e:	4605      	mov	r5, r0
90015950:	a802      	add	r0, sp, #8
90015952:	9301      	str	r3, [sp, #4]
90015954:	f7ff fc96 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015958:	f8bd 3008 	ldrh.w	r3, [sp, #8]
9001595c:	8822      	ldrh	r2, [r4, #0]
9001595e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
90015962:	1ad2      	subs	r2, r2, r3
90015964:	8863      	ldrh	r3, [r4, #2]
90015966:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001596a:	1a5b      	subs	r3, r3, r1
9001596c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
90015970:	f8ad 2010 	strh.w	r2, [sp, #16]
90015974:	aa01      	add	r2, sp, #4
90015976:	f8ad 0014 	strh.w	r0, [sp, #20]
9001597a:	4630      	mov	r0, r6
9001597c:	f8ad 1016 	strh.w	r1, [sp, #22]
90015980:	a904      	add	r1, sp, #16
90015982:	f8ad 3012 	strh.w	r3, [sp, #18]
90015986:	f7fb fd69 	bl	9001145c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
9001598a:	9a01      	ldr	r2, [sp, #4]
9001598c:	b11a      	cbz	r2, 90015996 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
9001598e:	4621      	mov	r1, r4
90015990:	4628      	mov	r0, r5
90015992:	f7ff fed5 	bl	90015740 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90015996:	b006      	add	sp, #24
90015998:	bd70      	pop	{r4, r5, r6, pc}

9001599a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
9001599a:	4602      	mov	r2, r0
9001599c:	b530      	push	{r4, r5, lr}
9001599e:	4604      	mov	r4, r0
900159a0:	b085      	sub	sp, #20
900159a2:	f852 0f08 	ldr.w	r0, [r2, #8]!
900159a6:	460d      	mov	r5, r1
900159a8:	466b      	mov	r3, sp
900159aa:	6851      	ldr	r1, [r2, #4]
900159ac:	c303      	stmia	r3!, {r0, r1}
900159ae:	4629      	mov	r1, r5
900159b0:	4668      	mov	r0, sp
900159b2:	f7fb fc7b 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
900159b6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900159ba:	b12b      	cbz	r3, 900159c8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
900159bc:	4669      	mov	r1, sp
900159be:	4620      	mov	r0, r4
900159c0:	f7ff ffbf 	bl	90015942 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
900159c4:	b005      	add	sp, #20
900159c6:	bd30      	pop	{r4, r5, pc}
900159c8:	3404      	adds	r4, #4
900159ca:	a802      	add	r0, sp, #8
900159cc:	4621      	mov	r1, r4
900159ce:	f7ff fc59 	bl	90015284 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900159d2:	f8bd 3000 	ldrh.w	r3, [sp]
900159d6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
900159da:	4669      	mov	r1, sp
900159dc:	4620      	mov	r0, r4
900159de:	1a9b      	subs	r3, r3, r2
900159e0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
900159e4:	f8ad 3000 	strh.w	r3, [sp]
900159e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
900159ec:	1a9b      	subs	r3, r3, r2
900159ee:	f8ad 3002 	strh.w	r3, [sp, #2]
900159f2:	f7fb fcfa 	bl	900113ea <_ZNK8touchgfx9Container4drawERKNS_4RectE>
900159f6:	e7e5      	b.n	900159c4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

900159f8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
900159f8:	460b      	mov	r3, r1
900159fa:	680a      	ldr	r2, [r1, #0]
900159fc:	1d01      	adds	r1, r0, #4
900159fe:	6992      	ldr	r2, [r2, #24]
90015a00:	4618      	mov	r0, r3
90015a02:	4710      	bx	r2

90015a04 <_ZN8touchgfx12TextProviderC1Ev>:
90015a04:	b538      	push	{r3, r4, r5, lr}
90015a06:	2500      	movs	r5, #0
90015a08:	2302      	movs	r3, #2
90015a0a:	4604      	mov	r4, r0
90015a0c:	220e      	movs	r2, #14
90015a0e:	7403      	strb	r3, [r0, #16]
90015a10:	4629      	mov	r1, r5
90015a12:	6145      	str	r5, [r0, #20]
90015a14:	7605      	strb	r5, [r0, #24]
90015a16:	83c5      	strh	r5, [r0, #30]
90015a18:	8405      	strh	r5, [r0, #32]
90015a1a:	86c5      	strh	r5, [r0, #54]	; 0x36
90015a1c:	8705      	strh	r5, [r0, #56]	; 0x38
90015a1e:	87c5      	strh	r5, [r0, #62]	; 0x3e
90015a20:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
90015a24:	e9c0 5500 	strd	r5, r5, [r0]
90015a28:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
90015a2c:	304c      	adds	r0, #76	; 0x4c
90015a2e:	f00d fa03 	bl	90022e38 <memset>
90015a32:	2301      	movs	r3, #1
90015a34:	4620      	mov	r0, r4
90015a36:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
90015a3a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90015a3e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
90015a42:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
90015a46:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
90015a4a:	f7ef fe45 	bl	900056d8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
90015a4e:	4620      	mov	r0, r4
90015a50:	bd38      	pop	{r3, r4, r5, pc}

90015a52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
90015a52:	b530      	push	{r4, r5, lr}
90015a54:	2500      	movs	r5, #0
90015a56:	2401      	movs	r4, #1
90015a58:	6843      	ldr	r3, [r0, #4]
90015a5a:	b913      	cbnz	r3, 90015a62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
90015a5c:	6803      	ldr	r3, [r0, #0]
90015a5e:	b313      	cbz	r3, 90015aa6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90015a60:	6043      	str	r3, [r0, #4]
90015a62:	7e03      	ldrb	r3, [r0, #24]
90015a64:	b143      	cbz	r3, 90015a78 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
90015a66:	6943      	ldr	r3, [r0, #20]
90015a68:	b12b      	cbz	r3, 90015a76 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90015a6a:	881a      	ldrh	r2, [r3, #0]
90015a6c:	b11a      	cbz	r2, 90015a76 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90015a6e:	1c9a      	adds	r2, r3, #2
90015a70:	6142      	str	r2, [r0, #20]
90015a72:	8818      	ldrh	r0, [r3, #0]
90015a74:	bd30      	pop	{r4, r5, pc}
90015a76:	7605      	strb	r5, [r0, #24]
90015a78:	6843      	ldr	r3, [r0, #4]
90015a7a:	8819      	ldrh	r1, [r3, #0]
90015a7c:	b199      	cbz	r1, 90015aa6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90015a7e:	1c9a      	adds	r2, r3, #2
90015a80:	2902      	cmp	r1, #2
90015a82:	6042      	str	r2, [r0, #4]
90015a84:	d1f5      	bne.n	90015a72 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
90015a86:	7c03      	ldrb	r3, [r0, #16]
90015a88:	2b01      	cmp	r3, #1
90015a8a:	d8e5      	bhi.n	90015a58 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015a8c:	1c5a      	adds	r2, r3, #1
90015a8e:	3302      	adds	r3, #2
90015a90:	7402      	strb	r2, [r0, #16]
90015a92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
90015a96:	6143      	str	r3, [r0, #20]
90015a98:	2b00      	cmp	r3, #0
90015a9a:	d0dd      	beq.n	90015a58 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015a9c:	881b      	ldrh	r3, [r3, #0]
90015a9e:	2b00      	cmp	r3, #0
90015aa0:	d0da      	beq.n	90015a58 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015aa2:	7604      	strb	r4, [r0, #24]
90015aa4:	e7d8      	b.n	90015a58 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90015aa6:	2000      	movs	r0, #0
90015aa8:	e7e4      	b.n	90015a74 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

90015aaa <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
90015aaa:	6001      	str	r1, [r0, #0]
90015aac:	2100      	movs	r1, #0
90015aae:	b430      	push	{r4, r5}
90015ab0:	6041      	str	r1, [r0, #4]
90015ab2:	6815      	ldr	r5, [r2, #0]
90015ab4:	6085      	str	r5, [r0, #8]
90015ab6:	6852      	ldr	r2, [r2, #4]
90015ab8:	6443      	str	r3, [r0, #68]	; 0x44
90015aba:	9b02      	ldr	r3, [sp, #8]
90015abc:	60c2      	str	r2, [r0, #12]
90015abe:	7401      	strb	r1, [r0, #16]
90015ac0:	6141      	str	r1, [r0, #20]
90015ac2:	7601      	strb	r1, [r0, #24]
90015ac4:	8701      	strh	r1, [r0, #56]	; 0x38
90015ac6:	8401      	strh	r1, [r0, #32]
90015ac8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
90015acc:	6483      	str	r3, [r0, #72]	; 0x48
90015ace:	bc30      	pop	{r4, r5}
90015ad0:	f7ef be02 	b.w	900056d8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

90015ad4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
90015ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
90015ad6:	4605      	mov	r5, r0
90015ad8:	4608      	mov	r0, r1
90015ada:	b1f1      	cbz	r1, 90015b1a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
90015adc:	f105 044c 	add.w	r4, r5, #76	; 0x4c
90015ae0:	460b      	mov	r3, r1
90015ae2:	f101 0708 	add.w	r7, r1, #8
90015ae6:	4622      	mov	r2, r4
90015ae8:	6818      	ldr	r0, [r3, #0]
90015aea:	3308      	adds	r3, #8
90015aec:	f853 1c04 	ldr.w	r1, [r3, #-4]
90015af0:	4626      	mov	r6, r4
90015af2:	42bb      	cmp	r3, r7
90015af4:	c603      	stmia	r6!, {r0, r1}
90015af6:	4634      	mov	r4, r6
90015af8:	d1f6      	bne.n	90015ae8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
90015afa:	6818      	ldr	r0, [r3, #0]
90015afc:	6030      	str	r0, [r6, #0]
90015afe:	4610      	mov	r0, r2
90015b00:	889b      	ldrh	r3, [r3, #4]
90015b02:	80b3      	strh	r3, [r6, #4]
90015b04:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
90015b08:	015b      	lsls	r3, r3, #5
90015b0a:	f403 7180 	and.w	r1, r3, #256	; 0x100
90015b0e:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
90015b12:	430b      	orrs	r3, r1
90015b14:	425b      	negs	r3, r3
90015b16:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
90015b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

90015b1c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
90015b1c:	b538      	push	{r3, r4, r5, lr}
90015b1e:	460c      	mov	r4, r1
90015b20:	6811      	ldr	r1, [r2, #0]
90015b22:	4610      	mov	r0, r2
90015b24:	68cd      	ldr	r5, [r1, #12]
90015b26:	4619      	mov	r1, r3
90015b28:	47a8      	blx	r5
90015b2a:	2800      	cmp	r0, #0
90015b2c:	bf08      	it	eq
90015b2e:	4620      	moveq	r0, r4
90015b30:	bd38      	pop	{r3, r4, r5, pc}
	...

90015b34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
90015b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90015b36:	4604      	mov	r4, r0
90015b38:	4615      	mov	r5, r2
90015b3a:	4608      	mov	r0, r1
90015b3c:	b93a      	cbnz	r2, 90015b4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
90015b3e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90015b42:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
90015b46:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
90015b4a:	4628      	mov	r0, r5
90015b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90015b4e:	f892 c00d 	ldrb.w	ip, [r2, #13]
90015b52:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
90015b56:	8893      	ldrh	r3, [r2, #4]
90015b58:	ea4f 160c 	mov.w	r6, ip, lsl #4
90015b5c:	f406 7280 	and.w	r2, r6, #256	; 0x100
90015b60:	79ee      	ldrb	r6, [r5, #7]
90015b62:	4316      	orrs	r6, r2
90015b64:	19da      	adds	r2, r3, r7
90015b66:	b291      	uxth	r1, r2
90015b68:	b2b7      	uxth	r7, r6
90015b6a:	291d      	cmp	r1, #29
90015b6c:	d87b      	bhi.n	90015c66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90015b6e:	2201      	movs	r2, #1
90015b70:	10f6      	asrs	r6, r6, #3
90015b72:	408a      	lsls	r2, r1
90015b74:	4974      	ldr	r1, [pc, #464]	; (90015d48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
90015b76:	420a      	tst	r2, r1
90015b78:	d12e      	bne.n	90015bd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
90015b7a:	f412 7f60 	tst.w	r2, #896	; 0x380
90015b7e:	d072      	beq.n	90015c66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90015b80:	f104 024c 	add.w	r2, r4, #76	; 0x4c
90015b84:	462b      	mov	r3, r5
90015b86:	f105 0e08 	add.w	lr, r5, #8
90015b8a:	4615      	mov	r5, r2
90015b8c:	6818      	ldr	r0, [r3, #0]
90015b8e:	3308      	adds	r3, #8
90015b90:	f853 1c04 	ldr.w	r1, [r3, #-4]
90015b94:	4694      	mov	ip, r2
90015b96:	4573      	cmp	r3, lr
90015b98:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90015b9c:	4662      	mov	r2, ip
90015b9e:	d1f5      	bne.n	90015b8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
90015ba0:	6818      	ldr	r0, [r3, #0]
90015ba2:	f8cc 0000 	str.w	r0, [ip]
90015ba6:	889b      	ldrh	r3, [r3, #4]
90015ba8:	f8ac 3004 	strh.w	r3, [ip, #4]
90015bac:	b2b3      	uxth	r3, r6
90015bae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90015bb2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
90015bb6:	1aca      	subs	r2, r1, r3
90015bb8:	1bcf      	subs	r7, r1, r7
90015bba:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90015bbe:	b292      	uxth	r2, r2
90015bc0:	1afb      	subs	r3, r7, r3
90015bc2:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
90015bc6:	10d2      	asrs	r2, r2, #3
90015bc8:	f002 0260 	and.w	r2, r2, #96	; 0x60
90015bcc:	4302      	orrs	r2, r0
90015bce:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
90015bd2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90015bd6:	e7b8      	b.n	90015b4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90015bd8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
90015bda:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90015bde:	8c59      	ldrh	r1, [r3, #34]	; 0x22
90015be0:	f640 6333 	movw	r3, #3635	; 0xe33
90015be4:	4299      	cmp	r1, r3
90015be6:	d110      	bne.n	90015c0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
90015be8:	6803      	ldr	r3, [r0, #0]
90015bea:	68db      	ldr	r3, [r3, #12]
90015bec:	4798      	blx	r3
90015bee:	7b41      	ldrb	r1, [r0, #13]
90015bf0:	00cb      	lsls	r3, r1, #3
90015bf2:	f403 7280 	and.w	r2, r3, #256	; 0x100
90015bf6:	7a03      	ldrb	r3, [r0, #8]
90015bf8:	0648      	lsls	r0, r1, #25
90015bfa:	ea43 0302 	orr.w	r3, r3, r2
90015bfe:	bf44      	itt	mi
90015c00:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015c04:	b21b      	sxthmi	r3, r3
90015c06:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015c0a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
90015c0e:	462a      	mov	r2, r5
90015c10:	f105 0c08 	add.w	ip, r5, #8
90015c14:	443b      	add	r3, r7
90015c16:	4433      	add	r3, r6
90015c18:	f104 064c 	add.w	r6, r4, #76	; 0x4c
90015c1c:	b29b      	uxth	r3, r3
90015c1e:	4635      	mov	r5, r6
90015c20:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015c24:	6810      	ldr	r0, [r2, #0]
90015c26:	3208      	adds	r2, #8
90015c28:	f852 1c04 	ldr.w	r1, [r2, #-4]
90015c2c:	4637      	mov	r7, r6
90015c2e:	4562      	cmp	r2, ip
90015c30:	c703      	stmia	r7!, {r0, r1}
90015c32:	463e      	mov	r6, r7
90015c34:	d1f6      	bne.n	90015c24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
90015c36:	6810      	ldr	r0, [r2, #0]
90015c38:	6038      	str	r0, [r7, #0]
90015c3a:	8892      	ldrh	r2, [r2, #4]
90015c3c:	80ba      	strh	r2, [r7, #4]
90015c3e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90015c42:	10db      	asrs	r3, r3, #3
90015c44:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90015c48:	f003 0360 	and.w	r3, r3, #96	; 0x60
90015c4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90015c50:	4313      	orrs	r3, r2
90015c52:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
90015c56:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90015c5a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
90015c5e:	1a9b      	subs	r3, r3, r2
90015c60:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
90015c64:	e771      	b.n	90015b4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90015c66:	f023 0204 	bic.w	r2, r3, #4
90015c6a:	f640 611b 	movw	r1, #3611	; 0xe1b
90015c6e:	428a      	cmp	r2, r1
90015c70:	d003      	beq.n	90015c7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
90015c72:	f640 621d 	movw	r2, #3613	; 0xe1d
90015c76:	4293      	cmp	r3, r2
90015c78:	d120      	bne.n	90015cbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
90015c7a:	3b01      	subs	r3, #1
90015c7c:	4602      	mov	r2, r0
90015c7e:	4629      	mov	r1, r5
90015c80:	4620      	mov	r0, r4
90015c82:	b29b      	uxth	r3, r3
90015c84:	f7ff ff4a 	bl	90015b1c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90015c88:	7b41      	ldrb	r1, [r0, #13]
90015c8a:	00cb      	lsls	r3, r1, #3
90015c8c:	0649      	lsls	r1, r1, #25
90015c8e:	f403 7280 	and.w	r2, r3, #256	; 0x100
90015c92:	7a03      	ldrb	r3, [r0, #8]
90015c94:	ea43 0302 	orr.w	r3, r3, r2
90015c98:	bf44      	itt	mi
90015c9a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015c9e:	b21b      	sxthmi	r3, r3
90015ca0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015ca4:	7b6b      	ldrb	r3, [r5, #13]
90015ca6:	7aaa      	ldrb	r2, [r5, #10]
90015ca8:	005b      	lsls	r3, r3, #1
90015caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
90015cae:	4313      	orrs	r3, r2
90015cb0:	115a      	asrs	r2, r3, #5
90015cb2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
90015cb6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90015cba:	e035      	b.n	90015d28 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
90015cbc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
90015cc0:	f01c 0f40 	tst.w	ip, #64	; 0x40
90015cc4:	f402 7180 	and.w	r1, r2, #256	; 0x100
90015cc8:	7a2a      	ldrb	r2, [r5, #8]
90015cca:	ea42 0201 	orr.w	r2, r2, r1
90015cce:	f640 6109 	movw	r1, #3593	; 0xe09
90015cd2:	bf1c      	itt	ne
90015cd4:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
90015cd8:	b212      	sxthne	r2, r2
90015cda:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90015cde:	f023 0210 	bic.w	r2, r3, #16
90015ce2:	428a      	cmp	r2, r1
90015ce4:	d003      	beq.n	90015cee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
90015ce6:	f640 6213 	movw	r2, #3603	; 0xe13
90015cea:	4293      	cmp	r3, r2
90015cec:	d129      	bne.n	90015d42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
90015cee:	7b6e      	ldrb	r6, [r5, #13]
90015cf0:	4629      	mov	r1, r5
90015cf2:	0076      	lsls	r6, r6, #1
90015cf4:	f406 7280 	and.w	r2, r6, #256	; 0x100
90015cf8:	7aae      	ldrb	r6, [r5, #10]
90015cfa:	4316      	orrs	r6, r2
90015cfc:	f640 6213 	movw	r2, #3603	; 0xe13
90015d00:	4293      	cmp	r3, r2
90015d02:	4602      	mov	r2, r0
90015d04:	4620      	mov	r0, r4
90015d06:	bf16      	itet	ne
90015d08:	f103 33ff 	addne.w	r3, r3, #4294967295
90015d0c:	f640 630c 	movweq	r3, #3596	; 0xe0c
90015d10:	b29b      	uxthne	r3, r3
90015d12:	f7ff ff03 	bl	90015b1c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90015d16:	7b43      	ldrb	r3, [r0, #13]
90015d18:	7a82      	ldrb	r2, [r0, #10]
90015d1a:	005b      	lsls	r3, r3, #1
90015d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90015d20:	4313      	orrs	r3, r2
90015d22:	1af6      	subs	r6, r6, r3
90015d24:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
90015d28:	7b69      	ldrb	r1, [r5, #13]
90015d2a:	00cb      	lsls	r3, r1, #3
90015d2c:	f403 7280 	and.w	r2, r3, #256	; 0x100
90015d30:	7a2b      	ldrb	r3, [r5, #8]
90015d32:	4313      	orrs	r3, r2
90015d34:	064a      	lsls	r2, r1, #25
90015d36:	bf44      	itt	mi
90015d38:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015d3c:	b21b      	sxthmi	r3, r3
90015d3e:	1bdb      	subs	r3, r3, r7
90015d40:	e747      	b.n	90015bd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
90015d42:	2300      	movs	r3, #0
90015d44:	e7b7      	b.n	90015cb6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
90015d46:	bf00      	nop
90015d48:	3fc00079 	.word	0x3fc00079

90015d4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
90015d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90015d50:	4604      	mov	r4, r0
90015d52:	b942      	cbnz	r2, 90015d66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
90015d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90015d58:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
90015d5c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
90015d60:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90015d64:	e047      	b.n	90015df6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90015d66:	7b51      	ldrb	r1, [r2, #13]
90015d68:	8893      	ldrh	r3, [r2, #4]
90015d6a:	010d      	lsls	r5, r1, #4
90015d6c:	f405 7080 	and.w	r0, r5, #256	; 0x100
90015d70:	79d5      	ldrb	r5, [r2, #7]
90015d72:	4305      	orrs	r5, r0
90015d74:	2d04      	cmp	r5, #4
90015d76:	bfcc      	ite	gt
90015d78:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
90015d7c:	f04f 0e01 	movle.w	lr, #1
90015d80:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
90015d84:	f200 80ab 	bhi.w	90015ede <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
90015d88:	f240 60e7 	movw	r0, #1767	; 0x6e7
90015d8c:	4283      	cmp	r3, r0
90015d8e:	d216      	bcs.n	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015d90:	f240 605b 	movw	r0, #1627	; 0x65b
90015d94:	4283      	cmp	r3, r0
90015d96:	d859      	bhi.n	90015e4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
90015d98:	f240 6057 	movw	r0, #1623	; 0x657
90015d9c:	4283      	cmp	r3, r0
90015d9e:	d20e      	bcs.n	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015da0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90015da4:	d24a      	bcs.n	90015e3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
90015da6:	f240 604e 	movw	r0, #1614	; 0x64e
90015daa:	4283      	cmp	r3, r0
90015dac:	d207      	bcs.n	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015dae:	f240 601a 	movw	r0, #1562	; 0x61a
90015db2:	4283      	cmp	r3, r0
90015db4:	d02a      	beq.n	90015e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015db6:	d821      	bhi.n	90015dfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
90015db8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
90015dbc:	d35b      	bcc.n	90015e76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015dbe:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
90015dc2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90015dc6:	f040 80d0 	bne.w	90015f6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90015dca:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
90015dce:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90015dd2:	f040 80ca 	bne.w	90015f6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90015dd6:	00cb      	lsls	r3, r1, #3
90015dd8:	0649      	lsls	r1, r1, #25
90015dda:	f403 7080 	and.w	r0, r3, #256	; 0x100
90015dde:	7a13      	ldrb	r3, [r2, #8]
90015de0:	ea43 0300 	orr.w	r3, r3, r0
90015de4:	bf44      	itt	mi
90015de6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015dea:	b21b      	sxthmi	r3, r3
90015dec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015df0:	1b5d      	subs	r5, r3, r5
90015df2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90015df6:	4610      	mov	r0, r2
90015df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90015dfc:	f240 604b 	movw	r0, #1611	; 0x64b
90015e00:	4283      	cmp	r3, r0
90015e02:	d338      	bcc.n	90015e76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015e04:	f240 604c 	movw	r0, #1612	; 0x64c
90015e08:	4283      	cmp	r3, r0
90015e0a:	d9d8      	bls.n	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015e0c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
90015e10:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
90015e14:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90015e18:	f040 80f3 	bne.w	90016002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90015e1c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90015e20:	f040 80ef 	bne.w	90016002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90015e24:	00cb      	lsls	r3, r1, #3
90015e26:	064e      	lsls	r6, r1, #25
90015e28:	f403 7080 	and.w	r0, r3, #256	; 0x100
90015e2c:	7a13      	ldrb	r3, [r2, #8]
90015e2e:	ea43 0300 	orr.w	r3, r3, r0
90015e32:	bf44      	itt	mi
90015e34:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015e38:	b21b      	sxthmi	r3, r3
90015e3a:	e7d9      	b.n	90015df0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
90015e3c:	f240 6054 	movw	r0, #1620	; 0x654
90015e40:	4283      	cmp	r3, r0
90015e42:	d8e3      	bhi.n	90015e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015e44:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90015e48:	d9e0      	bls.n	90015e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015e4a:	e7b8      	b.n	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015e4c:	f240 6074 	movw	r0, #1652	; 0x674
90015e50:	4283      	cmp	r3, r0
90015e52:	d0b4      	beq.n	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015e54:	d82d      	bhi.n	90015eb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
90015e56:	f240 605e 	movw	r0, #1630	; 0x65e
90015e5a:	4283      	cmp	r3, r0
90015e5c:	d804      	bhi.n	90015e68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
90015e5e:	f240 605d 	movw	r0, #1629	; 0x65d
90015e62:	4283      	cmp	r3, r0
90015e64:	d3d2      	bcc.n	90015e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015e66:	e7aa      	b.n	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015e68:	f240 605f 	movw	r0, #1631	; 0x65f
90015e6c:	4283      	cmp	r3, r0
90015e6e:	d0cd      	beq.n	90015e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015e70:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
90015e74:	d0a3      	beq.n	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015e76:	00cb      	lsls	r3, r1, #3
90015e78:	0649      	lsls	r1, r1, #25
90015e7a:	f403 7080 	and.w	r0, r3, #256	; 0x100
90015e7e:	7a13      	ldrb	r3, [r2, #8]
90015e80:	ea43 0300 	orr.w	r3, r3, r0
90015e84:	bf44      	itt	mi
90015e86:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015e8a:	b21b      	sxthmi	r3, r3
90015e8c:	1b5d      	subs	r5, r3, r5
90015e8e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015e92:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90015e96:	7b53      	ldrb	r3, [r2, #13]
90015e98:	015b      	lsls	r3, r3, #5
90015e9a:	f403 7180 	and.w	r1, r3, #256	; 0x100
90015e9e:	7993      	ldrb	r3, [r2, #6]
90015ea0:	430b      	orrs	r3, r1
90015ea2:	2105      	movs	r1, #5
90015ea4:	005b      	lsls	r3, r3, #1
90015ea6:	fb93 f3f1 	sdiv	r3, r3, r1
90015eaa:	f992 1009 	ldrsb.w	r1, [r2, #9]
90015eae:	440b      	add	r3, r1
90015eb0:	e756      	b.n	90015d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
90015eb2:	f240 60e2 	movw	r0, #1762	; 0x6e2
90015eb6:	4283      	cmp	r3, r0
90015eb8:	d809      	bhi.n	90015ece <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
90015eba:	f240 60df 	movw	r0, #1759	; 0x6df
90015ebe:	4283      	cmp	r3, r0
90015ec0:	f4bf af7d 	bcs.w	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015ec4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
90015ec8:	2b05      	cmp	r3, #5
90015eca:	d8d4      	bhi.n	90015e76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015ecc:	e777      	b.n	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015ece:	f240 60e3 	movw	r0, #1763	; 0x6e3
90015ed2:	4283      	cmp	r3, r0
90015ed4:	d09a      	beq.n	90015e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015ed6:	f240 60e4 	movw	r0, #1764	; 0x6e4
90015eda:	4283      	cmp	r3, r0
90015edc:	e7ca      	b.n	90015e74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
90015ede:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
90015ee2:	d22b      	bcs.n	90015f3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
90015ee4:	f640 00ed 	movw	r0, #2285	; 0x8ed
90015ee8:	4283      	cmp	r3, r0
90015eea:	d28f      	bcs.n	90015e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015eec:	f640 00e5 	movw	r0, #2277	; 0x8e5
90015ef0:	4283      	cmp	r3, r0
90015ef2:	d816      	bhi.n	90015f22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
90015ef4:	f640 00e4 	movw	r0, #2276	; 0x8e4
90015ef8:	4283      	cmp	r3, r0
90015efa:	f4bf af60 	bcs.w	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015efe:	f240 60ec 	movw	r0, #1772	; 0x6ec
90015f02:	4283      	cmp	r3, r0
90015f04:	d80a      	bhi.n	90015f1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
90015f06:	f240 60eb 	movw	r0, #1771	; 0x6eb
90015f0a:	4283      	cmp	r3, r0
90015f0c:	f4bf af57 	bcs.w	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015f10:	f240 60ea 	movw	r0, #1770	; 0x6ea
90015f14:	4283      	cmp	r3, r0
90015f16:	f43f af79 	beq.w	90015e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015f1a:	e7ac      	b.n	90015e76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90015f1c:	f240 60ed 	movw	r0, #1773	; 0x6ed
90015f20:	e7f8      	b.n	90015f14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
90015f22:	f640 00e8 	movw	r0, #2280	; 0x8e8
90015f26:	4283      	cmp	r3, r0
90015f28:	d802      	bhi.n	90015f30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
90015f2a:	f640 00e7 	movw	r0, #2279	; 0x8e7
90015f2e:	e798      	b.n	90015e62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
90015f30:	f640 00e9 	movw	r0, #2281	; 0x8e9
90015f34:	4283      	cmp	r3, r0
90015f36:	f47f af42 	bne.w	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015f3a:	e767      	b.n	90015e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015f3c:	f640 00f6 	movw	r0, #2294	; 0x8f6
90015f40:	4283      	cmp	r3, r0
90015f42:	f43f af63 	beq.w	90015e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015f46:	d802      	bhi.n	90015f4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
90015f48:	f640 00f2 	movw	r0, #2290	; 0x8f2
90015f4c:	e7f2      	b.n	90015f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
90015f4e:	f640 00fa 	movw	r0, #2298	; 0x8fa
90015f52:	4283      	cmp	r3, r0
90015f54:	d805      	bhi.n	90015f62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
90015f56:	f640 00f9 	movw	r0, #2297	; 0x8f9
90015f5a:	4283      	cmp	r3, r0
90015f5c:	f4ff af2f 	bcc.w	90015dbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90015f60:	e754      	b.n	90015e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90015f62:	f640 00fe 	movw	r0, #2302	; 0x8fe
90015f66:	4283      	cmp	r3, r0
90015f68:	e7af      	b.n	90015eca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
90015f6a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90015f6e:	4617      	mov	r7, r2
90015f70:	f102 0808 	add.w	r8, r2, #8
90015f74:	4666      	mov	r6, ip
90015f76:	6838      	ldr	r0, [r7, #0]
90015f78:	3708      	adds	r7, #8
90015f7a:	f857 1c04 	ldr.w	r1, [r7, #-4]
90015f7e:	46e6      	mov	lr, ip
90015f80:	4547      	cmp	r7, r8
90015f82:	e8ae 0003 	stmia.w	lr!, {r0, r1}
90015f86:	46f4      	mov	ip, lr
90015f88:	d1f5      	bne.n	90015f76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
90015f8a:	6838      	ldr	r0, [r7, #0]
90015f8c:	f8ce 0000 	str.w	r0, [lr]
90015f90:	88b9      	ldrh	r1, [r7, #4]
90015f92:	f8ae 1004 	strh.w	r1, [lr, #4]
90015f96:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90015f9a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90015f9e:	d009      	beq.n	90015fb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
90015fa0:	7b51      	ldrb	r1, [r2, #13]
90015fa2:	7992      	ldrb	r2, [r2, #6]
90015fa4:	0149      	lsls	r1, r1, #5
90015fa6:	f401 7180 	and.w	r1, r1, #256	; 0x100
90015faa:	4311      	orrs	r1, r2
90015fac:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90015fb0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
90015fb4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90015fb8:	b2ad      	uxth	r5, r5
90015fba:	d00d      	beq.n	90015fd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
90015fbc:	442b      	add	r3, r5
90015fbe:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90015fc2:	b29b      	uxth	r3, r3
90015fc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90015fc8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90015fcc:	10db      	asrs	r3, r3, #3
90015fce:	f003 0360 	and.w	r3, r3, #96	; 0x60
90015fd2:	4313      	orrs	r3, r2
90015fd4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90015fd8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
90015fdc:	00cb      	lsls	r3, r1, #3
90015fde:	064f      	lsls	r7, r1, #25
90015fe0:	f403 7280 	and.w	r2, r3, #256	; 0x100
90015fe4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90015fe8:	ea43 0302 	orr.w	r3, r3, r2
90015fec:	bf44      	itt	mi
90015fee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015ff2:	b21b      	sxthmi	r3, r3
90015ff4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90015ff8:	1b5b      	subs	r3, r3, r5
90015ffa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90015ffe:	4632      	mov	r2, r6
90016000:	e6f9      	b.n	90015df6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90016002:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90016006:	4617      	mov	r7, r2
90016008:	f102 0908 	add.w	r9, r2, #8
9001600c:	4666      	mov	r6, ip
9001600e:	6838      	ldr	r0, [r7, #0]
90016010:	3708      	adds	r7, #8
90016012:	f857 1c04 	ldr.w	r1, [r7, #-4]
90016016:	46e0      	mov	r8, ip
90016018:	454f      	cmp	r7, r9
9001601a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
9001601e:	46c4      	mov	ip, r8
90016020:	d1f5      	bne.n	9001600e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
90016022:	6838      	ldr	r0, [r7, #0]
90016024:	f8c8 0000 	str.w	r0, [r8]
90016028:	88b9      	ldrh	r1, [r7, #4]
9001602a:	f8a8 1004 	strh.w	r1, [r8, #4]
9001602e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90016032:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90016036:	d009      	beq.n	9001604c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
90016038:	7b51      	ldrb	r1, [r2, #13]
9001603a:	7992      	ldrb	r2, [r2, #6]
9001603c:	0149      	lsls	r1, r1, #5
9001603e:	f401 7180 	and.w	r1, r1, #256	; 0x100
90016042:	4311      	orrs	r1, r2
90016044:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90016048:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
9001604c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90016050:	d00e      	beq.n	90016070 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
90016052:	eba3 030e 	sub.w	r3, r3, lr
90016056:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
9001605a:	b29b      	uxth	r3, r3
9001605c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90016060:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90016064:	10db      	asrs	r3, r3, #3
90016066:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001606a:	4313      	orrs	r3, r2
9001606c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90016070:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
90016074:	00cb      	lsls	r3, r1, #3
90016076:	0648      	lsls	r0, r1, #25
90016078:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001607c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90016080:	ea43 0302 	orr.w	r3, r3, r2
90016084:	bf44      	itt	mi
90016086:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001608a:	b21b      	sxthmi	r3, r3
9001608c:	1b5d      	subs	r5, r3, r5
9001608e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90016092:	e7b4      	b.n	90015ffe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

90016094 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
90016094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90016098:	461e      	mov	r6, r3
9001609a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001609c:	4604      	mov	r4, r0
9001609e:	4617      	mov	r7, r2
900160a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
900160a4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
900160a8:	f7ef fac6 	bl	90005638 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
900160ac:	4605      	mov	r5, r0
900160ae:	b918      	cbnz	r0, 900160b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
900160b0:	6030      	str	r0, [r6, #0]
900160b2:	4628      	mov	r0, r5
900160b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900160b8:	683b      	ldr	r3, [r7, #0]
900160ba:	4601      	mov	r1, r0
900160bc:	4638      	mov	r0, r7
900160be:	68db      	ldr	r3, [r3, #12]
900160c0:	4798      	blx	r3
900160c2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
900160c6:	4602      	mov	r2, r0
900160c8:	6030      	str	r0, [r6, #0]
900160ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
900160ce:	d213      	bcs.n	900160f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
900160d0:	4643      	mov	r3, r8
900160d2:	4639      	mov	r1, r7
900160d4:	4620      	mov	r0, r4
900160d6:	f7ff fe39 	bl	90015d4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
900160da:	6030      	str	r0, [r6, #0]
900160dc:	6833      	ldr	r3, [r6, #0]
900160de:	b143      	cbz	r3, 900160f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
900160e0:	7b5a      	ldrb	r2, [r3, #13]
900160e2:	7a9b      	ldrb	r3, [r3, #10]
900160e4:	0052      	lsls	r2, r2, #1
900160e6:	f402 7280 	and.w	r2, r2, #256	; 0x100
900160ea:	4313      	orrs	r3, r2
900160ec:	bf0c      	ite	eq
900160ee:	2301      	moveq	r3, #1
900160f0:	2300      	movne	r3, #0
900160f2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
900160f6:	e7dc      	b.n	900160b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
900160f8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
900160fc:	b29b      	uxth	r3, r3
900160fe:	2b7f      	cmp	r3, #127	; 0x7f
90016100:	d804      	bhi.n	9001610c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
90016102:	4639      	mov	r1, r7
90016104:	4620      	mov	r0, r4
90016106:	f7ff fd15 	bl	90015b34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
9001610a:	e7e6      	b.n	900160da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
9001610c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90016110:	2b00      	cmp	r3, #0
90016112:	d0e3      	beq.n	900160dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90016114:	f640 1302 	movw	r3, #2306	; 0x902
90016118:	429d      	cmp	r5, r3
9001611a:	d1df      	bne.n	900160dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
9001611c:	4601      	mov	r1, r0
9001611e:	4620      	mov	r0, r4
90016120:	f7ff fcd8 	bl	90015ad4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90016124:	e7d9      	b.n	900160da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

90016126 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
90016126:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9001612a:	461e      	mov	r6, r3
9001612c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001612e:	4604      	mov	r4, r0
90016130:	4617      	mov	r7, r2
90016132:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90016136:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001613a:	f7ef fa7d 	bl	90005638 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001613e:	4605      	mov	r5, r0
90016140:	b918      	cbnz	r0, 9001614a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
90016142:	6030      	str	r0, [r6, #0]
90016144:	4628      	mov	r0, r5
90016146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9001614a:	683b      	ldr	r3, [r7, #0]
9001614c:	4601      	mov	r1, r0
9001614e:	4638      	mov	r0, r7
90016150:	f8d3 9008 	ldr.w	r9, [r3, #8]
90016154:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
90016158:	47c8      	blx	r9
9001615a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
9001615e:	4602      	mov	r2, r0
90016160:	6030      	str	r0, [r6, #0]
90016162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90016166:	d213      	bcs.n	90016190 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
90016168:	4643      	mov	r3, r8
9001616a:	4639      	mov	r1, r7
9001616c:	4620      	mov	r0, r4
9001616e:	f7ff fded 	bl	90015d4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90016172:	6030      	str	r0, [r6, #0]
90016174:	6833      	ldr	r3, [r6, #0]
90016176:	b143      	cbz	r3, 9001618a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
90016178:	7b5a      	ldrb	r2, [r3, #13]
9001617a:	7a9b      	ldrb	r3, [r3, #10]
9001617c:	0052      	lsls	r2, r2, #1
9001617e:	f402 7280 	and.w	r2, r2, #256	; 0x100
90016182:	4313      	orrs	r3, r2
90016184:	bf0c      	ite	eq
90016186:	2301      	moveq	r3, #1
90016188:	2300      	movne	r3, #0
9001618a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
9001618e:	e7d9      	b.n	90016144 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
90016190:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90016194:	b29b      	uxth	r3, r3
90016196:	2b7f      	cmp	r3, #127	; 0x7f
90016198:	d804      	bhi.n	900161a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
9001619a:	4639      	mov	r1, r7
9001619c:	4620      	mov	r0, r4
9001619e:	f7ff fcc9 	bl	90015b34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
900161a2:	e7e6      	b.n	90016172 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
900161a4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
900161a8:	2b00      	cmp	r3, #0
900161aa:	d0e3      	beq.n	90016174 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
900161ac:	f640 1302 	movw	r3, #2306	; 0x902
900161b0:	429d      	cmp	r5, r3
900161b2:	d1df      	bne.n	90016174 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
900161b4:	4601      	mov	r1, r0
900161b6:	4620      	mov	r0, r4
900161b8:	f7ff fc8c 	bl	90015ad4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
900161bc:	e7d9      	b.n	90016172 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

900161be <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
900161be:	b510      	push	{r4, lr}
900161c0:	4604      	mov	r4, r0
900161c2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
900161c6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
900161c8:	b1e1      	cbz	r1, 90016204 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
900161ca:	2b0a      	cmp	r3, #10
900161cc:	d02d      	beq.n	9001622a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
900161ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
900161d0:	3901      	subs	r1, #1
900161d2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
900161d6:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
900161d8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
900161dc:	1c51      	adds	r1, r2, #1
900161de:	b289      	uxth	r1, r1
900161e0:	2901      	cmp	r1, #1
900161e2:	bf8a      	itet	hi
900161e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
900161e8:	87e1      	strhls	r1, [r4, #62]	; 0x3e
900161ea:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
900161ec:	1c5a      	adds	r2, r3, #1
900161ee:	8722      	strh	r2, [r4, #56]	; 0x38
900161f0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
900161f2:	4413      	add	r3, r2
900161f4:	b29b      	uxth	r3, r3
900161f6:	2b09      	cmp	r3, #9
900161f8:	bf88      	it	hi
900161fa:	3b0a      	subhi	r3, #10
900161fc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90016200:	8458      	strh	r0, [r3, #34]	; 0x22
90016202:	e7de      	b.n	900161c2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
90016204:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90016206:	2b0a      	cmp	r3, #10
90016208:	d00f      	beq.n	9001622a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
9001620a:	4620      	mov	r0, r4
9001620c:	f7ff fc21 	bl	90015a52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
90016210:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90016212:	1c5a      	adds	r2, r3, #1
90016214:	8722      	strh	r2, [r4, #56]	; 0x38
90016216:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90016218:	4413      	add	r3, r2
9001621a:	b29b      	uxth	r3, r3
9001621c:	2b09      	cmp	r3, #9
9001621e:	bf88      	it	hi
90016220:	3b0a      	subhi	r3, #10
90016222:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90016226:	8458      	strh	r0, [r3, #34]	; 0x22
90016228:	e7ec      	b.n	90016204 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
9001622a:	bd10      	pop	{r4, pc}

9001622c <_ZN8touchgfx12TextProvider11getNextCharEv>:
9001622c:	b538      	push	{r3, r4, r5, lr}
9001622e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90016230:	4604      	mov	r4, r0
90016232:	eb00 0243 	add.w	r2, r0, r3, lsl #1
90016236:	8c55      	ldrh	r5, [r2, #34]	; 0x22
90016238:	8f02      	ldrh	r2, [r0, #56]	; 0x38
9001623a:	3a01      	subs	r2, #1
9001623c:	8702      	strh	r2, [r0, #56]	; 0x38
9001623e:	1c5a      	adds	r2, r3, #1
90016240:	b292      	uxth	r2, r2
90016242:	2a09      	cmp	r2, #9
90016244:	bf8a      	itet	hi
90016246:	3b09      	subhi	r3, #9
90016248:	86c2      	strhls	r2, [r0, #54]	; 0x36
9001624a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
9001624c:	f7ff ffb7 	bl	900161be <_ZN8touchgfx12TextProvider15fillInputBufferEv>
90016250:	8c23      	ldrh	r3, [r4, #32]
90016252:	2b01      	cmp	r3, #1
90016254:	bf9c      	itt	ls
90016256:	3301      	addls	r3, #1
90016258:	8423      	strhls	r3, [r4, #32]
9001625a:	8be3      	ldrh	r3, [r4, #30]
9001625c:	b90b      	cbnz	r3, 90016262 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
9001625e:	2302      	movs	r3, #2
90016260:	83e3      	strh	r3, [r4, #30]
90016262:	8be3      	ldrh	r3, [r4, #30]
90016264:	4628      	mov	r0, r5
90016266:	3b01      	subs	r3, #1
90016268:	b29b      	uxth	r3, r3
9001626a:	83e3      	strh	r3, [r4, #30]
9001626c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90016270:	8365      	strh	r5, [r4, #26]
90016272:	bd38      	pop	{r3, r4, r5, pc}

90016274 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
90016274:	428a      	cmp	r2, r1
90016276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001627a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
9001627c:	d932      	bls.n	900162e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
9001627e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
90016280:	1a54      	subs	r4, r2, r1
90016282:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
90016286:	19ee      	adds	r6, r5, r7
90016288:	fa1f fe84 	uxth.w	lr, r4
9001628c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
90016290:	3e01      	subs	r6, #1
90016292:	b2b4      	uxth	r4, r6
90016294:	eba4 090e 	sub.w	r9, r4, lr
90016298:	fa1f f989 	uxth.w	r9, r9
9001629c:	2c09      	cmp	r4, #9
9001629e:	4626      	mov	r6, r4
900162a0:	bf88      	it	hi
900162a2:	f1a4 060a 	subhi.w	r6, r4, #10
900162a6:	f1bc 0f00 	cmp.w	ip, #0
900162aa:	f104 34ff 	add.w	r4, r4, #4294967295
900162ae:	bf08      	it	eq
900162b0:	f04f 0c02 	moveq.w	ip, #2
900162b4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
900162b8:	b2a4      	uxth	r4, r4
900162ba:	f10c 3cff 	add.w	ip, ip, #4294967295
900162be:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
900162c2:	454c      	cmp	r4, r9
900162c4:	fa1f fc8c 	uxth.w	ip, ip
900162c8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
900162cc:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
900162d0:	d1e4      	bne.n	9001629c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
900162d2:	eba5 050e 	sub.w	r5, r5, lr
900162d6:	eb0e 0408 	add.w	r4, lr, r8
900162da:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
900162de:	8705      	strh	r5, [r0, #56]	; 0x38
900162e0:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
900162e4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
900162e6:	250a      	movs	r5, #10
900162e8:	1a64      	subs	r4, r4, r1
900162ea:	4439      	add	r1, r7
900162ec:	b289      	uxth	r1, r1
900162ee:	8704      	strh	r4, [r0, #56]	; 0x38
900162f0:	2909      	cmp	r1, #9
900162f2:	bf88      	it	hi
900162f4:	390a      	subhi	r1, #10
900162f6:	86c1      	strh	r1, [r0, #54]	; 0x36
900162f8:	b18a      	cbz	r2, 9001631e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
900162fa:	8f01      	ldrh	r1, [r0, #56]	; 0x38
900162fc:	3a01      	subs	r2, #1
900162fe:	3101      	adds	r1, #1
90016300:	b292      	uxth	r2, r2
90016302:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
90016306:	8701      	strh	r1, [r0, #56]	; 0x38
90016308:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
9001630a:	b901      	cbnz	r1, 9001630e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
9001630c:	86c5      	strh	r5, [r0, #54]	; 0x36
9001630e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
90016310:	3901      	subs	r1, #1
90016312:	b289      	uxth	r1, r1
90016314:	86c1      	strh	r1, [r0, #54]	; 0x36
90016316:	eb00 0141 	add.w	r1, r0, r1, lsl #1
9001631a:	844c      	strh	r4, [r1, #34]	; 0x22
9001631c:	e7ec      	b.n	900162f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
9001631e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90016322:	f7ff bf4c 	b.w	900161be <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90016326 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
90016326:	b570      	push	{r4, r5, r6, lr}
90016328:	2500      	movs	r5, #0
9001632a:	4295      	cmp	r5, r2
9001632c:	d011      	beq.n	90016352 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
9001632e:	8bc4      	ldrh	r4, [r0, #30]
90016330:	f831 6b02 	ldrh.w	r6, [r1], #2
90016334:	4414      	add	r4, r2
90016336:	3c01      	subs	r4, #1
90016338:	1b64      	subs	r4, r4, r5
9001633a:	b2a4      	uxth	r4, r4
9001633c:	2c01      	cmp	r4, #1
9001633e:	bf88      	it	hi
90016340:	3c02      	subhi	r4, #2
90016342:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90016346:	8b64      	ldrh	r4, [r4, #26]
90016348:	42b4      	cmp	r4, r6
9001634a:	d117      	bne.n	9001637c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
9001634c:	3501      	adds	r5, #1
9001634e:	b2ad      	uxth	r5, r5
90016350:	e7eb      	b.n	9001632a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
90016352:	f8bd 2010 	ldrh.w	r2, [sp, #16]
90016356:	2400      	movs	r4, #0
90016358:	4413      	add	r3, r2
9001635a:	b2a2      	uxth	r2, r4
9001635c:	429a      	cmp	r2, r3
9001635e:	da0f      	bge.n	90016380 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
90016360:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
90016362:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
90016366:	3401      	adds	r4, #1
90016368:	4432      	add	r2, r6
9001636a:	b292      	uxth	r2, r2
9001636c:	2a09      	cmp	r2, #9
9001636e:	bf88      	it	hi
90016370:	3a0a      	subhi	r2, #10
90016372:	eb00 0242 	add.w	r2, r0, r2, lsl #1
90016376:	8c52      	ldrh	r2, [r2, #34]	; 0x22
90016378:	42aa      	cmp	r2, r5
9001637a:	d0ee      	beq.n	9001635a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
9001637c:	2000      	movs	r0, #0
9001637e:	bd70      	pop	{r4, r5, r6, pc}
90016380:	2001      	movs	r0, #1
90016382:	e7fc      	b.n	9001637e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

90016384 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
90016384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016388:	4605      	mov	r5, r0
9001638a:	4616      	mov	r6, r2
9001638c:	1c8c      	adds	r4, r1, #2
9001638e:	8809      	ldrh	r1, [r1, #0]
90016390:	ea4f 3a11 	mov.w	sl, r1, lsr #12
90016394:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
90016398:	42b3      	cmp	r3, r6
9001639a:	d124      	bne.n	900163e6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
9001639c:	f3c1 2903 	ubfx	r9, r1, #8, #4
900163a0:	f3c1 1803 	ubfx	r8, r1, #4, #4
900163a4:	f001 070f 	and.w	r7, r1, #15
900163a8:	4652      	mov	r2, sl
900163aa:	f8cd 8000 	str.w	r8, [sp]
900163ae:	464b      	mov	r3, r9
900163b0:	4621      	mov	r1, r4
900163b2:	4628      	mov	r0, r5
900163b4:	f7ff ffb7 	bl	90016326 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
900163b8:	4683      	mov	fp, r0
900163ba:	b168      	cbz	r0, 900163d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
900163bc:	eb0a 0109 	add.w	r1, sl, r9
900163c0:	463a      	mov	r2, r7
900163c2:	4628      	mov	r0, r5
900163c4:	4441      	add	r1, r8
900163c6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
900163ca:	4649      	mov	r1, r9
900163cc:	f7ff ff52 	bl	90016274 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
900163d0:	4658      	mov	r0, fp
900163d2:	b003      	add	sp, #12
900163d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900163d8:	eb07 010a 	add.w	r1, r7, sl
900163dc:	4449      	add	r1, r9
900163de:	4441      	add	r1, r8
900163e0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
900163e4:	e7d2      	b.n	9001638c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
900163e6:	f04f 0b00 	mov.w	fp, #0
900163ea:	e7f1      	b.n	900163d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

900163ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
900163ec:	b570      	push	{r4, r5, r6, lr}
900163ee:	8810      	ldrh	r0, [r2, #0]
900163f0:	4298      	cmp	r0, r3
900163f2:	d817      	bhi.n	90016424 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
900163f4:	1e48      	subs	r0, r1, #1
900163f6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
900163fa:	4298      	cmp	r0, r3
900163fc:	d312      	bcc.n	90016424 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
900163fe:	2400      	movs	r4, #0
90016400:	428c      	cmp	r4, r1
90016402:	d20f      	bcs.n	90016424 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90016404:	1860      	adds	r0, r4, r1
90016406:	1040      	asrs	r0, r0, #1
90016408:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
9001640c:	0085      	lsls	r5, r0, #2
9001640e:	42b3      	cmp	r3, r6
90016410:	d902      	bls.n	90016418 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
90016412:	3001      	adds	r0, #1
90016414:	b284      	uxth	r4, r0
90016416:	e7f3      	b.n	90016400 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90016418:	d201      	bcs.n	9001641e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
9001641a:	b281      	uxth	r1, r0
9001641c:	e7f0      	b.n	90016400 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001641e:	442a      	add	r2, r5
90016420:	8850      	ldrh	r0, [r2, #2]
90016422:	bd70      	pop	{r4, r5, r6, pc}
90016424:	2000      	movs	r0, #0
90016426:	e7fc      	b.n	90016422 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

90016428 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
90016428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001642c:	6c45      	ldr	r5, [r0, #68]	; 0x44
9001642e:	4604      	mov	r4, r0
90016430:	260b      	movs	r6, #11
90016432:	886f      	ldrh	r7, [r5, #2]
90016434:	087f      	lsrs	r7, r7, #1
90016436:	3e01      	subs	r6, #1
90016438:	d013      	beq.n	90016462 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001643a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
9001643c:	462a      	mov	r2, r5
9001643e:	4639      	mov	r1, r7
90016440:	4620      	mov	r0, r4
90016442:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90016446:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001644a:	4643      	mov	r3, r8
9001644c:	f7ff ffce 	bl	900163ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
90016450:	b138      	cbz	r0, 90016462 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
90016452:	eb05 0140 	add.w	r1, r5, r0, lsl #1
90016456:	4642      	mov	r2, r8
90016458:	4620      	mov	r0, r4
9001645a:	f7ff ff93 	bl	90016384 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
9001645e:	2800      	cmp	r0, #0
90016460:	d1e9      	bne.n	90016436 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
90016462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

90016468 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
90016468:	b570      	push	{r4, r5, r6, lr}
9001646a:	694a      	ldr	r2, [r1, #20]
9001646c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9001646e:	684b      	ldr	r3, [r1, #4]
90016470:	1b54      	subs	r4, r2, r5
90016472:	6ace      	ldr	r6, [r1, #44]	; 0x2c
90016474:	f000 8106 	beq.w	90016684 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
90016478:	1b9b      	subs	r3, r3, r6
9001647a:	d003      	beq.n	90016484 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001647c:	4363      	muls	r3, r4
9001647e:	2210      	movs	r2, #16
90016480:	fb93 f3f2 	sdiv	r3, r3, r2
90016484:	680c      	ldr	r4, [r1, #0]
90016486:	698a      	ldr	r2, [r1, #24]
90016488:	1b65      	subs	r5, r4, r5
9001648a:	f000 80fd 	beq.w	90016688 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
9001648e:	1b92      	subs	r2, r2, r6
90016490:	d003      	beq.n	9001649a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
90016492:	436a      	muls	r2, r5
90016494:	2410      	movs	r4, #16
90016496:	fb92 f2f4 	sdiv	r2, r2, r4
9001649a:	1a9b      	subs	r3, r3, r2
9001649c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 900166c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
900164a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900164a4:	460a      	mov	r2, r1
900164a6:	ee07 3a90 	vmov	s15, r3
900164aa:	f100 040c 	add.w	r4, r0, #12
900164ae:	4603      	mov	r3, r0
900164b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900164b4:	ee67 7a84 	vmul.f32	s15, s15, s8
900164b8:	ee87 3a27 	vdiv.f32	s6, s14, s15
900164bc:	eeb1 6a43 	vneg.f32	s12, s6
900164c0:	edd2 7a02 	vldr	s15, [r2, #8]
900164c4:	3214      	adds	r2, #20
900164c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
900164ca:	ece3 6a01 	vstmia	r3!, {s13}
900164ce:	429c      	cmp	r4, r3
900164d0:	ed52 7a02 	vldr	s15, [r2, #-8]
900164d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
900164d8:	edc3 7a02 	vstr	s15, [r3, #8]
900164dc:	ed52 7a01 	vldr	s15, [r2, #-4]
900164e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
900164e4:	edc3 7a05 	vstr	s15, [r3, #20]
900164e8:	d1ea      	bne.n	900164c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
900164ea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
900164ec:	698b      	ldr	r3, [r1, #24]
900164ee:	edd0 4a02 	vldr	s9, [r0, #8]
900164f2:	1a9b      	subs	r3, r3, r2
900164f4:	edd0 3a00 	vldr	s7, [r0]
900164f8:	edd0 6a01 	vldr	s13, [r0, #4]
900164fc:	ee07 3a90 	vmov	s15, r3
90016500:	684b      	ldr	r3, [r1, #4]
90016502:	ee76 6ae4 	vsub.f32	s13, s13, s9
90016506:	ed90 5a05 	vldr	s10, [r0, #20]
9001650a:	1a9b      	subs	r3, r3, r2
9001650c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90016510:	ee73 4ae4 	vsub.f32	s9, s7, s9
90016514:	ed90 2a03 	vldr	s4, [r0, #12]
90016518:	ee07 3a10 	vmov	s14, r3
9001651c:	edd0 5a04 	vldr	s11, [r0, #16]
90016520:	ee67 7a84 	vmul.f32	s15, s15, s8
90016524:	ed90 1a07 	vldr	s2, [r0, #28]
90016528:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001652c:	edd0 2a06 	vldr	s5, [r0, #24]
90016530:	ee75 5ac5 	vsub.f32	s11, s11, s10
90016534:	ee64 7ae7 	vnmul.f32	s15, s9, s15
90016538:	ee27 7a04 	vmul.f32	s14, s14, s8
9001653c:	ee32 5a45 	vsub.f32	s10, s4, s10
90016540:	eee6 7a87 	vfma.f32	s15, s13, s14
90016544:	ee67 7a83 	vmul.f32	s15, s15, s6
90016548:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
9001654c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001654e:	694a      	ldr	r2, [r1, #20]
90016550:	1b13      	subs	r3, r2, r4
90016552:	ee07 3a10 	vmov	s14, r3
90016556:	680b      	ldr	r3, [r1, #0]
90016558:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001655c:	1b1b      	subs	r3, r3, r4
9001655e:	ee27 7a04 	vmul.f32	s14, s14, s8
90016562:	ee64 4ac7 	vnmul.f32	s9, s9, s14
90016566:	ee07 3a10 	vmov	s14, r3
9001656a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001656e:	ee27 7a04 	vmul.f32	s14, s14, s8
90016572:	eee6 4a87 	vfma.f32	s9, s13, s14
90016576:	ee64 4a86 	vmul.f32	s9, s9, s12
9001657a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
9001657e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90016580:	698b      	ldr	r3, [r1, #24]
90016582:	1a9b      	subs	r3, r3, r2
90016584:	ee06 3a90 	vmov	s13, r3
90016588:	684b      	ldr	r3, [r1, #4]
9001658a:	1a9b      	subs	r3, r3, r2
9001658c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
90016590:	ee07 3a10 	vmov	s14, r3
90016594:	ee66 6a84 	vmul.f32	s13, s13, s8
90016598:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001659c:	ee65 6a66 	vnmul.f32	s13, s10, s13
900165a0:	ee27 7a04 	vmul.f32	s14, s14, s8
900165a4:	eee5 6a87 	vfma.f32	s13, s11, s14
900165a8:	ee66 6a83 	vmul.f32	s13, s13, s6
900165ac:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
900165b0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
900165b2:	694a      	ldr	r2, [r1, #20]
900165b4:	1b13      	subs	r3, r2, r4
900165b6:	ee07 3a10 	vmov	s14, r3
900165ba:	680b      	ldr	r3, [r1, #0]
900165bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900165c0:	1b1b      	subs	r3, r3, r4
900165c2:	ee27 7a04 	vmul.f32	s14, s14, s8
900165c6:	ee25 5a47 	vnmul.f32	s10, s10, s14
900165ca:	ee07 3a10 	vmov	s14, r3
900165ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900165d2:	ee27 7a04 	vmul.f32	s14, s14, s8
900165d6:	eea5 5a87 	vfma.f32	s10, s11, s14
900165da:	edd0 5a08 	vldr	s11, [r0, #32]
900165de:	ee31 1a65 	vsub.f32	s2, s2, s11
900165e2:	ee72 5ae5 	vsub.f32	s11, s5, s11
900165e6:	ee25 5a06 	vmul.f32	s10, s10, s12
900165ea:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
900165ee:	6aca      	ldr	r2, [r1, #44]	; 0x2c
900165f0:	698b      	ldr	r3, [r1, #24]
900165f2:	1a9b      	subs	r3, r3, r2
900165f4:	ee07 3a10 	vmov	s14, r3
900165f8:	684b      	ldr	r3, [r1, #4]
900165fa:	1a9b      	subs	r3, r3, r2
900165fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016600:	ee01 3a90 	vmov	s3, r3
90016604:	ee27 7a04 	vmul.f32	s14, s14, s8
90016608:	eef8 1ae1 	vcvt.f32.s32	s3, s3
9001660c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
90016610:	ee61 1a84 	vmul.f32	s3, s3, s8
90016614:	eea1 7a21 	vfma.f32	s14, s2, s3
90016618:	ee27 7a03 	vmul.f32	s14, s14, s6
9001661c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
90016620:	6a8c      	ldr	r4, [r1, #40]	; 0x28
90016622:	694a      	ldr	r2, [r1, #20]
90016624:	1b13      	subs	r3, r2, r4
90016626:	ee03 3a10 	vmov	s6, r3
9001662a:	680b      	ldr	r3, [r1, #0]
9001662c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
90016630:	1b1b      	subs	r3, r3, r4
90016632:	ee23 3a04 	vmul.f32	s6, s6, s8
90016636:	ee65 5ac3 	vnmul.f32	s11, s11, s6
9001663a:	ee03 3a10 	vmov	s6, r3
9001663e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
90016642:	ee23 4a04 	vmul.f32	s8, s6, s8
90016646:	eee1 5a04 	vfma.f32	s11, s2, s8
9001664a:	ee25 6a86 	vmul.f32	s12, s11, s12
9001664e:	ee62 5a67 	vnmul.f32	s11, s4, s15
90016652:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
90016656:	eee3 5aa6 	vfma.f32	s11, s7, s13
9001665a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
9001665e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016662:	dd13      	ble.n	9001668c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
90016664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90016668:	ee62 7ae7 	vnmul.f32	s15, s5, s15
9001666c:	63c3      	str	r3, [r0, #60]	; 0x3c
9001666e:	eee3 7a87 	vfma.f32	s15, s7, s14
90016672:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90016676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001667a:	dd15      	ble.n	900166a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
9001667c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90016680:	6403      	str	r3, [r0, #64]	; 0x40
90016682:	bd70      	pop	{r4, r5, r6, pc}
90016684:	4623      	mov	r3, r4
90016686:	e6fd      	b.n	90016484 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
90016688:	462a      	mov	r2, r5
9001668a:	e706      	b.n	9001649a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001668c:	d502      	bpl.n	90016694 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
9001668e:	f647 73ff 	movw	r3, #32767	; 0x7fff
90016692:	e7e9      	b.n	90016668 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
90016694:	ee22 2a64 	vnmul.f32	s4, s4, s9
90016698:	eea3 2a85 	vfma.f32	s4, s7, s10
9001669c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
900166a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900166a4:	dade      	bge.n	90016664 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
900166a6:	e7f2      	b.n	9001668e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
900166a8:	d502      	bpl.n	900166b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
900166aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
900166ae:	e7e7      	b.n	90016680 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
900166b0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
900166b4:	eee3 4a86 	vfma.f32	s9, s7, s12
900166b8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
900166bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900166c0:	dadc      	bge.n	9001667c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
900166c2:	e7f2      	b.n	900166aa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
900166c4:	3d800000 	.word	0x3d800000

900166c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
900166c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900166cc:	2714      	movs	r7, #20
900166ce:	435f      	muls	r7, r3
900166d0:	eb02 0c07 	add.w	ip, r2, r7
900166d4:	f8dc 5004 	ldr.w	r5, [ip, #4]
900166d8:	f115 0e0f 	adds.w	lr, r5, #15
900166dc:	f100 80a2 	bmi.w	90016824 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
900166e0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
900166e4:	9c08      	ldr	r4, [sp, #32]
900166e6:	2614      	movs	r6, #20
900166e8:	f8c0 e014 	str.w	lr, [r0, #20]
900166ec:	4366      	muls	r6, r4
900166ee:	eb02 0806 	add.w	r8, r2, r6
900166f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
900166f6:	f115 040f 	adds.w	r4, r5, #15
900166fa:	f100 809f 	bmi.w	9001683c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
900166fe:	1124      	asrs	r4, r4, #4
90016700:	eba4 040e 	sub.w	r4, r4, lr
90016704:	6184      	str	r4, [r0, #24]
90016706:	2c00      	cmp	r4, #0
90016708:	f000 808a 	beq.w	90016820 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
9001670c:	f8dc 9004 	ldr.w	r9, [ip, #4]
90016710:	f8d8 4004 	ldr.w	r4, [r8, #4]
90016714:	5995      	ldr	r5, [r2, r6]
90016716:	eba4 0809 	sub.w	r8, r4, r9
9001671a:	59d4      	ldr	r4, [r2, r7]
9001671c:	eba5 0a04 	sub.w	sl, r5, r4
90016720:	ea4f 1608 	mov.w	r6, r8, lsl #4
90016724:	ea4f 150a 	mov.w	r5, sl, lsl #4
90016728:	fb0e fe05 	mul.w	lr, lr, r5
9001672c:	fb0a ee19 	mls	lr, sl, r9, lr
90016730:	fb08 e404 	mla	r4, r8, r4, lr
90016734:	3c01      	subs	r4, #1
90016736:	19a4      	adds	r4, r4, r6
90016738:	f100 808c 	bmi.w	90016854 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
9001673c:	fb94 fef6 	sdiv	lr, r4, r6
90016740:	fb06 441e 	mls	r4, r6, lr, r4
90016744:	f8c0 e000 	str.w	lr, [r0]
90016748:	6104      	str	r4, [r0, #16]
9001674a:	2d00      	cmp	r5, #0
9001674c:	f2c0 8095 	blt.w	9001687a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
90016750:	fb95 f4f6 	sdiv	r4, r5, r6
90016754:	fb06 5514 	mls	r5, r6, r4, r5
90016758:	6044      	str	r4, [r0, #4]
9001675a:	6085      	str	r5, [r0, #8]
9001675c:	60c6      	str	r6, [r0, #12]
9001675e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
90016762:	f8dc 4004 	ldr.w	r4, [ip, #4]
90016766:	6945      	ldr	r5, [r0, #20]
90016768:	59d2      	ldr	r2, [r2, r7]
9001676a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
9001676e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 9001689c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
90016772:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
90016776:	ee07 4a10 	vmov	s14, r4
9001677a:	6804      	ldr	r4, [r0, #0]
9001677c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
90016780:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016784:	ee07 2a90 	vmov	s15, r2
90016788:	ee27 7a26 	vmul.f32	s14, s14, s13
9001678c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90016790:	ee67 7aa6 	vmul.f32	s15, s15, s13
90016794:	edd3 6a00 	vldr	s13, [r3]
90016798:	eee6 6a07 	vfma.f32	s13, s12, s14
9001679c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
900167a0:	eee6 6a27 	vfma.f32	s13, s12, s15
900167a4:	edc0 6a07 	vstr	s13, [r0, #28]
900167a8:	edd0 6a01 	vldr	s13, [r0, #4]
900167ac:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
900167b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
900167b4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
900167b8:	eea6 6aa5 	vfma.f32	s12, s13, s11
900167bc:	ed80 6a08 	vstr	s12, [r0, #32]
900167c0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
900167c2:	6242      	str	r2, [r0, #36]	; 0x24
900167c4:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
900167c8:	ed93 6a03 	vldr	s12, [r3, #12]
900167cc:	eea5 6a87 	vfma.f32	s12, s11, s14
900167d0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
900167d4:	eea5 6aa7 	vfma.f32	s12, s11, s15
900167d8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
900167dc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
900167e0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
900167e4:	eea6 6aa5 	vfma.f32	s12, s13, s11
900167e8:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
900167ec:	6aca      	ldr	r2, [r1, #44]	; 0x2c
900167ee:	6302      	str	r2, [r0, #48]	; 0x30
900167f0:	ed93 6a06 	vldr	s12, [r3, #24]
900167f4:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
900167f8:	eea5 6a87 	vfma.f32	s12, s11, s14
900167fc:	eeb0 7a46 	vmov.f32	s14, s12
90016800:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
90016804:	eea6 7a27 	vfma.f32	s14, s12, s15
90016808:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001680c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
90016810:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
90016814:	eee6 7a87 	vfma.f32	s15, s13, s14
90016818:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
9001681c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
9001681e:	63c3      	str	r3, [r0, #60]	; 0x3c
90016820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90016824:	2410      	movs	r4, #16
90016826:	f1c5 0501 	rsb	r5, r5, #1
9001682a:	fb9e fef4 	sdiv	lr, lr, r4
9001682e:	f015 050f 	ands.w	r5, r5, #15
90016832:	bf18      	it	ne
90016834:	2501      	movne	r5, #1
90016836:	ebae 0e05 	sub.w	lr, lr, r5
9001683a:	e753      	b.n	900166e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
9001683c:	f04f 0910 	mov.w	r9, #16
90016840:	f1c5 0501 	rsb	r5, r5, #1
90016844:	fb94 f4f9 	sdiv	r4, r4, r9
90016848:	f015 050f 	ands.w	r5, r5, #15
9001684c:	bf18      	it	ne
9001684e:	2501      	movne	r5, #1
90016850:	1b64      	subs	r4, r4, r5
90016852:	e755      	b.n	90016700 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
90016854:	4264      	negs	r4, r4
90016856:	fb94 fef6 	sdiv	lr, r4, r6
9001685a:	f1ce 0800 	rsb	r8, lr, #0
9001685e:	fb06 441e 	mls	r4, r6, lr, r4
90016862:	f8c0 8000 	str.w	r8, [r0]
90016866:	6104      	str	r4, [r0, #16]
90016868:	2c00      	cmp	r4, #0
9001686a:	f43f af6e 	beq.w	9001674a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
9001686e:	ea6f 0e0e 	mvn.w	lr, lr
90016872:	1b34      	subs	r4, r6, r4
90016874:	f8c0 e000 	str.w	lr, [r0]
90016878:	e766      	b.n	90016748 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
9001687a:	426d      	negs	r5, r5
9001687c:	fb95 f4f6 	sdiv	r4, r5, r6
90016880:	f1c4 0e00 	rsb	lr, r4, #0
90016884:	fb06 5514 	mls	r5, r6, r4, r5
90016888:	f8c0 e004 	str.w	lr, [r0, #4]
9001688c:	6085      	str	r5, [r0, #8]
9001688e:	2d00      	cmp	r5, #0
90016890:	f43f af64 	beq.w	9001675c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
90016894:	43e4      	mvns	r4, r4
90016896:	1b75      	subs	r5, r6, r5
90016898:	6044      	str	r4, [r0, #4]
9001689a:	e75e      	b.n	9001675a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
9001689c:	3d800000 	.word	0x3d800000

900168a0 <_ZN8touchgfx7Unicode6strlenEPKt>:
900168a0:	4602      	mov	r2, r0
900168a2:	b148      	cbz	r0, 900168b8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
900168a4:	2300      	movs	r3, #0
900168a6:	b298      	uxth	r0, r3
900168a8:	3301      	adds	r3, #1
900168aa:	eb02 0143 	add.w	r1, r2, r3, lsl #1
900168ae:	f831 1c02 	ldrh.w	r1, [r1, #-2]
900168b2:	2900      	cmp	r1, #0
900168b4:	d1f7      	bne.n	900168a6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
900168b6:	4770      	bx	lr
900168b8:	4770      	bx	lr

900168ba <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
900168ba:	b530      	push	{r4, r5, lr}
900168bc:	4604      	mov	r4, r0
900168be:	b159      	cbz	r1, 900168d8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
900168c0:	b148      	cbz	r0, 900168d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
900168c2:	2300      	movs	r3, #0
900168c4:	b298      	uxth	r0, r3
900168c6:	4282      	cmp	r2, r0
900168c8:	d905      	bls.n	900168d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
900168ca:	5ccd      	ldrb	r5, [r1, r3]
900168cc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
900168d0:	3301      	adds	r3, #1
900168d2:	2d00      	cmp	r5, #0
900168d4:	d1f6      	bne.n	900168c4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
900168d6:	bd30      	pop	{r4, r5, pc}
900168d8:	4608      	mov	r0, r1
900168da:	e7fc      	b.n	900168d6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

900168dc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
900168dc:	b5f0      	push	{r4, r5, r6, r7, lr}
900168de:	468c      	mov	ip, r1
900168e0:	b08b      	sub	sp, #44	; 0x2c
900168e2:	2100      	movs	r1, #0
900168e4:	ae01      	add	r6, sp, #4
900168e6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
900168ea:	211f      	movs	r1, #31
900168ec:	fbb0 f7f3 	udiv	r7, r0, r3
900168f0:	fb03 0517 	mls	r5, r3, r7, r0
900168f4:	4638      	mov	r0, r7
900168f6:	b2ec      	uxtb	r4, r5
900168f8:	2d09      	cmp	r5, #9
900168fa:	bfd4      	ite	le
900168fc:	3430      	addle	r4, #48	; 0x30
900168fe:	3457      	addgt	r4, #87	; 0x57
90016900:	b2e4      	uxtb	r4, r4
90016902:	558c      	strb	r4, [r1, r6]
90016904:	1e4c      	subs	r4, r1, #1
90016906:	b92f      	cbnz	r7, 90016914 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
90016908:	4431      	add	r1, r6
9001690a:	4660      	mov	r0, ip
9001690c:	f7ff ffd5 	bl	900168ba <_ZN8touchgfx7Unicode7strncpyEPtPKct>
90016910:	b00b      	add	sp, #44	; 0x2c
90016912:	bdf0      	pop	{r4, r5, r6, r7, pc}
90016914:	4621      	mov	r1, r4
90016916:	e7e9      	b.n	900168ec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

90016918 <_ZN8touchgfx7Unicode4itoaElPtti>:
90016918:	b5f0      	push	{r4, r5, r6, r7, lr}
9001691a:	4607      	mov	r7, r0
9001691c:	b08b      	sub	sp, #44	; 0x2c
9001691e:	4608      	mov	r0, r1
90016920:	b341      	cbz	r1, 90016974 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
90016922:	1e99      	subs	r1, r3, #2
90016924:	2922      	cmp	r1, #34	; 0x22
90016926:	d825      	bhi.n	90016974 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
90016928:	2100      	movs	r1, #0
9001692a:	463c      	mov	r4, r7
9001692c:	261f      	movs	r6, #31
9001692e:	f10d 0c04 	add.w	ip, sp, #4
90016932:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
90016936:	1e71      	subs	r1, r6, #1
90016938:	fb94 fef3 	sdiv	lr, r4, r3
9001693c:	fb03 441e 	mls	r4, r3, lr, r4
90016940:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
90016944:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
90016948:	b2ec      	uxtb	r4, r5
9001694a:	2d09      	cmp	r5, #9
9001694c:	bfd4      	ite	le
9001694e:	3430      	addle	r4, #48	; 0x30
90016950:	3457      	addgt	r4, #87	; 0x57
90016952:	b2e4      	uxtb	r4, r4
90016954:	f80c 4006 	strb.w	r4, [ip, r6]
90016958:	4674      	mov	r4, lr
9001695a:	b96c      	cbnz	r4, 90016978 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
9001695c:	2f00      	cmp	r7, #0
9001695e:	da05      	bge.n	9001696c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
90016960:	ab0a      	add	r3, sp, #40	; 0x28
90016962:	4419      	add	r1, r3
90016964:	232d      	movs	r3, #45	; 0x2d
90016966:	f801 3c24 	strb.w	r3, [r1, #-36]
9001696a:	1eb1      	subs	r1, r6, #2
9001696c:	3101      	adds	r1, #1
9001696e:	4461      	add	r1, ip
90016970:	f7ff ffa3 	bl	900168ba <_ZN8touchgfx7Unicode7strncpyEPtPKct>
90016974:	b00b      	add	sp, #44	; 0x2c
90016976:	bdf0      	pop	{r4, r5, r6, r7, pc}
90016978:	460e      	mov	r6, r1
9001697a:	e7dc      	b.n	90016936 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

9001697c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
9001697c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016980:	b085      	sub	sp, #20
90016982:	4691      	mov	r9, r2
90016984:	6802      	ldr	r2, [r0, #0]
90016986:	4688      	mov	r8, r1
90016988:	461c      	mov	r4, r3
9001698a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
9001698e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
90016992:	4683      	mov	fp, r0
90016994:	4610      	mov	r0, r2
90016996:	9103      	str	r1, [sp, #12]
90016998:	9302      	str	r3, [sp, #8]
9001699a:	9201      	str	r2, [sp, #4]
9001699c:	f7ff ff80 	bl	900168a0 <_ZN8touchgfx7Unicode6strlenEPKt>
900169a0:	f1b8 0f00 	cmp.w	r8, #0
900169a4:	bf0c      	ite	eq
900169a6:	4684      	moveq	ip, r0
900169a8:	f100 0c01 	addne.w	ip, r0, #1
900169ac:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
900169b0:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
900169b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
900169b6:	fa1f fc8c 	uxth.w	ip, ip
900169ba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900169bc:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
900169c0:	9903      	ldr	r1, [sp, #12]
900169c2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
900169c6:	d041      	beq.n	90016a4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
900169c8:	d834      	bhi.n	90016a34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
900169ca:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
900169ce:	d059      	beq.n	90016a84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
900169d0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
900169d4:	d03a      	beq.n	90016a4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
900169d6:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
900169da:	d034      	beq.n	90016a46 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
900169dc:	2400      	movs	r4, #0
900169de:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
900169e2:	3a01      	subs	r2, #1
900169e4:	b169      	cbz	r1, 90016a02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
900169e6:	9911      	ldr	r1, [sp, #68]	; 0x44
900169e8:	458c      	cmp	ip, r1
900169ea:	da09      	bge.n	90016a00 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
900169ec:	eba1 010c 	sub.w	r1, r1, ip
900169f0:	b289      	uxth	r1, r1
900169f2:	b933      	cbnz	r3, 90016a02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
900169f4:	2e00      	cmp	r6, #0
900169f6:	d051      	beq.n	90016a9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
900169f8:	2800      	cmp	r0, #0
900169fa:	d04f      	beq.n	90016a9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
900169fc:	440c      	add	r4, r1
900169fe:	b2a4      	uxth	r4, r4
90016a00:	2100      	movs	r1, #0
90016a02:	682b      	ldr	r3, [r5, #0]
90016a04:	4293      	cmp	r3, r2
90016a06:	da07      	bge.n	90016a18 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
90016a08:	f1b8 0f00 	cmp.w	r8, #0
90016a0c:	d004      	beq.n	90016a18 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
90016a0e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
90016a12:	682b      	ldr	r3, [r5, #0]
90016a14:	3301      	adds	r3, #1
90016a16:	602b      	str	r3, [r5, #0]
90016a18:	2730      	movs	r7, #48	; 0x30
90016a1a:	2c00      	cmp	r4, #0
90016a1c:	d04e      	beq.n	90016abc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90016a1e:	682e      	ldr	r6, [r5, #0]
90016a20:	3c01      	subs	r4, #1
90016a22:	42b2      	cmp	r2, r6
90016a24:	b2a4      	uxth	r4, r4
90016a26:	dd49      	ble.n	90016abc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90016a28:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
90016a2c:	682b      	ldr	r3, [r5, #0]
90016a2e:	3301      	adds	r3, #1
90016a30:	602b      	str	r3, [r5, #0]
90016a32:	e7f2      	b.n	90016a1a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
90016a34:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
90016a38:	d01d      	beq.n	90016a76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
90016a3a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
90016a3e:	d002      	beq.n	90016a46 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
90016a40:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
90016a44:	e7c9      	b.n	900169da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
90016a46:	4684      	mov	ip, r0
90016a48:	f04f 0800 	mov.w	r8, #0
90016a4c:	2c00      	cmp	r4, #0
90016a4e:	d0c6      	beq.n	900169de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016a50:	b947      	cbnz	r7, 90016a64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
90016a52:	2801      	cmp	r0, #1
90016a54:	d106      	bne.n	90016a64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
90016a56:	8814      	ldrh	r4, [r2, #0]
90016a58:	2c30      	cmp	r4, #48	; 0x30
90016a5a:	bf02      	ittt	eq
90016a5c:	3202      	addeq	r2, #2
90016a5e:	4638      	moveq	r0, r7
90016a60:	f8cb 2000 	streq.w	r2, [fp]
90016a64:	45bc      	cmp	ip, r7
90016a66:	da14      	bge.n	90016a92 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
90016a68:	b2bf      	uxth	r7, r7
90016a6a:	eba7 040c 	sub.w	r4, r7, ip
90016a6e:	46bc      	mov	ip, r7
90016a70:	b2a4      	uxth	r4, r4
90016a72:	2600      	movs	r6, #0
90016a74:	e7b3      	b.n	900169de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016a76:	4684      	mov	ip, r0
90016a78:	b16c      	cbz	r4, 90016a96 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
90016a7a:	42b8      	cmp	r0, r7
90016a7c:	dd00      	ble.n	90016a80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
90016a7e:	b2b8      	uxth	r0, r7
90016a80:	2400      	movs	r4, #0
90016a82:	e003      	b.n	90016a8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
90016a84:	f04f 0c01 	mov.w	ip, #1
90016a88:	2400      	movs	r4, #0
90016a8a:	4660      	mov	r0, ip
90016a8c:	4626      	mov	r6, r4
90016a8e:	46a0      	mov	r8, r4
90016a90:	e7a5      	b.n	900169de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016a92:	2400      	movs	r4, #0
90016a94:	e7ed      	b.n	90016a72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
90016a96:	4626      	mov	r6, r4
90016a98:	46a0      	mov	r8, r4
90016a9a:	e7a0      	b.n	900169de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
90016a9c:	2900      	cmp	r1, #0
90016a9e:	d0b0      	beq.n	90016a02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016aa0:	2720      	movs	r7, #32
90016aa2:	682e      	ldr	r6, [r5, #0]
90016aa4:	2900      	cmp	r1, #0
90016aa6:	d0ac      	beq.n	90016a02 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90016aa8:	3901      	subs	r1, #1
90016aaa:	4296      	cmp	r6, r2
90016aac:	b289      	uxth	r1, r1
90016aae:	daa7      	bge.n	90016a00 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
90016ab0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
90016ab4:	682b      	ldr	r3, [r5, #0]
90016ab6:	3301      	adds	r3, #1
90016ab8:	602b      	str	r3, [r5, #0]
90016aba:	e7f2      	b.n	90016aa2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
90016abc:	b188      	cbz	r0, 90016ae2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
90016abe:	682b      	ldr	r3, [r5, #0]
90016ac0:	3801      	subs	r0, #1
90016ac2:	429a      	cmp	r2, r3
90016ac4:	b280      	uxth	r0, r0
90016ac6:	dd0c      	ble.n	90016ae2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
90016ac8:	f8db 3000 	ldr.w	r3, [fp]
90016acc:	1c9c      	adds	r4, r3, #2
90016ace:	f8cb 4000 	str.w	r4, [fp]
90016ad2:	881c      	ldrh	r4, [r3, #0]
90016ad4:	682b      	ldr	r3, [r5, #0]
90016ad6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
90016ada:	682b      	ldr	r3, [r5, #0]
90016adc:	3301      	adds	r3, #1
90016ade:	602b      	str	r3, [r5, #0]
90016ae0:	e7ec      	b.n	90016abc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90016ae2:	2620      	movs	r6, #32
90016ae4:	b151      	cbz	r1, 90016afc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
90016ae6:	6828      	ldr	r0, [r5, #0]
90016ae8:	3901      	subs	r1, #1
90016aea:	4282      	cmp	r2, r0
90016aec:	b289      	uxth	r1, r1
90016aee:	dd05      	ble.n	90016afc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
90016af0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
90016af4:	682b      	ldr	r3, [r5, #0]
90016af6:	3301      	adds	r3, #1
90016af8:	602b      	str	r3, [r5, #0]
90016afa:	e7f3      	b.n	90016ae4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
90016afc:	b005      	add	sp, #20
90016afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90016b02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
90016b02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90016b06:	2400      	movs	r4, #0
90016b08:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
90016b0c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
90016b10:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
90016b14:	8014      	strh	r4, [r2, #0]
90016b16:	701c      	strb	r4, [r3, #0]
90016b18:	f888 4000 	strb.w	r4, [r8]
90016b1c:	f88c 4000 	strb.w	r4, [ip]
90016b20:	f88e 4000 	strb.w	r4, [lr]
90016b24:	703c      	strb	r4, [r7, #0]
90016b26:	6804      	ldr	r4, [r0, #0]
90016b28:	b1a4      	cbz	r4, 90016b54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
90016b2a:	8824      	ldrh	r4, [r4, #0]
90016b2c:	f04f 0901 	mov.w	r9, #1
90016b30:	b314      	cbz	r4, 90016b78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
90016b32:	2c2b      	cmp	r4, #43	; 0x2b
90016b34:	d001      	beq.n	90016b3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
90016b36:	2c20      	cmp	r4, #32
90016b38:	d110      	bne.n	90016b5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
90016b3a:	8014      	strh	r4, [r2, #0]
90016b3c:	6804      	ldr	r4, [r0, #0]
90016b3e:	b10c      	cbz	r4, 90016b44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
90016b40:	3402      	adds	r4, #2
90016b42:	6004      	str	r4, [r0, #0]
90016b44:	680c      	ldr	r4, [r1, #0]
90016b46:	b10c      	cbz	r4, 90016b4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
90016b48:	3401      	adds	r4, #1
90016b4a:	600c      	str	r4, [r1, #0]
90016b4c:	6804      	ldr	r4, [r0, #0]
90016b4e:	b17c      	cbz	r4, 90016b70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
90016b50:	8824      	ldrh	r4, [r4, #0]
90016b52:	e7ed      	b.n	90016b30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
90016b54:	680c      	ldr	r4, [r1, #0]
90016b56:	b17c      	cbz	r4, 90016b78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
90016b58:	7824      	ldrb	r4, [r4, #0]
90016b5a:	e7e7      	b.n	90016b2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
90016b5c:	2c2d      	cmp	r4, #45	; 0x2d
90016b5e:	d102      	bne.n	90016b66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
90016b60:	f883 9000 	strb.w	r9, [r3]
90016b64:	e7ea      	b.n	90016b3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
90016b66:	2c23      	cmp	r4, #35	; 0x23
90016b68:	d107      	bne.n	90016b7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
90016b6a:	f888 9000 	strb.w	r9, [r8]
90016b6e:	e7e5      	b.n	90016b3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
90016b70:	680c      	ldr	r4, [r1, #0]
90016b72:	b10c      	cbz	r4, 90016b78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
90016b74:	7824      	ldrb	r4, [r4, #0]
90016b76:	e7db      	b.n	90016b30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
90016b78:	2400      	movs	r4, #0
90016b7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
90016b7e:	2b09      	cmp	r3, #9
90016b80:	d901      	bls.n	90016b86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
90016b82:	2c2a      	cmp	r4, #42	; 0x2a
90016b84:	d122      	bne.n	90016bcc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
90016b86:	2301      	movs	r3, #1
90016b88:	2c30      	cmp	r4, #48	; 0x30
90016b8a:	f88e 3000 	strb.w	r3, [lr]
90016b8e:	d10d      	bne.n	90016bac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
90016b90:	f88c 3000 	strb.w	r3, [ip]
90016b94:	6803      	ldr	r3, [r0, #0]
90016b96:	b10b      	cbz	r3, 90016b9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
90016b98:	3302      	adds	r3, #2
90016b9a:	6003      	str	r3, [r0, #0]
90016b9c:	680b      	ldr	r3, [r1, #0]
90016b9e:	b10b      	cbz	r3, 90016ba4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
90016ba0:	3301      	adds	r3, #1
90016ba2:	600b      	str	r3, [r1, #0]
90016ba4:	6803      	ldr	r3, [r0, #0]
90016ba6:	2b00      	cmp	r3, #0
90016ba8:	d02f      	beq.n	90016c0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
90016baa:	881c      	ldrh	r4, [r3, #0]
90016bac:	2c2a      	cmp	r4, #42	; 0x2a
90016bae:	d135      	bne.n	90016c1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
90016bb0:	f04f 33ff 	mov.w	r3, #4294967295
90016bb4:	6033      	str	r3, [r6, #0]
90016bb6:	6803      	ldr	r3, [r0, #0]
90016bb8:	b10b      	cbz	r3, 90016bbe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
90016bba:	3302      	adds	r3, #2
90016bbc:	6003      	str	r3, [r0, #0]
90016bbe:	680b      	ldr	r3, [r1, #0]
90016bc0:	b10b      	cbz	r3, 90016bc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
90016bc2:	3301      	adds	r3, #1
90016bc4:	600b      	str	r3, [r1, #0]
90016bc6:	6803      	ldr	r3, [r0, #0]
90016bc8:	b31b      	cbz	r3, 90016c12 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
90016bca:	881c      	ldrh	r4, [r3, #0]
90016bcc:	2c2e      	cmp	r4, #46	; 0x2e
90016bce:	d11a      	bne.n	90016c06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90016bd0:	2301      	movs	r3, #1
90016bd2:	703b      	strb	r3, [r7, #0]
90016bd4:	6803      	ldr	r3, [r0, #0]
90016bd6:	b10b      	cbz	r3, 90016bdc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
90016bd8:	3302      	adds	r3, #2
90016bda:	6003      	str	r3, [r0, #0]
90016bdc:	680b      	ldr	r3, [r1, #0]
90016bde:	b10b      	cbz	r3, 90016be4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
90016be0:	3301      	adds	r3, #1
90016be2:	600b      	str	r3, [r1, #0]
90016be4:	6803      	ldr	r3, [r0, #0]
90016be6:	2b00      	cmp	r3, #0
90016be8:	d036      	beq.n	90016c58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
90016bea:	881b      	ldrh	r3, [r3, #0]
90016bec:	2b2a      	cmp	r3, #42	; 0x2a
90016bee:	d137      	bne.n	90016c60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
90016bf0:	f04f 33ff 	mov.w	r3, #4294967295
90016bf4:	602b      	str	r3, [r5, #0]
90016bf6:	6803      	ldr	r3, [r0, #0]
90016bf8:	b10b      	cbz	r3, 90016bfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
90016bfa:	3302      	adds	r3, #2
90016bfc:	6003      	str	r3, [r0, #0]
90016bfe:	680b      	ldr	r3, [r1, #0]
90016c00:	b10b      	cbz	r3, 90016c06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90016c02:	3301      	adds	r3, #1
90016c04:	600b      	str	r3, [r1, #0]
90016c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90016c0a:	680c      	ldr	r4, [r1, #0]
90016c0c:	b134      	cbz	r4, 90016c1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
90016c0e:	7824      	ldrb	r4, [r4, #0]
90016c10:	e7cc      	b.n	90016bac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
90016c12:	680b      	ldr	r3, [r1, #0]
90016c14:	2b00      	cmp	r3, #0
90016c16:	d0f6      	beq.n	90016c06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90016c18:	781c      	ldrb	r4, [r3, #0]
90016c1a:	e7d7      	b.n	90016bcc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
90016c1c:	2300      	movs	r3, #0
90016c1e:	220a      	movs	r2, #10
90016c20:	6033      	str	r3, [r6, #0]
90016c22:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
90016c26:	fa1f f38c 	uxth.w	r3, ip
90016c2a:	2b09      	cmp	r3, #9
90016c2c:	d8ce      	bhi.n	90016bcc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
90016c2e:	6833      	ldr	r3, [r6, #0]
90016c30:	fb02 c303 	mla	r3, r2, r3, ip
90016c34:	6033      	str	r3, [r6, #0]
90016c36:	6803      	ldr	r3, [r0, #0]
90016c38:	b10b      	cbz	r3, 90016c3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
90016c3a:	3302      	adds	r3, #2
90016c3c:	6003      	str	r3, [r0, #0]
90016c3e:	680b      	ldr	r3, [r1, #0]
90016c40:	b10b      	cbz	r3, 90016c46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
90016c42:	3301      	adds	r3, #1
90016c44:	600b      	str	r3, [r1, #0]
90016c46:	6803      	ldr	r3, [r0, #0]
90016c48:	b10b      	cbz	r3, 90016c4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
90016c4a:	881c      	ldrh	r4, [r3, #0]
90016c4c:	e7e9      	b.n	90016c22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
90016c4e:	680c      	ldr	r4, [r1, #0]
90016c50:	2c00      	cmp	r4, #0
90016c52:	d0e6      	beq.n	90016c22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
90016c54:	7824      	ldrb	r4, [r4, #0]
90016c56:	e7e4      	b.n	90016c22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
90016c58:	680b      	ldr	r3, [r1, #0]
90016c5a:	b10b      	cbz	r3, 90016c60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
90016c5c:	781b      	ldrb	r3, [r3, #0]
90016c5e:	e7c5      	b.n	90016bec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
90016c60:	2200      	movs	r2, #0
90016c62:	240a      	movs	r4, #10
90016c64:	602a      	str	r2, [r5, #0]
90016c66:	3b30      	subs	r3, #48	; 0x30
90016c68:	682a      	ldr	r2, [r5, #0]
90016c6a:	b29e      	uxth	r6, r3
90016c6c:	2e09      	cmp	r6, #9
90016c6e:	d813      	bhi.n	90016c98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
90016c70:	fb04 3302 	mla	r3, r4, r2, r3
90016c74:	602b      	str	r3, [r5, #0]
90016c76:	6803      	ldr	r3, [r0, #0]
90016c78:	b10b      	cbz	r3, 90016c7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
90016c7a:	3302      	adds	r3, #2
90016c7c:	6003      	str	r3, [r0, #0]
90016c7e:	680b      	ldr	r3, [r1, #0]
90016c80:	b10b      	cbz	r3, 90016c86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
90016c82:	3301      	adds	r3, #1
90016c84:	600b      	str	r3, [r1, #0]
90016c86:	6803      	ldr	r3, [r0, #0]
90016c88:	b10b      	cbz	r3, 90016c8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
90016c8a:	881b      	ldrh	r3, [r3, #0]
90016c8c:	e7eb      	b.n	90016c66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
90016c8e:	680b      	ldr	r3, [r1, #0]
90016c90:	2b00      	cmp	r3, #0
90016c92:	d0e8      	beq.n	90016c66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
90016c94:	781b      	ldrb	r3, [r3, #0]
90016c96:	e7e6      	b.n	90016c66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
90016c98:	2a06      	cmp	r2, #6
90016c9a:	bfa8      	it	ge
90016c9c:	2206      	movge	r2, #6
90016c9e:	602a      	str	r2, [r5, #0]
90016ca0:	e7b1      	b.n	90016c06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

90016ca2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
90016ca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016ca6:	b0a3      	sub	sp, #140	; 0x8c
90016ca8:	2600      	movs	r6, #0
90016caa:	4607      	mov	r7, r0
90016cac:	4688      	mov	r8, r1
90016cae:	f10d 0944 	add.w	r9, sp, #68	; 0x44
90016cb2:	4631      	mov	r1, r6
90016cb4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
90016cb6:	4648      	mov	r0, r9
90016cb8:	960d      	str	r6, [sp, #52]	; 0x34
90016cba:	e9cd 3208 	strd	r3, r2, [sp, #32]
90016cbe:	2242      	movs	r2, #66	; 0x42
90016cc0:	f00c f8ba 	bl	90022e38 <memset>
90016cc4:	b15f      	cbz	r7, 90016cde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
90016cc6:	f108 3aff 	add.w	sl, r8, #4294967295
90016cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
90016ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016cce:	b152      	cbz	r2, 90016ce6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
90016cd0:	8812      	ldrh	r2, [r2, #0]
90016cd2:	b10a      	cbz	r2, 90016cd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
90016cd4:	459a      	cmp	sl, r3
90016cd6:	dc2e      	bgt.n	90016d36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
90016cd8:	2200      	movs	r2, #0
90016cda:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
90016cde:	4638      	mov	r0, r7
90016ce0:	b023      	add	sp, #140	; 0x8c
90016ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016ce6:	9a08      	ldr	r2, [sp, #32]
90016ce8:	2a00      	cmp	r2, #0
90016cea:	d0f5      	beq.n	90016cd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
90016cec:	7812      	ldrb	r2, [r2, #0]
90016cee:	e7f0      	b.n	90016cd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
90016cf0:	2d00      	cmp	r5, #0
90016cf2:	d0ea      	beq.n	90016cca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016cf4:	782a      	ldrb	r2, [r5, #0]
90016cf6:	b142      	cbz	r2, 90016d0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
90016cf8:	2a25      	cmp	r2, #37	; 0x25
90016cfa:	d001      	beq.n	90016d00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
90016cfc:	459a      	cmp	sl, r3
90016cfe:	dc08      	bgt.n	90016d12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
90016d00:	f1bb 0f00 	cmp.w	fp, #0
90016d04:	d121      	bne.n	90016d4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
90016d06:	2d00      	cmp	r5, #0
90016d08:	d0df      	beq.n	90016cca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016d0a:	782a      	ldrb	r2, [r5, #0]
90016d0c:	f04f 0b00 	mov.w	fp, #0
90016d10:	e01d      	b.n	90016d4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
90016d12:	f1bb 0f00 	cmp.w	fp, #0
90016d16:	d077      	beq.n	90016e08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
90016d18:	f8bb 2000 	ldrh.w	r2, [fp]
90016d1c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
90016d20:	f1bb 0f00 	cmp.w	fp, #0
90016d24:	d002      	beq.n	90016d2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
90016d26:	f10b 0202 	add.w	r2, fp, #2
90016d2a:	9209      	str	r2, [sp, #36]	; 0x24
90016d2c:	b10d      	cbz	r5, 90016d32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
90016d2e:	3501      	adds	r5, #1
90016d30:	9508      	str	r5, [sp, #32]
90016d32:	3301      	adds	r3, #1
90016d34:	930d      	str	r3, [sp, #52]	; 0x34
90016d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016d38:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
90016d3c:	f1bb 0f00 	cmp.w	fp, #0
90016d40:	d0d6      	beq.n	90016cf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
90016d42:	f8bb 2000 	ldrh.w	r2, [fp]
90016d46:	2a00      	cmp	r2, #0
90016d48:	d1d6      	bne.n	90016cf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
90016d4a:	f8bb 2000 	ldrh.w	r2, [fp]
90016d4e:	2a00      	cmp	r2, #0
90016d50:	d0bb      	beq.n	90016cca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016d52:	459a      	cmp	sl, r3
90016d54:	ddb9      	ble.n	90016cca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016d56:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
90016d5a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
90016d5e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
90016d62:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
90016d66:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
90016d6a:	960e      	str	r6, [sp, #56]	; 0x38
90016d6c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
90016d70:	960f      	str	r6, [sp, #60]	; 0x3c
90016d72:	f1bb 0f00 	cmp.w	fp, #0
90016d76:	d002      	beq.n	90016d7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
90016d78:	f10b 0302 	add.w	r3, fp, #2
90016d7c:	9309      	str	r3, [sp, #36]	; 0x24
90016d7e:	b10d      	cbz	r5, 90016d84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
90016d80:	1c6b      	adds	r3, r5, #1
90016d82:	9308      	str	r3, [sp, #32]
90016d84:	ab0f      	add	r3, sp, #60	; 0x3c
90016d86:	f10d 0232 	add.w	r2, sp, #50	; 0x32
90016d8a:	a908      	add	r1, sp, #32
90016d8c:	a809      	add	r0, sp, #36	; 0x24
90016d8e:	9305      	str	r3, [sp, #20]
90016d90:	f10d 0331 	add.w	r3, sp, #49	; 0x31
90016d94:	9304      	str	r3, [sp, #16]
90016d96:	ab0e      	add	r3, sp, #56	; 0x38
90016d98:	9303      	str	r3, [sp, #12]
90016d9a:	ab0c      	add	r3, sp, #48	; 0x30
90016d9c:	9302      	str	r3, [sp, #8]
90016d9e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
90016da2:	9301      	str	r3, [sp, #4]
90016da4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
90016da8:	9300      	str	r3, [sp, #0]
90016daa:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
90016dae:	f7ff fea8 	bl	90016b02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
90016db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90016db4:	2b00      	cmp	r3, #0
90016db6:	bfbf      	itttt	lt
90016db8:	6823      	ldrlt	r3, [r4, #0]
90016dba:	3404      	addlt	r4, #4
90016dbc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
90016dc0:	930e      	strlt	r3, [sp, #56]	; 0x38
90016dc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90016dc4:	2b00      	cmp	r3, #0
90016dc6:	bfbe      	ittt	lt
90016dc8:	6823      	ldrlt	r3, [r4, #0]
90016dca:	3404      	addlt	r4, #4
90016dcc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
90016dd0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
90016dd4:	bfb8      	it	lt
90016dd6:	930f      	strlt	r3, [sp, #60]	; 0x3c
90016dd8:	b1d9      	cbz	r1, 90016e12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
90016dda:	880b      	ldrh	r3, [r1, #0]
90016ddc:	2b69      	cmp	r3, #105	; 0x69
90016dde:	d01f      	beq.n	90016e20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016de0:	d82f      	bhi.n	90016e42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
90016de2:	2b58      	cmp	r3, #88	; 0x58
90016de4:	d01c      	beq.n	90016e20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016de6:	d818      	bhi.n	90016e1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
90016de8:	2b25      	cmp	r3, #37	; 0x25
90016dea:	d034      	beq.n	90016e56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
90016dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016dee:	e9cd 5b08 	strd	r5, fp, [sp, #32]
90016df2:	f1bb 0f00 	cmp.w	fp, #0
90016df6:	f000 80b7 	beq.w	90016f68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
90016dfa:	f8bb 5000 	ldrh.w	r5, [fp]
90016dfe:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
90016e02:	3301      	adds	r3, #1
90016e04:	930d      	str	r3, [sp, #52]	; 0x34
90016e06:	e029      	b.n	90016e5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
90016e08:	b10d      	cbz	r5, 90016e0e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
90016e0a:	782a      	ldrb	r2, [r5, #0]
90016e0c:	e786      	b.n	90016d1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
90016e0e:	462a      	mov	r2, r5
90016e10:	e784      	b.n	90016d1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
90016e12:	2a00      	cmp	r2, #0
90016e14:	d0ea      	beq.n	90016dec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90016e16:	7813      	ldrb	r3, [r2, #0]
90016e18:	e7e0      	b.n	90016ddc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
90016e1a:	3b63      	subs	r3, #99	; 0x63
90016e1c:	2b01      	cmp	r3, #1
90016e1e:	d8e5      	bhi.n	90016dec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90016e20:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
90016e24:	b329      	cbz	r1, 90016e72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
90016e26:	880b      	ldrh	r3, [r1, #0]
90016e28:	2b69      	cmp	r3, #105	; 0x69
90016e2a:	d063      	beq.n	90016ef4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
90016e2c:	d825      	bhi.n	90016e7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
90016e2e:	2b63      	cmp	r3, #99	; 0x63
90016e30:	d038      	beq.n	90016ea4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
90016e32:	2b64      	cmp	r3, #100	; 0x64
90016e34:	d05e      	beq.n	90016ef4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
90016e36:	2b58      	cmp	r3, #88	; 0x58
90016e38:	d07a      	beq.n	90016f30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
90016e3a:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
90016e3e:	4625      	mov	r5, r4
90016e40:	e036      	b.n	90016eb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90016e42:	2b73      	cmp	r3, #115	; 0x73
90016e44:	d0ec      	beq.n	90016e20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016e46:	d802      	bhi.n	90016e4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
90016e48:	2b6f      	cmp	r3, #111	; 0x6f
90016e4a:	d1cf      	bne.n	90016dec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90016e4c:	e7e8      	b.n	90016e20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016e4e:	2b75      	cmp	r3, #117	; 0x75
90016e50:	d0e6      	beq.n	90016e20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90016e52:	2b78      	cmp	r3, #120	; 0x78
90016e54:	e7f9      	b.n	90016e4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
90016e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90016e58:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
90016e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016e5e:	b10b      	cbz	r3, 90016e64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
90016e60:	3302      	adds	r3, #2
90016e62:	9309      	str	r3, [sp, #36]	; 0x24
90016e64:	9b08      	ldr	r3, [sp, #32]
90016e66:	2b00      	cmp	r3, #0
90016e68:	f43f af2f 	beq.w	90016cca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016e6c:	3301      	adds	r3, #1
90016e6e:	9308      	str	r3, [sp, #32]
90016e70:	e72b      	b.n	90016cca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90016e72:	2a00      	cmp	r2, #0
90016e74:	d0e1      	beq.n	90016e3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90016e76:	7813      	ldrb	r3, [r2, #0]
90016e78:	e7d6      	b.n	90016e28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
90016e7a:	2b73      	cmp	r3, #115	; 0x73
90016e7c:	d036      	beq.n	90016eec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
90016e7e:	d807      	bhi.n	90016e90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
90016e80:	2b6f      	cmp	r3, #111	; 0x6f
90016e82:	d1da      	bne.n	90016e3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90016e84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90016e86:	1d25      	adds	r5, r4, #4
90016e88:	2308      	movs	r3, #8
90016e8a:	eba8 0202 	sub.w	r2, r8, r2
90016e8e:	e049      	b.n	90016f24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
90016e90:	2b75      	cmp	r3, #117	; 0x75
90016e92:	d042      	beq.n	90016f1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
90016e94:	2b78      	cmp	r3, #120	; 0x78
90016e96:	d1d0      	bne.n	90016e3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
90016e98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90016e9a:	1d25      	adds	r5, r4, #4
90016e9c:	2310      	movs	r3, #16
90016e9e:	eba8 0202 	sub.w	r2, r8, r2
90016ea2:	e03f      	b.n	90016f24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
90016ea4:	6823      	ldr	r3, [r4, #0]
90016ea6:	1d25      	adds	r5, r4, #4
90016ea8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
90016eac:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
90016eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016eb2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
90016eb6:	2b00      	cmp	r3, #0
90016eb8:	d051      	beq.n	90016f5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
90016eba:	881a      	ldrh	r2, [r3, #0]
90016ebc:	a80d      	add	r0, sp, #52	; 0x34
90016ebe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
90016ec2:	462c      	mov	r4, r5
90016ec4:	9005      	str	r0, [sp, #20]
90016ec6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
90016eca:	9004      	str	r0, [sp, #16]
90016ecc:	980e      	ldr	r0, [sp, #56]	; 0x38
90016ece:	9003      	str	r0, [sp, #12]
90016ed0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
90016ed4:	9002      	str	r0, [sp, #8]
90016ed6:	980f      	ldr	r0, [sp, #60]	; 0x3c
90016ed8:	9001      	str	r0, [sp, #4]
90016eda:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
90016ede:	e9cd 8706 	strd	r8, r7, [sp, #24]
90016ee2:	9000      	str	r0, [sp, #0]
90016ee4:	a810      	add	r0, sp, #64	; 0x40
90016ee6:	f7ff fd49 	bl	9001697c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
90016eea:	e7b7      	b.n	90016e5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
90016eec:	1d25      	adds	r5, r4, #4
90016eee:	6823      	ldr	r3, [r4, #0]
90016ef0:	9310      	str	r3, [sp, #64]	; 0x40
90016ef2:	e7dd      	b.n	90016eb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90016ef4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90016ef6:	230a      	movs	r3, #10
90016ef8:	4649      	mov	r1, r9
90016efa:	6820      	ldr	r0, [r4, #0]
90016efc:	eba8 0202 	sub.w	r2, r8, r2
90016f00:	1d25      	adds	r5, r4, #4
90016f02:	b292      	uxth	r2, r2
90016f04:	f7ff fd08 	bl	90016918 <_ZN8touchgfx7Unicode4itoaElPtti>
90016f08:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90016f0c:	2b2d      	cmp	r3, #45	; 0x2d
90016f0e:	d1cf      	bne.n	90016eb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90016f10:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90016f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
90016f16:	3302      	adds	r3, #2
90016f18:	e7ea      	b.n	90016ef0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
90016f1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90016f1c:	1d25      	adds	r5, r4, #4
90016f1e:	230a      	movs	r3, #10
90016f20:	eba8 0202 	sub.w	r2, r8, r2
90016f24:	b292      	uxth	r2, r2
90016f26:	4649      	mov	r1, r9
90016f28:	6820      	ldr	r0, [r4, #0]
90016f2a:	f7ff fcd7 	bl	900168dc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
90016f2e:	e7bf      	b.n	90016eb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90016f30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90016f32:	2310      	movs	r3, #16
90016f34:	4649      	mov	r1, r9
90016f36:	6820      	ldr	r0, [r4, #0]
90016f38:	eba8 0202 	sub.w	r2, r8, r2
90016f3c:	1d25      	adds	r5, r4, #4
90016f3e:	b292      	uxth	r2, r2
90016f40:	f7ff fccc 	bl	900168dc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
90016f44:	f10d 0242 	add.w	r2, sp, #66	; 0x42
90016f48:	f832 3f02 	ldrh.w	r3, [r2, #2]!
90016f4c:	2b00      	cmp	r3, #0
90016f4e:	d0af      	beq.n	90016eb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90016f50:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
90016f54:	2919      	cmp	r1, #25
90016f56:	d8f7      	bhi.n	90016f48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
90016f58:	3b20      	subs	r3, #32
90016f5a:	8013      	strh	r3, [r2, #0]
90016f5c:	e7f4      	b.n	90016f48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
90016f5e:	9a08      	ldr	r2, [sp, #32]
90016f60:	2a00      	cmp	r2, #0
90016f62:	d0ab      	beq.n	90016ebc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
90016f64:	7812      	ldrb	r2, [r2, #0]
90016f66:	e7a9      	b.n	90016ebc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
90016f68:	2d00      	cmp	r5, #0
90016f6a:	f43f af48 	beq.w	90016dfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
90016f6e:	782d      	ldrb	r5, [r5, #0]
90016f70:	e745      	b.n	90016dfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

90016f72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
90016f72:	b507      	push	{r0, r1, r2, lr}
90016f74:	9300      	str	r3, [sp, #0]
90016f76:	4613      	mov	r3, r2
90016f78:	2200      	movs	r2, #0
90016f7a:	f7ff fe92 	bl	90016ca2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
90016f7e:	b003      	add	sp, #12
90016f80:	f85d fb04 	ldr.w	pc, [sp], #4

90016f84 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
90016f84:	b40c      	push	{r2, r3}
90016f86:	b507      	push	{r0, r1, r2, lr}
90016f88:	ab04      	add	r3, sp, #16
90016f8a:	f853 2b04 	ldr.w	r2, [r3], #4
90016f8e:	9301      	str	r3, [sp, #4]
90016f90:	f7ff ffef 	bl	90016f72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
90016f94:	b003      	add	sp, #12
90016f96:	f85d eb04 	ldr.w	lr, [sp], #4
90016f9a:	b002      	add	sp, #8
90016f9c:	4770      	bx	lr
	...

90016fa0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
90016fa0:	4b01      	ldr	r3, [pc, #4]	; (90016fa8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
90016fa2:	6018      	str	r0, [r3, #0]
90016fa4:	4770      	bx	lr
90016fa6:	bf00      	nop
90016fa8:	240262cc 	.word	0x240262cc

90016fac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
90016fac:	4b06      	ldr	r3, [pc, #24]	; (90016fc8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
90016fae:	881a      	ldrh	r2, [r3, #0]
90016fb0:	4282      	cmp	r2, r0
90016fb2:	d807      	bhi.n	90016fc4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
90016fb4:	4b05      	ldr	r3, [pc, #20]	; (90016fcc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
90016fb6:	881b      	ldrh	r3, [r3, #0]
90016fb8:	4413      	add	r3, r2
90016fba:	4298      	cmp	r0, r3
90016fbc:	bfac      	ite	ge
90016fbe:	2000      	movge	r0, #0
90016fc0:	2001      	movlt	r0, #1
90016fc2:	4770      	bx	lr
90016fc4:	2000      	movs	r0, #0
90016fc6:	4770      	bx	lr
90016fc8:	240262ec 	.word	0x240262ec
90016fcc:	240262f0 	.word	0x240262f0

90016fd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
90016fd0:	b508      	push	{r3, lr}
90016fd2:	4601      	mov	r1, r0
90016fd4:	f7ff ffea 	bl	90016fac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
90016fd8:	b118      	cbz	r0, 90016fe2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
90016fda:	4b02      	ldr	r3, [pc, #8]	; (90016fe4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
90016fdc:	681b      	ldr	r3, [r3, #0]
90016fde:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
90016fe2:	bd08      	pop	{r3, pc}
90016fe4:	240262d0 	.word	0x240262d0

90016fe8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
90016fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
90016fea:	4c24      	ldr	r4, [pc, #144]	; (9001707c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
90016fec:	6823      	ldr	r3, [r4, #0]
90016fee:	2b00      	cmp	r3, #0
90016ff0:	d042      	beq.n	90017078 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
90016ff2:	4a23      	ldr	r2, [pc, #140]	; (90017080 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
90016ff4:	4d23      	ldr	r5, [pc, #140]	; (90017084 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
90016ff6:	8811      	ldrh	r1, [r2, #0]
90016ff8:	f8b5 c000 	ldrh.w	ip, [r5]
90016ffc:	4822      	ldr	r0, [pc, #136]	; (90017088 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
90016ffe:	4461      	add	r1, ip
90017000:	1c4a      	adds	r2, r1, #1
90017002:	008f      	lsls	r7, r1, #2
90017004:	f022 0201 	bic.w	r2, r2, #1
90017008:	19de      	adds	r6, r3, r7
9001700a:	0412      	lsls	r2, r2, #16
9001700c:	6006      	str	r6, [r0, #0]
9001700e:	4e1f      	ldr	r6, [pc, #124]	; (9001708c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
90017010:	0c12      	lsrs	r2, r2, #16
90017012:	eb07 0742 	add.w	r7, r7, r2, lsl #1
90017016:	19da      	adds	r2, r3, r7
90017018:	6032      	str	r2, [r6, #0]
9001701a:	220e      	movs	r2, #14
9001701c:	fb02 f20c 	mul.w	r2, r2, ip
90017020:	3203      	adds	r2, #3
90017022:	f022 0203 	bic.w	r2, r2, #3
90017026:	443a      	add	r2, r7
90017028:	4f19      	ldr	r7, [pc, #100]	; (90017090 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
9001702a:	4413      	add	r3, r2
9001702c:	603b      	str	r3, [r7, #0]
9001702e:	2300      	movs	r3, #0
90017030:	4f18      	ldr	r7, [pc, #96]	; (90017094 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
90017032:	469c      	mov	ip, r3
90017034:	803b      	strh	r3, [r7, #0]
90017036:	4f18      	ldr	r7, [pc, #96]	; (90017098 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
90017038:	683f      	ldr	r7, [r7, #0]
9001703a:	1aba      	subs	r2, r7, r2
9001703c:	4f17      	ldr	r7, [pc, #92]	; (9001709c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
9001703e:	603a      	str	r2, [r7, #0]
90017040:	f64f 77ff 	movw	r7, #65535	; 0xffff
90017044:	4a16      	ldr	r2, [pc, #88]	; (900170a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
90017046:	8013      	strh	r3, [r2, #0]
90017048:	428b      	cmp	r3, r1
9001704a:	d10d      	bne.n	90017068 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
9001704c:	882d      	ldrh	r5, [r5, #0]
9001704e:	2300      	movs	r3, #0
90017050:	6830      	ldr	r0, [r6, #0]
90017052:	240e      	movs	r4, #14
90017054:	429d      	cmp	r5, r3
90017056:	d90f      	bls.n	90017078 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
90017058:	fb04 0203 	mla	r2, r4, r3, r0
9001705c:	3301      	adds	r3, #1
9001705e:	7b11      	ldrb	r1, [r2, #12]
90017060:	f36f 1145 	bfc	r1, #5, #1
90017064:	7311      	strb	r1, [r2, #12]
90017066:	e7f5      	b.n	90017054 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
90017068:	6822      	ldr	r2, [r4, #0]
9001706a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
9001706e:	6802      	ldr	r2, [r0, #0]
90017070:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
90017074:	3301      	adds	r3, #1
90017076:	e7e7      	b.n	90017048 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
90017078:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001707a:	bf00      	nop
9001707c:	240262d0 	.word	0x240262d0
90017080:	240262ec 	.word	0x240262ec
90017084:	240262f0 	.word	0x240262f0
90017088:	240262e4 	.word	0x240262e4
9001708c:	240262d4 	.word	0x240262d4
90017090:	240262dc 	.word	0x240262dc
90017094:	240262ee 	.word	0x240262ee
90017098:	240262d8 	.word	0x240262d8
9001709c:	240262e8 	.word	0x240262e8
900170a0:	240262e0 	.word	0x240262e0

900170a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
900170a4:	4b06      	ldr	r3, [pc, #24]	; (900170c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
900170a6:	681b      	ldr	r3, [r3, #0]
900170a8:	b943      	cbnz	r3, 900170bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
900170aa:	b139      	cbz	r1, 900170bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
900170ac:	4b05      	ldr	r3, [pc, #20]	; (900170c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
900170ae:	801a      	strh	r2, [r3, #0]
900170b0:	4b05      	ldr	r3, [pc, #20]	; (900170c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
900170b2:	6019      	str	r1, [r3, #0]
900170b4:	4b05      	ldr	r3, [pc, #20]	; (900170cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
900170b6:	6018      	str	r0, [r3, #0]
900170b8:	f7ff bf96 	b.w	90016fe8 <_ZN8touchgfx6Bitmap10clearCacheEv>
900170bc:	4770      	bx	lr
900170be:	bf00      	nop
900170c0:	240262dc 	.word	0x240262dc
900170c4:	240262f0 	.word	0x240262f0
900170c8:	240262d8 	.word	0x240262d8
900170cc:	240262d0 	.word	0x240262d0

900170d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
900170d0:	b470      	push	{r4, r5, r6}
900170d2:	4c07      	ldr	r4, [pc, #28]	; (900170f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
900170d4:	4605      	mov	r5, r0
900170d6:	4610      	mov	r0, r2
900170d8:	9a03      	ldr	r2, [sp, #12]
900170da:	6826      	ldr	r6, [r4, #0]
900170dc:	b936      	cbnz	r6, 900170ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
900170de:	6025      	str	r5, [r4, #0]
900170e0:	4c04      	ldr	r4, [pc, #16]	; (900170f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
900170e2:	8021      	strh	r1, [r4, #0]
900170e4:	4619      	mov	r1, r3
900170e6:	bc70      	pop	{r4, r5, r6}
900170e8:	f7ff bfdc 	b.w	900170a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
900170ec:	bc70      	pop	{r4, r5, r6}
900170ee:	4770      	bx	lr
900170f0:	240262f4 	.word	0x240262f4
900170f4:	240262ec 	.word	0x240262ec

900170f8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
900170f8:	4a12      	ldr	r2, [pc, #72]	; (90017144 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
900170fa:	8803      	ldrh	r3, [r0, #0]
900170fc:	8812      	ldrh	r2, [r2, #0]
900170fe:	4293      	cmp	r3, r2
90017100:	d207      	bcs.n	90017112 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
90017102:	4a11      	ldr	r2, [pc, #68]	; (90017148 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
90017104:	2114      	movs	r1, #20
90017106:	6812      	ldr	r2, [r2, #0]
90017108:	fb01 2303 	mla	r3, r1, r3, r2
9001710c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
90017110:	4770      	bx	lr
90017112:	490e      	ldr	r1, [pc, #56]	; (9001714c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
90017114:	8809      	ldrh	r1, [r1, #0]
90017116:	4411      	add	r1, r2
90017118:	428b      	cmp	r3, r1
9001711a:	da04      	bge.n	90017126 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
9001711c:	1a9b      	subs	r3, r3, r2
9001711e:	4a0c      	ldr	r2, [pc, #48]	; (90017150 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
90017120:	210e      	movs	r1, #14
90017122:	6812      	ldr	r2, [r2, #0]
90017124:	e7f0      	b.n	90017108 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
90017126:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001712a:	4293      	cmp	r3, r2
9001712c:	d108      	bne.n	90017140 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
9001712e:	4b09      	ldr	r3, [pc, #36]	; (90017154 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
90017130:	781b      	ldrb	r3, [r3, #0]
90017132:	b91b      	cbnz	r3, 9001713c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
90017134:	4b08      	ldr	r3, [pc, #32]	; (90017158 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
90017136:	f9b3 0000 	ldrsh.w	r0, [r3]
9001713a:	4770      	bx	lr
9001713c:	4b07      	ldr	r3, [pc, #28]	; (9001715c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
9001713e:	e7fa      	b.n	90017136 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
90017140:	2000      	movs	r0, #0
90017142:	4770      	bx	lr
90017144:	240262ec 	.word	0x240262ec
90017148:	240262f4 	.word	0x240262f4
9001714c:	240262f0 	.word	0x240262f0
90017150:	240262d4 	.word	0x240262d4
90017154:	24026264 	.word	0x24026264
90017158:	24026266 	.word	0x24026266
9001715c:	24026268 	.word	0x24026268

90017160 <_ZNK8touchgfx6Bitmap9getHeightEv>:
90017160:	4a12      	ldr	r2, [pc, #72]	; (900171ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
90017162:	8803      	ldrh	r3, [r0, #0]
90017164:	8812      	ldrh	r2, [r2, #0]
90017166:	4293      	cmp	r3, r2
90017168:	d207      	bcs.n	9001717a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
9001716a:	4a11      	ldr	r2, [pc, #68]	; (900171b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
9001716c:	2114      	movs	r1, #20
9001716e:	6812      	ldr	r2, [r2, #0]
90017170:	fb01 2303 	mla	r3, r1, r3, r2
90017174:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
90017178:	4770      	bx	lr
9001717a:	490e      	ldr	r1, [pc, #56]	; (900171b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
9001717c:	8809      	ldrh	r1, [r1, #0]
9001717e:	4411      	add	r1, r2
90017180:	428b      	cmp	r3, r1
90017182:	da04      	bge.n	9001718e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
90017184:	1a9b      	subs	r3, r3, r2
90017186:	4a0c      	ldr	r2, [pc, #48]	; (900171b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
90017188:	210e      	movs	r1, #14
9001718a:	6812      	ldr	r2, [r2, #0]
9001718c:	e7f0      	b.n	90017170 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
9001718e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017192:	4293      	cmp	r3, r2
90017194:	d108      	bne.n	900171a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
90017196:	4b09      	ldr	r3, [pc, #36]	; (900171bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
90017198:	781b      	ldrb	r3, [r3, #0]
9001719a:	b91b      	cbnz	r3, 900171a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
9001719c:	4b08      	ldr	r3, [pc, #32]	; (900171c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
9001719e:	f9b3 0000 	ldrsh.w	r0, [r3]
900171a2:	4770      	bx	lr
900171a4:	4b07      	ldr	r3, [pc, #28]	; (900171c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
900171a6:	e7fa      	b.n	9001719e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
900171a8:	2000      	movs	r0, #0
900171aa:	4770      	bx	lr
900171ac:	240262ec 	.word	0x240262ec
900171b0:	240262f4 	.word	0x240262f4
900171b4:	240262f0 	.word	0x240262f0
900171b8:	240262d4 	.word	0x240262d4
900171bc:	24026264 	.word	0x24026264
900171c0:	24026268 	.word	0x24026268
900171c4:	24026266 	.word	0x24026266

900171c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
900171c8:	4a1f      	ldr	r2, [pc, #124]	; (90017248 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
900171ca:	b510      	push	{r4, lr}
900171cc:	880b      	ldrh	r3, [r1, #0]
900171ce:	8812      	ldrh	r2, [r2, #0]
900171d0:	4293      	cmp	r3, r2
900171d2:	d213      	bcs.n	900171fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
900171d4:	4a1d      	ldr	r2, [pc, #116]	; (9001724c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
900171d6:	2114      	movs	r1, #20
900171d8:	6812      	ldr	r2, [r2, #0]
900171da:	fb01 2303 	mla	r3, r1, r3, r2
900171de:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
900171e2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
900171e6:	8a1a      	ldrh	r2, [r3, #16]
900171e8:	8a5b      	ldrh	r3, [r3, #18]
900171ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
900171ee:	8004      	strh	r4, [r0, #0]
900171f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
900171f4:	8041      	strh	r1, [r0, #2]
900171f6:	8082      	strh	r2, [r0, #4]
900171f8:	80c3      	strh	r3, [r0, #6]
900171fa:	e00e      	b.n	9001721a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
900171fc:	4914      	ldr	r1, [pc, #80]	; (90017250 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
900171fe:	8809      	ldrh	r1, [r1, #0]
90017200:	4411      	add	r1, r2
90017202:	428b      	cmp	r3, r1
90017204:	da0a      	bge.n	9001721c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
90017206:	1a9b      	subs	r3, r3, r2
90017208:	4a12      	ldr	r2, [pc, #72]	; (90017254 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
9001720a:	210e      	movs	r1, #14
9001720c:	6812      	ldr	r2, [r2, #0]
9001720e:	fb01 2303 	mla	r3, r1, r3, r2
90017212:	681a      	ldr	r2, [r3, #0]
90017214:	6002      	str	r2, [r0, #0]
90017216:	685a      	ldr	r2, [r3, #4]
90017218:	6042      	str	r2, [r0, #4]
9001721a:	bd10      	pop	{r4, pc}
9001721c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017220:	4293      	cmp	r3, r2
90017222:	d10b      	bne.n	9001723c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
90017224:	4b0c      	ldr	r3, [pc, #48]	; (90017258 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
90017226:	f9b3 1000 	ldrsh.w	r1, [r3]
9001722a:	4b0c      	ldr	r3, [pc, #48]	; (9001725c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
9001722c:	8081      	strh	r1, [r0, #4]
9001722e:	f9b3 2000 	ldrsh.w	r2, [r3]
90017232:	2300      	movs	r3, #0
90017234:	80c2      	strh	r2, [r0, #6]
90017236:	8003      	strh	r3, [r0, #0]
90017238:	8043      	strh	r3, [r0, #2]
9001723a:	e7ee      	b.n	9001721a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
9001723c:	2300      	movs	r3, #0
9001723e:	8003      	strh	r3, [r0, #0]
90017240:	8043      	strh	r3, [r0, #2]
90017242:	8083      	strh	r3, [r0, #4]
90017244:	e7d8      	b.n	900171f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
90017246:	bf00      	nop
90017248:	240262ec 	.word	0x240262ec
9001724c:	240262f4 	.word	0x240262f4
90017250:	240262f0 	.word	0x240262f0
90017254:	240262d4 	.word	0x240262d4
90017258:	24026260 	.word	0x24026260
9001725c:	24026262 	.word	0x24026262

90017260 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
90017260:	4a17      	ldr	r2, [pc, #92]	; (900172c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
90017262:	8803      	ldrh	r3, [r0, #0]
90017264:	8812      	ldrh	r2, [r2, #0]
90017266:	4293      	cmp	r3, r2
90017268:	d213      	bcs.n	90017292 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
9001726a:	4a16      	ldr	r2, [pc, #88]	; (900172c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
9001726c:	2114      	movs	r1, #20
9001726e:	6812      	ldr	r2, [r2, #0]
90017270:	fb01 2303 	mla	r3, r1, r3, r2
90017274:	8a1a      	ldrh	r2, [r3, #16]
90017276:	8919      	ldrh	r1, [r3, #8]
90017278:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001727c:	428a      	cmp	r2, r1
9001727e:	db1d      	blt.n	900172bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
90017280:	8a58      	ldrh	r0, [r3, #18]
90017282:	f3c0 000c 	ubfx	r0, r0, #0, #13
90017286:	895b      	ldrh	r3, [r3, #10]
90017288:	4298      	cmp	r0, r3
9001728a:	bfac      	ite	ge
9001728c:	2000      	movge	r0, #0
9001728e:	2001      	movlt	r0, #1
90017290:	4770      	bx	lr
90017292:	490d      	ldr	r1, [pc, #52]	; (900172c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
90017294:	8809      	ldrh	r1, [r1, #0]
90017296:	4411      	add	r1, r2
90017298:	428b      	cmp	r3, r1
9001729a:	da0d      	bge.n	900172b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
9001729c:	1a9b      	subs	r3, r3, r2
9001729e:	4a0b      	ldr	r2, [pc, #44]	; (900172cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
900172a0:	210e      	movs	r1, #14
900172a2:	6812      	ldr	r2, [r2, #0]
900172a4:	fb01 2303 	mla	r3, r1, r3, r2
900172a8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
900172ac:	891a      	ldrh	r2, [r3, #8]
900172ae:	4291      	cmp	r1, r2
900172b0:	db04      	blt.n	900172bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
900172b2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
900172b6:	e7e6      	b.n	90017286 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
900172b8:	2000      	movs	r0, #0
900172ba:	4770      	bx	lr
900172bc:	2001      	movs	r0, #1
900172be:	4770      	bx	lr
900172c0:	240262ec 	.word	0x240262ec
900172c4:	240262f4 	.word	0x240262f4
900172c8:	240262f0 	.word	0x240262f0
900172cc:	240262d4 	.word	0x240262d4

900172d0 <_ZNK8touchgfx6Bitmap7getDataEv>:
900172d0:	4a12      	ldr	r2, [pc, #72]	; (9001731c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
900172d2:	8803      	ldrh	r3, [r0, #0]
900172d4:	8811      	ldrh	r1, [r2, #0]
900172d6:	428b      	cmp	r3, r1
900172d8:	d20b      	bcs.n	900172f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
900172da:	4a11      	ldr	r2, [pc, #68]	; (90017320 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
900172dc:	6812      	ldr	r2, [r2, #0]
900172de:	b112      	cbz	r2, 900172e6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
900172e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
900172e4:	b9c0      	cbnz	r0, 90017318 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
900172e6:	4a0f      	ldr	r2, [pc, #60]	; (90017324 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
900172e8:	6811      	ldr	r1, [r2, #0]
900172ea:	2214      	movs	r2, #20
900172ec:	4353      	muls	r3, r2
900172ee:	58c8      	ldr	r0, [r1, r3]
900172f0:	4770      	bx	lr
900172f2:	4a0d      	ldr	r2, [pc, #52]	; (90017328 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
900172f4:	8812      	ldrh	r2, [r2, #0]
900172f6:	440a      	add	r2, r1
900172f8:	4293      	cmp	r3, r2
900172fa:	da04      	bge.n	90017306 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
900172fc:	4a08      	ldr	r2, [pc, #32]	; (90017320 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
900172fe:	6812      	ldr	r2, [r2, #0]
90017300:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90017304:	4770      	bx	lr
90017306:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001730a:	4293      	cmp	r3, r2
9001730c:	d103      	bne.n	90017316 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
9001730e:	4b07      	ldr	r3, [pc, #28]	; (9001732c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
90017310:	681b      	ldr	r3, [r3, #0]
90017312:	6c58      	ldr	r0, [r3, #68]	; 0x44
90017314:	4770      	bx	lr
90017316:	2000      	movs	r0, #0
90017318:	4770      	bx	lr
9001731a:	bf00      	nop
9001731c:	240262ec 	.word	0x240262ec
90017320:	240262d0 	.word	0x240262d0
90017324:	240262f4 	.word	0x240262f4
90017328:	240262f0 	.word	0x240262f0
9001732c:	2402626c 	.word	0x2402626c

90017330 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
90017330:	4b24      	ldr	r3, [pc, #144]	; (900173c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
90017332:	8802      	ldrh	r2, [r0, #0]
90017334:	8818      	ldrh	r0, [r3, #0]
90017336:	4282      	cmp	r2, r0
90017338:	d221      	bcs.n	9001737e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
9001733a:	4b23      	ldr	r3, [pc, #140]	; (900173c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
9001733c:	6819      	ldr	r1, [r3, #0]
9001733e:	2314      	movs	r3, #20
90017340:	fb03 1302 	mla	r3, r3, r2, r1
90017344:	6858      	ldr	r0, [r3, #4]
90017346:	2800      	cmp	r0, #0
90017348:	d03a      	beq.n	900173c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001734a:	4920      	ldr	r1, [pc, #128]	; (900173cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001734c:	6809      	ldr	r1, [r1, #0]
9001734e:	2900      	cmp	r1, #0
90017350:	d036      	beq.n	900173c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90017352:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
90017356:	2900      	cmp	r1, #0
90017358:	d032      	beq.n	900173c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001735a:	891a      	ldrh	r2, [r3, #8]
9001735c:	8958      	ldrh	r0, [r3, #10]
9001735e:	4350      	muls	r0, r2
90017360:	7c5a      	ldrb	r2, [r3, #17]
90017362:	7cdb      	ldrb	r3, [r3, #19]
90017364:	0952      	lsrs	r2, r2, #5
90017366:	f3c3 1342 	ubfx	r3, r3, #5, #3
9001736a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9001736e:	2b0b      	cmp	r3, #11
90017370:	bf18      	it	ne
90017372:	0040      	lslne	r0, r0, #1
90017374:	3003      	adds	r0, #3
90017376:	f020 0003 	bic.w	r0, r0, #3
9001737a:	4408      	add	r0, r1
9001737c:	4770      	bx	lr
9001737e:	4b14      	ldr	r3, [pc, #80]	; (900173d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
90017380:	881b      	ldrh	r3, [r3, #0]
90017382:	4403      	add	r3, r0
90017384:	429a      	cmp	r2, r3
90017386:	da1a      	bge.n	900173be <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
90017388:	4b12      	ldr	r3, [pc, #72]	; (900173d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
9001738a:	1a10      	subs	r0, r2, r0
9001738c:	210e      	movs	r1, #14
9001738e:	681b      	ldr	r3, [r3, #0]
90017390:	fb01 3000 	mla	r0, r1, r0, r3
90017394:	7b03      	ldrb	r3, [r0, #12]
90017396:	f003 031f 	and.w	r3, r3, #31
9001739a:	2b0b      	cmp	r3, #11
9001739c:	d10b      	bne.n	900173b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
9001739e:	8903      	ldrh	r3, [r0, #8]
900173a0:	8940      	ldrh	r0, [r0, #10]
900173a2:	4358      	muls	r0, r3
900173a4:	4b09      	ldr	r3, [pc, #36]	; (900173cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
900173a6:	3003      	adds	r0, #3
900173a8:	6819      	ldr	r1, [r3, #0]
900173aa:	f020 0303 	bic.w	r3, r0, #3
900173ae:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
900173b2:	4418      	add	r0, r3
900173b4:	4770      	bx	lr
900173b6:	2b0d      	cmp	r3, #13
900173b8:	d101      	bne.n	900173be <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
900173ba:	300d      	adds	r0, #13
900173bc:	4770      	bx	lr
900173be:	2000      	movs	r0, #0
900173c0:	4770      	bx	lr
900173c2:	bf00      	nop
900173c4:	240262ec 	.word	0x240262ec
900173c8:	240262f4 	.word	0x240262f4
900173cc:	240262d0 	.word	0x240262d0
900173d0:	240262f0 	.word	0x240262f0
900173d4:	240262d4 	.word	0x240262d4

900173d8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
900173d8:	4a17      	ldr	r2, [pc, #92]	; (90017438 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
900173da:	b510      	push	{r4, lr}
900173dc:	8803      	ldrh	r3, [r0, #0]
900173de:	8812      	ldrh	r2, [r2, #0]
900173e0:	4293      	cmp	r3, r2
900173e2:	d20c      	bcs.n	900173fe <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
900173e4:	4a15      	ldr	r2, [pc, #84]	; (9001743c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
900173e6:	2114      	movs	r1, #20
900173e8:	6812      	ldr	r2, [r2, #0]
900173ea:	fb01 2303 	mla	r3, r1, r3, r2
900173ee:	7c58      	ldrb	r0, [r3, #17]
900173f0:	0942      	lsrs	r2, r0, #5
900173f2:	7cd8      	ldrb	r0, [r3, #19]
900173f4:	f3c0 1042 	ubfx	r0, r0, #5, #3
900173f8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
900173fc:	bd10      	pop	{r4, pc}
900173fe:	4910      	ldr	r1, [pc, #64]	; (90017440 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
90017400:	8809      	ldrh	r1, [r1, #0]
90017402:	4411      	add	r1, r2
90017404:	428b      	cmp	r3, r1
90017406:	da09      	bge.n	9001741c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
90017408:	1a9b      	subs	r3, r3, r2
9001740a:	4a0e      	ldr	r2, [pc, #56]	; (90017444 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
9001740c:	210e      	movs	r1, #14
9001740e:	6812      	ldr	r2, [r2, #0]
90017410:	fb01 2303 	mla	r3, r1, r3, r2
90017414:	7b18      	ldrb	r0, [r3, #12]
90017416:	f000 001f 	and.w	r0, r0, #31
9001741a:	e7ef      	b.n	900173fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001741c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017420:	4293      	cmp	r3, r2
90017422:	d106      	bne.n	90017432 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
90017424:	f7fa fa20 	bl	90011868 <_ZN8touchgfx3HAL3lcdEv>
90017428:	6803      	ldr	r3, [r0, #0]
9001742a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90017430:	4718      	bx	r3
90017432:	2000      	movs	r0, #0
90017434:	e7e2      	b.n	900173fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
90017436:	bf00      	nop
90017438:	240262ec 	.word	0x240262ec
9001743c:	240262f4 	.word	0x240262f4
90017440:	240262f0 	.word	0x240262f0
90017444:	240262d4 	.word	0x240262d4

90017448 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
90017448:	2010      	movs	r0, #16
9001744a:	4770      	bx	lr

9001744c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
9001744c:	4b02      	ldr	r3, [pc, #8]	; (90017458 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
9001744e:	8818      	ldrh	r0, [r3, #0]
90017450:	0040      	lsls	r0, r0, #1
90017452:	b280      	uxth	r0, r0
90017454:	4770      	bx	lr
90017456:	bf00      	nop
90017458:	24026266 	.word	0x24026266

9001745c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
9001745c:	2bff      	cmp	r3, #255	; 0xff
9001745e:	d050      	beq.n	90017502 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
90017460:	2a0b      	cmp	r2, #11
90017462:	d04a      	beq.n	900174fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
90017464:	d80e      	bhi.n	90017484 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
90017466:	2a03      	cmp	r2, #3
90017468:	d03f      	beq.n	900174ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
9001746a:	d804      	bhi.n	90017476 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
9001746c:	2a01      	cmp	r2, #1
9001746e:	d03e      	beq.n	900174ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
90017470:	d93f      	bls.n	900174f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
90017472:	6b80      	ldr	r0, [r0, #56]	; 0x38
90017474:	4770      	bx	lr
90017476:	2a09      	cmp	r2, #9
90017478:	d03f      	beq.n	900174fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001747a:	d83c      	bhi.n	900174f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001747c:	2a08      	cmp	r2, #8
9001747e:	d03a      	beq.n	900174f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
90017480:	2000      	movs	r0, #0
90017482:	4770      	bx	lr
90017484:	2a2f      	cmp	r2, #47	; 0x2f
90017486:	d024      	beq.n	900174d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
90017488:	d80d      	bhi.n	900174a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
9001748a:	2a2d      	cmp	r2, #45	; 0x2d
9001748c:	d014      	beq.n	900174b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
9001748e:	d826      	bhi.n	900174de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
90017490:	2a2c      	cmp	r2, #44	; 0x2c
90017492:	d1f5      	bne.n	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017494:	684b      	ldr	r3, [r1, #4]
90017496:	781b      	ldrb	r3, [r3, #0]
90017498:	2b01      	cmp	r3, #1
9001749a:	d018      	beq.n	900174ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
9001749c:	d323      	bcc.n	900174e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
9001749e:	2b02      	cmp	r3, #2
900174a0:	d1ee      	bne.n	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900174a2:	6880      	ldr	r0, [r0, #8]
900174a4:	4770      	bx	lr
900174a6:	2a31      	cmp	r2, #49	; 0x31
900174a8:	d004      	beq.n	900174b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
900174aa:	d328      	bcc.n	900174fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
900174ac:	2a32      	cmp	r2, #50	; 0x32
900174ae:	d026      	beq.n	900174fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
900174b0:	2a33      	cmp	r2, #51	; 0x33
900174b2:	d1e5      	bne.n	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900174b4:	6f00      	ldr	r0, [r0, #112]	; 0x70
900174b6:	4770      	bx	lr
900174b8:	684b      	ldr	r3, [r1, #4]
900174ba:	781b      	ldrb	r3, [r3, #0]
900174bc:	2b01      	cmp	r3, #1
900174be:	d004      	beq.n	900174ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
900174c0:	d30b      	bcc.n	900174da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
900174c2:	2b02      	cmp	r3, #2
900174c4:	d1dc      	bne.n	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900174c6:	6900      	ldr	r0, [r0, #16]
900174c8:	4770      	bx	lr
900174ca:	6a00      	ldr	r0, [r0, #32]
900174cc:	4770      	bx	lr
900174ce:	6980      	ldr	r0, [r0, #24]
900174d0:	4770      	bx	lr
900174d2:	684b      	ldr	r3, [r1, #4]
900174d4:	781b      	ldrb	r3, [r3, #0]
900174d6:	2b00      	cmp	r3, #0
900174d8:	d1d2      	bne.n	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900174da:	6b00      	ldr	r0, [r0, #48]	; 0x30
900174dc:	4770      	bx	lr
900174de:	684b      	ldr	r3, [r1, #4]
900174e0:	781b      	ldrb	r3, [r3, #0]
900174e2:	2b00      	cmp	r3, #0
900174e4:	d1cc      	bne.n	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
900174e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
900174e8:	4770      	bx	lr
900174ea:	6c80      	ldr	r0, [r0, #72]	; 0x48
900174ec:	4770      	bx	lr
900174ee:	6d00      	ldr	r0, [r0, #80]	; 0x50
900174f0:	4770      	bx	lr
900174f2:	6c00      	ldr	r0, [r0, #64]	; 0x40
900174f4:	4770      	bx	lr
900174f6:	6d80      	ldr	r0, [r0, #88]	; 0x58
900174f8:	4770      	bx	lr
900174fa:	6e00      	ldr	r0, [r0, #96]	; 0x60
900174fc:	4770      	bx	lr
900174fe:	6e80      	ldr	r0, [r0, #104]	; 0x68
90017500:	4770      	bx	lr
90017502:	2a0b      	cmp	r2, #11
90017504:	d049      	beq.n	9001759a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
90017506:	d80e      	bhi.n	90017526 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
90017508:	2a03      	cmp	r2, #3
9001750a:	d040      	beq.n	9001758e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
9001750c:	d804      	bhi.n	90017518 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
9001750e:	2a01      	cmp	r2, #1
90017510:	d03f      	beq.n	90017592 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
90017512:	d940      	bls.n	90017596 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
90017514:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
90017516:	4770      	bx	lr
90017518:	2a09      	cmp	r2, #9
9001751a:	d03e      	beq.n	9001759a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001751c:	d801      	bhi.n	90017522 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
9001751e:	2a08      	cmp	r2, #8
90017520:	d1ae      	bne.n	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017522:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
90017524:	4770      	bx	lr
90017526:	2a2f      	cmp	r2, #47	; 0x2f
90017528:	d024      	beq.n	90017574 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
9001752a:	d80d      	bhi.n	90017548 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
9001752c:	2a2d      	cmp	r2, #45	; 0x2d
9001752e:	d014      	beq.n	9001755a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
90017530:	d826      	bhi.n	90017580 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
90017532:	2a2c      	cmp	r2, #44	; 0x2c
90017534:	d1a4      	bne.n	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017536:	684b      	ldr	r3, [r1, #4]
90017538:	781b      	ldrb	r3, [r3, #0]
9001753a:	2b01      	cmp	r3, #1
9001753c:	d018      	beq.n	90017570 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
9001753e:	d324      	bcc.n	9001758a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
90017540:	2b02      	cmp	r3, #2
90017542:	d19d      	bne.n	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017544:	68c0      	ldr	r0, [r0, #12]
90017546:	4770      	bx	lr
90017548:	2a31      	cmp	r2, #49	; 0x31
9001754a:	d004      	beq.n	90017556 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
9001754c:	d327      	bcc.n	9001759e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001754e:	2a32      	cmp	r2, #50	; 0x32
90017550:	d025      	beq.n	9001759e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
90017552:	2a33      	cmp	r2, #51	; 0x33
90017554:	d194      	bne.n	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017556:	6f40      	ldr	r0, [r0, #116]	; 0x74
90017558:	4770      	bx	lr
9001755a:	684b      	ldr	r3, [r1, #4]
9001755c:	781b      	ldrb	r3, [r3, #0]
9001755e:	2b01      	cmp	r3, #1
90017560:	d004      	beq.n	9001756c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
90017562:	d30b      	bcc.n	9001757c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
90017564:	2b02      	cmp	r3, #2
90017566:	d18b      	bne.n	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017568:	6940      	ldr	r0, [r0, #20]
9001756a:	4770      	bx	lr
9001756c:	6a40      	ldr	r0, [r0, #36]	; 0x24
9001756e:	4770      	bx	lr
90017570:	69c0      	ldr	r0, [r0, #28]
90017572:	4770      	bx	lr
90017574:	684b      	ldr	r3, [r1, #4]
90017576:	781b      	ldrb	r3, [r3, #0]
90017578:	2b00      	cmp	r3, #0
9001757a:	d181      	bne.n	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001757c:	6b40      	ldr	r0, [r0, #52]	; 0x34
9001757e:	4770      	bx	lr
90017580:	684b      	ldr	r3, [r1, #4]
90017582:	781b      	ldrb	r3, [r3, #0]
90017584:	2b00      	cmp	r3, #0
90017586:	f47f af7b 	bne.w	90017480 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001758a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9001758c:	4770      	bx	lr
9001758e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
90017590:	4770      	bx	lr
90017592:	6d40      	ldr	r0, [r0, #84]	; 0x54
90017594:	4770      	bx	lr
90017596:	6c40      	ldr	r0, [r0, #68]	; 0x44
90017598:	4770      	bx	lr
9001759a:	6e40      	ldr	r0, [r0, #100]	; 0x64
9001759c:	4770      	bx	lr
9001759e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
900175a0:	4770      	bx	lr

900175a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900175a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900175a6:	b087      	sub	sp, #28
900175a8:	9815      	ldr	r0, [sp, #84]	; 0x54
900175aa:	9205      	str	r2, [sp, #20]
900175ac:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900175b0:	9101      	str	r1, [sp, #4]
900175b2:	9202      	str	r2, [sp, #8]
900175b4:	6841      	ldr	r1, [r0, #4]
900175b6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
900175ba:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
900175be:	fb01 2404 	mla	r4, r1, r4, r2
900175c2:	6802      	ldr	r2, [r0, #0]
900175c4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900175c8:	f8de 2000 	ldr.w	r2, [lr]
900175cc:	9203      	str	r2, [sp, #12]
900175ce:	f8de 2004 	ldr.w	r2, [lr, #4]
900175d2:	3204      	adds	r2, #4
900175d4:	9204      	str	r2, [sp, #16]
900175d6:	9a02      	ldr	r2, [sp, #8]
900175d8:	43d6      	mvns	r6, r2
900175da:	b2f6      	uxtb	r6, r6
900175dc:	9a01      	ldr	r2, [sp, #4]
900175de:	2a00      	cmp	r2, #0
900175e0:	dc03      	bgt.n	900175ea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900175e2:	9a05      	ldr	r2, [sp, #20]
900175e4:	2a00      	cmp	r2, #0
900175e6:	f340 8129 	ble.w	9001783c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
900175ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
900175ec:	f9be c008 	ldrsh.w	ip, [lr, #8]
900175f0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900175f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
900175f6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
900175fa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900175fe:	2b00      	cmp	r3, #0
90017600:	dd0e      	ble.n	90017620 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017602:	1408      	asrs	r0, r1, #16
90017604:	d405      	bmi.n	90017612 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017606:	4560      	cmp	r0, ip
90017608:	da03      	bge.n	90017612 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001760a:	1410      	asrs	r0, r2, #16
9001760c:	d401      	bmi.n	90017612 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001760e:	42b8      	cmp	r0, r7
90017610:	db07      	blt.n	90017622 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90017612:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017614:	3b01      	subs	r3, #1
90017616:	3402      	adds	r4, #2
90017618:	4401      	add	r1, r0
9001761a:	9814      	ldr	r0, [sp, #80]	; 0x50
9001761c:	4402      	add	r2, r0
9001761e:	e7ee      	b.n	900175fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
90017620:	d071      	beq.n	90017706 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017622:	1e58      	subs	r0, r3, #1
90017624:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90017626:	fb05 1500 	mla	r5, r5, r0, r1
9001762a:	142d      	asrs	r5, r5, #16
9001762c:	d45f      	bmi.n	900176ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001762e:	4565      	cmp	r5, ip
90017630:	da5d      	bge.n	900176ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90017632:	9d14      	ldr	r5, [sp, #80]	; 0x50
90017634:	fb05 2000 	mla	r0, r5, r0, r2
90017638:	1400      	asrs	r0, r0, #16
9001763a:	d458      	bmi.n	900176ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001763c:	42b8      	cmp	r0, r7
9001763e:	da56      	bge.n	900176ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90017640:	4699      	mov	r9, r3
90017642:	46a2      	mov	sl, r4
90017644:	f8bd b008 	ldrh.w	fp, [sp, #8]
90017648:	f1b9 0f00 	cmp.w	r9, #0
9001764c:	dd57      	ble.n	900176fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
9001764e:	ea4f 4c22 	mov.w	ip, r2, asr #16
90017652:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90017656:	9803      	ldr	r0, [sp, #12]
90017658:	140d      	asrs	r5, r1, #16
9001765a:	f109 39ff 	add.w	r9, r9, #4294967295
9001765e:	fb07 000c 	mla	r0, r7, ip, r0
90017662:	5d40      	ldrb	r0, [r0, r5]
90017664:	9d04      	ldr	r5, [sp, #16]
90017666:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001766a:	f8ba 5000 	ldrh.w	r5, [sl]
9001766e:	ea4f 2c20 	mov.w	ip, r0, asr #8
90017672:	122f      	asrs	r7, r5, #8
90017674:	ea4f 08e5 	mov.w	r8, r5, asr #3
90017678:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001767c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017680:	00ed      	lsls	r5, r5, #3
90017682:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
90017686:	fb17 f706 	smulbb	r7, r7, r6
9001768a:	b2ed      	uxtb	r5, r5
9001768c:	fb18 f806 	smulbb	r8, r8, r6
90017690:	fb0c 7c0b 	mla	ip, ip, fp, r7
90017694:	10c7      	asrs	r7, r0, #3
90017696:	fb15 f506 	smulbb	r5, r5, r6
9001769a:	00c0      	lsls	r0, r0, #3
9001769c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900176a0:	fa1f fc8c 	uxth.w	ip, ip
900176a4:	b2c0      	uxtb	r0, r0
900176a6:	fb07 870b 	mla	r7, r7, fp, r8
900176aa:	fb00 500b 	mla	r0, r0, fp, r5
900176ae:	f10c 0501 	add.w	r5, ip, #1
900176b2:	b2bf      	uxth	r7, r7
900176b4:	b280      	uxth	r0, r0
900176b6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900176ba:	f107 0801 	add.w	r8, r7, #1
900176be:	1c45      	adds	r5, r0, #1
900176c0:	eb08 2817 	add.w	r8, r8, r7, lsr #8
900176c4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900176c8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
900176cc:	9813      	ldr	r0, [sp, #76]	; 0x4c
900176ce:	ea4f 1858 	mov.w	r8, r8, lsr #5
900176d2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
900176d6:	4401      	add	r1, r0
900176d8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
900176dc:	9814      	ldr	r0, [sp, #80]	; 0x50
900176de:	ea45 0c0c 	orr.w	ip, r5, ip
900176e2:	4402      	add	r2, r0
900176e4:	ea4c 0c08 	orr.w	ip, ip, r8
900176e8:	f82a cb02 	strh.w	ip, [sl], #2
900176ec:	e7ac      	b.n	90017648 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
900176ee:	f04f 0800 	mov.w	r8, #0
900176f2:	f8bd a008 	ldrh.w	sl, [sp, #8]
900176f6:	eb03 0008 	add.w	r0, r3, r8
900176fa:	2800      	cmp	r0, #0
900176fc:	dc41      	bgt.n	90017782 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
900176fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017702:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017706:	9b01      	ldr	r3, [sp, #4]
90017708:	2b00      	cmp	r3, #0
9001770a:	f340 8097 	ble.w	9001783c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001770e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90017712:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017714:	ee30 0a04 	vadd.f32	s0, s0, s8
90017718:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001771c:	eef0 6a62 	vmov.f32	s13, s5
90017720:	eec7 7a00 	vdiv.f32	s15, s14, s0
90017724:	ee31 1a05 	vadd.f32	s2, s2, s10
90017728:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001772c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
90017730:	eef0 6a43 	vmov.f32	s13, s6
90017734:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017738:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001773c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017740:	ee61 7a27 	vmul.f32	s15, s2, s15
90017744:	ee77 2a62 	vsub.f32	s5, s14, s5
90017748:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001774c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017750:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017754:	ee12 2a90 	vmov	r2, s5
90017758:	eef0 2a47 	vmov.f32	s5, s14
9001775c:	fb92 f3f3 	sdiv	r3, r2, r3
90017760:	ee13 2a10 	vmov	r2, s6
90017764:	9313      	str	r3, [sp, #76]	; 0x4c
90017766:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017768:	eeb0 3a67 	vmov.f32	s6, s15
9001776c:	fb92 f3f3 	sdiv	r3, r2, r3
90017770:	9314      	str	r3, [sp, #80]	; 0x50
90017772:	9b01      	ldr	r3, [sp, #4]
90017774:	9a05      	ldr	r2, [sp, #20]
90017776:	3b01      	subs	r3, #1
90017778:	9301      	str	r3, [sp, #4]
9001777a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001777c:	bf08      	it	eq
9001777e:	4613      	moveq	r3, r2
90017780:	e72c      	b.n	900175dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90017782:	140f      	asrs	r7, r1, #16
90017784:	d453      	bmi.n	9001782e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90017786:	f8de 5008 	ldr.w	r5, [lr, #8]
9001778a:	42bd      	cmp	r5, r7
9001778c:	dd4f      	ble.n	9001782e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001778e:	ea5f 4c22 	movs.w	ip, r2, asr #16
90017792:	d44c      	bmi.n	9001782e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90017794:	f8de 000c 	ldr.w	r0, [lr, #12]
90017798:	4560      	cmp	r0, ip
9001779a:	dd48      	ble.n	9001782e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001779c:	9803      	ldr	r0, [sp, #12]
9001779e:	b22d      	sxth	r5, r5
900177a0:	fb0c 0505 	mla	r5, ip, r5, r0
900177a4:	5de8      	ldrb	r0, [r5, r7]
900177a6:	9d04      	ldr	r5, [sp, #16]
900177a8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
900177ac:	f06f 0501 	mvn.w	r5, #1
900177b0:	fb05 fb08 	mul.w	fp, r5, r8
900177b4:	ea4f 2c20 	mov.w	ip, r0, asr #8
900177b8:	f834 500b 	ldrh.w	r5, [r4, fp]
900177bc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900177c0:	122f      	asrs	r7, r5, #8
900177c2:	ea4f 09e5 	mov.w	r9, r5, asr #3
900177c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900177ca:	00ed      	lsls	r5, r5, #3
900177cc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
900177d0:	fb17 f706 	smulbb	r7, r7, r6
900177d4:	b2ed      	uxtb	r5, r5
900177d6:	fb19 f906 	smulbb	r9, r9, r6
900177da:	fb0c 7c0a 	mla	ip, ip, sl, r7
900177de:	10c7      	asrs	r7, r0, #3
900177e0:	fb15 f506 	smulbb	r5, r5, r6
900177e4:	00c0      	lsls	r0, r0, #3
900177e6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900177ea:	fa1f fc8c 	uxth.w	ip, ip
900177ee:	b2c0      	uxtb	r0, r0
900177f0:	fb07 970a 	mla	r7, r7, sl, r9
900177f4:	fb00 500a 	mla	r0, r0, sl, r5
900177f8:	f10c 0501 	add.w	r5, ip, #1
900177fc:	b2bf      	uxth	r7, r7
900177fe:	b280      	uxth	r0, r0
90017800:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90017804:	f107 0901 	add.w	r9, r7, #1
90017808:	1c45      	adds	r5, r0, #1
9001780a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001780e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90017812:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90017816:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001781a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001781e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90017822:	ea45 0c0c 	orr.w	ip, r5, ip
90017826:	ea4c 0c09 	orr.w	ip, ip, r9
9001782a:	f824 c00b 	strh.w	ip, [r4, fp]
9001782e:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017830:	f108 38ff 	add.w	r8, r8, #4294967295
90017834:	4401      	add	r1, r0
90017836:	9814      	ldr	r0, [sp, #80]	; 0x50
90017838:	4402      	add	r2, r0
9001783a:	e75c      	b.n	900176f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9001783c:	b007      	add	sp, #28
9001783e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90017842 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017846:	b085      	sub	sp, #20
90017848:	4693      	mov	fp, r2
9001784a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001784e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90017850:	9d16      	ldr	r5, [sp, #88]	; 0x58
90017852:	6870      	ldr	r0, [r6, #4]
90017854:	9100      	str	r1, [sp, #0]
90017856:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001785a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001785e:	fb00 2404 	mla	r4, r0, r4, r2
90017862:	6832      	ldr	r2, [r6, #0]
90017864:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017868:	682a      	ldr	r2, [r5, #0]
9001786a:	9201      	str	r2, [sp, #4]
9001786c:	686a      	ldr	r2, [r5, #4]
9001786e:	3204      	adds	r2, #4
90017870:	9202      	str	r2, [sp, #8]
90017872:	9a00      	ldr	r2, [sp, #0]
90017874:	2a00      	cmp	r2, #0
90017876:	dc03      	bgt.n	90017880 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90017878:	f1bb 0f00 	cmp.w	fp, #0
9001787c:	f340 80a0 	ble.w	900179c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
90017880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90017882:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90017886:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001788a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001788c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90017890:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017894:	2b00      	cmp	r3, #0
90017896:	dd0c      	ble.n	900178b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017898:	1406      	asrs	r6, r0, #16
9001789a:	d405      	bmi.n	900178a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001789c:	454e      	cmp	r6, r9
9001789e:	da03      	bge.n	900178a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900178a0:	1416      	asrs	r6, r2, #16
900178a2:	d401      	bmi.n	900178a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900178a4:	4546      	cmp	r6, r8
900178a6:	db05      	blt.n	900178b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900178a8:	4470      	add	r0, lr
900178aa:	4462      	add	r2, ip
900178ac:	3b01      	subs	r3, #1
900178ae:	3402      	adds	r4, #2
900178b0:	e7f0      	b.n	90017894 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
900178b2:	d00f      	beq.n	900178d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900178b4:	1e5e      	subs	r6, r3, #1
900178b6:	fb0e 0706 	mla	r7, lr, r6, r0
900178ba:	143f      	asrs	r7, r7, #16
900178bc:	d541      	bpl.n	90017942 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
900178be:	eb04 0643 	add.w	r6, r4, r3, lsl #1
900178c2:	4698      	mov	r8, r3
900178c4:	9603      	str	r6, [sp, #12]
900178c6:	f1b8 0f00 	cmp.w	r8, #0
900178ca:	dc59      	bgt.n	90017980 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
900178cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900178d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900178d4:	9b00      	ldr	r3, [sp, #0]
900178d6:	2b00      	cmp	r3, #0
900178d8:	dd72      	ble.n	900179c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
900178da:	ee30 0a04 	vadd.f32	s0, s0, s8
900178de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900178e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
900178e4:	eeb0 6a62 	vmov.f32	s12, s5
900178e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
900178ec:	ee31 1a05 	vadd.f32	s2, s2, s10
900178f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900178f4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
900178f8:	eeb0 6a43 	vmov.f32	s12, s6
900178fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017900:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90017904:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017908:	ee61 7a27 	vmul.f32	s15, s2, s15
9001790c:	ee77 2a62 	vsub.f32	s5, s14, s5
90017910:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017914:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017918:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001791c:	ee12 2a90 	vmov	r2, s5
90017920:	eef0 2a47 	vmov.f32	s5, s14
90017924:	fb92 fef3 	sdiv	lr, r2, r3
90017928:	ee13 2a10 	vmov	r2, s6
9001792c:	eeb0 3a67 	vmov.f32	s6, s15
90017930:	fb92 fcf3 	sdiv	ip, r2, r3
90017934:	9b00      	ldr	r3, [sp, #0]
90017936:	3b01      	subs	r3, #1
90017938:	9300      	str	r3, [sp, #0]
9001793a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001793c:	bf08      	it	eq
9001793e:	465b      	moveq	r3, fp
90017940:	e797      	b.n	90017872 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90017942:	454f      	cmp	r7, r9
90017944:	dabb      	bge.n	900178be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017946:	fb0c 2606 	mla	r6, ip, r6, r2
9001794a:	1436      	asrs	r6, r6, #16
9001794c:	d4b7      	bmi.n	900178be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001794e:	4546      	cmp	r6, r8
90017950:	dab5      	bge.n	900178be <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017952:	461e      	mov	r6, r3
90017954:	46a0      	mov	r8, r4
90017956:	2e00      	cmp	r6, #0
90017958:	ddb8      	ble.n	900178cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001795a:	1417      	asrs	r7, r2, #16
9001795c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90017960:	9901      	ldr	r1, [sp, #4]
90017962:	ea4f 4920 	mov.w	r9, r0, asr #16
90017966:	4462      	add	r2, ip
90017968:	4470      	add	r0, lr
9001796a:	fb0a 1707 	mla	r7, sl, r7, r1
9001796e:	9902      	ldr	r1, [sp, #8]
90017970:	3e01      	subs	r6, #1
90017972:	f817 7009 	ldrb.w	r7, [r7, r9]
90017976:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001797a:	f828 7b02 	strh.w	r7, [r8], #2
9001797e:	e7ea      	b.n	90017956 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
90017980:	ea5f 4920 	movs.w	r9, r0, asr #16
90017984:	d417      	bmi.n	900179b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017986:	68ae      	ldr	r6, [r5, #8]
90017988:	454e      	cmp	r6, r9
9001798a:	dd14      	ble.n	900179b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001798c:	ea5f 4a22 	movs.w	sl, r2, asr #16
90017990:	d411      	bmi.n	900179b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017992:	68ef      	ldr	r7, [r5, #12]
90017994:	4557      	cmp	r7, sl
90017996:	dd0e      	ble.n	900179b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
90017998:	9f01      	ldr	r7, [sp, #4]
9001799a:	b236      	sxth	r6, r6
9001799c:	f06f 0101 	mvn.w	r1, #1
900179a0:	fb0a 7606 	mla	r6, sl, r6, r7
900179a4:	9f02      	ldr	r7, [sp, #8]
900179a6:	f816 6009 	ldrb.w	r6, [r6, r9]
900179aa:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
900179ae:	fb01 f608 	mul.w	r6, r1, r8
900179b2:	9903      	ldr	r1, [sp, #12]
900179b4:	538f      	strh	r7, [r1, r6]
900179b6:	4470      	add	r0, lr
900179b8:	4462      	add	r2, ip
900179ba:	f108 38ff 	add.w	r8, r8, #4294967295
900179be:	e782      	b.n	900178c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
900179c0:	b005      	add	sp, #20
900179c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900179c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900179c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900179ca:	b087      	sub	sp, #28
900179cc:	9c15      	ldr	r4, [sp, #84]	; 0x54
900179ce:	9205      	str	r2, [sp, #20]
900179d0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900179d4:	9102      	str	r1, [sp, #8]
900179d6:	9203      	str	r2, [sp, #12]
900179d8:	6861      	ldr	r1, [r4, #4]
900179da:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
900179de:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
900179e2:	fb01 2000 	mla	r0, r1, r0, r2
900179e6:	6822      	ldr	r2, [r4, #0]
900179e8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
900179ec:	9200      	str	r2, [sp, #0]
900179ee:	f8dc 2000 	ldr.w	r2, [ip]
900179f2:	9204      	str	r2, [sp, #16]
900179f4:	f8dc 2004 	ldr.w	r2, [ip, #4]
900179f8:	3204      	adds	r2, #4
900179fa:	9201      	str	r2, [sp, #4]
900179fc:	9a03      	ldr	r2, [sp, #12]
900179fe:	43d5      	mvns	r5, r2
90017a00:	b2ed      	uxtb	r5, r5
90017a02:	9a02      	ldr	r2, [sp, #8]
90017a04:	2a00      	cmp	r2, #0
90017a06:	dc03      	bgt.n	90017a10 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90017a08:	9a05      	ldr	r2, [sp, #20]
90017a0a:	2a00      	cmp	r2, #0
90017a0c:	f340 812c 	ble.w	90017c68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90017a10:	9a11      	ldr	r2, [sp, #68]	; 0x44
90017a12:	f9bc e008 	ldrsh.w	lr, [ip, #8]
90017a16:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017a1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
90017a1c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
90017a20:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017a24:	2b00      	cmp	r3, #0
90017a26:	dd10      	ble.n	90017a4a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017a28:	140c      	asrs	r4, r1, #16
90017a2a:	d405      	bmi.n	90017a38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017a2c:	4574      	cmp	r4, lr
90017a2e:	da03      	bge.n	90017a38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017a30:	1414      	asrs	r4, r2, #16
90017a32:	d401      	bmi.n	90017a38 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017a34:	42bc      	cmp	r4, r7
90017a36:	db09      	blt.n	90017a4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90017a38:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90017a3a:	3b01      	subs	r3, #1
90017a3c:	9800      	ldr	r0, [sp, #0]
90017a3e:	4421      	add	r1, r4
90017a40:	9c14      	ldr	r4, [sp, #80]	; 0x50
90017a42:	3002      	adds	r0, #2
90017a44:	4422      	add	r2, r4
90017a46:	9000      	str	r0, [sp, #0]
90017a48:	e7ec      	b.n	90017a24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90017a4a:	d071      	beq.n	90017b30 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
90017a4c:	1e5c      	subs	r4, r3, #1
90017a4e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90017a50:	fb06 1604 	mla	r6, r6, r4, r1
90017a54:	1436      	asrs	r6, r6, #16
90017a56:	d45d      	bmi.n	90017b14 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017a58:	4576      	cmp	r6, lr
90017a5a:	da5b      	bge.n	90017b14 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017a5c:	9e14      	ldr	r6, [sp, #80]	; 0x50
90017a5e:	fb06 2404 	mla	r4, r6, r4, r2
90017a62:	1424      	asrs	r4, r4, #16
90017a64:	d456      	bmi.n	90017b14 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017a66:	42bc      	cmp	r4, r7
90017a68:	da54      	bge.n	90017b14 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90017a6a:	4698      	mov	r8, r3
90017a6c:	f8dd 9000 	ldr.w	r9, [sp]
90017a70:	f8bd a00c 	ldrh.w	sl, [sp, #12]
90017a74:	f1b8 0f00 	cmp.w	r8, #0
90017a78:	dd54      	ble.n	90017b24 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
90017a7a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
90017a7e:	1414      	asrs	r4, r2, #16
90017a80:	9804      	ldr	r0, [sp, #16]
90017a82:	140e      	asrs	r6, r1, #16
90017a84:	f108 38ff 	add.w	r8, r8, #4294967295
90017a88:	fb07 0404 	mla	r4, r7, r4, r0
90017a8c:	9801      	ldr	r0, [sp, #4]
90017a8e:	f814 e006 	ldrb.w	lr, [r4, r6]
90017a92:	f8b9 4000 	ldrh.w	r4, [r9]
90017a96:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90017a9a:	1227      	asrs	r7, r4, #8
90017a9c:	eb00 0b0e 	add.w	fp, r0, lr
90017aa0:	f810 e00e 	ldrb.w	lr, [r0, lr]
90017aa4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017aa8:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017aaa:	f89b 6002 	ldrb.w	r6, [fp, #2]
90017aae:	f89b b001 	ldrb.w	fp, [fp, #1]
90017ab2:	4401      	add	r1, r0
90017ab4:	fb16 f60a 	smulbb	r6, r6, sl
90017ab8:	9814      	ldr	r0, [sp, #80]	; 0x50
90017aba:	fb1b fb0a 	smulbb	fp, fp, sl
90017abe:	fb07 6705 	mla	r7, r7, r5, r6
90017ac2:	10e6      	asrs	r6, r4, #3
90017ac4:	00e4      	lsls	r4, r4, #3
90017ac6:	4402      	add	r2, r0
90017ac8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90017acc:	b2bf      	uxth	r7, r7
90017ace:	b2e4      	uxtb	r4, r4
90017ad0:	fb06 b605 	mla	r6, r6, r5, fp
90017ad4:	fb14 f405 	smulbb	r4, r4, r5
90017ad8:	b2b6      	uxth	r6, r6
90017ada:	fb0e 4e0a 	mla	lr, lr, sl, r4
90017ade:	1c7c      	adds	r4, r7, #1
90017ae0:	f106 0b01 	add.w	fp, r6, #1
90017ae4:	fa1f fe8e 	uxth.w	lr, lr
90017ae8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
90017aec:	f10e 0401 	add.w	r4, lr, #1
90017af0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
90017af4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90017af8:	eb04 241e 	add.w	r4, r4, lr, lsr #8
90017afc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90017b00:	f3c4 24c4 	ubfx	r4, r4, #11, #5
90017b04:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90017b08:	4327      	orrs	r7, r4
90017b0a:	ea47 070b 	orr.w	r7, r7, fp
90017b0e:	f829 7b02 	strh.w	r7, [r9], #2
90017b12:	e7af      	b.n	90017a74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
90017b14:	f04f 0e00 	mov.w	lr, #0
90017b18:	f8bd 900c 	ldrh.w	r9, [sp, #12]
90017b1c:	eb03 040e 	add.w	r4, r3, lr
90017b20:	2c00      	cmp	r4, #0
90017b22:	dc43      	bgt.n	90017bac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
90017b24:	9a00      	ldr	r2, [sp, #0]
90017b26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017b2a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90017b2e:	9300      	str	r3, [sp, #0]
90017b30:	9b02      	ldr	r3, [sp, #8]
90017b32:	2b00      	cmp	r3, #0
90017b34:	f340 8098 	ble.w	90017c68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90017b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90017b3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017b3e:	ee30 0a04 	vadd.f32	s0, s0, s8
90017b42:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017b46:	eef0 6a62 	vmov.f32	s13, s5
90017b4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
90017b4e:	ee31 1a05 	vadd.f32	s2, s2, s10
90017b52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017b56:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
90017b5a:	eef0 6a43 	vmov.f32	s13, s6
90017b5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90017b62:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
90017b66:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017b6a:	ee61 7a27 	vmul.f32	s15, s2, s15
90017b6e:	ee77 2a62 	vsub.f32	s5, s14, s5
90017b72:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017b76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017b7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017b7e:	ee12 2a90 	vmov	r2, s5
90017b82:	eef0 2a47 	vmov.f32	s5, s14
90017b86:	fb92 f3f3 	sdiv	r3, r2, r3
90017b8a:	ee13 2a10 	vmov	r2, s6
90017b8e:	9313      	str	r3, [sp, #76]	; 0x4c
90017b90:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017b92:	eeb0 3a67 	vmov.f32	s6, s15
90017b96:	fb92 f3f3 	sdiv	r3, r2, r3
90017b9a:	9314      	str	r3, [sp, #80]	; 0x50
90017b9c:	9b02      	ldr	r3, [sp, #8]
90017b9e:	9a05      	ldr	r2, [sp, #20]
90017ba0:	3b01      	subs	r3, #1
90017ba2:	9302      	str	r3, [sp, #8]
90017ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017ba6:	bf08      	it	eq
90017ba8:	4613      	moveq	r3, r2
90017baa:	e72a      	b.n	90017a02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90017bac:	140f      	asrs	r7, r1, #16
90017bae:	d454      	bmi.n	90017c5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017bb0:	f8dc 6008 	ldr.w	r6, [ip, #8]
90017bb4:	42be      	cmp	r6, r7
90017bb6:	dd50      	ble.n	90017c5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017bb8:	ea5f 4822 	movs.w	r8, r2, asr #16
90017bbc:	d44d      	bmi.n	90017c5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017bbe:	f8dc 400c 	ldr.w	r4, [ip, #12]
90017bc2:	4544      	cmp	r4, r8
90017bc4:	dd49      	ble.n	90017c5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90017bc6:	9c04      	ldr	r4, [sp, #16]
90017bc8:	b236      	sxth	r6, r6
90017bca:	f06f 0001 	mvn.w	r0, #1
90017bce:	fb08 4606 	mla	r6, r8, r6, r4
90017bd2:	9c01      	ldr	r4, [sp, #4]
90017bd4:	fb00 fa0e 	mul.w	sl, r0, lr
90017bd8:	9800      	ldr	r0, [sp, #0]
90017bda:	f816 8007 	ldrb.w	r8, [r6, r7]
90017bde:	eb08 0848 	add.w	r8, r8, r8, lsl #1
90017be2:	eb04 0b08 	add.w	fp, r4, r8
90017be6:	f830 400a 	ldrh.w	r4, [r0, sl]
90017bea:	9801      	ldr	r0, [sp, #4]
90017bec:	f89b 6002 	ldrb.w	r6, [fp, #2]
90017bf0:	1227      	asrs	r7, r4, #8
90017bf2:	f89b b001 	ldrb.w	fp, [fp, #1]
90017bf6:	fb16 f609 	smulbb	r6, r6, r9
90017bfa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017bfe:	f810 8008 	ldrb.w	r8, [r0, r8]
90017c02:	fb1b fb09 	smulbb	fp, fp, r9
90017c06:	fb07 6705 	mla	r7, r7, r5, r6
90017c0a:	10e6      	asrs	r6, r4, #3
90017c0c:	00e4      	lsls	r4, r4, #3
90017c0e:	9800      	ldr	r0, [sp, #0]
90017c10:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90017c14:	b2bf      	uxth	r7, r7
90017c16:	b2e4      	uxtb	r4, r4
90017c18:	fb06 b605 	mla	r6, r6, r5, fp
90017c1c:	fb14 f405 	smulbb	r4, r4, r5
90017c20:	b2b6      	uxth	r6, r6
90017c22:	fb08 4809 	mla	r8, r8, r9, r4
90017c26:	1c7c      	adds	r4, r7, #1
90017c28:	f106 0b01 	add.w	fp, r6, #1
90017c2c:	fa1f f888 	uxth.w	r8, r8
90017c30:	eb04 2717 	add.w	r7, r4, r7, lsr #8
90017c34:	f108 0401 	add.w	r4, r8, #1
90017c38:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
90017c3c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90017c40:	eb04 2418 	add.w	r4, r4, r8, lsr #8
90017c44:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90017c48:	f3c4 24c4 	ubfx	r4, r4, #11, #5
90017c4c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90017c50:	4327      	orrs	r7, r4
90017c52:	ea47 070b 	orr.w	r7, r7, fp
90017c56:	f820 700a 	strh.w	r7, [r0, sl]
90017c5a:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017c5c:	f10e 3eff 	add.w	lr, lr, #4294967295
90017c60:	4401      	add	r1, r0
90017c62:	9814      	ldr	r0, [sp, #80]	; 0x50
90017c64:	4402      	add	r2, r0
90017c66:	e759      	b.n	90017b1c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
90017c68:	b007      	add	sp, #28
90017c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90017c70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017c74:	b085      	sub	sp, #20
90017c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017c7a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90017c7c:	9d16      	ldr	r5, [sp, #88]	; 0x58
90017c7e:	9203      	str	r2, [sp, #12]
90017c80:	6870      	ldr	r0, [r6, #4]
90017c82:	686f      	ldr	r7, [r5, #4]
90017c84:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
90017c88:	3704      	adds	r7, #4
90017c8a:	9101      	str	r1, [sp, #4]
90017c8c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90017c90:	fb00 2404 	mla	r4, r0, r4, r2
90017c94:	6832      	ldr	r2, [r6, #0]
90017c96:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017c9a:	682a      	ldr	r2, [r5, #0]
90017c9c:	9202      	str	r2, [sp, #8]
90017c9e:	9a01      	ldr	r2, [sp, #4]
90017ca0:	2a00      	cmp	r2, #0
90017ca2:	dc03      	bgt.n	90017cac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90017ca4:	9a03      	ldr	r2, [sp, #12]
90017ca6:	2a00      	cmp	r2, #0
90017ca8:	f340 80cc 	ble.w	90017e44 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
90017cac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90017cae:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90017cb2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90017cb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
90017cb8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90017cbc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017cc0:	2b00      	cmp	r3, #0
90017cc2:	dd0d      	ble.n	90017ce0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017cc4:	1406      	asrs	r6, r0, #16
90017cc6:	d405      	bmi.n	90017cd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90017cc8:	454e      	cmp	r6, r9
90017cca:	da03      	bge.n	90017cd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90017ccc:	1416      	asrs	r6, r2, #16
90017cce:	d401      	bmi.n	90017cd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90017cd0:	4546      	cmp	r6, r8
90017cd2:	db06      	blt.n	90017ce2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90017cd4:	9e12      	ldr	r6, [sp, #72]	; 0x48
90017cd6:	4460      	add	r0, ip
90017cd8:	3b01      	subs	r3, #1
90017cda:	3402      	adds	r4, #2
90017cdc:	4432      	add	r2, r6
90017cde:	e7ef      	b.n	90017cc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
90017ce0:	d00f      	beq.n	90017d02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90017ce2:	1e5e      	subs	r6, r3, #1
90017ce4:	fb0c 0e06 	mla	lr, ip, r6, r0
90017ce8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
90017cec:	d543      	bpl.n	90017d76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
90017cee:	4698      	mov	r8, r3
90017cf0:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
90017cf4:	f1b8 0f00 	cmp.w	r8, #0
90017cf8:	dc71      	bgt.n	90017dde <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
90017cfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017cfe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017d02:	9b01      	ldr	r3, [sp, #4]
90017d04:	2b00      	cmp	r3, #0
90017d06:	f340 809d 	ble.w	90017e44 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
90017d0a:	ee30 0a04 	vadd.f32	s0, s0, s8
90017d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017d10:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017d14:	eeb0 6a62 	vmov.f32	s12, s5
90017d18:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017d1c:	ee31 1a05 	vadd.f32	s2, s2, s10
90017d20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017d24:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90017d28:	eeb0 6a43 	vmov.f32	s12, s6
90017d2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017d30:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90017d34:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017d38:	ee61 7a27 	vmul.f32	s15, s2, s15
90017d3c:	ee77 2a62 	vsub.f32	s5, s14, s5
90017d40:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017d44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017d48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017d4c:	ee12 2a90 	vmov	r2, s5
90017d50:	eef0 2a47 	vmov.f32	s5, s14
90017d54:	fb92 fcf3 	sdiv	ip, r2, r3
90017d58:	ee13 2a10 	vmov	r2, s6
90017d5c:	eeb0 3a67 	vmov.f32	s6, s15
90017d60:	fb92 f3f3 	sdiv	r3, r2, r3
90017d64:	9312      	str	r3, [sp, #72]	; 0x48
90017d66:	9b01      	ldr	r3, [sp, #4]
90017d68:	9a03      	ldr	r2, [sp, #12]
90017d6a:	3b01      	subs	r3, #1
90017d6c:	9301      	str	r3, [sp, #4]
90017d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017d70:	bf08      	it	eq
90017d72:	4613      	moveq	r3, r2
90017d74:	e793      	b.n	90017c9e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
90017d76:	45ce      	cmp	lr, r9
90017d78:	dab9      	bge.n	90017cee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017d7a:	9912      	ldr	r1, [sp, #72]	; 0x48
90017d7c:	fb01 2606 	mla	r6, r1, r6, r2
90017d80:	1436      	asrs	r6, r6, #16
90017d82:	d4b4      	bmi.n	90017cee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017d84:	4546      	cmp	r6, r8
90017d86:	dab2      	bge.n	90017cee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017d88:	4698      	mov	r8, r3
90017d8a:	46a2      	mov	sl, r4
90017d8c:	f1b8 0f00 	cmp.w	r8, #0
90017d90:	ddb3      	ble.n	90017cfa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90017d92:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90017d96:	1416      	asrs	r6, r2, #16
90017d98:	9902      	ldr	r1, [sp, #8]
90017d9a:	ea4f 4e20 	mov.w	lr, r0, asr #16
90017d9e:	f108 38ff 	add.w	r8, r8, #4294967295
90017da2:	4460      	add	r0, ip
90017da4:	fb09 1606 	mla	r6, r9, r6, r1
90017da8:	4928      	ldr	r1, [pc, #160]	; (90017e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
90017daa:	f816 e00e 	ldrb.w	lr, [r6, lr]
90017dae:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90017db2:	eb07 0b0e 	add.w	fp, r7, lr
90017db6:	f89b 6001 	ldrb.w	r6, [fp, #1]
90017dba:	f89b 9002 	ldrb.w	r9, [fp, #2]
90017dbe:	00f6      	lsls	r6, r6, #3
90017dc0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
90017dc4:	9912      	ldr	r1, [sp, #72]	; 0x48
90017dc6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017dca:	440a      	add	r2, r1
90017dcc:	ea49 0606 	orr.w	r6, r9, r6
90017dd0:	f817 900e 	ldrb.w	r9, [r7, lr]
90017dd4:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
90017dd8:	f82a 6b02 	strh.w	r6, [sl], #2
90017ddc:	e7d6      	b.n	90017d8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90017dde:	ea5f 4920 	movs.w	r9, r0, asr #16
90017de2:	d429      	bmi.n	90017e38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017de4:	68ae      	ldr	r6, [r5, #8]
90017de6:	454e      	cmp	r6, r9
90017de8:	dd26      	ble.n	90017e38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017dea:	ea5f 4b22 	movs.w	fp, r2, asr #16
90017dee:	d423      	bmi.n	90017e38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017df0:	68e9      	ldr	r1, [r5, #12]
90017df2:	4559      	cmp	r1, fp
90017df4:	dd20      	ble.n	90017e38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90017df6:	fa0f fe86 	sxth.w	lr, r6
90017dfa:	9902      	ldr	r1, [sp, #8]
90017dfc:	fb0b 1e0e 	mla	lr, fp, lr, r1
90017e00:	f06f 0101 	mvn.w	r1, #1
90017e04:	f81e e009 	ldrb.w	lr, [lr, r9]
90017e08:	fb01 f908 	mul.w	r9, r1, r8
90017e0c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
90017e10:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90017e14:	eb07 060e 	add.w	r6, r7, lr
90017e18:	f896 b002 	ldrb.w	fp, [r6, #2]
90017e1c:	7876      	ldrb	r6, [r6, #1]
90017e1e:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
90017e22:	00f6      	lsls	r6, r6, #3
90017e24:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90017e28:	ea4b 0606 	orr.w	r6, fp, r6
90017e2c:	f817 b00e 	ldrb.w	fp, [r7, lr]
90017e30:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
90017e34:	f82a 6009 	strh.w	r6, [sl, r9]
90017e38:	9912      	ldr	r1, [sp, #72]	; 0x48
90017e3a:	4460      	add	r0, ip
90017e3c:	f108 38ff 	add.w	r8, r8, #4294967295
90017e40:	440a      	add	r2, r1
90017e42:	e757      	b.n	90017cf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90017e44:	b005      	add	sp, #20
90017e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017e4a:	bf00      	nop
90017e4c:	fffff800 	.word	0xfffff800

90017e50 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017e54:	b087      	sub	sp, #28
90017e56:	468b      	mov	fp, r1
90017e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90017e5c:	9815      	ldr	r0, [sp, #84]	; 0x54
90017e5e:	9204      	str	r2, [sp, #16]
90017e60:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90017e64:	6841      	ldr	r1, [r0, #4]
90017e66:	9205      	str	r2, [sp, #20]
90017e68:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
90017e6c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90017e70:	fb01 2404 	mla	r4, r1, r4, r2
90017e74:	6802      	ldr	r2, [r0, #0]
90017e76:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017e7a:	f8dc 2000 	ldr.w	r2, [ip]
90017e7e:	9201      	str	r2, [sp, #4]
90017e80:	f8dc 2004 	ldr.w	r2, [ip, #4]
90017e84:	3204      	adds	r2, #4
90017e86:	9202      	str	r2, [sp, #8]
90017e88:	f1bb 0f00 	cmp.w	fp, #0
90017e8c:	dc03      	bgt.n	90017e96 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90017e8e:	9a04      	ldr	r2, [sp, #16]
90017e90:	2a00      	cmp	r2, #0
90017e92:	f340 8138 	ble.w	90018106 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90017e96:	9a11      	ldr	r2, [sp, #68]	; 0x44
90017e98:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
90017e9c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90017ea0:	9a12      	ldr	r2, [sp, #72]	; 0x48
90017ea2:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
90017ea6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017eaa:	2b00      	cmp	r3, #0
90017eac:	dd0e      	ble.n	90017ecc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90017eae:	1402      	asrs	r2, r0, #16
90017eb0:	d405      	bmi.n	90017ebe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90017eb2:	42ba      	cmp	r2, r7
90017eb4:	da03      	bge.n	90017ebe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90017eb6:	140a      	asrs	r2, r1, #16
90017eb8:	d401      	bmi.n	90017ebe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90017eba:	42b2      	cmp	r2, r6
90017ebc:	db07      	blt.n	90017ece <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017ebe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90017ec0:	3b01      	subs	r3, #1
90017ec2:	3402      	adds	r4, #2
90017ec4:	4410      	add	r0, r2
90017ec6:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017ec8:	4411      	add	r1, r2
90017eca:	e7ee      	b.n	90017eaa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
90017ecc:	d019      	beq.n	90017f02 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
90017ece:	1e5a      	subs	r2, r3, #1
90017ed0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90017ed2:	fb05 0502 	mla	r5, r5, r2, r0
90017ed6:	142d      	asrs	r5, r5, #16
90017ed8:	d409      	bmi.n	90017eee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90017eda:	42bd      	cmp	r5, r7
90017edc:	da07      	bge.n	90017eee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90017ede:	9d14      	ldr	r5, [sp, #80]	; 0x50
90017ee0:	fb05 1202 	mla	r2, r5, r2, r1
90017ee4:	1412      	asrs	r2, r2, #16
90017ee6:	d402      	bmi.n	90017eee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90017ee8:	42b2      	cmp	r2, r6
90017eea:	f2c0 80ac 	blt.w	90018046 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
90017eee:	f04f 0e00 	mov.w	lr, #0
90017ef2:	eb03 020e 	add.w	r2, r3, lr
90017ef6:	2a00      	cmp	r2, #0
90017ef8:	dc3e      	bgt.n	90017f78 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90017efa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90017efe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90017f02:	f1bb 0f00 	cmp.w	fp, #0
90017f06:	f340 80fe 	ble.w	90018106 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90017f0a:	ee30 0a04 	vadd.f32	s0, s0, s8
90017f0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017f10:	ee70 0aa4 	vadd.f32	s1, s1, s9
90017f14:	f1bb 0b01 	subs.w	fp, fp, #1
90017f18:	eeb0 6a62 	vmov.f32	s12, s5
90017f1c:	eec6 7a80 	vdiv.f32	s15, s13, s0
90017f20:	ee31 1a05 	vadd.f32	s2, s2, s10
90017f24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017f28:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90017f2c:	eeb0 6a43 	vmov.f32	s12, s6
90017f30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90017f34:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90017f38:	ee20 7aa7 	vmul.f32	s14, s1, s15
90017f3c:	ee61 7a27 	vmul.f32	s15, s2, s15
90017f40:	ee77 2a62 	vsub.f32	s5, s14, s5
90017f44:	ee37 3ac3 	vsub.f32	s6, s15, s6
90017f48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90017f4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90017f50:	ee12 2a90 	vmov	r2, s5
90017f54:	eef0 2a47 	vmov.f32	s5, s14
90017f58:	fb92 f3f3 	sdiv	r3, r2, r3
90017f5c:	ee13 2a10 	vmov	r2, s6
90017f60:	9313      	str	r3, [sp, #76]	; 0x4c
90017f62:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017f64:	eeb0 3a67 	vmov.f32	s6, s15
90017f68:	fb92 f3f3 	sdiv	r3, r2, r3
90017f6c:	9a04      	ldr	r2, [sp, #16]
90017f6e:	9314      	str	r3, [sp, #80]	; 0x50
90017f70:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017f72:	bf08      	it	eq
90017f74:	4613      	moveq	r3, r2
90017f76:	e787      	b.n	90017e88 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90017f78:	1406      	asrs	r6, r0, #16
90017f7a:	d45d      	bmi.n	90018038 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90017f7c:	f8dc 5008 	ldr.w	r5, [ip, #8]
90017f80:	42b5      	cmp	r5, r6
90017f82:	dd59      	ble.n	90018038 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90017f84:	140f      	asrs	r7, r1, #16
90017f86:	d457      	bmi.n	90018038 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90017f88:	f8dc 200c 	ldr.w	r2, [ip, #12]
90017f8c:	42ba      	cmp	r2, r7
90017f8e:	dd53      	ble.n	90018038 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90017f90:	9a01      	ldr	r2, [sp, #4]
90017f92:	b22d      	sxth	r5, r5
90017f94:	fb07 2505 	mla	r5, r7, r5, r2
90017f98:	5daa      	ldrb	r2, [r5, r6]
90017f9a:	9d02      	ldr	r5, [sp, #8]
90017f9c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
90017fa0:	0e2e      	lsrs	r6, r5, #24
90017fa2:	d049      	beq.n	90018038 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
90017fa4:	f06f 0201 	mvn.w	r2, #1
90017fa8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90017fac:	fb02 f20e 	mul.w	r2, r2, lr
90017fb0:	f834 8002 	ldrh.w	r8, [r4, r2]
90017fb4:	9203      	str	r2, [sp, #12]
90017fb6:	9a05      	ldr	r2, [sp, #20]
90017fb8:	ea4f 2728 	mov.w	r7, r8, asr #8
90017fbc:	4356      	muls	r6, r2
90017fbe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017fc2:	1c72      	adds	r2, r6, #1
90017fc4:	eb02 2226 	add.w	r2, r2, r6, asr #8
90017fc8:	f3c5 4607 	ubfx	r6, r5, #16, #8
90017fcc:	b2ed      	uxtb	r5, r5
90017fce:	1212      	asrs	r2, r2, #8
90017fd0:	fa1f f982 	uxth.w	r9, r2
90017fd4:	43d2      	mvns	r2, r2
90017fd6:	fb16 f609 	smulbb	r6, r6, r9
90017fda:	b2d2      	uxtb	r2, r2
90017fdc:	fb15 f509 	smulbb	r5, r5, r9
90017fe0:	fb07 6702 	mla	r7, r7, r2, r6
90017fe4:	ea4f 06e8 	mov.w	r6, r8, asr #3
90017fe8:	fb1a fa09 	smulbb	sl, sl, r9
90017fec:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90017ff0:	b2bf      	uxth	r7, r7
90017ff2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90017ff6:	fa5f f888 	uxtb.w	r8, r8
90017ffa:	fb06 a602 	mla	r6, r6, r2, sl
90017ffe:	fb08 5502 	mla	r5, r8, r2, r5
90018002:	1c7a      	adds	r2, r7, #1
90018004:	b2b6      	uxth	r6, r6
90018006:	b2ad      	uxth	r5, r5
90018008:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001800c:	9a03      	ldr	r2, [sp, #12]
9001800e:	f105 0a01 	add.w	sl, r5, #1
90018012:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90018016:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001801a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001801e:	ea4a 0707 	orr.w	r7, sl, r7
90018022:	f106 0a01 	add.w	sl, r6, #1
90018026:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001802a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001802e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018032:	ea47 070a 	orr.w	r7, r7, sl
90018036:	52a7      	strh	r7, [r4, r2]
90018038:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001803a:	f10e 3eff 	add.w	lr, lr, #4294967295
9001803e:	4410      	add	r0, r2
90018040:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018042:	4411      	add	r1, r2
90018044:	e755      	b.n	90017ef2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90018046:	f04f 0800 	mov.w	r8, #0
9001804a:	eba3 0208 	sub.w	r2, r3, r8
9001804e:	2a00      	cmp	r2, #0
90018050:	f77f af53 	ble.w	90017efa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
90018054:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
90018058:	140a      	asrs	r2, r1, #16
9001805a:	9f01      	ldr	r7, [sp, #4]
9001805c:	1405      	asrs	r5, r0, #16
9001805e:	fb06 7202 	mla	r2, r6, r2, r7
90018062:	5d52      	ldrb	r2, [r2, r5]
90018064:	9d02      	ldr	r5, [sp, #8]
90018066:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001806a:	0e2e      	lsrs	r6, r5, #24
9001806c:	d044      	beq.n	900180f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
9001806e:	9a05      	ldr	r2, [sp, #20]
90018070:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90018074:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
90018078:	4356      	muls	r6, r2
9001807a:	ea4f 272e 	mov.w	r7, lr, asr #8
9001807e:	1c72      	adds	r2, r6, #1
90018080:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018084:	eb02 2226 	add.w	r2, r2, r6, asr #8
90018088:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001808c:	b2ed      	uxtb	r5, r5
9001808e:	1212      	asrs	r2, r2, #8
90018090:	fa1f f982 	uxth.w	r9, r2
90018094:	43d2      	mvns	r2, r2
90018096:	fb16 f609 	smulbb	r6, r6, r9
9001809a:	b2d2      	uxtb	r2, r2
9001809c:	fb15 f509 	smulbb	r5, r5, r9
900180a0:	fb07 6702 	mla	r7, r7, r2, r6
900180a4:	ea4f 06ee 	mov.w	r6, lr, asr #3
900180a8:	fb1a fa09 	smulbb	sl, sl, r9
900180ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900180b0:	b2bf      	uxth	r7, r7
900180b2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900180b6:	fa5f fe8e 	uxtb.w	lr, lr
900180ba:	fb06 a602 	mla	r6, r6, r2, sl
900180be:	fb0e 5502 	mla	r5, lr, r2, r5
900180c2:	1c7a      	adds	r2, r7, #1
900180c4:	b2b6      	uxth	r6, r6
900180c6:	b2ad      	uxth	r5, r5
900180c8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
900180cc:	f105 0a01 	add.w	sl, r5, #1
900180d0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
900180d4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900180d8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900180dc:	ea4a 0707 	orr.w	r7, sl, r7
900180e0:	f106 0a01 	add.w	sl, r6, #1
900180e4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900180e8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900180ec:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900180f0:	ea47 070a 	orr.w	r7, r7, sl
900180f4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
900180f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
900180fa:	f108 0801 	add.w	r8, r8, #1
900180fe:	4410      	add	r0, r2
90018100:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018102:	4411      	add	r1, r2
90018104:	e7a1      	b.n	9001804a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
90018106:	b007      	add	sp, #28
90018108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001810c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018110:	b085      	sub	sp, #20
90018112:	468b      	mov	fp, r1
90018114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018118:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001811a:	9203      	str	r2, [sp, #12]
9001811c:	6841      	ldr	r1, [r0, #4]
9001811e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
90018122:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90018126:	fb01 2404 	mla	r4, r1, r4, r2
9001812a:	6802      	ldr	r2, [r0, #0]
9001812c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90018130:	f8de 2000 	ldr.w	r2, [lr]
90018134:	9200      	str	r2, [sp, #0]
90018136:	f8de 2004 	ldr.w	r2, [lr, #4]
9001813a:	3204      	adds	r2, #4
9001813c:	9201      	str	r2, [sp, #4]
9001813e:	f1bb 0f00 	cmp.w	fp, #0
90018142:	dc03      	bgt.n	9001814c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90018144:	9a03      	ldr	r2, [sp, #12]
90018146:	2a00      	cmp	r2, #0
90018148:	f340 8153 	ble.w	900183f2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001814c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001814e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90018152:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018156:	9a10      	ldr	r2, [sp, #64]	; 0x40
90018158:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001815c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018160:	2b00      	cmp	r3, #0
90018162:	dd0e      	ble.n	90018182 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018164:	1408      	asrs	r0, r1, #16
90018166:	d405      	bmi.n	90018174 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018168:	42b8      	cmp	r0, r7
9001816a:	da03      	bge.n	90018174 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001816c:	1410      	asrs	r0, r2, #16
9001816e:	d401      	bmi.n	90018174 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018170:	42b0      	cmp	r0, r6
90018172:	db07      	blt.n	90018184 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90018174:	9811      	ldr	r0, [sp, #68]	; 0x44
90018176:	3b01      	subs	r3, #1
90018178:	3402      	adds	r4, #2
9001817a:	4401      	add	r1, r0
9001817c:	9812      	ldr	r0, [sp, #72]	; 0x48
9001817e:	4402      	add	r2, r0
90018180:	e7ee      	b.n	90018160 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90018182:	d017      	beq.n	900181b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90018184:	1e58      	subs	r0, r3, #1
90018186:	9d11      	ldr	r5, [sp, #68]	; 0x44
90018188:	fb05 1500 	mla	r5, r5, r0, r1
9001818c:	142d      	asrs	r5, r5, #16
9001818e:	d409      	bmi.n	900181a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018190:	42bd      	cmp	r5, r7
90018192:	da07      	bge.n	900181a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018194:	9d12      	ldr	r5, [sp, #72]	; 0x48
90018196:	fb05 2000 	mla	r0, r5, r0, r2
9001819a:	1400      	asrs	r0, r0, #16
9001819c:	d402      	bmi.n	900181a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001819e:	42b0      	cmp	r0, r6
900181a0:	f2c0 80bc 	blt.w	9001831c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
900181a4:	2600      	movs	r6, #0
900181a6:	1998      	adds	r0, r3, r6
900181a8:	2800      	cmp	r0, #0
900181aa:	dc3e      	bgt.n	9001822a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
900181ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900181b0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
900181b4:	f1bb 0f00 	cmp.w	fp, #0
900181b8:	f340 811b 	ble.w	900183f2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
900181bc:	ee30 0a04 	vadd.f32	s0, s0, s8
900181c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900181c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
900181c6:	f1bb 0b01 	subs.w	fp, fp, #1
900181ca:	eeb0 6a62 	vmov.f32	s12, s5
900181ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
900181d2:	ee31 1a05 	vadd.f32	s2, s2, s10
900181d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900181da:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
900181de:	eeb0 6a43 	vmov.f32	s12, s6
900181e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900181e6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
900181ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
900181ee:	ee61 7a27 	vmul.f32	s15, s2, s15
900181f2:	ee77 2a62 	vsub.f32	s5, s14, s5
900181f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
900181fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900181fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018202:	ee12 2a90 	vmov	r2, s5
90018206:	eef0 2a47 	vmov.f32	s5, s14
9001820a:	fb92 f3f3 	sdiv	r3, r2, r3
9001820e:	ee13 2a10 	vmov	r2, s6
90018212:	9311      	str	r3, [sp, #68]	; 0x44
90018214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018216:	eeb0 3a67 	vmov.f32	s6, s15
9001821a:	fb92 f3f3 	sdiv	r3, r2, r3
9001821e:	9a03      	ldr	r2, [sp, #12]
90018220:	9312      	str	r3, [sp, #72]	; 0x48
90018222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018224:	bf08      	it	eq
90018226:	4613      	moveq	r3, r2
90018228:	e789      	b.n	9001813e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001822a:	140f      	asrs	r7, r1, #16
9001822c:	d426      	bmi.n	9001827c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001822e:	f8de 5008 	ldr.w	r5, [lr, #8]
90018232:	42bd      	cmp	r5, r7
90018234:	dd22      	ble.n	9001827c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018236:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001823a:	d41f      	bmi.n	9001827c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001823c:	f8de 000c 	ldr.w	r0, [lr, #12]
90018240:	4560      	cmp	r0, ip
90018242:	dd1b      	ble.n	9001827c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018244:	9800      	ldr	r0, [sp, #0]
90018246:	b22d      	sxth	r5, r5
90018248:	fb0c 0505 	mla	r5, ip, r5, r0
9001824c:	5de8      	ldrb	r0, [r5, r7]
9001824e:	9d01      	ldr	r5, [sp, #4]
90018250:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
90018254:	0e07      	lsrs	r7, r0, #24
90018256:	2fff      	cmp	r7, #255	; 0xff
90018258:	d116      	bne.n	90018288 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001825a:	f06f 0501 	mvn.w	r5, #1
9001825e:	fb05 f706 	mul.w	r7, r5, r6
90018262:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
90018266:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001826a:	0945      	lsrs	r5, r0, #5
9001826c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
90018270:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90018274:	ea4c 0505 	orr.w	r5, ip, r5
90018278:	4305      	orrs	r5, r0
9001827a:	53e5      	strh	r5, [r4, r7]
9001827c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001827e:	3e01      	subs	r6, #1
90018280:	4401      	add	r1, r0
90018282:	9812      	ldr	r0, [sp, #72]	; 0x48
90018284:	4402      	add	r2, r0
90018286:	e78e      	b.n	900181a6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90018288:	b2fd      	uxtb	r5, r7
9001828a:	2f00      	cmp	r7, #0
9001828c:	d0f6      	beq.n	9001827c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001828e:	f06f 0701 	mvn.w	r7, #1
90018292:	fa1f f985 	uxth.w	r9, r5
90018296:	43ed      	mvns	r5, r5
90018298:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001829c:	4377      	muls	r7, r6
9001829e:	fb1a fa09 	smulbb	sl, sl, r9
900182a2:	b2ed      	uxtb	r5, r5
900182a4:	f834 8007 	ldrh.w	r8, [r4, r7]
900182a8:	9702      	str	r7, [sp, #8]
900182aa:	f3c0 4707 	ubfx	r7, r0, #16, #8
900182ae:	ea4f 2c28 	mov.w	ip, r8, asr #8
900182b2:	fb17 f709 	smulbb	r7, r7, r9
900182b6:	b2c0      	uxtb	r0, r0
900182b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900182bc:	fb10 f009 	smulbb	r0, r0, r9
900182c0:	fb0c 7c05 	mla	ip, ip, r5, r7
900182c4:	ea4f 07e8 	mov.w	r7, r8, asr #3
900182c8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
900182cc:	fa1f fc8c 	uxth.w	ip, ip
900182d0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900182d4:	fa5f f888 	uxtb.w	r8, r8
900182d8:	fb07 a705 	mla	r7, r7, r5, sl
900182dc:	fb08 0005 	mla	r0, r8, r5, r0
900182e0:	f10c 0501 	add.w	r5, ip, #1
900182e4:	b2bf      	uxth	r7, r7
900182e6:	b280      	uxth	r0, r0
900182e8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900182ec:	f100 0a01 	add.w	sl, r0, #1
900182f0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900182f4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
900182f8:	9802      	ldr	r0, [sp, #8]
900182fa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900182fe:	ea4a 0c0c 	orr.w	ip, sl, ip
90018302:	f107 0a01 	add.w	sl, r7, #1
90018306:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001830a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001830e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018312:	ea4c 0c0a 	orr.w	ip, ip, sl
90018316:	f824 c000 	strh.w	ip, [r4, r0]
9001831a:	e7af      	b.n	9001827c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001831c:	f04f 0800 	mov.w	r8, #0
90018320:	eba3 0008 	sub.w	r0, r3, r8
90018324:	2800      	cmp	r0, #0
90018326:	f77f af41 	ble.w	900181ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001832a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001832e:	1410      	asrs	r0, r2, #16
90018330:	9f00      	ldr	r7, [sp, #0]
90018332:	140d      	asrs	r5, r1, #16
90018334:	fb06 7000 	mla	r0, r6, r0, r7
90018338:	5d40      	ldrb	r0, [r0, r5]
9001833a:	9d01      	ldr	r5, [sp, #4]
9001833c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
90018340:	0e2e      	lsrs	r6, r5, #24
90018342:	2eff      	cmp	r6, #255	; 0xff
90018344:	d112      	bne.n	9001836c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
90018346:	482c      	ldr	r0, [pc, #176]	; (900183f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
90018348:	ea00 2615 	and.w	r6, r0, r5, lsr #8
9001834c:	0968      	lsrs	r0, r5, #5
9001834e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90018352:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90018356:	4330      	orrs	r0, r6
90018358:	4328      	orrs	r0, r5
9001835a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
9001835e:	9811      	ldr	r0, [sp, #68]	; 0x44
90018360:	f108 0801 	add.w	r8, r8, #1
90018364:	4401      	add	r1, r0
90018366:	9812      	ldr	r0, [sp, #72]	; 0x48
90018368:	4402      	add	r2, r0
9001836a:	e7d9      	b.n	90018320 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001836c:	b2f0      	uxtb	r0, r6
9001836e:	2e00      	cmp	r6, #0
90018370:	d0f5      	beq.n	9001835e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
90018372:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
90018376:	fa1f f980 	uxth.w	r9, r0
9001837a:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001837e:	43c0      	mvns	r0, r0
90018380:	ea4f 272c 	mov.w	r7, ip, asr #8
90018384:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90018388:	fb16 f609 	smulbb	r6, r6, r9
9001838c:	b2c0      	uxtb	r0, r0
9001838e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018392:	b2ed      	uxtb	r5, r5
90018394:	fb1a fa09 	smulbb	sl, sl, r9
90018398:	fb07 6700 	mla	r7, r7, r0, r6
9001839c:	ea4f 06ec 	mov.w	r6, ip, asr #3
900183a0:	fb15 f509 	smulbb	r5, r5, r9
900183a4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900183a8:	b2bf      	uxth	r7, r7
900183aa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900183ae:	fa5f fc8c 	uxtb.w	ip, ip
900183b2:	fb06 a600 	mla	r6, r6, r0, sl
900183b6:	fb0c 5500 	mla	r5, ip, r0, r5
900183ba:	1c78      	adds	r0, r7, #1
900183bc:	b2b6      	uxth	r6, r6
900183be:	b2ad      	uxth	r5, r5
900183c0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
900183c4:	f105 0a01 	add.w	sl, r5, #1
900183c8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
900183cc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900183d0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900183d4:	ea4a 0707 	orr.w	r7, sl, r7
900183d8:	f106 0a01 	add.w	sl, r6, #1
900183dc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900183e0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900183e4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900183e8:	ea47 070a 	orr.w	r7, r7, sl
900183ec:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
900183f0:	e7b5      	b.n	9001835e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
900183f2:	b005      	add	sp, #20
900183f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900183f8:	fffff800 	.word	0xfffff800

900183fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900183fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018400:	b087      	sub	sp, #28
90018402:	468b      	mov	fp, r1
90018404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018408:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001840a:	9204      	str	r2, [sp, #16]
9001840c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90018410:	6861      	ldr	r1, [r4, #4]
90018412:	9205      	str	r2, [sp, #20]
90018414:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
90018418:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001841c:	fb01 2000 	mla	r0, r1, r0, r2
90018420:	6822      	ldr	r2, [r4, #0]
90018422:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90018426:	f8de 2000 	ldr.w	r2, [lr]
9001842a:	9201      	str	r2, [sp, #4]
9001842c:	f8de 2004 	ldr.w	r2, [lr, #4]
90018430:	9202      	str	r2, [sp, #8]
90018432:	f1bb 0f00 	cmp.w	fp, #0
90018436:	dc03      	bgt.n	90018440 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
90018438:	9a04      	ldr	r2, [sp, #16]
9001843a:	2a00      	cmp	r2, #0
9001843c:	f340 8142 	ble.w	900186c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
90018440:	9a11      	ldr	r2, [sp, #68]	; 0x44
90018442:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90018446:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001844a:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001844c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
90018450:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018454:	2b00      	cmp	r3, #0
90018456:	dd0e      	ble.n	90018476 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90018458:	140c      	asrs	r4, r1, #16
9001845a:	d405      	bmi.n	90018468 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001845c:	42bc      	cmp	r4, r7
9001845e:	da03      	bge.n	90018468 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018460:	1414      	asrs	r4, r2, #16
90018462:	d401      	bmi.n	90018468 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018464:	42b4      	cmp	r4, r6
90018466:	db07      	blt.n	90018478 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90018468:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001846a:	3b01      	subs	r3, #1
9001846c:	3002      	adds	r0, #2
9001846e:	4421      	add	r1, r4
90018470:	9c14      	ldr	r4, [sp, #80]	; 0x50
90018472:	4422      	add	r2, r4
90018474:	e7ee      	b.n	90018454 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90018476:	d019      	beq.n	900184ac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
90018478:	1e5c      	subs	r4, r3, #1
9001847a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001847c:	fb05 1504 	mla	r5, r5, r4, r1
90018480:	142d      	asrs	r5, r5, #16
90018482:	d409      	bmi.n	90018498 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90018484:	42bd      	cmp	r5, r7
90018486:	da07      	bge.n	90018498 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90018488:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001848a:	fb05 2404 	mla	r4, r5, r4, r2
9001848e:	1424      	asrs	r4, r4, #16
90018490:	d402      	bmi.n	90018498 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90018492:	42b4      	cmp	r4, r6
90018494:	f2c0 80b1 	blt.w	900185fa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
90018498:	f04f 0800 	mov.w	r8, #0
9001849c:	eb03 0408 	add.w	r4, r3, r8
900184a0:	2c00      	cmp	r4, #0
900184a2:	dc3e      	bgt.n	90018522 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
900184a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900184a8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900184ac:	f1bb 0f00 	cmp.w	fp, #0
900184b0:	f340 8108 	ble.w	900186c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
900184b4:	ee30 0a04 	vadd.f32	s0, s0, s8
900184b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
900184ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
900184be:	f1bb 0b01 	subs.w	fp, fp, #1
900184c2:	eeb0 6a62 	vmov.f32	s12, s5
900184c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
900184ca:	ee31 1a05 	vadd.f32	s2, s2, s10
900184ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900184d2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
900184d6:	eeb0 6a43 	vmov.f32	s12, s6
900184da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900184de:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
900184e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900184e6:	ee61 7a27 	vmul.f32	s15, s2, s15
900184ea:	ee77 2a62 	vsub.f32	s5, s14, s5
900184ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
900184f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900184f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900184fa:	ee12 2a90 	vmov	r2, s5
900184fe:	eef0 2a47 	vmov.f32	s5, s14
90018502:	fb92 f3f3 	sdiv	r3, r2, r3
90018506:	ee13 2a10 	vmov	r2, s6
9001850a:	9313      	str	r3, [sp, #76]	; 0x4c
9001850c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001850e:	eeb0 3a67 	vmov.f32	s6, s15
90018512:	fb92 f3f3 	sdiv	r3, r2, r3
90018516:	9a04      	ldr	r2, [sp, #16]
90018518:	9314      	str	r3, [sp, #80]	; 0x50
9001851a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001851c:	bf08      	it	eq
9001851e:	4613      	moveq	r3, r2
90018520:	e787      	b.n	90018432 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
90018522:	140e      	asrs	r6, r1, #16
90018524:	d462      	bmi.n	900185ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018526:	f8de 5008 	ldr.w	r5, [lr, #8]
9001852a:	42b5      	cmp	r5, r6
9001852c:	dd5e      	ble.n	900185ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001852e:	1417      	asrs	r7, r2, #16
90018530:	d45c      	bmi.n	900185ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018532:	f8de 400c 	ldr.w	r4, [lr, #12]
90018536:	42bc      	cmp	r4, r7
90018538:	dd58      	ble.n	900185ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001853a:	b22d      	sxth	r5, r5
9001853c:	9c02      	ldr	r4, [sp, #8]
9001853e:	fb07 6505 	mla	r5, r7, r5, r6
90018542:	5d66      	ldrb	r6, [r4, r5]
90018544:	2e00      	cmp	r6, #0
90018546:	d051      	beq.n	900185ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018548:	9c01      	ldr	r4, [sp, #4]
9001854a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
9001854e:	f06f 0401 	mvn.w	r4, #1
90018552:	fb04 f408 	mul.w	r4, r4, r8
90018556:	ea4f 2c29 	mov.w	ip, r9, asr #8
9001855a:	5b05      	ldrh	r5, [r0, r4]
9001855c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018560:	9403      	str	r4, [sp, #12]
90018562:	9c05      	ldr	r4, [sp, #20]
90018564:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90018568:	4366      	muls	r6, r4
9001856a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001856e:	1c74      	adds	r4, r6, #1
90018570:	eb04 2416 	add.w	r4, r4, r6, lsr #8
90018574:	122e      	asrs	r6, r5, #8
90018576:	1224      	asrs	r4, r4, #8
90018578:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001857c:	00ed      	lsls	r5, r5, #3
9001857e:	b2a7      	uxth	r7, r4
90018580:	43e4      	mvns	r4, r4
90018582:	b2ed      	uxtb	r5, r5
90018584:	b2e4      	uxtb	r4, r4
90018586:	fb16 f604 	smulbb	r6, r6, r4
9001858a:	fb15 f504 	smulbb	r5, r5, r4
9001858e:	fb0c 6c07 	mla	ip, ip, r7, r6
90018592:	ea4f 06e9 	mov.w	r6, r9, asr #3
90018596:	fb1a fa04 	smulbb	sl, sl, r4
9001859a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001859e:	fa1f fc8c 	uxth.w	ip, ip
900185a2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
900185a6:	fa5f f989 	uxtb.w	r9, r9
900185aa:	fb06 a607 	mla	r6, r6, r7, sl
900185ae:	f10c 0401 	add.w	r4, ip, #1
900185b2:	fb09 5507 	mla	r5, r9, r7, r5
900185b6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
900185ba:	9c03      	ldr	r4, [sp, #12]
900185bc:	b2ad      	uxth	r5, r5
900185be:	b2b6      	uxth	r6, r6
900185c0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900185c4:	f105 0a01 	add.w	sl, r5, #1
900185c8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900185cc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900185d0:	ea4a 0c0c 	orr.w	ip, sl, ip
900185d4:	f106 0a01 	add.w	sl, r6, #1
900185d8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900185dc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900185e0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900185e4:	ea4c 0c0a 	orr.w	ip, ip, sl
900185e8:	f820 c004 	strh.w	ip, [r0, r4]
900185ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900185ee:	f108 38ff 	add.w	r8, r8, #4294967295
900185f2:	4421      	add	r1, r4
900185f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
900185f6:	4422      	add	r2, r4
900185f8:	e750      	b.n	9001849c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
900185fa:	f04f 0900 	mov.w	r9, #0
900185fe:	eba3 0409 	sub.w	r4, r3, r9
90018602:	2c00      	cmp	r4, #0
90018604:	f77f af4e 	ble.w	900184a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90018608:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001860c:	140d      	asrs	r5, r1, #16
9001860e:	1414      	asrs	r4, r2, #16
90018610:	fb06 5404 	mla	r4, r6, r4, r5
90018614:	9d02      	ldr	r5, [sp, #8]
90018616:	5d2e      	ldrb	r6, [r5, r4]
90018618:	2e00      	cmp	r6, #0
9001861a:	d04c      	beq.n	900186b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
9001861c:	9d01      	ldr	r5, [sp, #4]
9001861e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
90018622:	9c05      	ldr	r4, [sp, #20]
90018624:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90018628:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001862c:	4366      	muls	r6, r4
9001862e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90018632:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018636:	1c74      	adds	r4, r6, #1
90018638:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001863c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
90018640:	122e      	asrs	r6, r5, #8
90018642:	1224      	asrs	r4, r4, #8
90018644:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90018648:	00ed      	lsls	r5, r5, #3
9001864a:	b2a7      	uxth	r7, r4
9001864c:	43e4      	mvns	r4, r4
9001864e:	b2ed      	uxtb	r5, r5
90018650:	b2e4      	uxtb	r4, r4
90018652:	fb16 f604 	smulbb	r6, r6, r4
90018656:	fb15 f504 	smulbb	r5, r5, r4
9001865a:	fb0c 6c07 	mla	ip, ip, r7, r6
9001865e:	ea4f 06e8 	mov.w	r6, r8, asr #3
90018662:	fb1a fa04 	smulbb	sl, sl, r4
90018666:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001866a:	fa1f fc8c 	uxth.w	ip, ip
9001866e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018672:	fa5f f888 	uxtb.w	r8, r8
90018676:	fb06 a607 	mla	r6, r6, r7, sl
9001867a:	f10c 0401 	add.w	r4, ip, #1
9001867e:	fb08 5507 	mla	r5, r8, r7, r5
90018682:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90018686:	b2ad      	uxth	r5, r5
90018688:	b2b6      	uxth	r6, r6
9001868a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001868e:	f105 0a01 	add.w	sl, r5, #1
90018692:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018696:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001869a:	ea4a 0c0c 	orr.w	ip, sl, ip
9001869e:	f106 0a01 	add.w	sl, r6, #1
900186a2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900186a6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900186aa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900186ae:	ea4c 0c0a 	orr.w	ip, ip, sl
900186b2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
900186b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900186b8:	f109 0901 	add.w	r9, r9, #1
900186bc:	4421      	add	r1, r4
900186be:	9c14      	ldr	r4, [sp, #80]	; 0x50
900186c0:	4422      	add	r2, r4
900186c2:	e79c      	b.n	900185fe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
900186c4:	b007      	add	sp, #28
900186c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900186ca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900186ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900186ce:	b085      	sub	sp, #20
900186d0:	468b      	mov	fp, r1
900186d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900186d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900186d8:	9203      	str	r2, [sp, #12]
900186da:	6861      	ldr	r1, [r4, #4]
900186dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
900186e0:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
900186e4:	fb01 2000 	mla	r0, r1, r0, r2
900186e8:	6822      	ldr	r2, [r4, #0]
900186ea:	eb02 0040 	add.w	r0, r2, r0, lsl #1
900186ee:	f8d8 2000 	ldr.w	r2, [r8]
900186f2:	9200      	str	r2, [sp, #0]
900186f4:	f8d8 2004 	ldr.w	r2, [r8, #4]
900186f8:	9201      	str	r2, [sp, #4]
900186fa:	f1bb 0f00 	cmp.w	fp, #0
900186fe:	dc03      	bgt.n	90018708 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90018700:	9a03      	ldr	r2, [sp, #12]
90018702:	2a00      	cmp	r2, #0
90018704:	f340 8146 	ble.w	90018994 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
90018708:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001870a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001870e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018712:	9a10      	ldr	r2, [sp, #64]	; 0x40
90018714:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90018718:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001871c:	2b00      	cmp	r3, #0
9001871e:	dd0e      	ble.n	9001873e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90018720:	140c      	asrs	r4, r1, #16
90018722:	d405      	bmi.n	90018730 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018724:	42bc      	cmp	r4, r7
90018726:	da03      	bge.n	90018730 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018728:	1414      	asrs	r4, r2, #16
9001872a:	d401      	bmi.n	90018730 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001872c:	42b4      	cmp	r4, r6
9001872e:	db07      	blt.n	90018740 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018730:	9c11      	ldr	r4, [sp, #68]	; 0x44
90018732:	3b01      	subs	r3, #1
90018734:	3002      	adds	r0, #2
90018736:	4421      	add	r1, r4
90018738:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001873a:	4422      	add	r2, r4
9001873c:	e7ee      	b.n	9001871c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001873e:	d017      	beq.n	90018770 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90018740:	1e5c      	subs	r4, r3, #1
90018742:	9d11      	ldr	r5, [sp, #68]	; 0x44
90018744:	fb05 1504 	mla	r5, r5, r4, r1
90018748:	142d      	asrs	r5, r5, #16
9001874a:	d409      	bmi.n	90018760 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001874c:	42bd      	cmp	r5, r7
9001874e:	da07      	bge.n	90018760 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018750:	9d12      	ldr	r5, [sp, #72]	; 0x48
90018752:	fb05 2404 	mla	r4, r5, r4, r2
90018756:	1424      	asrs	r4, r4, #16
90018758:	d402      	bmi.n	90018760 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001875a:	42b4      	cmp	r4, r6
9001875c:	f2c0 80b3 	blt.w	900188c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90018760:	2600      	movs	r6, #0
90018762:	199c      	adds	r4, r3, r6
90018764:	2c00      	cmp	r4, #0
90018766:	dc3e      	bgt.n	900187e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90018768:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001876c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90018770:	f1bb 0f00 	cmp.w	fp, #0
90018774:	f340 810e 	ble.w	90018994 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
90018778:	ee30 0a04 	vadd.f32	s0, s0, s8
9001877c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001877e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018782:	f1bb 0b01 	subs.w	fp, fp, #1
90018786:	eeb0 6a62 	vmov.f32	s12, s5
9001878a:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001878e:	ee31 1a05 	vadd.f32	s2, s2, s10
90018792:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018796:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001879a:	eeb0 6a43 	vmov.f32	s12, s6
9001879e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900187a2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
900187a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900187aa:	ee61 7a27 	vmul.f32	s15, s2, s15
900187ae:	ee77 2a62 	vsub.f32	s5, s14, s5
900187b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
900187b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900187ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900187be:	ee12 2a90 	vmov	r2, s5
900187c2:	eef0 2a47 	vmov.f32	s5, s14
900187c6:	fb92 f3f3 	sdiv	r3, r2, r3
900187ca:	ee13 2a10 	vmov	r2, s6
900187ce:	9311      	str	r3, [sp, #68]	; 0x44
900187d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900187d2:	eeb0 3a67 	vmov.f32	s6, s15
900187d6:	fb92 f3f3 	sdiv	r3, r2, r3
900187da:	9a03      	ldr	r2, [sp, #12]
900187dc:	9312      	str	r3, [sp, #72]	; 0x48
900187de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900187e0:	bf08      	it	eq
900187e2:	4613      	moveq	r3, r2
900187e4:	e789      	b.n	900186fa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
900187e6:	140f      	asrs	r7, r1, #16
900187e8:	d418      	bmi.n	9001881c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
900187ea:	f8d8 5008 	ldr.w	r5, [r8, #8]
900187ee:	42bd      	cmp	r5, r7
900187f0:	dd14      	ble.n	9001881c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
900187f2:	ea5f 4c22 	movs.w	ip, r2, asr #16
900187f6:	d411      	bmi.n	9001881c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
900187f8:	f8d8 400c 	ldr.w	r4, [r8, #12]
900187fc:	4564      	cmp	r4, ip
900187fe:	dd0d      	ble.n	9001881c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90018800:	b22d      	sxth	r5, r5
90018802:	9c01      	ldr	r4, [sp, #4]
90018804:	fb0c 7505 	mla	r5, ip, r5, r7
90018808:	5d64      	ldrb	r4, [r4, r5]
9001880a:	2cff      	cmp	r4, #255	; 0xff
9001880c:	d10c      	bne.n	90018828 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001880e:	9c00      	ldr	r4, [sp, #0]
90018810:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
90018814:	f06f 0401 	mvn.w	r4, #1
90018818:	4374      	muls	r4, r6
9001881a:	5305      	strh	r5, [r0, r4]
9001881c:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001881e:	3e01      	subs	r6, #1
90018820:	4421      	add	r1, r4
90018822:	9c12      	ldr	r4, [sp, #72]	; 0x48
90018824:	4422      	add	r2, r4
90018826:	e79c      	b.n	90018762 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018828:	2c00      	cmp	r4, #0
9001882a:	d0f7      	beq.n	9001881c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001882c:	9f00      	ldr	r7, [sp, #0]
9001882e:	fa1f fc84 	uxth.w	ip, r4
90018832:	43e4      	mvns	r4, r4
90018834:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
90018838:	f06f 0501 	mvn.w	r5, #1
9001883c:	b2e4      	uxtb	r4, r4
9001883e:	4375      	muls	r5, r6
90018840:	ea4f 2e29 	mov.w	lr, r9, asr #8
90018844:	9502      	str	r5, [sp, #8]
90018846:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001884a:	5b45      	ldrh	r5, [r0, r5]
9001884c:	122f      	asrs	r7, r5, #8
9001884e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90018852:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018856:	00ed      	lsls	r5, r5, #3
90018858:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001885c:	fb17 f704 	smulbb	r7, r7, r4
90018860:	b2ed      	uxtb	r5, r5
90018862:	fb1a fa04 	smulbb	sl, sl, r4
90018866:	fb0e 7e0c 	mla	lr, lr, ip, r7
9001886a:	ea4f 07e9 	mov.w	r7, r9, asr #3
9001886e:	fb15 f504 	smulbb	r5, r5, r4
90018872:	ea4f 09c9 	mov.w	r9, r9, lsl #3
90018876:	fa1f fe8e 	uxth.w	lr, lr
9001887a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001887e:	fa5f f989 	uxtb.w	r9, r9
90018882:	fb07 a70c 	mla	r7, r7, ip, sl
90018886:	f10e 0401 	add.w	r4, lr, #1
9001888a:	fb09 550c 	mla	r5, r9, ip, r5
9001888e:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
90018892:	9c02      	ldr	r4, [sp, #8]
90018894:	b2ad      	uxth	r5, r5
90018896:	b2bf      	uxth	r7, r7
90018898:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001889c:	f105 0a01 	add.w	sl, r5, #1
900188a0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900188a4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900188a8:	ea4a 0e0e 	orr.w	lr, sl, lr
900188ac:	f107 0a01 	add.w	sl, r7, #1
900188b0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
900188b4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900188b8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900188bc:	ea4e 0e0a 	orr.w	lr, lr, sl
900188c0:	f820 e004 	strh.w	lr, [r0, r4]
900188c4:	e7aa      	b.n	9001881c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
900188c6:	f04f 0900 	mov.w	r9, #0
900188ca:	eba3 0409 	sub.w	r4, r3, r9
900188ce:	2c00      	cmp	r4, #0
900188d0:	f77f af4a 	ble.w	90018768 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
900188d4:	1414      	asrs	r4, r2, #16
900188d6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
900188da:	140d      	asrs	r5, r1, #16
900188dc:	fb06 5504 	mla	r5, r6, r4, r5
900188e0:	9c01      	ldr	r4, [sp, #4]
900188e2:	5d64      	ldrb	r4, [r4, r5]
900188e4:	2cff      	cmp	r4, #255	; 0xff
900188e6:	d10b      	bne.n	90018900 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
900188e8:	9c00      	ldr	r4, [sp, #0]
900188ea:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
900188ee:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
900188f2:	9c11      	ldr	r4, [sp, #68]	; 0x44
900188f4:	f109 0901 	add.w	r9, r9, #1
900188f8:	4421      	add	r1, r4
900188fa:	9c12      	ldr	r4, [sp, #72]	; 0x48
900188fc:	4422      	add	r2, r4
900188fe:	e7e4      	b.n	900188ca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90018900:	2c00      	cmp	r4, #0
90018902:	d0f6      	beq.n	900188f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
90018904:	9e00      	ldr	r6, [sp, #0]
90018906:	b2a7      	uxth	r7, r4
90018908:	43e4      	mvns	r4, r4
9001890a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
9001890e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90018912:	b2e4      	uxtb	r4, r4
90018914:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90018918:	122e      	asrs	r6, r5, #8
9001891a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001891e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018922:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90018926:	00ed      	lsls	r5, r5, #3
90018928:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001892c:	fb16 f604 	smulbb	r6, r6, r4
90018930:	b2ed      	uxtb	r5, r5
90018932:	fb1a fa04 	smulbb	sl, sl, r4
90018936:	fb0c 6c07 	mla	ip, ip, r7, r6
9001893a:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001893e:	fb15 f504 	smulbb	r5, r5, r4
90018942:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90018946:	fa1f fc8c 	uxth.w	ip, ip
9001894a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001894e:	fa5f fe8e 	uxtb.w	lr, lr
90018952:	fb06 a607 	mla	r6, r6, r7, sl
90018956:	f10c 0401 	add.w	r4, ip, #1
9001895a:	fb0e 5507 	mla	r5, lr, r7, r5
9001895e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90018962:	b2ad      	uxth	r5, r5
90018964:	b2b6      	uxth	r6, r6
90018966:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001896a:	f105 0a01 	add.w	sl, r5, #1
9001896e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018972:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018976:	ea4a 0c0c 	orr.w	ip, sl, ip
9001897a:	f106 0a01 	add.w	sl, r6, #1
9001897e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018982:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018986:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001898a:	ea4c 0c0a 	orr.w	ip, ip, sl
9001898e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
90018992:	e7ae      	b.n	900188f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
90018994:	b005      	add	sp, #20
90018996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001899a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001899a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001899e:	b085      	sub	sp, #20
900189a0:	9813      	ldr	r0, [sp, #76]	; 0x4c
900189a2:	9203      	str	r2, [sp, #12]
900189a4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
900189a8:	9100      	str	r1, [sp, #0]
900189aa:	9201      	str	r2, [sp, #4]
900189ac:	6841      	ldr	r1, [r0, #4]
900189ae:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
900189b2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900189b6:	fb01 2404 	mla	r4, r1, r4, r2
900189ba:	6802      	ldr	r2, [r0, #0]
900189bc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900189c0:	f8de 2000 	ldr.w	r2, [lr]
900189c4:	9202      	str	r2, [sp, #8]
900189c6:	9a01      	ldr	r2, [sp, #4]
900189c8:	43d6      	mvns	r6, r2
900189ca:	b2f6      	uxtb	r6, r6
900189cc:	9a00      	ldr	r2, [sp, #0]
900189ce:	2a00      	cmp	r2, #0
900189d0:	dc03      	bgt.n	900189da <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
900189d2:	9a03      	ldr	r2, [sp, #12]
900189d4:	2a00      	cmp	r2, #0
900189d6:	f340 8124 	ble.w	90018c22 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
900189da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900189dc:	f9be c008 	ldrsh.w	ip, [lr, #8]
900189e0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900189e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
900189e6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
900189ea:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900189ee:	2b00      	cmp	r3, #0
900189f0:	dd0e      	ble.n	90018a10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
900189f2:	1408      	asrs	r0, r1, #16
900189f4:	d405      	bmi.n	90018a02 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900189f6:	4560      	cmp	r0, ip
900189f8:	da03      	bge.n	90018a02 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900189fa:	1410      	asrs	r0, r2, #16
900189fc:	d401      	bmi.n	90018a02 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900189fe:	42b8      	cmp	r0, r7
90018a00:	db07      	blt.n	90018a12 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90018a02:	9811      	ldr	r0, [sp, #68]	; 0x44
90018a04:	3b01      	subs	r3, #1
90018a06:	3402      	adds	r4, #2
90018a08:	4401      	add	r1, r0
90018a0a:	9812      	ldr	r0, [sp, #72]	; 0x48
90018a0c:	4402      	add	r2, r0
90018a0e:	e7ee      	b.n	900189ee <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90018a10:	d06e      	beq.n	90018af0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
90018a12:	1e58      	subs	r0, r3, #1
90018a14:	9d11      	ldr	r5, [sp, #68]	; 0x44
90018a16:	fb05 1500 	mla	r5, r5, r0, r1
90018a1a:	142d      	asrs	r5, r5, #16
90018a1c:	d45c      	bmi.n	90018ad8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018a1e:	4565      	cmp	r5, ip
90018a20:	da5a      	bge.n	90018ad8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018a22:	9d12      	ldr	r5, [sp, #72]	; 0x48
90018a24:	fb05 2000 	mla	r0, r5, r0, r2
90018a28:	1400      	asrs	r0, r0, #16
90018a2a:	d455      	bmi.n	90018ad8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018a2c:	42b8      	cmp	r0, r7
90018a2e:	da53      	bge.n	90018ad8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90018a30:	4699      	mov	r9, r3
90018a32:	46a2      	mov	sl, r4
90018a34:	f8bd b004 	ldrh.w	fp, [sp, #4]
90018a38:	f1b9 0f00 	cmp.w	r9, #0
90018a3c:	dd54      	ble.n	90018ae8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
90018a3e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90018a42:	140d      	asrs	r5, r1, #16
90018a44:	1410      	asrs	r0, r2, #16
90018a46:	f109 39ff 	add.w	r9, r9, #4294967295
90018a4a:	fb07 5000 	mla	r0, r7, r0, r5
90018a4e:	9d02      	ldr	r5, [sp, #8]
90018a50:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
90018a54:	f8ba 5000 	ldrh.w	r5, [sl]
90018a58:	ea4f 2c20 	mov.w	ip, r0, asr #8
90018a5c:	122f      	asrs	r7, r5, #8
90018a5e:	ea4f 08e5 	mov.w	r8, r5, asr #3
90018a62:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018a66:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018a6a:	00ed      	lsls	r5, r5, #3
90018a6c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
90018a70:	fb17 f706 	smulbb	r7, r7, r6
90018a74:	b2ed      	uxtb	r5, r5
90018a76:	fb18 f806 	smulbb	r8, r8, r6
90018a7a:	fb0c 7c0b 	mla	ip, ip, fp, r7
90018a7e:	10c7      	asrs	r7, r0, #3
90018a80:	fb15 f506 	smulbb	r5, r5, r6
90018a84:	00c0      	lsls	r0, r0, #3
90018a86:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90018a8a:	fa1f fc8c 	uxth.w	ip, ip
90018a8e:	b2c0      	uxtb	r0, r0
90018a90:	fb07 870b 	mla	r7, r7, fp, r8
90018a94:	fb00 500b 	mla	r0, r0, fp, r5
90018a98:	f10c 0501 	add.w	r5, ip, #1
90018a9c:	b2bf      	uxth	r7, r7
90018a9e:	b280      	uxth	r0, r0
90018aa0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90018aa4:	f107 0801 	add.w	r8, r7, #1
90018aa8:	1c45      	adds	r5, r0, #1
90018aaa:	eb08 2817 	add.w	r8, r8, r7, lsr #8
90018aae:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018ab2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90018ab6:	9811      	ldr	r0, [sp, #68]	; 0x44
90018ab8:	ea4f 1858 	mov.w	r8, r8, lsr #5
90018abc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90018ac0:	4401      	add	r1, r0
90018ac2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90018ac6:	9812      	ldr	r0, [sp, #72]	; 0x48
90018ac8:	ea45 0c0c 	orr.w	ip, r5, ip
90018acc:	4402      	add	r2, r0
90018ace:	ea4c 0c08 	orr.w	ip, ip, r8
90018ad2:	f82a cb02 	strh.w	ip, [sl], #2
90018ad6:	e7af      	b.n	90018a38 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018ad8:	f04f 0800 	mov.w	r8, #0
90018adc:	f8bd a004 	ldrh.w	sl, [sp, #4]
90018ae0:	eb03 0008 	add.w	r0, r3, r8
90018ae4:	2800      	cmp	r0, #0
90018ae6:	dc41      	bgt.n	90018b6c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
90018ae8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018aec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018af0:	9b00      	ldr	r3, [sp, #0]
90018af2:	2b00      	cmp	r3, #0
90018af4:	f340 8095 	ble.w	90018c22 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
90018af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90018afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018afe:	ee30 0a04 	vadd.f32	s0, s0, s8
90018b02:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018b06:	eef0 6a62 	vmov.f32	s13, s5
90018b0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
90018b0e:	ee31 1a05 	vadd.f32	s2, s2, s10
90018b12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90018b16:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
90018b1a:	eef0 6a43 	vmov.f32	s13, s6
90018b1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90018b22:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
90018b26:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018b2a:	ee61 7a27 	vmul.f32	s15, s2, s15
90018b2e:	ee77 2a62 	vsub.f32	s5, s14, s5
90018b32:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018b36:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018b3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018b3e:	ee12 2a90 	vmov	r2, s5
90018b42:	eef0 2a47 	vmov.f32	s5, s14
90018b46:	fb92 f3f3 	sdiv	r3, r2, r3
90018b4a:	ee13 2a10 	vmov	r2, s6
90018b4e:	9311      	str	r3, [sp, #68]	; 0x44
90018b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018b52:	eeb0 3a67 	vmov.f32	s6, s15
90018b56:	fb92 f3f3 	sdiv	r3, r2, r3
90018b5a:	9312      	str	r3, [sp, #72]	; 0x48
90018b5c:	9b00      	ldr	r3, [sp, #0]
90018b5e:	9a03      	ldr	r2, [sp, #12]
90018b60:	3b01      	subs	r3, #1
90018b62:	9300      	str	r3, [sp, #0]
90018b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018b66:	bf08      	it	eq
90018b68:	4613      	moveq	r3, r2
90018b6a:	e72f      	b.n	900189cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
90018b6c:	140f      	asrs	r7, r1, #16
90018b6e:	d451      	bmi.n	90018c14 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018b70:	f8de 5008 	ldr.w	r5, [lr, #8]
90018b74:	42bd      	cmp	r5, r7
90018b76:	dd4d      	ble.n	90018c14 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018b78:	ea5f 4c22 	movs.w	ip, r2, asr #16
90018b7c:	d44a      	bmi.n	90018c14 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018b7e:	f8de 000c 	ldr.w	r0, [lr, #12]
90018b82:	4560      	cmp	r0, ip
90018b84:	dd46      	ble.n	90018c14 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90018b86:	b22d      	sxth	r5, r5
90018b88:	9802      	ldr	r0, [sp, #8]
90018b8a:	fb0c 7505 	mla	r5, ip, r5, r7
90018b8e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
90018b92:	f06f 0501 	mvn.w	r5, #1
90018b96:	fb05 fb08 	mul.w	fp, r5, r8
90018b9a:	ea4f 2c20 	mov.w	ip, r0, asr #8
90018b9e:	f834 500b 	ldrh.w	r5, [r4, fp]
90018ba2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018ba6:	122f      	asrs	r7, r5, #8
90018ba8:	ea4f 09e5 	mov.w	r9, r5, asr #3
90018bac:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018bb0:	00ed      	lsls	r5, r5, #3
90018bb2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
90018bb6:	fb17 f706 	smulbb	r7, r7, r6
90018bba:	b2ed      	uxtb	r5, r5
90018bbc:	fb19 f906 	smulbb	r9, r9, r6
90018bc0:	fb0c 7c0a 	mla	ip, ip, sl, r7
90018bc4:	10c7      	asrs	r7, r0, #3
90018bc6:	fb15 f506 	smulbb	r5, r5, r6
90018bca:	00c0      	lsls	r0, r0, #3
90018bcc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90018bd0:	fa1f fc8c 	uxth.w	ip, ip
90018bd4:	b2c0      	uxtb	r0, r0
90018bd6:	fb07 970a 	mla	r7, r7, sl, r9
90018bda:	fb00 500a 	mla	r0, r0, sl, r5
90018bde:	f10c 0501 	add.w	r5, ip, #1
90018be2:	b2bf      	uxth	r7, r7
90018be4:	b280      	uxth	r0, r0
90018be6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90018bea:	f107 0901 	add.w	r9, r7, #1
90018bee:	1c45      	adds	r5, r0, #1
90018bf0:	eb09 2917 	add.w	r9, r9, r7, lsr #8
90018bf4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018bf8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90018bfc:	ea4f 1959 	mov.w	r9, r9, lsr #5
90018c00:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90018c04:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90018c08:	ea45 0c0c 	orr.w	ip, r5, ip
90018c0c:	ea4c 0c09 	orr.w	ip, ip, r9
90018c10:	f824 c00b 	strh.w	ip, [r4, fp]
90018c14:	9811      	ldr	r0, [sp, #68]	; 0x44
90018c16:	f108 38ff 	add.w	r8, r8, #4294967295
90018c1a:	4401      	add	r1, r0
90018c1c:	9812      	ldr	r0, [sp, #72]	; 0x48
90018c1e:	4402      	add	r2, r0
90018c20:	e75e      	b.n	90018ae0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
90018c22:	b005      	add	sp, #20
90018c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018c28 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018c2c:	b085      	sub	sp, #20
90018c2e:	4693      	mov	fp, r2
90018c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018c34:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90018c36:	9d16      	ldr	r5, [sp, #88]	; 0x58
90018c38:	6870      	ldr	r0, [r6, #4]
90018c3a:	9101      	str	r1, [sp, #4]
90018c3c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90018c40:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
90018c44:	fb00 2404 	mla	r4, r0, r4, r2
90018c48:	6832      	ldr	r2, [r6, #0]
90018c4a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90018c4e:	682a      	ldr	r2, [r5, #0]
90018c50:	9202      	str	r2, [sp, #8]
90018c52:	9a01      	ldr	r2, [sp, #4]
90018c54:	2a00      	cmp	r2, #0
90018c56:	dc03      	bgt.n	90018c60 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90018c58:	f1bb 0f00 	cmp.w	fp, #0
90018c5c:	f340 809a 	ble.w	90018d94 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90018c60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90018c62:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90018c66:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90018c6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
90018c6c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
90018c70:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018c74:	2b00      	cmp	r3, #0
90018c76:	dd0c      	ble.n	90018c92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
90018c78:	1406      	asrs	r6, r0, #16
90018c7a:	d405      	bmi.n	90018c88 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018c7c:	454e      	cmp	r6, r9
90018c7e:	da03      	bge.n	90018c88 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018c80:	1416      	asrs	r6, r2, #16
90018c82:	d401      	bmi.n	90018c88 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90018c84:	4546      	cmp	r6, r8
90018c86:	db05      	blt.n	90018c94 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018c88:	4470      	add	r0, lr
90018c8a:	4462      	add	r2, ip
90018c8c:	3b01      	subs	r3, #1
90018c8e:	3402      	adds	r4, #2
90018c90:	e7f0      	b.n	90018c74 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90018c92:	d00f      	beq.n	90018cb4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90018c94:	1e5e      	subs	r6, r3, #1
90018c96:	fb0e 0706 	mla	r7, lr, r6, r0
90018c9a:	143f      	asrs	r7, r7, #16
90018c9c:	d541      	bpl.n	90018d22 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
90018c9e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
90018ca2:	4698      	mov	r8, r3
90018ca4:	9603      	str	r6, [sp, #12]
90018ca6:	f1b8 0f00 	cmp.w	r8, #0
90018caa:	dc56      	bgt.n	90018d5a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
90018cac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018cb0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018cb4:	9b01      	ldr	r3, [sp, #4]
90018cb6:	2b00      	cmp	r3, #0
90018cb8:	dd6c      	ble.n	90018d94 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
90018cba:	ee30 0a04 	vadd.f32	s0, s0, s8
90018cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018cc0:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018cc4:	eeb0 6a62 	vmov.f32	s12, s5
90018cc8:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018ccc:	ee31 1a05 	vadd.f32	s2, s2, s10
90018cd0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018cd4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90018cd8:	eeb0 6a43 	vmov.f32	s12, s6
90018cdc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018ce0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90018ce4:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018ce8:	ee61 7a27 	vmul.f32	s15, s2, s15
90018cec:	ee77 2a62 	vsub.f32	s5, s14, s5
90018cf0:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018cf4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018cf8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018cfc:	ee12 2a90 	vmov	r2, s5
90018d00:	eef0 2a47 	vmov.f32	s5, s14
90018d04:	fb92 fef3 	sdiv	lr, r2, r3
90018d08:	ee13 2a10 	vmov	r2, s6
90018d0c:	eeb0 3a67 	vmov.f32	s6, s15
90018d10:	fb92 fcf3 	sdiv	ip, r2, r3
90018d14:	9b01      	ldr	r3, [sp, #4]
90018d16:	3b01      	subs	r3, #1
90018d18:	9301      	str	r3, [sp, #4]
90018d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018d1c:	bf08      	it	eq
90018d1e:	465b      	moveq	r3, fp
90018d20:	e797      	b.n	90018c52 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90018d22:	454f      	cmp	r7, r9
90018d24:	dabb      	bge.n	90018c9e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018d26:	fb0c 2606 	mla	r6, ip, r6, r2
90018d2a:	1436      	asrs	r6, r6, #16
90018d2c:	d4b7      	bmi.n	90018c9e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018d2e:	4546      	cmp	r6, r8
90018d30:	dab5      	bge.n	90018c9e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018d32:	461e      	mov	r6, r3
90018d34:	46a0      	mov	r8, r4
90018d36:	2e00      	cmp	r6, #0
90018d38:	ddb8      	ble.n	90018cac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90018d3a:	1417      	asrs	r7, r2, #16
90018d3c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90018d40:	ea4f 4920 	mov.w	r9, r0, asr #16
90018d44:	9902      	ldr	r1, [sp, #8]
90018d46:	4470      	add	r0, lr
90018d48:	4462      	add	r2, ip
90018d4a:	fb0a 9707 	mla	r7, sl, r7, r9
90018d4e:	3e01      	subs	r6, #1
90018d50:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
90018d54:	f828 7b02 	strh.w	r7, [r8], #2
90018d58:	e7ed      	b.n	90018d36 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
90018d5a:	ea5f 4920 	movs.w	r9, r0, asr #16
90018d5e:	d414      	bmi.n	90018d8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018d60:	68ae      	ldr	r6, [r5, #8]
90018d62:	454e      	cmp	r6, r9
90018d64:	dd11      	ble.n	90018d8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018d66:	ea5f 4a22 	movs.w	sl, r2, asr #16
90018d6a:	d40e      	bmi.n	90018d8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018d6c:	68ef      	ldr	r7, [r5, #12]
90018d6e:	4557      	cmp	r7, sl
90018d70:	dd0b      	ble.n	90018d8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
90018d72:	b236      	sxth	r6, r6
90018d74:	f06f 0101 	mvn.w	r1, #1
90018d78:	9f02      	ldr	r7, [sp, #8]
90018d7a:	fb0a 9606 	mla	r6, sl, r6, r9
90018d7e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
90018d82:	fb01 f608 	mul.w	r6, r1, r8
90018d86:	9903      	ldr	r1, [sp, #12]
90018d88:	538f      	strh	r7, [r1, r6]
90018d8a:	4470      	add	r0, lr
90018d8c:	4462      	add	r2, ip
90018d8e:	f108 38ff 	add.w	r8, r8, #4294967295
90018d92:	e788      	b.n	90018ca6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90018d94:	b005      	add	sp, #20
90018d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018d9a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018d9e:	b087      	sub	sp, #28
90018da0:	468b      	mov	fp, r1
90018da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018da6:	9815      	ldr	r0, [sp, #84]	; 0x54
90018da8:	9203      	str	r2, [sp, #12]
90018daa:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90018dae:	6841      	ldr	r1, [r0, #4]
90018db0:	9204      	str	r2, [sp, #16]
90018db2:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
90018db6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
90018dba:	fb01 2505 	mla	r5, r1, r5, r2
90018dbe:	6802      	ldr	r2, [r0, #0]
90018dc0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
90018dc4:	f8d9 2000 	ldr.w	r2, [r9]
90018dc8:	9201      	str	r2, [sp, #4]
90018dca:	f1bb 0f00 	cmp.w	fp, #0
90018dce:	dc03      	bgt.n	90018dd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90018dd0:	9a03      	ldr	r2, [sp, #12]
90018dd2:	2a00      	cmp	r2, #0
90018dd4:	f340 8158 	ble.w	90019088 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90018dd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
90018dda:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
90018dde:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90018de2:	9a12      	ldr	r2, [sp, #72]	; 0x48
90018de4:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
90018de8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018dec:	2b00      	cmp	r3, #0
90018dee:	dd0e      	ble.n	90018e0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90018df0:	1402      	asrs	r2, r0, #16
90018df2:	d405      	bmi.n	90018e00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018df4:	42ba      	cmp	r2, r7
90018df6:	da03      	bge.n	90018e00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018df8:	140a      	asrs	r2, r1, #16
90018dfa:	d401      	bmi.n	90018e00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90018dfc:	42b2      	cmp	r2, r6
90018dfe:	db07      	blt.n	90018e10 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018e00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018e02:	3b01      	subs	r3, #1
90018e04:	3502      	adds	r5, #2
90018e06:	4410      	add	r0, r2
90018e08:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018e0a:	4411      	add	r1, r2
90018e0c:	e7ee      	b.n	90018dec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90018e0e:	d017      	beq.n	90018e40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90018e10:	1e5a      	subs	r2, r3, #1
90018e12:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90018e14:	fb04 0402 	mla	r4, r4, r2, r0
90018e18:	1424      	asrs	r4, r4, #16
90018e1a:	d409      	bmi.n	90018e30 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018e1c:	42bc      	cmp	r4, r7
90018e1e:	da07      	bge.n	90018e30 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018e20:	9c14      	ldr	r4, [sp, #80]	; 0x50
90018e22:	fb04 1202 	mla	r2, r4, r2, r1
90018e26:	1412      	asrs	r2, r2, #16
90018e28:	d402      	bmi.n	90018e30 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90018e2a:	42b2      	cmp	r2, r6
90018e2c:	f2c0 80bf 	blt.w	90018fae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90018e30:	2700      	movs	r7, #0
90018e32:	19da      	adds	r2, r3, r7
90018e34:	2a00      	cmp	r2, #0
90018e36:	dc3e      	bgt.n	90018eb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90018e38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018e3c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
90018e40:	f1bb 0f00 	cmp.w	fp, #0
90018e44:	f340 8120 	ble.w	90019088 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90018e48:	ee30 0a04 	vadd.f32	s0, s0, s8
90018e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018e4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018e52:	f1bb 0b01 	subs.w	fp, fp, #1
90018e56:	eeb0 6a62 	vmov.f32	s12, s5
90018e5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018e5e:	ee31 1a05 	vadd.f32	s2, s2, s10
90018e62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018e66:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90018e6a:	eeb0 6a43 	vmov.f32	s12, s6
90018e6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018e72:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90018e76:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018e7a:	ee61 7a27 	vmul.f32	s15, s2, s15
90018e7e:	ee77 2a62 	vsub.f32	s5, s14, s5
90018e82:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018e86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018e8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018e8e:	ee12 2a90 	vmov	r2, s5
90018e92:	eef0 2a47 	vmov.f32	s5, s14
90018e96:	fb92 f3f3 	sdiv	r3, r2, r3
90018e9a:	ee13 2a10 	vmov	r2, s6
90018e9e:	9313      	str	r3, [sp, #76]	; 0x4c
90018ea0:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018ea2:	eeb0 3a67 	vmov.f32	s6, s15
90018ea6:	fb92 f3f3 	sdiv	r3, r2, r3
90018eaa:	9a03      	ldr	r2, [sp, #12]
90018eac:	9314      	str	r3, [sp, #80]	; 0x50
90018eae:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018eb0:	bf08      	it	eq
90018eb2:	4613      	moveq	r3, r2
90018eb4:	e789      	b.n	90018dca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90018eb6:	1406      	asrs	r6, r0, #16
90018eb8:	d42d      	bmi.n	90018f16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018eba:	f8d9 4008 	ldr.w	r4, [r9, #8]
90018ebe:	42b4      	cmp	r4, r6
90018ec0:	dd29      	ble.n	90018f16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018ec2:	ea5f 4c21 	movs.w	ip, r1, asr #16
90018ec6:	d426      	bmi.n	90018f16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018ec8:	f8d9 200c 	ldr.w	r2, [r9, #12]
90018ecc:	4562      	cmp	r2, ip
90018ece:	dd22      	ble.n	90018f16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018ed0:	b224      	sxth	r4, r4
90018ed2:	9a01      	ldr	r2, [sp, #4]
90018ed4:	fb0c 6404 	mla	r4, ip, r4, r6
90018ed8:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
90018edc:	0e22      	lsrs	r2, r4, #24
90018ede:	d01a      	beq.n	90018f16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018ee0:	9e04      	ldr	r6, [sp, #16]
90018ee2:	4372      	muls	r2, r6
90018ee4:	1c56      	adds	r6, r2, #1
90018ee6:	eb06 2222 	add.w	r2, r6, r2, asr #8
90018eea:	0a26      	lsrs	r6, r4, #8
90018eec:	1212      	asrs	r2, r2, #8
90018eee:	9605      	str	r6, [sp, #20]
90018ef0:	2aff      	cmp	r2, #255	; 0xff
90018ef2:	d116      	bne.n	90018f22 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
90018ef4:	f06f 0201 	mvn.w	r2, #1
90018ef8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90018efc:	fb02 fc07 	mul.w	ip, r2, r7
90018f00:	0962      	lsrs	r2, r4, #5
90018f02:	f026 0607 	bic.w	r6, r6, #7
90018f06:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90018f0a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90018f0e:	4316      	orrs	r6, r2
90018f10:	4326      	orrs	r6, r4
90018f12:	f825 600c 	strh.w	r6, [r5, ip]
90018f16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018f18:	3f01      	subs	r7, #1
90018f1a:	4410      	add	r0, r2
90018f1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018f1e:	4411      	add	r1, r2
90018f20:	e787      	b.n	90018e32 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018f22:	f06f 0601 	mvn.w	r6, #1
90018f26:	fa1f fa82 	uxth.w	sl, r2
90018f2a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
90018f2e:	43d2      	mvns	r2, r2
90018f30:	437e      	muls	r6, r7
90018f32:	b2e4      	uxtb	r4, r4
90018f34:	fb1c fc0a 	smulbb	ip, ip, sl
90018f38:	b2d2      	uxtb	r2, r2
90018f3a:	f835 8006 	ldrh.w	r8, [r5, r6]
90018f3e:	fb14 f40a 	smulbb	r4, r4, sl
90018f42:	9602      	str	r6, [sp, #8]
90018f44:	ea4f 2e28 	mov.w	lr, r8, asr #8
90018f48:	f89d 6014 	ldrb.w	r6, [sp, #20]
90018f4c:	fb16 f60a 	smulbb	r6, r6, sl
90018f50:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90018f54:	fb0e ce02 	mla	lr, lr, r2, ip
90018f58:	ea4f 0ce8 	mov.w	ip, r8, asr #3
90018f5c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90018f60:	fa1f fe8e 	uxth.w	lr, lr
90018f64:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90018f68:	fa5f f888 	uxtb.w	r8, r8
90018f6c:	fb0c 6c02 	mla	ip, ip, r2, r6
90018f70:	fb08 4402 	mla	r4, r8, r2, r4
90018f74:	f10e 0201 	add.w	r2, lr, #1
90018f78:	fa1f fc8c 	uxth.w	ip, ip
90018f7c:	b2a4      	uxth	r4, r4
90018f7e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
90018f82:	9a02      	ldr	r2, [sp, #8]
90018f84:	1c66      	adds	r6, r4, #1
90018f86:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
90018f8a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
90018f8e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90018f92:	ea46 0e0e 	orr.w	lr, r6, lr
90018f96:	f10c 0601 	add.w	r6, ip, #1
90018f9a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
90018f9e:	0976      	lsrs	r6, r6, #5
90018fa0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90018fa4:	ea4e 0e06 	orr.w	lr, lr, r6
90018fa8:	f825 e002 	strh.w	lr, [r5, r2]
90018fac:	e7b3      	b.n	90018f16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018fae:	f04f 0800 	mov.w	r8, #0
90018fb2:	eba3 0208 	sub.w	r2, r3, r8
90018fb6:	2a00      	cmp	r2, #0
90018fb8:	f77f af3e 	ble.w	90018e38 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018fbc:	1404      	asrs	r4, r0, #16
90018fbe:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
90018fc2:	140a      	asrs	r2, r1, #16
90018fc4:	fb06 4202 	mla	r2, r6, r2, r4
90018fc8:	9c01      	ldr	r4, [sp, #4]
90018fca:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
90018fce:	0e22      	lsrs	r2, r4, #24
90018fd0:	d015      	beq.n	90018ffe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
90018fd2:	9e04      	ldr	r6, [sp, #16]
90018fd4:	4372      	muls	r2, r6
90018fd6:	1c56      	adds	r6, r2, #1
90018fd8:	eb06 2222 	add.w	r2, r6, r2, asr #8
90018fdc:	0a26      	lsrs	r6, r4, #8
90018fde:	1212      	asrs	r2, r2, #8
90018fe0:	2aff      	cmp	r2, #255	; 0xff
90018fe2:	d113      	bne.n	9001900c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90018fe4:	0962      	lsrs	r2, r4, #5
90018fe6:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90018fea:	f3c4 04c4 	ubfx	r4, r4, #3, #5
90018fee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90018ff2:	f026 0607 	bic.w	r6, r6, #7
90018ff6:	4316      	orrs	r6, r2
90018ff8:	4326      	orrs	r6, r4
90018ffa:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
90018ffe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019000:	f108 0801 	add.w	r8, r8, #1
90019004:	4410      	add	r0, r2
90019006:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019008:	4411      	add	r1, r2
9001900a:	e7d2      	b.n	90018fb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
9001900c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
90019010:	fa1f fa82 	uxth.w	sl, r2
90019014:	f3c4 4707 	ubfx	r7, r4, #16, #8
90019018:	43d2      	mvns	r2, r2
9001901a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001901e:	fb17 f70a 	smulbb	r7, r7, sl
90019022:	b2d2      	uxtb	r2, r2
90019024:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019028:	b2e4      	uxtb	r4, r4
9001902a:	b2f6      	uxtb	r6, r6
9001902c:	fb0c 7c02 	mla	ip, ip, r2, r7
90019030:	ea4f 07ee 	mov.w	r7, lr, asr #3
90019034:	fb14 f40a 	smulbb	r4, r4, sl
90019038:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001903c:	fa1f fc8c 	uxth.w	ip, ip
90019040:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90019044:	fb16 f60a 	smulbb	r6, r6, sl
90019048:	fa5f fe8e 	uxtb.w	lr, lr
9001904c:	fb0e 4402 	mla	r4, lr, r2, r4
90019050:	fb07 6702 	mla	r7, r7, r2, r6
90019054:	f10c 0201 	add.w	r2, ip, #1
90019058:	b2a4      	uxth	r4, r4
9001905a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001905e:	1c66      	adds	r6, r4, #1
90019060:	b2bf      	uxth	r7, r7
90019062:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90019066:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001906a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001906e:	ea46 0c0c 	orr.w	ip, r6, ip
90019072:	1c7e      	adds	r6, r7, #1
90019074:	eb06 2617 	add.w	r6, r6, r7, lsr #8
90019078:	0976      	lsrs	r6, r6, #5
9001907a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001907e:	ea4c 0c06 	orr.w	ip, ip, r6
90019082:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
90019086:	e7ba      	b.n	90018ffe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
90019088:	b007      	add	sp, #28
9001908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

90019090 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90019090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019094:	b085      	sub	sp, #20
90019096:	468b      	mov	fp, r1
90019098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001909c:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001909e:	9203      	str	r2, [sp, #12]
900190a0:	6841      	ldr	r1, [r0, #4]
900190a2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
900190a6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900190aa:	fb01 2404 	mla	r4, r1, r4, r2
900190ae:	6802      	ldr	r2, [r0, #0]
900190b0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900190b4:	f8d8 2000 	ldr.w	r2, [r8]
900190b8:	9201      	str	r2, [sp, #4]
900190ba:	f1bb 0f00 	cmp.w	fp, #0
900190be:	dc03      	bgt.n	900190c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
900190c0:	9a03      	ldr	r2, [sp, #12]
900190c2:	2a00      	cmp	r2, #0
900190c4:	f340 814f 	ble.w	90019366 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
900190c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900190ca:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
900190ce:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900190d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
900190d4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
900190d8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900190dc:	2b00      	cmp	r3, #0
900190de:	dd0e      	ble.n	900190fe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
900190e0:	1408      	asrs	r0, r1, #16
900190e2:	d405      	bmi.n	900190f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900190e4:	42b8      	cmp	r0, r7
900190e6:	da03      	bge.n	900190f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900190e8:	1410      	asrs	r0, r2, #16
900190ea:	d401      	bmi.n	900190f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900190ec:	42b0      	cmp	r0, r6
900190ee:	db07      	blt.n	90019100 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900190f0:	9811      	ldr	r0, [sp, #68]	; 0x44
900190f2:	3b01      	subs	r3, #1
900190f4:	3402      	adds	r4, #2
900190f6:	4401      	add	r1, r0
900190f8:	9812      	ldr	r0, [sp, #72]	; 0x48
900190fa:	4402      	add	r2, r0
900190fc:	e7ee      	b.n	900190dc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
900190fe:	d017      	beq.n	90019130 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90019100:	1e58      	subs	r0, r3, #1
90019102:	9d11      	ldr	r5, [sp, #68]	; 0x44
90019104:	fb05 1500 	mla	r5, r5, r0, r1
90019108:	142d      	asrs	r5, r5, #16
9001910a:	d409      	bmi.n	90019120 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001910c:	42bd      	cmp	r5, r7
9001910e:	da07      	bge.n	90019120 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90019110:	9d12      	ldr	r5, [sp, #72]	; 0x48
90019112:	fb05 2000 	mla	r0, r5, r0, r2
90019116:	1400      	asrs	r0, r0, #16
90019118:	d402      	bmi.n	90019120 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001911a:	42b0      	cmp	r0, r6
9001911c:	f2c0 80ba 	blt.w	90019294 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90019120:	2600      	movs	r6, #0
90019122:	1998      	adds	r0, r3, r6
90019124:	2800      	cmp	r0, #0
90019126:	dc3e      	bgt.n	900191a6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90019128:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001912c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019130:	f1bb 0f00 	cmp.w	fp, #0
90019134:	f340 8117 	ble.w	90019366 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90019138:	ee30 0a04 	vadd.f32	s0, s0, s8
9001913c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001913e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90019142:	f1bb 0b01 	subs.w	fp, fp, #1
90019146:	eeb0 6a62 	vmov.f32	s12, s5
9001914a:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001914e:	ee31 1a05 	vadd.f32	s2, s2, s10
90019152:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019156:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001915a:	eeb0 6a43 	vmov.f32	s12, s6
9001915e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019162:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90019166:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001916a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001916e:	ee77 2a62 	vsub.f32	s5, s14, s5
90019172:	ee37 3ac3 	vsub.f32	s6, s15, s6
90019176:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001917a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001917e:	ee12 2a90 	vmov	r2, s5
90019182:	eef0 2a47 	vmov.f32	s5, s14
90019186:	fb92 f3f3 	sdiv	r3, r2, r3
9001918a:	ee13 2a10 	vmov	r2, s6
9001918e:	9311      	str	r3, [sp, #68]	; 0x44
90019190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90019192:	eeb0 3a67 	vmov.f32	s6, s15
90019196:	fb92 f3f3 	sdiv	r3, r2, r3
9001919a:	9a03      	ldr	r2, [sp, #12]
9001919c:	9312      	str	r3, [sp, #72]	; 0x48
9001919e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900191a0:	bf08      	it	eq
900191a2:	4613      	moveq	r3, r2
900191a4:	e789      	b.n	900190ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
900191a6:	140f      	asrs	r7, r1, #16
900191a8:	d424      	bmi.n	900191f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900191aa:	f8d8 5008 	ldr.w	r5, [r8, #8]
900191ae:	42bd      	cmp	r5, r7
900191b0:	dd20      	ble.n	900191f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900191b2:	ea5f 4c22 	movs.w	ip, r2, asr #16
900191b6:	d41d      	bmi.n	900191f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900191b8:	f8d8 000c 	ldr.w	r0, [r8, #12]
900191bc:	4560      	cmp	r0, ip
900191be:	dd19      	ble.n	900191f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900191c0:	b22d      	sxth	r5, r5
900191c2:	9801      	ldr	r0, [sp, #4]
900191c4:	fb0c 7505 	mla	r5, ip, r5, r7
900191c8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
900191cc:	0e07      	lsrs	r7, r0, #24
900191ce:	2fff      	cmp	r7, #255	; 0xff
900191d0:	d116      	bne.n	90019200 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
900191d2:	f06f 0501 	mvn.w	r5, #1
900191d6:	fb05 f706 	mul.w	r7, r5, r6
900191da:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
900191de:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
900191e2:	0945      	lsrs	r5, r0, #5
900191e4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
900191e8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900191ec:	ea4c 0505 	orr.w	r5, ip, r5
900191f0:	4305      	orrs	r5, r0
900191f2:	53e5      	strh	r5, [r4, r7]
900191f4:	9811      	ldr	r0, [sp, #68]	; 0x44
900191f6:	3e01      	subs	r6, #1
900191f8:	4401      	add	r1, r0
900191fa:	9812      	ldr	r0, [sp, #72]	; 0x48
900191fc:	4402      	add	r2, r0
900191fe:	e790      	b.n	90019122 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90019200:	b2fd      	uxtb	r5, r7
90019202:	2f00      	cmp	r7, #0
90019204:	d0f6      	beq.n	900191f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019206:	f06f 0701 	mvn.w	r7, #1
9001920a:	fa1f f985 	uxth.w	r9, r5
9001920e:	43ed      	mvns	r5, r5
90019210:	f3c0 2a07 	ubfx	sl, r0, #8, #8
90019214:	4377      	muls	r7, r6
90019216:	fb1a fa09 	smulbb	sl, sl, r9
9001921a:	b2ed      	uxtb	r5, r5
9001921c:	f834 e007 	ldrh.w	lr, [r4, r7]
90019220:	9702      	str	r7, [sp, #8]
90019222:	f3c0 4707 	ubfx	r7, r0, #16, #8
90019226:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001922a:	fb17 f709 	smulbb	r7, r7, r9
9001922e:	b2c0      	uxtb	r0, r0
90019230:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019234:	fb10 f009 	smulbb	r0, r0, r9
90019238:	fb0c 7c05 	mla	ip, ip, r5, r7
9001923c:	ea4f 07ee 	mov.w	r7, lr, asr #3
90019240:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90019244:	fa1f fc8c 	uxth.w	ip, ip
90019248:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001924c:	fa5f fe8e 	uxtb.w	lr, lr
90019250:	fb07 a705 	mla	r7, r7, r5, sl
90019254:	fb0e 0005 	mla	r0, lr, r5, r0
90019258:	f10c 0501 	add.w	r5, ip, #1
9001925c:	b2bf      	uxth	r7, r7
9001925e:	b280      	uxth	r0, r0
90019260:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90019264:	f100 0a01 	add.w	sl, r0, #1
90019268:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001926c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
90019270:	9802      	ldr	r0, [sp, #8]
90019272:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90019276:	ea4a 0c0c 	orr.w	ip, sl, ip
9001927a:	f107 0a01 	add.w	sl, r7, #1
9001927e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90019282:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019286:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001928a:	ea4c 0c0a 	orr.w	ip, ip, sl
9001928e:	f824 c000 	strh.w	ip, [r4, r0]
90019292:	e7af      	b.n	900191f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019294:	f04f 0e00 	mov.w	lr, #0
90019298:	eba3 000e 	sub.w	r0, r3, lr
9001929c:	2800      	cmp	r0, #0
9001929e:	f77f af43 	ble.w	90019128 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
900192a2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
900192a6:	140d      	asrs	r5, r1, #16
900192a8:	1410      	asrs	r0, r2, #16
900192aa:	fb06 5000 	mla	r0, r6, r0, r5
900192ae:	9d01      	ldr	r5, [sp, #4]
900192b0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
900192b4:	0e2e      	lsrs	r6, r5, #24
900192b6:	2eff      	cmp	r6, #255	; 0xff
900192b8:	d112      	bne.n	900192e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
900192ba:	482c      	ldr	r0, [pc, #176]	; (9001936c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
900192bc:	ea00 2615 	and.w	r6, r0, r5, lsr #8
900192c0:	0968      	lsrs	r0, r5, #5
900192c2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
900192c6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900192ca:	4330      	orrs	r0, r6
900192cc:	4328      	orrs	r0, r5
900192ce:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
900192d2:	9811      	ldr	r0, [sp, #68]	; 0x44
900192d4:	f10e 0e01 	add.w	lr, lr, #1
900192d8:	4401      	add	r1, r0
900192da:	9812      	ldr	r0, [sp, #72]	; 0x48
900192dc:	4402      	add	r2, r0
900192de:	e7db      	b.n	90019298 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
900192e0:	b2f0      	uxtb	r0, r6
900192e2:	2e00      	cmp	r6, #0
900192e4:	d0f5      	beq.n	900192d2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900192e6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
900192ea:	fa1f f980 	uxth.w	r9, r0
900192ee:	f3c5 4607 	ubfx	r6, r5, #16, #8
900192f2:	43c0      	mvns	r0, r0
900192f4:	ea4f 272c 	mov.w	r7, ip, asr #8
900192f8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
900192fc:	fb16 f609 	smulbb	r6, r6, r9
90019300:	b2c0      	uxtb	r0, r0
90019302:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90019306:	b2ed      	uxtb	r5, r5
90019308:	fb1a fa09 	smulbb	sl, sl, r9
9001930c:	fb07 6700 	mla	r7, r7, r0, r6
90019310:	ea4f 06ec 	mov.w	r6, ip, asr #3
90019314:	fb15 f509 	smulbb	r5, r5, r9
90019318:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001931c:	b2bf      	uxth	r7, r7
9001931e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90019322:	fa5f fc8c 	uxtb.w	ip, ip
90019326:	fb06 a600 	mla	r6, r6, r0, sl
9001932a:	fb0c 5500 	mla	r5, ip, r0, r5
9001932e:	1c78      	adds	r0, r7, #1
90019330:	b2b6      	uxth	r6, r6
90019332:	b2ad      	uxth	r5, r5
90019334:	eb00 2717 	add.w	r7, r0, r7, lsr #8
90019338:	f105 0a01 	add.w	sl, r5, #1
9001933c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90019340:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90019344:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90019348:	ea4a 0707 	orr.w	r7, sl, r7
9001934c:	f106 0a01 	add.w	sl, r6, #1
90019350:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90019354:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019358:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001935c:	ea47 070a 	orr.w	r7, r7, sl
90019360:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
90019364:	e7b5      	b.n	900192d2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90019366:	b005      	add	sp, #20
90019368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001936c:	fffff800 	.word	0xfffff800

90019370 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90019370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019374:	b087      	sub	sp, #28
90019376:	468b      	mov	fp, r1
90019378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001937c:	9815      	ldr	r0, [sp, #84]	; 0x54
9001937e:	9203      	str	r2, [sp, #12]
90019380:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90019384:	6841      	ldr	r1, [r0, #4]
90019386:	9204      	str	r2, [sp, #16]
90019388:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
9001938c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90019390:	fb01 2404 	mla	r4, r1, r4, r2
90019394:	6802      	ldr	r2, [r0, #0]
90019396:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001939a:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001939e:	3201      	adds	r2, #1
900193a0:	f022 0201 	bic.w	r2, r2, #1
900193a4:	9200      	str	r2, [sp, #0]
900193a6:	f8d9 2000 	ldr.w	r2, [r9]
900193aa:	9201      	str	r2, [sp, #4]
900193ac:	f1bb 0f00 	cmp.w	fp, #0
900193b0:	dc03      	bgt.n	900193ba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
900193b2:	9a03      	ldr	r2, [sp, #12]
900193b4:	2a00      	cmp	r2, #0
900193b6:	f340 816a 	ble.w	9001968e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900193ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
900193bc:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
900193c0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900193c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
900193c6:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
900193ca:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900193ce:	2b00      	cmp	r3, #0
900193d0:	dd0e      	ble.n	900193f0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
900193d2:	1402      	asrs	r2, r0, #16
900193d4:	d405      	bmi.n	900193e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900193d6:	42ba      	cmp	r2, r7
900193d8:	da03      	bge.n	900193e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900193da:	140a      	asrs	r2, r1, #16
900193dc:	d401      	bmi.n	900193e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900193de:	42b2      	cmp	r2, r6
900193e0:	db07      	blt.n	900193f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900193e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
900193e4:	3b01      	subs	r3, #1
900193e6:	3402      	adds	r4, #2
900193e8:	4410      	add	r0, r2
900193ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
900193ec:	4411      	add	r1, r2
900193ee:	e7ee      	b.n	900193ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
900193f0:	d017      	beq.n	90019422 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
900193f2:	1e5a      	subs	r2, r3, #1
900193f4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900193f6:	fb05 0502 	mla	r5, r5, r2, r0
900193fa:	142d      	asrs	r5, r5, #16
900193fc:	d409      	bmi.n	90019412 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
900193fe:	42bd      	cmp	r5, r7
90019400:	da07      	bge.n	90019412 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90019402:	9d14      	ldr	r5, [sp, #80]	; 0x50
90019404:	fb05 1202 	mla	r2, r5, r2, r1
90019408:	1412      	asrs	r2, r2, #16
9001940a:	d402      	bmi.n	90019412 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001940c:	42b2      	cmp	r2, r6
9001940e:	f2c0 80c8 	blt.w	900195a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
90019412:	2700      	movs	r7, #0
90019414:	19da      	adds	r2, r3, r7
90019416:	2a00      	cmp	r2, #0
90019418:	dc3e      	bgt.n	90019498 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001941a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001941e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019422:	f1bb 0f00 	cmp.w	fp, #0
90019426:	f340 8132 	ble.w	9001968e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001942a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001942e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90019430:	ee70 0aa4 	vadd.f32	s1, s1, s9
90019434:	f1bb 0b01 	subs.w	fp, fp, #1
90019438:	eeb0 6a62 	vmov.f32	s12, s5
9001943c:	eec6 7a80 	vdiv.f32	s15, s13, s0
90019440:	ee31 1a05 	vadd.f32	s2, s2, s10
90019444:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019448:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001944c:	eeb0 6a43 	vmov.f32	s12, s6
90019450:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019454:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90019458:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001945c:	ee61 7a27 	vmul.f32	s15, s2, s15
90019460:	ee77 2a62 	vsub.f32	s5, s14, s5
90019464:	ee37 3ac3 	vsub.f32	s6, s15, s6
90019468:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001946c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90019470:	ee12 2a90 	vmov	r2, s5
90019474:	eef0 2a47 	vmov.f32	s5, s14
90019478:	fb92 f3f3 	sdiv	r3, r2, r3
9001947c:	ee13 2a10 	vmov	r2, s6
90019480:	9313      	str	r3, [sp, #76]	; 0x4c
90019482:	9b10      	ldr	r3, [sp, #64]	; 0x40
90019484:	eeb0 3a67 	vmov.f32	s6, s15
90019488:	fb92 f3f3 	sdiv	r3, r2, r3
9001948c:	9a03      	ldr	r2, [sp, #12]
9001948e:	9314      	str	r3, [sp, #80]	; 0x50
90019490:	9b10      	ldr	r3, [sp, #64]	; 0x40
90019492:	bf08      	it	eq
90019494:	4613      	moveq	r3, r2
90019496:	e789      	b.n	900193ac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90019498:	1405      	asrs	r5, r0, #16
9001949a:	d436      	bmi.n	9001950a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001949c:	f8d9 2008 	ldr.w	r2, [r9, #8]
900194a0:	42aa      	cmp	r2, r5
900194a2:	dd32      	ble.n	9001950a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900194a4:	140e      	asrs	r6, r1, #16
900194a6:	d430      	bmi.n	9001950a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900194a8:	f8d9 200c 	ldr.w	r2, [r9, #12]
900194ac:	42b2      	cmp	r2, r6
900194ae:	dd2c      	ble.n	9001950a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900194b0:	9a00      	ldr	r2, [sp, #0]
900194b2:	fb06 5502 	mla	r5, r6, r2, r5
900194b6:	9e01      	ldr	r6, [sp, #4]
900194b8:	086a      	lsrs	r2, r5, #1
900194ba:	5cb2      	ldrb	r2, [r6, r2]
900194bc:	07ee      	lsls	r6, r5, #31
900194be:	bf54      	ite	pl
900194c0:	f002 020f 	andpl.w	r2, r2, #15
900194c4:	1112      	asrmi	r2, r2, #4
900194c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900194ca:	b2d2      	uxtb	r2, r2
900194cc:	b1ea      	cbz	r2, 9001950a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900194ce:	9d04      	ldr	r5, [sp, #16]
900194d0:	436a      	muls	r2, r5
900194d2:	1c55      	adds	r5, r2, #1
900194d4:	eb05 2222 	add.w	r2, r5, r2, asr #8
900194d8:	4d6e      	ldr	r5, [pc, #440]	; (90019694 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
900194da:	1212      	asrs	r2, r2, #8
900194dc:	682d      	ldr	r5, [r5, #0]
900194de:	2aff      	cmp	r2, #255	; 0xff
900194e0:	ea4f 2615 	mov.w	r6, r5, lsr #8
900194e4:	9605      	str	r6, [sp, #20]
900194e6:	d116      	bne.n	90019516 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
900194e8:	f06f 0201 	mvn.w	r2, #1
900194ec:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
900194f0:	fb02 fc07 	mul.w	ip, r2, r7
900194f4:	096a      	lsrs	r2, r5, #5
900194f6:	f026 0607 	bic.w	r6, r6, #7
900194fa:	f3c5 05c4 	ubfx	r5, r5, #3, #5
900194fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019502:	4316      	orrs	r6, r2
90019504:	432e      	orrs	r6, r5
90019506:	f824 600c 	strh.w	r6, [r4, ip]
9001950a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001950c:	3f01      	subs	r7, #1
9001950e:	4410      	add	r0, r2
90019510:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019512:	4411      	add	r1, r2
90019514:	e77e      	b.n	90019414 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
90019516:	f06f 0601 	mvn.w	r6, #1
9001951a:	fa1f fa82 	uxth.w	sl, r2
9001951e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
90019522:	43d2      	mvns	r2, r2
90019524:	437e      	muls	r6, r7
90019526:	b2ed      	uxtb	r5, r5
90019528:	fb1c fc0a 	smulbb	ip, ip, sl
9001952c:	b2d2      	uxtb	r2, r2
9001952e:	f834 8006 	ldrh.w	r8, [r4, r6]
90019532:	fb15 f50a 	smulbb	r5, r5, sl
90019536:	9602      	str	r6, [sp, #8]
90019538:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001953c:	f89d 6014 	ldrb.w	r6, [sp, #20]
90019540:	fb16 f60a 	smulbb	r6, r6, sl
90019544:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90019548:	fb0e ce02 	mla	lr, lr, r2, ip
9001954c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
90019550:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90019554:	fa1f fe8e 	uxth.w	lr, lr
90019558:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001955c:	fa5f f888 	uxtb.w	r8, r8
90019560:	fb0c 6c02 	mla	ip, ip, r2, r6
90019564:	fb08 5502 	mla	r5, r8, r2, r5
90019568:	f10e 0201 	add.w	r2, lr, #1
9001956c:	fa1f fc8c 	uxth.w	ip, ip
90019570:	b2ad      	uxth	r5, r5
90019572:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
90019576:	9a02      	ldr	r2, [sp, #8]
90019578:	1c6e      	adds	r6, r5, #1
9001957a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001957e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
90019582:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90019586:	ea46 0e0e 	orr.w	lr, r6, lr
9001958a:	f10c 0601 	add.w	r6, ip, #1
9001958e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
90019592:	0976      	lsrs	r6, r6, #5
90019594:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90019598:	ea4e 0e06 	orr.w	lr, lr, r6
9001959c:	f824 e002 	strh.w	lr, [r4, r2]
900195a0:	e7b3      	b.n	9001950a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
900195a2:	f04f 0800 	mov.w	r8, #0
900195a6:	eba3 0208 	sub.w	r2, r3, r8
900195aa:	2a00      	cmp	r2, #0
900195ac:	f77f af35 	ble.w	9001941a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
900195b0:	1402      	asrs	r2, r0, #16
900195b2:	9e00      	ldr	r6, [sp, #0]
900195b4:	140d      	asrs	r5, r1, #16
900195b6:	fb06 2505 	mla	r5, r6, r5, r2
900195ba:	9e01      	ldr	r6, [sp, #4]
900195bc:	086a      	lsrs	r2, r5, #1
900195be:	07ed      	lsls	r5, r5, #31
900195c0:	5cb2      	ldrb	r2, [r6, r2]
900195c2:	bf54      	ite	pl
900195c4:	f002 020f 	andpl.w	r2, r2, #15
900195c8:	1112      	asrmi	r2, r2, #4
900195ca:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900195ce:	b2d2      	uxtb	r2, r2
900195d0:	b1c2      	cbz	r2, 90019604 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
900195d2:	9d04      	ldr	r5, [sp, #16]
900195d4:	436a      	muls	r2, r5
900195d6:	1c55      	adds	r5, r2, #1
900195d8:	eb05 2222 	add.w	r2, r5, r2, asr #8
900195dc:	4d2d      	ldr	r5, [pc, #180]	; (90019694 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
900195de:	1212      	asrs	r2, r2, #8
900195e0:	682e      	ldr	r6, [r5, #0]
900195e2:	2aff      	cmp	r2, #255	; 0xff
900195e4:	ea4f 2516 	mov.w	r5, r6, lsr #8
900195e8:	d113      	bne.n	90019612 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
900195ea:	0972      	lsrs	r2, r6, #5
900195ec:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
900195f0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
900195f4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900195f8:	f025 0507 	bic.w	r5, r5, #7
900195fc:	4315      	orrs	r5, r2
900195fe:	4335      	orrs	r5, r6
90019600:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
90019604:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019606:	f108 0801 	add.w	r8, r8, #1
9001960a:	4410      	add	r0, r2
9001960c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001960e:	4411      	add	r1, r2
90019610:	e7c9      	b.n	900195a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90019612:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
90019616:	fa1f fa82 	uxth.w	sl, r2
9001961a:	f3c6 4707 	ubfx	r7, r6, #16, #8
9001961e:	43d2      	mvns	r2, r2
90019620:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90019624:	fb17 f70a 	smulbb	r7, r7, sl
90019628:	b2d2      	uxtb	r2, r2
9001962a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001962e:	b2f6      	uxtb	r6, r6
90019630:	b2ed      	uxtb	r5, r5
90019632:	fb0c 7c02 	mla	ip, ip, r2, r7
90019636:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001963a:	fb16 f60a 	smulbb	r6, r6, sl
9001963e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90019642:	fa1f fc8c 	uxth.w	ip, ip
90019646:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001964a:	fb15 f50a 	smulbb	r5, r5, sl
9001964e:	fa5f fe8e 	uxtb.w	lr, lr
90019652:	fb0e 6602 	mla	r6, lr, r2, r6
90019656:	fb07 5702 	mla	r7, r7, r2, r5
9001965a:	f10c 0201 	add.w	r2, ip, #1
9001965e:	b2b6      	uxth	r6, r6
90019660:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
90019664:	1c75      	adds	r5, r6, #1
90019666:	b2bf      	uxth	r7, r7
90019668:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001966c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
90019670:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90019674:	ea45 0c0c 	orr.w	ip, r5, ip
90019678:	1c7d      	adds	r5, r7, #1
9001967a:	eb05 2517 	add.w	r5, r5, r7, lsr #8
9001967e:	096d      	lsrs	r5, r5, #5
90019680:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90019684:	ea4c 0c05 	orr.w	ip, ip, r5
90019688:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
9001968c:	e7ba      	b.n	90019604 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001968e:	b007      	add	sp, #28
90019690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019694:	24026274 	.word	0x24026274

90019698 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90019698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001969c:	b087      	sub	sp, #28
9001969e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900196a2:	f8df 8308 	ldr.w	r8, [pc, #776]	; 900199ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
900196a6:	9815      	ldr	r0, [sp, #84]	; 0x54
900196a8:	9101      	str	r1, [sp, #4]
900196aa:	9205      	str	r2, [sp, #20]
900196ac:	6841      	ldr	r1, [r0, #4]
900196ae:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
900196b2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
900196b6:	fb01 2404 	mla	r4, r1, r4, r2
900196ba:	6802      	ldr	r2, [r0, #0]
900196bc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900196c0:	f8db 2008 	ldr.w	r2, [fp, #8]
900196c4:	3201      	adds	r2, #1
900196c6:	f022 0201 	bic.w	r2, r2, #1
900196ca:	9202      	str	r2, [sp, #8]
900196cc:	f8db 2000 	ldr.w	r2, [fp]
900196d0:	9203      	str	r2, [sp, #12]
900196d2:	9a01      	ldr	r2, [sp, #4]
900196d4:	2a00      	cmp	r2, #0
900196d6:	dc03      	bgt.n	900196e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900196d8:	9a05      	ldr	r2, [sp, #20]
900196da:	2a00      	cmp	r2, #0
900196dc:	f340 8162 	ble.w	900199a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
900196e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
900196e2:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
900196e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900196ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
900196ec:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
900196f0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900196f4:	2b00      	cmp	r3, #0
900196f6:	dd0e      	ble.n	90019716 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
900196f8:	1402      	asrs	r2, r0, #16
900196fa:	d405      	bmi.n	90019708 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900196fc:	42ba      	cmp	r2, r7
900196fe:	da03      	bge.n	90019708 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90019700:	140a      	asrs	r2, r1, #16
90019702:	d401      	bmi.n	90019708 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90019704:	42b2      	cmp	r2, r6
90019706:	db07      	blt.n	90019718 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90019708:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001970a:	3b01      	subs	r3, #1
9001970c:	3402      	adds	r4, #2
9001970e:	4410      	add	r0, r2
90019710:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019712:	4411      	add	r1, r2
90019714:	e7ee      	b.n	900196f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
90019716:	d017      	beq.n	90019748 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
90019718:	1e5a      	subs	r2, r3, #1
9001971a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001971c:	fb05 0502 	mla	r5, r5, r2, r0
90019720:	142d      	asrs	r5, r5, #16
90019722:	d409      	bmi.n	90019738 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90019724:	42bd      	cmp	r5, r7
90019726:	da07      	bge.n	90019738 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90019728:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001972a:	fb05 1202 	mla	r2, r5, r2, r1
9001972e:	1412      	asrs	r2, r2, #16
90019730:	d402      	bmi.n	90019738 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90019732:	42b2      	cmp	r2, r6
90019734:	f2c0 80c3 	blt.w	900198be <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
90019738:	2500      	movs	r5, #0
9001973a:	195a      	adds	r2, r3, r5
9001973c:	2a00      	cmp	r2, #0
9001973e:	dc3f      	bgt.n	900197c0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90019740:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90019744:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019748:	9b01      	ldr	r3, [sp, #4]
9001974a:	2b00      	cmp	r3, #0
9001974c:	f340 812a 	ble.w	900199a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
90019750:	ee30 0a04 	vadd.f32	s0, s0, s8
90019754:	9b10      	ldr	r3, [sp, #64]	; 0x40
90019756:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001975a:	eeb0 6a62 	vmov.f32	s12, s5
9001975e:	eec6 7a80 	vdiv.f32	s15, s13, s0
90019762:	ee31 1a05 	vadd.f32	s2, s2, s10
90019766:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001976a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001976e:	eeb0 6a43 	vmov.f32	s12, s6
90019772:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019776:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001977a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001977e:	ee61 7a27 	vmul.f32	s15, s2, s15
90019782:	ee77 2a62 	vsub.f32	s5, s14, s5
90019786:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001978a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001978e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90019792:	ee12 2a90 	vmov	r2, s5
90019796:	eef0 2a47 	vmov.f32	s5, s14
9001979a:	fb92 f3f3 	sdiv	r3, r2, r3
9001979e:	ee13 2a10 	vmov	r2, s6
900197a2:	9313      	str	r3, [sp, #76]	; 0x4c
900197a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
900197a6:	eeb0 3a67 	vmov.f32	s6, s15
900197aa:	fb92 f3f3 	sdiv	r3, r2, r3
900197ae:	9314      	str	r3, [sp, #80]	; 0x50
900197b0:	9b01      	ldr	r3, [sp, #4]
900197b2:	9a05      	ldr	r2, [sp, #20]
900197b4:	3b01      	subs	r3, #1
900197b6:	9301      	str	r3, [sp, #4]
900197b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
900197ba:	bf08      	it	eq
900197bc:	4613      	moveq	r3, r2
900197be:	e788      	b.n	900196d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900197c0:	1406      	asrs	r6, r0, #16
900197c2:	d42c      	bmi.n	9001981e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900197c4:	f8db 2008 	ldr.w	r2, [fp, #8]
900197c8:	42b2      	cmp	r2, r6
900197ca:	dd28      	ble.n	9001981e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900197cc:	140f      	asrs	r7, r1, #16
900197ce:	d426      	bmi.n	9001981e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900197d0:	f8db 200c 	ldr.w	r2, [fp, #12]
900197d4:	42ba      	cmp	r2, r7
900197d6:	dd22      	ble.n	9001981e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900197d8:	9a02      	ldr	r2, [sp, #8]
900197da:	fb07 6602 	mla	r6, r7, r2, r6
900197de:	9f03      	ldr	r7, [sp, #12]
900197e0:	0872      	lsrs	r2, r6, #1
900197e2:	07f6      	lsls	r6, r6, #31
900197e4:	5cba      	ldrb	r2, [r7, r2]
900197e6:	bf54      	ite	pl
900197e8:	f002 020f 	andpl.w	r2, r2, #15
900197ec:	1112      	asrmi	r2, r2, #4
900197ee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900197f2:	b2d2      	uxtb	r2, r2
900197f4:	2aff      	cmp	r2, #255	; 0xff
900197f6:	d118      	bne.n	9001982a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
900197f8:	f06f 0601 	mvn.w	r6, #1
900197fc:	f8d8 2000 	ldr.w	r2, [r8]
90019800:	fb06 f705 	mul.w	r7, r6, r5
90019804:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
90019808:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
9001980c:	0956      	lsrs	r6, r2, #5
9001980e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90019812:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90019816:	ea4c 0606 	orr.w	r6, ip, r6
9001981a:	4316      	orrs	r6, r2
9001981c:	53e6      	strh	r6, [r4, r7]
9001981e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019820:	3d01      	subs	r5, #1
90019822:	4410      	add	r0, r2
90019824:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019826:	4411      	add	r1, r2
90019828:	e787      	b.n	9001973a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001982a:	2a00      	cmp	r2, #0
9001982c:	d0f7      	beq.n	9001981e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001982e:	f06f 0601 	mvn.w	r6, #1
90019832:	f8d8 c000 	ldr.w	ip, [r8]
90019836:	fa1f f982 	uxth.w	r9, r2
9001983a:	43d2      	mvns	r2, r2
9001983c:	436e      	muls	r6, r5
9001983e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
90019842:	b2d2      	uxtb	r2, r2
90019844:	f834 e006 	ldrh.w	lr, [r4, r6]
90019848:	fb1a fa09 	smulbb	sl, sl, r9
9001984c:	9604      	str	r6, [sp, #16]
9001984e:	f3cc 4607 	ubfx	r6, ip, #16, #8
90019852:	ea4f 272e 	mov.w	r7, lr, asr #8
90019856:	fb16 f609 	smulbb	r6, r6, r9
9001985a:	fa5f fc8c 	uxtb.w	ip, ip
9001985e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90019862:	fb1c fc09 	smulbb	ip, ip, r9
90019866:	fb07 6702 	mla	r7, r7, r2, r6
9001986a:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001986e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90019872:	b2bf      	uxth	r7, r7
90019874:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90019878:	fa5f fe8e 	uxtb.w	lr, lr
9001987c:	fb06 a602 	mla	r6, r6, r2, sl
90019880:	fb0e cc02 	mla	ip, lr, r2, ip
90019884:	1c7a      	adds	r2, r7, #1
90019886:	b2b6      	uxth	r6, r6
90019888:	fa1f fc8c 	uxth.w	ip, ip
9001988c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90019890:	9a04      	ldr	r2, [sp, #16]
90019892:	f10c 0a01 	add.w	sl, ip, #1
90019896:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001989a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
9001989e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900198a2:	ea4a 0707 	orr.w	r7, sl, r7
900198a6:	f106 0a01 	add.w	sl, r6, #1
900198aa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900198ae:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900198b2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900198b6:	ea47 070a 	orr.w	r7, r7, sl
900198ba:	52a7      	strh	r7, [r4, r2]
900198bc:	e7af      	b.n	9001981e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
900198be:	f04f 0e00 	mov.w	lr, #0
900198c2:	eba3 020e 	sub.w	r2, r3, lr
900198c6:	2a00      	cmp	r2, #0
900198c8:	f77f af3a 	ble.w	90019740 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
900198cc:	1402      	asrs	r2, r0, #16
900198ce:	9e02      	ldr	r6, [sp, #8]
900198d0:	140d      	asrs	r5, r1, #16
900198d2:	fb06 2505 	mla	r5, r6, r5, r2
900198d6:	9e03      	ldr	r6, [sp, #12]
900198d8:	086a      	lsrs	r2, r5, #1
900198da:	07ed      	lsls	r5, r5, #31
900198dc:	5cb2      	ldrb	r2, [r6, r2]
900198de:	bf54      	ite	pl
900198e0:	f002 020f 	andpl.w	r2, r2, #15
900198e4:	1112      	asrmi	r2, r2, #4
900198e6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
900198ea:	b2d2      	uxtb	r2, r2
900198ec:	2aff      	cmp	r2, #255	; 0xff
900198ee:	d115      	bne.n	9001991c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
900198f0:	f8d8 5000 	ldr.w	r5, [r8]
900198f4:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
900198f8:	ea02 2615 	and.w	r6, r2, r5, lsr #8
900198fc:	096a      	lsrs	r2, r5, #5
900198fe:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90019902:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019906:	4332      	orrs	r2, r6
90019908:	432a      	orrs	r2, r5
9001990a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
9001990e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019910:	f10e 0e01 	add.w	lr, lr, #1
90019914:	4410      	add	r0, r2
90019916:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019918:	4411      	add	r1, r2
9001991a:	e7d2      	b.n	900198c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001991c:	2a00      	cmp	r2, #0
9001991e:	d0f6      	beq.n	9001990e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
90019920:	f8d8 7000 	ldr.w	r7, [r8]
90019924:	fa1f f982 	uxth.w	r9, r2
90019928:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001992c:	43d2      	mvns	r2, r2
9001992e:	f3c7 4507 	ubfx	r5, r7, #16, #8
90019932:	f3c7 2a07 	ubfx	sl, r7, #8, #8
90019936:	ea4f 262c 	mov.w	r6, ip, asr #8
9001993a:	fb15 f509 	smulbb	r5, r5, r9
9001993e:	b2d2      	uxtb	r2, r2
90019940:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90019944:	b2ff      	uxtb	r7, r7
90019946:	fb1a fa09 	smulbb	sl, sl, r9
9001994a:	fb06 5602 	mla	r6, r6, r2, r5
9001994e:	ea4f 05ec 	mov.w	r5, ip, asr #3
90019952:	fb17 f709 	smulbb	r7, r7, r9
90019956:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001995a:	b2b6      	uxth	r6, r6
9001995c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90019960:	fa5f fc8c 	uxtb.w	ip, ip
90019964:	fb05 a502 	mla	r5, r5, r2, sl
90019968:	fb0c 7702 	mla	r7, ip, r2, r7
9001996c:	1c72      	adds	r2, r6, #1
9001996e:	b2ad      	uxth	r5, r5
90019970:	b2bf      	uxth	r7, r7
90019972:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90019976:	f107 0a01 	add.w	sl, r7, #1
9001997a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001997e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90019982:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90019986:	ea4a 0606 	orr.w	r6, sl, r6
9001998a:	f105 0a01 	add.w	sl, r5, #1
9001998e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90019992:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019996:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001999a:	ea46 060a 	orr.w	r6, r6, sl
9001999e:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
900199a2:	e7b4      	b.n	9001990e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
900199a4:	b007      	add	sp, #28
900199a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900199aa:	bf00      	nop
900199ac:	24026274 	.word	0x24026274

900199b0 <_ZN8touchgfx8LCD16bppD1Ev>:
900199b0:	4770      	bx	lr

900199b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
900199b2:	4770      	bx	lr

900199b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
900199b4:	4770      	bx	lr

900199b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
900199b6:	4770      	bx	lr

900199b8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
900199b8:	4770      	bx	lr

900199ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
900199ba:	4770      	bx	lr

900199bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
900199bc:	4770      	bx	lr

900199be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
900199be:	4770      	bx	lr

900199c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
900199c0:	4770      	bx	lr

900199c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
900199c2:	4770      	bx	lr

900199c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
900199c4:	4770      	bx	lr

900199c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
900199c6:	4770      	bx	lr

900199c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
900199c8:	4770      	bx	lr

900199ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
900199ca:	4770      	bx	lr

900199cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
900199cc:	4770      	bx	lr

900199ce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
900199ce:	4770      	bx	lr

900199d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
900199d0:	4770      	bx	lr

900199d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
900199d2:	4770      	bx	lr

900199d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
900199d4:	4770      	bx	lr

900199d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
900199d6:	4770      	bx	lr

900199d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
900199d8:	4770      	bx	lr

900199da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
900199da:	4770      	bx	lr

900199dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
900199dc:	4770      	bx	lr

900199de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
900199de:	4770      	bx	lr

900199e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
900199e0:	4770      	bx	lr

900199e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
900199e2:	4770      	bx	lr

900199e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
900199e4:	4770      	bx	lr

900199e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
900199e6:	4770      	bx	lr

900199e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
900199e8:	4770      	bx	lr

900199ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
900199ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900199ee:	b088      	sub	sp, #32
900199f0:	4606      	mov	r6, r0
900199f2:	4688      	mov	r8, r1
900199f4:	4691      	mov	r9, r2
900199f6:	ac08      	add	r4, sp, #32
900199f8:	f824 3d0c 	strh.w	r3, [r4, #-12]!
900199fc:	4620      	mov	r0, r4
900199fe:	f7fd fc67 	bl	900172d0 <_ZNK8touchgfx6Bitmap7getDataEv>
90019a02:	6833      	ldr	r3, [r6, #0]
90019a04:	4605      	mov	r5, r0
90019a06:	4620      	mov	r0, r4
90019a08:	699f      	ldr	r7, [r3, #24]
90019a0a:	f7fd fb75 	bl	900170f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
90019a0e:	4682      	mov	sl, r0
90019a10:	4620      	mov	r0, r4
90019a12:	f7fd fba5 	bl	90017160 <_ZNK8touchgfx6Bitmap9getHeightEv>
90019a16:	9500      	str	r5, [sp, #0]
90019a18:	464b      	mov	r3, r9
90019a1a:	4642      	mov	r2, r8
90019a1c:	4631      	mov	r1, r6
90019a1e:	e9cd a001 	strd	sl, r0, [sp, #4]
90019a22:	a806      	add	r0, sp, #24
90019a24:	47b8      	blx	r7
90019a26:	4628      	mov	r0, r5
90019a28:	b008      	add	sp, #32
90019a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

90019a30 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
90019a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90019a34:	2300      	movs	r3, #0
90019a36:	9300      	str	r3, [sp, #0]
90019a38:	4b3d      	ldr	r3, [pc, #244]	; (90019b30 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
90019a3a:	781b      	ldrb	r3, [r3, #0]
90019a3c:	2b00      	cmp	r3, #0
90019a3e:	d137      	bne.n	90019ab0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
90019a40:	4a3c      	ldr	r2, [pc, #240]	; (90019b34 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90019a42:	f9b2 2000 	ldrsh.w	r2, [r2]
90019a46:	f8ad 2004 	strh.w	r2, [sp, #4]
90019a4a:	2b00      	cmp	r3, #0
90019a4c:	d132      	bne.n	90019ab4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
90019a4e:	4b3a      	ldr	r3, [pc, #232]	; (90019b38 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
90019a50:	f9b3 3000 	ldrsh.w	r3, [r3]
90019a54:	ac02      	add	r4, sp, #8
90019a56:	6808      	ldr	r0, [r1, #0]
90019a58:	f8ad 3006 	strh.w	r3, [sp, #6]
90019a5c:	ab02      	add	r3, sp, #8
90019a5e:	6849      	ldr	r1, [r1, #4]
90019a60:	4d36      	ldr	r5, [pc, #216]	; (90019b3c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
90019a62:	c303      	stmia	r3!, {r0, r1}
90019a64:	4669      	mov	r1, sp
90019a66:	4620      	mov	r0, r4
90019a68:	f7fa f9d2 	bl	90013e10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019a6c:	4668      	mov	r0, sp
90019a6e:	f7fa f9a7 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019a72:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90019a76:	f8bd 2000 	ldrh.w	r2, [sp]
90019a7a:	462f      	mov	r7, r5
90019a7c:	6828      	ldr	r0, [r5, #0]
90019a7e:	4413      	add	r3, r2
90019a80:	f8bd 2002 	ldrh.w	r2, [sp, #2]
90019a84:	f8ad 3008 	strh.w	r3, [sp, #8]
90019a88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90019a8c:	4413      	add	r3, r2
90019a8e:	f8ad 300a 	strh.w	r3, [sp, #10]
90019a92:	6803      	ldr	r3, [r0, #0]
90019a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90019a96:	4798      	blx	r3
90019a98:	f010 0f01 	tst.w	r0, #1
90019a9c:	d00c      	beq.n	90019ab8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
90019a9e:	6828      	ldr	r0, [r5, #0]
90019aa0:	6803      	ldr	r3, [r0, #0]
90019aa2:	e894 0006 	ldmia.w	r4, {r1, r2}
90019aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90019aa8:	4798      	blx	r3
90019aaa:	b004      	add	sp, #16
90019aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90019ab0:	4a21      	ldr	r2, [pc, #132]	; (90019b38 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
90019ab2:	e7c6      	b.n	90019a42 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
90019ab4:	4b1f      	ldr	r3, [pc, #124]	; (90019b34 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90019ab6:	e7cb      	b.n	90019a50 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
90019ab8:	6838      	ldr	r0, [r7, #0]
90019aba:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
90019abe:	6803      	ldr	r3, [r0, #0]
90019ac0:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
90019ac4:	ea4f 0848 	mov.w	r8, r8, lsl #1
90019ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90019aca:	4798      	blx	r3
90019acc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
90019ad0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90019ad4:	f8bd 6004 	ldrh.w	r6, [sp, #4]
90019ad8:	fb16 3602 	smlabb	r6, r6, r2, r3
90019adc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90019ae0:	6838      	ldr	r0, [r7, #0]
90019ae2:	6803      	ldr	r3, [r0, #0]
90019ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019ae6:	4798      	blx	r3
90019ae8:	4a12      	ldr	r2, [pc, #72]	; (90019b34 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
90019aea:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
90019aee:	8813      	ldrh	r3, [r2, #0]
90019af0:	4691      	mov	r9, r2
90019af2:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
90019af6:	435d      	muls	r5, r3
90019af8:	fb03 1404 	mla	r4, r3, r4, r1
90019afc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90019b00:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90019b04:	6838      	ldr	r0, [r7, #0]
90019b06:	42ac      	cmp	r4, r5
90019b08:	6803      	ldr	r3, [r0, #0]
90019b0a:	d20e      	bcs.n	90019b2a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
90019b0c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
90019b10:	4632      	mov	r2, r6
90019b12:	4643      	mov	r3, r8
90019b14:	4621      	mov	r1, r4
90019b16:	47d0      	blx	sl
90019b18:	f8b9 3000 	ldrh.w	r3, [r9]
90019b1c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019b20:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
90019b24:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90019b28:	e7ec      	b.n	90019b04 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
90019b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019b2c:	4798      	blx	r3
90019b2e:	e7bc      	b.n	90019aaa <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
90019b30:	24026264 	.word	0x24026264
90019b34:	24026266 	.word	0x24026266
90019b38:	24026268 	.word	0x24026268
90019b3c:	2402626c 	.word	0x2402626c

90019b40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
90019b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019b44:	b08b      	sub	sp, #44	; 0x2c
90019b46:	460f      	mov	r7, r1
90019b48:	4616      	mov	r6, r2
90019b4a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
90019b4e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
90019b52:	f1bb 0f00 	cmp.w	fp, #0
90019b56:	d049      	beq.n	90019bec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
90019b58:	6810      	ldr	r0, [r2, #0]
90019b5a:	ad06      	add	r5, sp, #24
90019b5c:	6851      	ldr	r1, [r2, #4]
90019b5e:	c503      	stmia	r5!, {r0, r1}
90019b60:	6818      	ldr	r0, [r3, #0]
90019b62:	ad08      	add	r5, sp, #32
90019b64:	6859      	ldr	r1, [r3, #4]
90019b66:	c503      	stmia	r5!, {r0, r1}
90019b68:	a806      	add	r0, sp, #24
90019b6a:	f7fa f929 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019b6e:	4631      	mov	r1, r6
90019b70:	a808      	add	r0, sp, #32
90019b72:	f7fa f94d 	bl	90013e10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019b76:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
90019b7a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
90019b7e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
90019b82:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
90019b86:	fb16 2103 	smlabb	r1, r6, r3, r2
90019b8a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
90019b8e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
90019b92:	f8bd 1018 	ldrh.w	r1, [sp, #24]
90019b96:	4f5f      	ldr	r7, [pc, #380]	; (90019d14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
90019b98:	440a      	add	r2, r1
90019b9a:	6838      	ldr	r0, [r7, #0]
90019b9c:	46b9      	mov	r9, r7
90019b9e:	f8ad 2020 	strh.w	r2, [sp, #32]
90019ba2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90019ba6:	4413      	add	r3, r2
90019ba8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90019bac:	6803      	ldr	r3, [r0, #0]
90019bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90019bb0:	4798      	blx	r3
90019bb2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
90019bb6:	d01c      	beq.n	90019bf2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
90019bb8:	f010 0f04 	tst.w	r0, #4
90019bbc:	d01d      	beq.n	90019bfa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
90019bbe:	f8d9 0000 	ldr.w	r0, [r9]
90019bc2:	2700      	movs	r7, #0
90019bc4:	b2ad      	uxth	r5, r5
90019bc6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
90019bca:	6801      	ldr	r1, [r0, #0]
90019bcc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90019bd0:	f8cd b00c 	str.w	fp, [sp, #12]
90019bd4:	9501      	str	r5, [sp, #4]
90019bd6:	e9cd 4704 	strd	r4, r7, [sp, #16]
90019bda:	f8bd 401c 	ldrh.w	r4, [sp, #28]
90019bde:	9402      	str	r4, [sp, #8]
90019be0:	fa1f f488 	uxth.w	r4, r8
90019be4:	9400      	str	r4, [sp, #0]
90019be6:	6c4c      	ldr	r4, [r1, #68]	; 0x44
90019be8:	4631      	mov	r1, r6
90019bea:	47a0      	blx	r4
90019bec:	b00b      	add	sp, #44	; 0x2c
90019bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019bf2:	b914      	cbnz	r4, 90019bfa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
90019bf4:	f010 0f01 	tst.w	r0, #1
90019bf8:	e7e0      	b.n	90019bbc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
90019bfa:	f8d9 0000 	ldr.w	r0, [r9]
90019bfe:	ea4f 0748 	mov.w	r7, r8, lsl #1
90019c02:	6803      	ldr	r3, [r0, #0]
90019c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019c06:	4798      	blx	r3
90019c08:	4b43      	ldr	r3, [pc, #268]	; (90019d18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
90019c0a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
90019c0e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
90019c12:	881a      	ldrh	r2, [r3, #0]
90019c14:	469a      	mov	sl, r3
90019c16:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
90019c1a:	fb05 f502 	mul.w	r5, r5, r2
90019c1e:	fb02 1404 	mla	r4, r2, r4, r1
90019c22:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90019c26:	d059      	beq.n	90019cdc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
90019c28:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
90019c2c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90019c30:	fa1f f28b 	uxth.w	r2, fp
90019c34:	469e      	mov	lr, r3
90019c36:	fa1f f989 	uxth.w	r9, r9
90019c3a:	42ac      	cmp	r4, r5
90019c3c:	d264      	bcs.n	90019d08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90019c3e:	eb04 0a07 	add.w	sl, r4, r7
90019c42:	4554      	cmp	r4, sl
90019c44:	d23d      	bcs.n	90019cc2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
90019c46:	8821      	ldrh	r1, [r4, #0]
90019c48:	f836 3b02 	ldrh.w	r3, [r6], #2
90019c4c:	1208      	asrs	r0, r1, #8
90019c4e:	ea4f 2c23 	mov.w	ip, r3, asr #8
90019c52:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90019c56:	ea4f 0be1 	mov.w	fp, r1, asr #3
90019c5a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019c5e:	00c9      	lsls	r1, r1, #3
90019c60:	fb10 f009 	smulbb	r0, r0, r9
90019c64:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90019c68:	b2c9      	uxtb	r1, r1
90019c6a:	fb0c 0c02 	mla	ip, ip, r2, r0
90019c6e:	10d8      	asrs	r0, r3, #3
90019c70:	fb1b fb09 	smulbb	fp, fp, r9
90019c74:	00db      	lsls	r3, r3, #3
90019c76:	fa1f fc8c 	uxth.w	ip, ip
90019c7a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90019c7e:	fb11 f109 	smulbb	r1, r1, r9
90019c82:	b2db      	uxtb	r3, r3
90019c84:	fb00 b002 	mla	r0, r0, r2, fp
90019c88:	f10c 0b01 	add.w	fp, ip, #1
90019c8c:	fb03 1302 	mla	r3, r3, r2, r1
90019c90:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
90019c94:	b29b      	uxth	r3, r3
90019c96:	b280      	uxth	r0, r0
90019c98:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
90019c9c:	f103 0c01 	add.w	ip, r3, #1
90019ca0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90019ca4:	1c43      	adds	r3, r0, #1
90019ca6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90019caa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
90019cae:	0940      	lsrs	r0, r0, #5
90019cb0:	ea4c 0c0b 	orr.w	ip, ip, fp
90019cb4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90019cb8:	ea4c 0c00 	orr.w	ip, ip, r0
90019cbc:	f824 cb02 	strh.w	ip, [r4], #2
90019cc0:	e7bf      	b.n	90019c42 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
90019cc2:	f8be 3000 	ldrh.w	r3, [lr]
90019cc6:	eba3 0308 	sub.w	r3, r3, r8
90019cca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019cce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90019cd2:	eba3 0308 	sub.w	r3, r3, r8
90019cd6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90019cda:	e7ae      	b.n	90019c3a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
90019cdc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
90019ce0:	f8d9 0000 	ldr.w	r0, [r9]
90019ce4:	42ac      	cmp	r4, r5
90019ce6:	6803      	ldr	r3, [r0, #0]
90019ce8:	d20e      	bcs.n	90019d08 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
90019cea:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
90019cee:	4632      	mov	r2, r6
90019cf0:	463b      	mov	r3, r7
90019cf2:	4621      	mov	r1, r4
90019cf4:	47c0      	blx	r8
90019cf6:	f8ba 3000 	ldrh.w	r3, [sl]
90019cfa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019cfe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90019d02:	eb06 0643 	add.w	r6, r6, r3, lsl #1
90019d06:	e7eb      	b.n	90019ce0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
90019d08:	4b02      	ldr	r3, [pc, #8]	; (90019d14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
90019d0a:	6818      	ldr	r0, [r3, #0]
90019d0c:	6803      	ldr	r3, [r0, #0]
90019d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019d10:	4798      	blx	r3
90019d12:	e76b      	b.n	90019bec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
90019d14:	2402626c 	.word	0x2402626c
90019d18:	24026266 	.word	0x24026266

90019d1c <_ZN8touchgfx8LCD16bppD0Ev>:
90019d1c:	b510      	push	{r4, lr}
90019d1e:	4604      	mov	r4, r0
90019d20:	2178      	movs	r1, #120	; 0x78
90019d22:	f008 ffca 	bl	90022cba <_ZdlPvj>
90019d26:	4620      	mov	r0, r4
90019d28:	bd10      	pop	{r4, pc}

90019d2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90019d2a:	b510      	push	{r4, lr}
90019d2c:	4604      	mov	r4, r0
90019d2e:	2104      	movs	r1, #4
90019d30:	f008 ffc3 	bl	90022cba <_ZdlPvj>
90019d34:	4620      	mov	r0, r4
90019d36:	bd10      	pop	{r4, pc}

90019d38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90019d38:	b510      	push	{r4, lr}
90019d3a:	4604      	mov	r4, r0
90019d3c:	2104      	movs	r1, #4
90019d3e:	f008 ffbc 	bl	90022cba <_ZdlPvj>
90019d42:	4620      	mov	r0, r4
90019d44:	bd10      	pop	{r4, pc}

90019d46 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
90019d46:	b510      	push	{r4, lr}
90019d48:	4604      	mov	r4, r0
90019d4a:	2104      	movs	r1, #4
90019d4c:	f008 ffb5 	bl	90022cba <_ZdlPvj>
90019d50:	4620      	mov	r0, r4
90019d52:	bd10      	pop	{r4, pc}

90019d54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
90019d54:	b510      	push	{r4, lr}
90019d56:	4604      	mov	r4, r0
90019d58:	2104      	movs	r1, #4
90019d5a:	f008 ffae 	bl	90022cba <_ZdlPvj>
90019d5e:	4620      	mov	r0, r4
90019d60:	bd10      	pop	{r4, pc}

90019d62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
90019d62:	b510      	push	{r4, lr}
90019d64:	4604      	mov	r4, r0
90019d66:	2104      	movs	r1, #4
90019d68:	f008 ffa7 	bl	90022cba <_ZdlPvj>
90019d6c:	4620      	mov	r0, r4
90019d6e:	bd10      	pop	{r4, pc}

90019d70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
90019d70:	b510      	push	{r4, lr}
90019d72:	4604      	mov	r4, r0
90019d74:	2104      	movs	r1, #4
90019d76:	f008 ffa0 	bl	90022cba <_ZdlPvj>
90019d7a:	4620      	mov	r0, r4
90019d7c:	bd10      	pop	{r4, pc}

90019d7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
90019d7e:	b510      	push	{r4, lr}
90019d80:	4604      	mov	r4, r0
90019d82:	2104      	movs	r1, #4
90019d84:	f008 ff99 	bl	90022cba <_ZdlPvj>
90019d88:	4620      	mov	r0, r4
90019d8a:	bd10      	pop	{r4, pc}

90019d8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
90019d8c:	b510      	push	{r4, lr}
90019d8e:	4604      	mov	r4, r0
90019d90:	2104      	movs	r1, #4
90019d92:	f008 ff92 	bl	90022cba <_ZdlPvj>
90019d96:	4620      	mov	r0, r4
90019d98:	bd10      	pop	{r4, pc}

90019d9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90019d9a:	b510      	push	{r4, lr}
90019d9c:	4604      	mov	r4, r0
90019d9e:	2104      	movs	r1, #4
90019da0:	f008 ff8b 	bl	90022cba <_ZdlPvj>
90019da4:	4620      	mov	r0, r4
90019da6:	bd10      	pop	{r4, pc}

90019da8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
90019da8:	b510      	push	{r4, lr}
90019daa:	4604      	mov	r4, r0
90019dac:	2104      	movs	r1, #4
90019dae:	f008 ff84 	bl	90022cba <_ZdlPvj>
90019db2:	4620      	mov	r0, r4
90019db4:	bd10      	pop	{r4, pc}

90019db6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90019db6:	b510      	push	{r4, lr}
90019db8:	4604      	mov	r4, r0
90019dba:	2104      	movs	r1, #4
90019dbc:	f008 ff7d 	bl	90022cba <_ZdlPvj>
90019dc0:	4620      	mov	r0, r4
90019dc2:	bd10      	pop	{r4, pc}

90019dc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90019dc4:	b510      	push	{r4, lr}
90019dc6:	4604      	mov	r4, r0
90019dc8:	2104      	movs	r1, #4
90019dca:	f008 ff76 	bl	90022cba <_ZdlPvj>
90019dce:	4620      	mov	r0, r4
90019dd0:	bd10      	pop	{r4, pc}

90019dd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
90019dd2:	b510      	push	{r4, lr}
90019dd4:	4604      	mov	r4, r0
90019dd6:	2104      	movs	r1, #4
90019dd8:	f008 ff6f 	bl	90022cba <_ZdlPvj>
90019ddc:	4620      	mov	r0, r4
90019dde:	bd10      	pop	{r4, pc}

90019de0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
90019de0:	b510      	push	{r4, lr}
90019de2:	4604      	mov	r4, r0
90019de4:	2104      	movs	r1, #4
90019de6:	f008 ff68 	bl	90022cba <_ZdlPvj>
90019dea:	4620      	mov	r0, r4
90019dec:	bd10      	pop	{r4, pc}

90019dee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90019dee:	b510      	push	{r4, lr}
90019df0:	4604      	mov	r4, r0
90019df2:	2104      	movs	r1, #4
90019df4:	f008 ff61 	bl	90022cba <_ZdlPvj>
90019df8:	4620      	mov	r0, r4
90019dfa:	bd10      	pop	{r4, pc}

90019dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
90019dfc:	b510      	push	{r4, lr}
90019dfe:	4604      	mov	r4, r0
90019e00:	2104      	movs	r1, #4
90019e02:	f008 ff5a 	bl	90022cba <_ZdlPvj>
90019e06:	4620      	mov	r0, r4
90019e08:	bd10      	pop	{r4, pc}

90019e0a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
90019e0a:	b510      	push	{r4, lr}
90019e0c:	4604      	mov	r4, r0
90019e0e:	2104      	movs	r1, #4
90019e10:	f008 ff53 	bl	90022cba <_ZdlPvj>
90019e14:	4620      	mov	r0, r4
90019e16:	bd10      	pop	{r4, pc}

90019e18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
90019e18:	b510      	push	{r4, lr}
90019e1a:	4604      	mov	r4, r0
90019e1c:	2104      	movs	r1, #4
90019e1e:	f008 ff4c 	bl	90022cba <_ZdlPvj>
90019e22:	4620      	mov	r0, r4
90019e24:	bd10      	pop	{r4, pc}

90019e26 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90019e26:	b510      	push	{r4, lr}
90019e28:	4604      	mov	r4, r0
90019e2a:	2104      	movs	r1, #4
90019e2c:	f008 ff45 	bl	90022cba <_ZdlPvj>
90019e30:	4620      	mov	r0, r4
90019e32:	bd10      	pop	{r4, pc}

90019e34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
90019e34:	b510      	push	{r4, lr}
90019e36:	4604      	mov	r4, r0
90019e38:	2104      	movs	r1, #4
90019e3a:	f008 ff3e 	bl	90022cba <_ZdlPvj>
90019e3e:	4620      	mov	r0, r4
90019e40:	bd10      	pop	{r4, pc}

90019e42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
90019e42:	b510      	push	{r4, lr}
90019e44:	4604      	mov	r4, r0
90019e46:	2104      	movs	r1, #4
90019e48:	f008 ff37 	bl	90022cba <_ZdlPvj>
90019e4c:	4620      	mov	r0, r4
90019e4e:	bd10      	pop	{r4, pc}

90019e50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
90019e50:	b510      	push	{r4, lr}
90019e52:	4604      	mov	r4, r0
90019e54:	2104      	movs	r1, #4
90019e56:	f008 ff30 	bl	90022cba <_ZdlPvj>
90019e5a:	4620      	mov	r0, r4
90019e5c:	bd10      	pop	{r4, pc}

90019e5e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
90019e5e:	b510      	push	{r4, lr}
90019e60:	4604      	mov	r4, r0
90019e62:	2104      	movs	r1, #4
90019e64:	f008 ff29 	bl	90022cba <_ZdlPvj>
90019e68:	4620      	mov	r0, r4
90019e6a:	bd10      	pop	{r4, pc}

90019e6c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
90019e6c:	b510      	push	{r4, lr}
90019e6e:	4604      	mov	r4, r0
90019e70:	2104      	movs	r1, #4
90019e72:	f008 ff22 	bl	90022cba <_ZdlPvj>
90019e76:	4620      	mov	r0, r4
90019e78:	bd10      	pop	{r4, pc}

90019e7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
90019e7a:	b510      	push	{r4, lr}
90019e7c:	4604      	mov	r4, r0
90019e7e:	2104      	movs	r1, #4
90019e80:	f008 ff1b 	bl	90022cba <_ZdlPvj>
90019e84:	4620      	mov	r0, r4
90019e86:	bd10      	pop	{r4, pc}

90019e88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
90019e88:	b510      	push	{r4, lr}
90019e8a:	4604      	mov	r4, r0
90019e8c:	2104      	movs	r1, #4
90019e8e:	f008 ff14 	bl	90022cba <_ZdlPvj>
90019e92:	4620      	mov	r0, r4
90019e94:	bd10      	pop	{r4, pc}

90019e96 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
90019e96:	b510      	push	{r4, lr}
90019e98:	4604      	mov	r4, r0
90019e9a:	2104      	movs	r1, #4
90019e9c:	f008 ff0d 	bl	90022cba <_ZdlPvj>
90019ea0:	4620      	mov	r0, r4
90019ea2:	bd10      	pop	{r4, pc}

90019ea4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
90019ea4:	b510      	push	{r4, lr}
90019ea6:	4604      	mov	r4, r0
90019ea8:	2104      	movs	r1, #4
90019eaa:	f008 ff06 	bl	90022cba <_ZdlPvj>
90019eae:	4620      	mov	r0, r4
90019eb0:	bd10      	pop	{r4, pc}
	...

90019eb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
90019eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019eb8:	b091      	sub	sp, #68	; 0x44
90019eba:	469b      	mov	fp, r3
90019ebc:	4616      	mov	r6, r2
90019ebe:	f9b3 2000 	ldrsh.w	r2, [r3]
90019ec2:	f10d 0828 	add.w	r8, sp, #40	; 0x28
90019ec6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90019eca:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
90019ece:	4604      	mov	r4, r0
90019ed0:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
90019ed4:	4640      	mov	r0, r8
90019ed6:	460d      	mov	r5, r1
90019ed8:	4659      	mov	r1, fp
90019eda:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90019ede:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90019ee2:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
90019ee6:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
90019eea:	f7f7 f9df 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
90019eee:	4631      	mov	r1, r6
90019ef0:	4640      	mov	r0, r8
90019ef2:	f7f7 f9db 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
90019ef6:	4b74      	ldr	r3, [pc, #464]	; (9001a0c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
90019ef8:	8818      	ldrh	r0, [r3, #0]
90019efa:	4b74      	ldr	r3, [pc, #464]	; (9001a0cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
90019efc:	b202      	sxth	r2, r0
90019efe:	8819      	ldrh	r1, [r3, #0]
90019f00:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90019f04:	b20e      	sxth	r6, r1
90019f06:	2b00      	cmp	r3, #0
90019f08:	da07      	bge.n	90019f1a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
90019f0a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90019f0e:	4463      	add	r3, ip
90019f10:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
90019f14:	2300      	movs	r3, #0
90019f16:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
90019f1a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
90019f1e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
90019f22:	1ad2      	subs	r2, r2, r3
90019f24:	4594      	cmp	ip, r2
90019f26:	bfc4      	itt	gt
90019f28:	1ac2      	subgt	r2, r0, r3
90019f2a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
90019f2e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
90019f32:	2a00      	cmp	r2, #0
90019f34:	da07      	bge.n	90019f46 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
90019f36:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
90019f3a:	4462      	add	r2, ip
90019f3c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90019f40:	2200      	movs	r2, #0
90019f42:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
90019f46:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
90019f4a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
90019f4e:	eba6 060a 	sub.w	r6, r6, sl
90019f52:	42b2      	cmp	r2, r6
90019f54:	bfc4      	itt	gt
90019f56:	eba1 020a 	subgt.w	r2, r1, sl
90019f5a:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
90019f5e:	4a5c      	ldr	r2, [pc, #368]	; (9001a0d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
90019f60:	7812      	ldrb	r2, [r2, #0]
90019f62:	b9a2      	cbnz	r2, 90019f8e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
90019f64:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
90019f68:	4286      	cmp	r6, r0
90019f6a:	4640      	mov	r0, r8
90019f6c:	9303      	str	r3, [sp, #12]
90019f6e:	bf14      	ite	ne
90019f70:	2600      	movne	r6, #0
90019f72:	2601      	moveq	r6, #1
90019f74:	f7f7 f9dd 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
90019f78:	9b03      	ldr	r3, [sp, #12]
90019f7a:	b160      	cbz	r0, 90019f96 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
90019f7c:	2300      	movs	r3, #0
90019f7e:	8023      	strh	r3, [r4, #0]
90019f80:	8063      	strh	r3, [r4, #2]
90019f82:	80a3      	strh	r3, [r4, #4]
90019f84:	4620      	mov	r0, r4
90019f86:	80e3      	strh	r3, [r4, #6]
90019f88:	b011      	add	sp, #68	; 0x44
90019f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019f8e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
90019f92:	428e      	cmp	r6, r1
90019f94:	e7e9      	b.n	90019f6a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
90019f96:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
90019f9a:	a90e      	add	r1, sp, #56	; 0x38
90019f9c:	900e      	str	r0, [sp, #56]	; 0x38
90019f9e:	a80c      	add	r0, sp, #48	; 0x30
90019fa0:	9205      	str	r2, [sp, #20]
90019fa2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
90019fa6:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
90019faa:	9206      	str	r2, [sp, #24]
90019fac:	f8bb 2000 	ldrh.w	r2, [fp]
90019fb0:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
90019fb4:	1a9b      	subs	r3, r3, r2
90019fb6:	b21b      	sxth	r3, r3
90019fb8:	9303      	str	r3, [sp, #12]
90019fba:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90019fbe:	f8df b118 	ldr.w	fp, [pc, #280]	; 9001a0d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
90019fc2:	ebaa 0a03 	sub.w	sl, sl, r3
90019fc6:	fa0f f38a 	sxth.w	r3, sl
90019fca:	9304      	str	r3, [sp, #16]
90019fcc:	9b03      	ldr	r3, [sp, #12]
90019fce:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
90019fd2:	9b04      	ldr	r3, [sp, #16]
90019fd4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90019fd8:	9b05      	ldr	r3, [sp, #20]
90019fda:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
90019fde:	9b06      	ldr	r3, [sp, #24]
90019fe0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90019fe4:	f7f9 ff14 	bl	90013e10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90019fe8:	4640      	mov	r0, r8
90019fea:	f7f9 fee9 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019fee:	a80e      	add	r0, sp, #56	; 0x38
90019ff0:	f7f9 fee6 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90019ff4:	4b37      	ldr	r3, [pc, #220]	; (9001a0d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
90019ff6:	4628      	mov	r0, r5
90019ff8:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
90019ffc:	881b      	ldrh	r3, [r3, #0]
90019ffe:	9307      	str	r3, [sp, #28]
9001a000:	682b      	ldr	r3, [r5, #0]
9001a002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001a004:	4798      	blx	r3
9001a006:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
9001a00a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001a00e:	4681      	mov	r9, r0
9001a010:	f8db 0000 	ldr.w	r0, [fp]
9001a014:	fb1a 3305 	smlabb	r3, sl, r5, r3
9001a018:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9001a01a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001a01e:	6803      	ldr	r3, [r0, #0]
9001a020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001a022:	4798      	blx	r3
9001a024:	4607      	mov	r7, r0
9001a026:	f8db 0000 	ldr.w	r0, [fp]
9001a02a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
9001a02e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001a032:	6803      	ldr	r3, [r0, #0]
9001a034:	9109      	str	r1, [sp, #36]	; 0x24
9001a036:	9208      	str	r2, [sp, #32]
9001a038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a03a:	4798      	blx	r3
9001a03c:	f010 0f01 	tst.w	r0, #1
9001a040:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001a044:	d012      	beq.n	9001a06c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
9001a046:	f8db 0000 	ldr.w	r0, [fp]
9001a04a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
9001a04e:	6803      	ldr	r3, [r0, #0]
9001a050:	9200      	str	r2, [sp, #0]
9001a052:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001a054:	462b      	mov	r3, r5
9001a056:	e898 0006 	ldmia.w	r8, {r1, r2}
9001a05a:	47b0      	blx	r6
9001a05c:	9b03      	ldr	r3, [sp, #12]
9001a05e:	8023      	strh	r3, [r4, #0]
9001a060:	9b04      	ldr	r3, [sp, #16]
9001a062:	8063      	strh	r3, [r4, #2]
9001a064:	9b05      	ldr	r3, [sp, #20]
9001a066:	80a3      	strh	r3, [r4, #4]
9001a068:	9b06      	ldr	r3, [sp, #24]
9001a06a:	e78b      	b.n	90019f84 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
9001a06c:	fb09 f202 	mul.w	r2, r9, r2
9001a070:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
9001a074:	eb02 0141 	add.w	r1, r2, r1, lsl #1
9001a078:	440f      	add	r7, r1
9001a07a:	b166      	cbz	r6, 9001a096 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001a07c:	9a07      	ldr	r2, [sp, #28]
9001a07e:	4592      	cmp	sl, r2
9001a080:	d109      	bne.n	9001a096 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001a082:	f8db 0000 	ldr.w	r0, [fp]
9001a086:	fb09 f303 	mul.w	r3, r9, r3
9001a08a:	4629      	mov	r1, r5
9001a08c:	6802      	ldr	r2, [r0, #0]
9001a08e:	6b56      	ldr	r6, [r2, #52]	; 0x34
9001a090:	463a      	mov	r2, r7
9001a092:	47b0      	blx	r6
9001a094:	e7e2      	b.n	9001a05c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001a096:	fb0a f303 	mul.w	r3, sl, r3
9001a09a:	ea4f 064a 	mov.w	r6, sl, lsl #1
9001a09e:	f8df b038 	ldr.w	fp, [pc, #56]	; 9001a0d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001a0a2:	eb05 0843 	add.w	r8, r5, r3, lsl #1
9001a0a6:	4545      	cmp	r5, r8
9001a0a8:	d2d8      	bcs.n	9001a05c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001a0aa:	f8db 0000 	ldr.w	r0, [fp]
9001a0ae:	4629      	mov	r1, r5
9001a0b0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001a0b4:	4435      	add	r5, r6
9001a0b6:	6802      	ldr	r2, [r0, #0]
9001a0b8:	005b      	lsls	r3, r3, #1
9001a0ba:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
9001a0be:	463a      	mov	r2, r7
9001a0c0:	47d0      	blx	sl
9001a0c2:	444f      	add	r7, r9
9001a0c4:	e7ef      	b.n	9001a0a6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
9001a0c6:	bf00      	nop
9001a0c8:	24026260 	.word	0x24026260
9001a0cc:	24026262 	.word	0x24026262
9001a0d0:	24026264 	.word	0x24026264
9001a0d4:	24026266 	.word	0x24026266
9001a0d8:	2402626c 	.word	0x2402626c

9001a0dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
9001a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
9001a0de:	4606      	mov	r6, r0
9001a0e0:	b087      	sub	sp, #28
9001a0e2:	460c      	mov	r4, r1
9001a0e4:	4617      	mov	r7, r2
9001a0e6:	461d      	mov	r5, r3
9001a0e8:	b333      	cbz	r3, 9001a138 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a0ea:	4608      	mov	r0, r1
9001a0ec:	f7f7 f921 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
9001a0f0:	bb10      	cbnz	r0, 9001a138 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a0f2:	6820      	ldr	r0, [r4, #0]
9001a0f4:	ab04      	add	r3, sp, #16
9001a0f6:	6861      	ldr	r1, [r4, #4]
9001a0f8:	4c1b      	ldr	r4, [pc, #108]	; (9001a168 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
9001a0fa:	c303      	stmia	r3!, {r0, r1}
9001a0fc:	a804      	add	r0, sp, #16
9001a0fe:	f7f9 fe5f 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a102:	6820      	ldr	r0, [r4, #0]
9001a104:	6803      	ldr	r3, [r0, #0]
9001a106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a108:	4798      	blx	r3
9001a10a:	2dff      	cmp	r5, #255	; 0xff
9001a10c:	d016      	beq.n	9001a13c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
9001a10e:	f010 0f08 	tst.w	r0, #8
9001a112:	6820      	ldr	r0, [r4, #0]
9001a114:	d015      	beq.n	9001a142 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
9001a116:	2400      	movs	r4, #0
9001a118:	6801      	ldr	r1, [r0, #0]
9001a11a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001a11e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001a122:	e9cd 5402 	strd	r5, r4, [sp, #8]
9001a126:	f8bd 4016 	ldrh.w	r4, [sp, #22]
9001a12a:	9401      	str	r4, [sp, #4]
9001a12c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
9001a130:	9400      	str	r4, [sp, #0]
9001a132:	6e0c      	ldr	r4, [r1, #96]	; 0x60
9001a134:	4639      	mov	r1, r7
9001a136:	47a0      	blx	r4
9001a138:	b007      	add	sp, #28
9001a13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001a13c:	f010 0f02 	tst.w	r0, #2
9001a140:	e7e7      	b.n	9001a112 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
9001a142:	6803      	ldr	r3, [r0, #0]
9001a144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a146:	4798      	blx	r3
9001a148:	4b08      	ldr	r3, [pc, #32]	; (9001a16c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
9001a14a:	4601      	mov	r1, r0
9001a14c:	4630      	mov	r0, r6
9001a14e:	881a      	ldrh	r2, [r3, #0]
9001a150:	6833      	ldr	r3, [r6, #0]
9001a152:	e9cd 7500 	strd	r7, r5, [sp]
9001a156:	6a5d      	ldr	r5, [r3, #36]	; 0x24
9001a158:	ab04      	add	r3, sp, #16
9001a15a:	47a8      	blx	r5
9001a15c:	6820      	ldr	r0, [r4, #0]
9001a15e:	6803      	ldr	r3, [r0, #0]
9001a160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a162:	4798      	blx	r3
9001a164:	e7e8      	b.n	9001a138 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001a166:	bf00      	nop
9001a168:	2402626c 	.word	0x2402626c
9001a16c:	24026266 	.word	0x24026266

9001a170 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
9001a170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a174:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
9001a178:	4688      	mov	r8, r1
9001a17a:	4614      	mov	r4, r2
9001a17c:	461d      	mov	r5, r3
9001a17e:	9e08      	ldr	r6, [sp, #32]
9001a180:	2f00      	cmp	r7, #0
9001a182:	f000 80ab 	beq.w	9001a2dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a186:	4618      	mov	r0, r3
9001a188:	f7f7 f8d3 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
9001a18c:	2800      	cmp	r0, #0
9001a18e:	f040 80a5 	bne.w	9001a2dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a192:	f9b5 1000 	ldrsh.w	r1, [r5]
9001a196:	2fff      	cmp	r7, #255	; 0xff
9001a198:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
9001a19c:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
9001a1a0:	fb04 1303 	mla	r3, r4, r3, r1
9001a1a4:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
9001a1a8:	eba4 0200 	sub.w	r2, r4, r0
9001a1ac:	eb08 0143 	add.w	r1, r8, r3, lsl #1
9001a1b0:	fb04 f505 	mul.w	r5, r4, r5
9001a1b4:	ea4f 2816 	mov.w	r8, r6, lsr #8
9001a1b8:	eb01 0545 	add.w	r5, r1, r5, lsl #1
9001a1bc:	d04a      	beq.n	9001a254 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
9001a1be:	b2bc      	uxth	r4, r7
9001a1c0:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
9001a1c4:	f3c6 4e07 	ubfx	lr, r6, #16, #8
9001a1c8:	fa5f f788 	uxtb.w	r7, r8
9001a1cc:	b2f3      	uxtb	r3, r6
9001a1ce:	0040      	lsls	r0, r0, #1
9001a1d0:	fb0e fe04 	mul.w	lr, lr, r4
9001a1d4:	4367      	muls	r7, r4
9001a1d6:	ea4f 0842 	mov.w	r8, r2, lsl #1
9001a1da:	4363      	muls	r3, r4
9001a1dc:	fa1f fc8c 	uxth.w	ip, ip
9001a1e0:	42a9      	cmp	r1, r5
9001a1e2:	d27b      	bcs.n	9001a2dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a1e4:	eb01 0900 	add.w	r9, r1, r0
9001a1e8:	4549      	cmp	r1, r9
9001a1ea:	d231      	bcs.n	9001a250 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
9001a1ec:	880a      	ldrh	r2, [r1, #0]
9001a1ee:	1214      	asrs	r4, r2, #8
9001a1f0:	10d6      	asrs	r6, r2, #3
9001a1f2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9001a1f6:	00d2      	lsls	r2, r2, #3
9001a1f8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001a1fc:	b2d2      	uxtb	r2, r2
9001a1fe:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001a202:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001a206:	fb14 f40c 	smulbb	r4, r4, ip
9001a20a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
9001a20e:	fb12 f20c 	smulbb	r2, r2, ip
9001a212:	fb16 f60c 	smulbb	r6, r6, ip
9001a216:	4474      	add	r4, lr
9001a218:	441a      	add	r2, r3
9001a21a:	b2a4      	uxth	r4, r4
9001a21c:	443e      	add	r6, r7
9001a21e:	b292      	uxth	r2, r2
9001a220:	f104 0a01 	add.w	sl, r4, #1
9001a224:	b2b6      	uxth	r6, r6
9001a226:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001a22a:	f102 0a01 	add.w	sl, r2, #1
9001a22e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
9001a232:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9001a236:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001a23a:	4322      	orrs	r2, r4
9001a23c:	1c74      	adds	r4, r6, #1
9001a23e:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001a242:	0976      	lsrs	r6, r6, #5
9001a244:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001a248:	4332      	orrs	r2, r6
9001a24a:	f821 2b02 	strh.w	r2, [r1], #2
9001a24e:	e7cb      	b.n	9001a1e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
9001a250:	4441      	add	r1, r8
9001a252:	e7c5      	b.n	9001a1e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
9001a254:	0973      	lsrs	r3, r6, #5
9001a256:	4f22      	ldr	r7, [pc, #136]	; (9001a2e0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
9001a258:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001a25c:	ea08 0707 	and.w	r7, r8, r7
9001a260:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a264:	433b      	orrs	r3, r7
9001a266:	07e7      	lsls	r7, r4, #31
9001a268:	ea43 0306 	orr.w	r3, r3, r6
9001a26c:	b29b      	uxth	r3, r3
9001a26e:	d50b      	bpl.n	9001a288 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
9001a270:	0040      	lsls	r0, r0, #1
9001a272:	0052      	lsls	r2, r2, #1
9001a274:	42a9      	cmp	r1, r5
9001a276:	d231      	bcs.n	9001a2dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a278:	180c      	adds	r4, r1, r0
9001a27a:	42a1      	cmp	r1, r4
9001a27c:	d202      	bcs.n	9001a284 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
9001a27e:	f821 3b02 	strh.w	r3, [r1], #2
9001a282:	e7fa      	b.n	9001a27a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
9001a284:	4411      	add	r1, r2
9001a286:	e7f5      	b.n	9001a274 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
9001a288:	078e      	lsls	r6, r1, #30
9001a28a:	d008      	beq.n	9001a29e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
9001a28c:	0066      	lsls	r6, r4, #1
9001a28e:	460a      	mov	r2, r1
9001a290:	42aa      	cmp	r2, r5
9001a292:	d202      	bcs.n	9001a29a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
9001a294:	8013      	strh	r3, [r2, #0]
9001a296:	4432      	add	r2, r6
9001a298:	e7fa      	b.n	9001a290 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
9001a29a:	3102      	adds	r1, #2
9001a29c:	3801      	subs	r0, #1
9001a29e:	07c2      	lsls	r2, r0, #31
9001a2a0:	d50b      	bpl.n	9001a2ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
9001a2a2:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
9001a2a6:	0066      	lsls	r6, r4, #1
9001a2a8:	3a01      	subs	r2, #1
9001a2aa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
9001a2ae:	42aa      	cmp	r2, r5
9001a2b0:	d202      	bcs.n	9001a2b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
9001a2b2:	8013      	strh	r3, [r2, #0]
9001a2b4:	4432      	add	r2, r6
9001a2b6:	e7fa      	b.n	9001a2ae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
9001a2b8:	3801      	subs	r0, #1
9001a2ba:	b178      	cbz	r0, 9001a2dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a2bc:	1040      	asrs	r0, r0, #1
9001a2be:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
9001a2c2:	0080      	lsls	r0, r0, #2
9001a2c4:	0064      	lsls	r4, r4, #1
9001a2c6:	42a9      	cmp	r1, r5
9001a2c8:	d208      	bcs.n	9001a2dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001a2ca:	180e      	adds	r6, r1, r0
9001a2cc:	460a      	mov	r2, r1
9001a2ce:	42b2      	cmp	r2, r6
9001a2d0:	d202      	bcs.n	9001a2d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
9001a2d2:	f842 3b04 	str.w	r3, [r2], #4
9001a2d6:	e7fa      	b.n	9001a2ce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
9001a2d8:	4421      	add	r1, r4
9001a2da:	e7f4      	b.n	9001a2c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
9001a2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a2e0:	00fff800 	.word	0x00fff800

9001a2e4 <_ZN8touchgfx8LCD16bppC1Ev>:
9001a2e4:	2200      	movs	r2, #0
9001a2e6:	4910      	ldr	r1, [pc, #64]	; (9001a328 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
9001a2e8:	6042      	str	r2, [r0, #4]
9001a2ea:	6001      	str	r1, [r0, #0]
9001a2ec:	e9c0 2202 	strd	r2, r2, [r0, #8]
9001a2f0:	e9c0 2204 	strd	r2, r2, [r0, #16]
9001a2f4:	e9c0 2206 	strd	r2, r2, [r0, #24]
9001a2f8:	e9c0 2208 	strd	r2, r2, [r0, #32]
9001a2fc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
9001a300:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
9001a304:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
9001a308:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
9001a30c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
9001a310:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
9001a314:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
9001a318:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
9001a31c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
9001a320:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
9001a324:	4770      	bx	lr
9001a326:	bf00      	nop
9001a328:	90026f5c 	.word	0x90026f5c

9001a32c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
9001a32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a330:	b08d      	sub	sp, #52	; 0x34
9001a332:	460d      	mov	r5, r1
9001a334:	4604      	mov	r4, r0
9001a336:	4699      	mov	r9, r3
9001a338:	6808      	ldr	r0, [r1, #0]
9001a33a:	ab08      	add	r3, sp, #32
9001a33c:	6849      	ldr	r1, [r1, #4]
9001a33e:	c303      	stmia	r3!, {r0, r1}
9001a340:	6810      	ldr	r0, [r2, #0]
9001a342:	ab0a      	add	r3, sp, #40	; 0x28
9001a344:	6851      	ldr	r1, [r2, #4]
9001a346:	c303      	stmia	r3!, {r0, r1}
9001a348:	a808      	add	r0, sp, #32
9001a34a:	f7f9 fd39 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a34e:	4629      	mov	r1, r5
9001a350:	a80a      	add	r0, sp, #40	; 0x28
9001a352:	4d67      	ldr	r5, [pc, #412]	; (9001a4f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001a354:	f7f9 fd5c 	bl	90013e10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a358:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
9001a35c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
9001a360:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
9001a364:	6828      	ldr	r0, [r5, #0]
9001a366:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a36a:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
9001a36e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001a372:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001a376:	f8bd 1020 	ldrh.w	r1, [sp, #32]
9001a37a:	440a      	add	r2, r1
9001a37c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001a380:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001a384:	4413      	add	r3, r2
9001a386:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001a38a:	6803      	ldr	r3, [r0, #0]
9001a38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a38e:	4798      	blx	r3
9001a390:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001a394:	d119      	bne.n	9001a3ca <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
9001a396:	f010 0f20 	tst.w	r0, #32
9001a39a:	6828      	ldr	r0, [r5, #0]
9001a39c:	d018      	beq.n	9001a3d0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
9001a39e:	2500      	movs	r5, #0
9001a3a0:	6801      	ldr	r1, [r0, #0]
9001a3a2:	b2b6      	uxth	r6, r6
9001a3a4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
9001a3a8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
9001a3ac:	9601      	str	r6, [sp, #4]
9001a3ae:	e9cd 9503 	strd	r9, r5, [sp, #12]
9001a3b2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
9001a3b6:	9502      	str	r5, [sp, #8]
9001a3b8:	fa1f f588 	uxth.w	r5, r8
9001a3bc:	9500      	str	r5, [sp, #0]
9001a3be:	6d0d      	ldr	r5, [r1, #80]	; 0x50
9001a3c0:	4621      	mov	r1, r4
9001a3c2:	47a8      	blx	r5
9001a3c4:	b00d      	add	sp, #52	; 0x34
9001a3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a3ca:	f010 0f40 	tst.w	r0, #64	; 0x40
9001a3ce:	e7e4      	b.n	9001a39a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
9001a3d0:	6803      	ldr	r3, [r0, #0]
9001a3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a3d4:	4798      	blx	r3
9001a3d6:	4947      	ldr	r1, [pc, #284]	; (9001a4f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
9001a3d8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001a3dc:	880b      	ldrh	r3, [r1, #0]
9001a3de:	468a      	mov	sl, r1
9001a3e0:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
9001a3e4:	fb03 5202 	mla	r2, r3, r2, r5
9001a3e8:	4373      	muls	r3, r6
9001a3ea:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a3ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a3f2:	9307      	str	r3, [sp, #28]
9001a3f4:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001a3f8:	9306      	str	r3, [sp, #24]
9001a3fa:	9b07      	ldr	r3, [sp, #28]
9001a3fc:	4298      	cmp	r0, r3
9001a3fe:	d270      	bcs.n	9001a4e2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
9001a400:	9b06      	ldr	r3, [sp, #24]
9001a402:	4621      	mov	r1, r4
9001a404:	eb00 0b03 	add.w	fp, r0, r3
9001a408:	4558      	cmp	r0, fp
9001a40a:	d25d      	bcs.n	9001a4c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
9001a40c:	f851 4b04 	ldr.w	r4, [r1], #4
9001a410:	0e23      	lsrs	r3, r4, #24
9001a412:	d014      	beq.n	9001a43e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001a414:	2bff      	cmp	r3, #255	; 0xff
9001a416:	ea4f 2c14 	mov.w	ip, r4, lsr #8
9001a41a:	d112      	bne.n	9001a442 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001a41c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001a420:	d10f      	bne.n	9001a442 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001a422:	0963      	lsrs	r3, r4, #5
9001a424:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9001a428:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001a42c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a430:	f02c 0c07 	bic.w	ip, ip, #7
9001a434:	ea43 0c0c 	orr.w	ip, r3, ip
9001a438:	ea4c 0404 	orr.w	r4, ip, r4
9001a43c:	8004      	strh	r4, [r0, #0]
9001a43e:	3002      	adds	r0, #2
9001a440:	e7e2      	b.n	9001a408 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001a442:	fb09 f303 	mul.w	r3, r9, r3
9001a446:	8807      	ldrh	r7, [r0, #0]
9001a448:	f3c4 4e07 	ubfx	lr, r4, #16, #8
9001a44c:	fa5f fc8c 	uxtb.w	ip, ip
9001a450:	1c5a      	adds	r2, r3, #1
9001a452:	123e      	asrs	r6, r7, #8
9001a454:	10fd      	asrs	r5, r7, #3
9001a456:	eb02 2223 	add.w	r2, r2, r3, asr #8
9001a45a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001a45e:	00ff      	lsls	r7, r7, #3
9001a460:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001a464:	1212      	asrs	r2, r2, #8
9001a466:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001a46a:	b293      	uxth	r3, r2
9001a46c:	43d2      	mvns	r2, r2
9001a46e:	b2ff      	uxtb	r7, r7
9001a470:	fb1e fe03 	smulbb	lr, lr, r3
9001a474:	b2d2      	uxtb	r2, r2
9001a476:	fb1c fc03 	smulbb	ip, ip, r3
9001a47a:	b2e4      	uxtb	r4, r4
9001a47c:	fb06 e602 	mla	r6, r6, r2, lr
9001a480:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001a484:	fb14 f403 	smulbb	r4, r4, r3
9001a488:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
9001a48c:	b2b6      	uxth	r6, r6
9001a48e:	fb05 c502 	mla	r5, r5, r2, ip
9001a492:	fb07 4702 	mla	r7, r7, r2, r4
9001a496:	f106 0e01 	add.w	lr, r6, #1
9001a49a:	b2ad      	uxth	r5, r5
9001a49c:	b2bf      	uxth	r7, r7
9001a49e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
9001a4a2:	f105 0c01 	add.w	ip, r5, #1
9001a4a6:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
9001a4aa:	1c7e      	adds	r6, r7, #1
9001a4ac:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001a4b0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001a4b4:	096d      	lsrs	r5, r5, #5
9001a4b6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001a4ba:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001a4be:	ea46 060e 	orr.w	r6, r6, lr
9001a4c2:	432e      	orrs	r6, r5
9001a4c4:	8006      	strh	r6, [r0, #0]
9001a4c6:	e7ba      	b.n	9001a43e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001a4c8:	f8ba 3000 	ldrh.w	r3, [sl]
9001a4cc:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
9001a4d0:	eba3 0308 	sub.w	r3, r3, r8
9001a4d4:	eba4 0408 	sub.w	r4, r4, r8
9001a4d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001a4dc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
9001a4e0:	e78b      	b.n	9001a3fa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001a4e2:	4b03      	ldr	r3, [pc, #12]	; (9001a4f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001a4e4:	6818      	ldr	r0, [r3, #0]
9001a4e6:	6803      	ldr	r3, [r0, #0]
9001a4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a4ea:	4798      	blx	r3
9001a4ec:	e76a      	b.n	9001a3c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
9001a4ee:	bf00      	nop
9001a4f0:	2402626c 	.word	0x2402626c
9001a4f4:	24026266 	.word	0x24026266

9001a4f8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
9001a4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001a4fc:	b085      	sub	sp, #20
9001a4fe:	6810      	ldr	r0, [r2, #0]
9001a500:	460c      	mov	r4, r1
9001a502:	6851      	ldr	r1, [r2, #4]
9001a504:	466d      	mov	r5, sp
9001a506:	4616      	mov	r6, r2
9001a508:	c503      	stmia	r5!, {r0, r1}
9001a50a:	6818      	ldr	r0, [r3, #0]
9001a50c:	6859      	ldr	r1, [r3, #4]
9001a50e:	c503      	stmia	r5!, {r0, r1}
9001a510:	4668      	mov	r0, sp
9001a512:	4d2e      	ldr	r5, [pc, #184]	; (9001a5cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
9001a514:	f7f9 fc54 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a518:	4631      	mov	r1, r6
9001a51a:	a802      	add	r0, sp, #8
9001a51c:	4e2c      	ldr	r6, [pc, #176]	; (9001a5d0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
9001a51e:	f7f9 fc77 	bl	90013e10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a522:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
9001a526:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
9001a52a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
9001a52e:	6828      	ldr	r0, [r5, #0]
9001a530:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a534:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001a538:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
9001a53c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001a540:	f8bd 1000 	ldrh.w	r1, [sp]
9001a544:	440a      	add	r2, r1
9001a546:	f8ad 2008 	strh.w	r2, [sp, #8]
9001a54a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001a54e:	4413      	add	r3, r2
9001a550:	f8ad 300a 	strh.w	r3, [sp, #10]
9001a554:	6803      	ldr	r3, [r0, #0]
9001a556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a558:	4798      	blx	r3
9001a55a:	8833      	ldrh	r3, [r6, #0]
9001a55c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
9001a560:	ea4f 0c47 	mov.w	ip, r7, lsl #1
9001a564:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001a568:	f8df e068 	ldr.w	lr, [pc, #104]	; 9001a5d4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
9001a56c:	fb03 1202 	mla	r2, r3, r2, r1
9001a570:	fb08 f303 	mul.w	r3, r8, r3
9001a574:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a578:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a57c:	4298      	cmp	r0, r3
9001a57e:	d21d      	bcs.n	9001a5bc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
9001a580:	eb00 080c 	add.w	r8, r0, ip
9001a584:	4540      	cmp	r0, r8
9001a586:	d20f      	bcs.n	9001a5a8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
9001a588:	f854 1b04 	ldr.w	r1, [r4], #4
9001a58c:	ea4f 1951 	mov.w	r9, r1, lsr #5
9001a590:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
9001a594:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001a598:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001a59c:	ea42 0209 	orr.w	r2, r2, r9
9001a5a0:	430a      	orrs	r2, r1
9001a5a2:	f820 2b02 	strh.w	r2, [r0], #2
9001a5a6:	e7ed      	b.n	9001a584 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
9001a5a8:	8832      	ldrh	r2, [r6, #0]
9001a5aa:	1bd2      	subs	r2, r2, r7
9001a5ac:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a5b0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
9001a5b4:	1bd2      	subs	r2, r2, r7
9001a5b6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
9001a5ba:	e7df      	b.n	9001a57c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
9001a5bc:	6828      	ldr	r0, [r5, #0]
9001a5be:	6803      	ldr	r3, [r0, #0]
9001a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a5c2:	4798      	blx	r3
9001a5c4:	b005      	add	sp, #20
9001a5c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001a5ca:	bf00      	nop
9001a5cc:	2402626c 	.word	0x2402626c
9001a5d0:	24026266 	.word	0x24026266
9001a5d4:	fffff800 	.word	0xfffff800

9001a5d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
9001a5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a5dc:	b08e      	sub	sp, #56	; 0x38
9001a5de:	460e      	mov	r6, r1
9001a5e0:	4604      	mov	r4, r0
9001a5e2:	461d      	mov	r5, r3
9001a5e4:	6808      	ldr	r0, [r1, #0]
9001a5e6:	ab0a      	add	r3, sp, #40	; 0x28
9001a5e8:	6849      	ldr	r1, [r1, #4]
9001a5ea:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 9001a7c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
9001a5ee:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 9001a7c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
9001a5f2:	c303      	stmia	r3!, {r0, r1}
9001a5f4:	6810      	ldr	r0, [r2, #0]
9001a5f6:	ab0c      	add	r3, sp, #48	; 0x30
9001a5f8:	6851      	ldr	r1, [r2, #4]
9001a5fa:	c303      	stmia	r3!, {r0, r1}
9001a5fc:	a80a      	add	r0, sp, #40	; 0x28
9001a5fe:	f7f9 fbdf 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a602:	4631      	mov	r1, r6
9001a604:	a80c      	add	r0, sp, #48	; 0x30
9001a606:	f7f9 fc03 	bl	90013e10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a60a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
9001a60e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001a612:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001a616:	f8d8 0000 	ldr.w	r0, [r8]
9001a61a:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a61e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
9001a622:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
9001a626:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9001a62a:	440c      	add	r4, r1
9001a62c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
9001a630:	440a      	add	r2, r1
9001a632:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
9001a636:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
9001a63a:	4413      	add	r3, r2
9001a63c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001a640:	6803      	ldr	r3, [r0, #0]
9001a642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a644:	4798      	blx	r3
9001a646:	2dff      	cmp	r5, #255	; 0xff
9001a648:	d124      	bne.n	9001a694 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
9001a64a:	f010 0f01 	tst.w	r0, #1
9001a64e:	f8d8 0000 	ldr.w	r0, [r8]
9001a652:	d022      	beq.n	9001a69a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
9001a654:	2100      	movs	r1, #0
9001a656:	f04f 0e01 	mov.w	lr, #1
9001a65a:	f8d0 c000 	ldr.w	ip, [r0]
9001a65e:	b2b6      	uxth	r6, r6
9001a660:	f8cd e018 	str.w	lr, [sp, #24]
9001a664:	b2bf      	uxth	r7, r7
9001a666:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
9001a66a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
9001a66e:	e9cd 1107 	strd	r1, r1, [sp, #28]
9001a672:	f8b9 e000 	ldrh.w	lr, [r9]
9001a676:	9503      	str	r5, [sp, #12]
9001a678:	9601      	str	r6, [sp, #4]
9001a67a:	9700      	str	r7, [sp, #0]
9001a67c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
9001a680:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001a684:	9102      	str	r1, [sp, #8]
9001a686:	4621      	mov	r1, r4
9001a688:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
9001a68c:	47a8      	blx	r5
9001a68e:	b00e      	add	sp, #56	; 0x38
9001a690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a694:	f010 0f04 	tst.w	r0, #4
9001a698:	e7d9      	b.n	9001a64e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
9001a69a:	6803      	ldr	r3, [r0, #0]
9001a69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a69e:	4798      	blx	r3
9001a6a0:	f8b9 3000 	ldrh.w	r3, [r9]
9001a6a4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
9001a6a8:	ea4f 0e47 	mov.w	lr, r7, lsl #1
9001a6ac:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
9001a6b0:	435e      	muls	r6, r3
9001a6b2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001a6b6:	2dff      	cmp	r5, #255	; 0xff
9001a6b8:	fb03 1202 	mla	r2, r3, r2, r1
9001a6bc:	ebac 0c07 	sub.w	ip, ip, r7
9001a6c0:	eba3 0707 	sub.w	r7, r3, r7
9001a6c4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a6c8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001a6cc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001a6d0:	ea4f 0747 	mov.w	r7, r7, lsl #1
9001a6d4:	d049      	beq.n	9001a76a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
9001a6d6:	43eb      	mvns	r3, r5
9001a6d8:	fa1f f985 	uxth.w	r9, r5
9001a6dc:	b2db      	uxtb	r3, r3
9001a6de:	42b0      	cmp	r0, r6
9001a6e0:	d266      	bcs.n	9001a7b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001a6e2:	eb00 0a0e 	add.w	sl, r0, lr
9001a6e6:	4550      	cmp	r0, sl
9001a6e8:	4621      	mov	r1, r4
9001a6ea:	f104 0403 	add.w	r4, r4, #3
9001a6ee:	d25b      	bcs.n	9001a7a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
9001a6f0:	8802      	ldrh	r2, [r0, #0]
9001a6f2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001a6f6:	ea4f 2822 	mov.w	r8, r2, asr #8
9001a6fa:	fb11 f109 	smulbb	r1, r1, r9
9001a6fe:	10d5      	asrs	r5, r2, #3
9001a700:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
9001a704:	00d2      	lsls	r2, r2, #3
9001a706:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001a70a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
9001a70e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001a712:	fb08 1803 	mla	r8, r8, r3, r1
9001a716:	f814 1c02 	ldrb.w	r1, [r4, #-2]
9001a71a:	b2d2      	uxtb	r2, r2
9001a71c:	fb11 f109 	smulbb	r1, r1, r9
9001a720:	fa1f f888 	uxth.w	r8, r8
9001a724:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001a728:	fb05 1503 	mla	r5, r5, r3, r1
9001a72c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001a730:	fb11 f109 	smulbb	r1, r1, r9
9001a734:	b2ad      	uxth	r5, r5
9001a736:	fb02 1203 	mla	r2, r2, r3, r1
9001a73a:	f108 0101 	add.w	r1, r8, #1
9001a73e:	b292      	uxth	r2, r2
9001a740:	eb01 2818 	add.w	r8, r1, r8, lsr #8
9001a744:	1c51      	adds	r1, r2, #1
9001a746:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
9001a74a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001a74e:	1c69      	adds	r1, r5, #1
9001a750:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001a754:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001a758:	096d      	lsrs	r5, r5, #5
9001a75a:	ea42 0208 	orr.w	r2, r2, r8
9001a75e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001a762:	432a      	orrs	r2, r5
9001a764:	f820 2b02 	strh.w	r2, [r0], #2
9001a768:	e7bd      	b.n	9001a6e6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
9001a76a:	4a14      	ldr	r2, [pc, #80]	; (9001a7bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
9001a76c:	42b0      	cmp	r0, r6
9001a76e:	d21f      	bcs.n	9001a7b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001a770:	eb00 050e 	add.w	r5, r0, lr
9001a774:	42a8      	cmp	r0, r5
9001a776:	4621      	mov	r1, r4
9001a778:	f104 0403 	add.w	r4, r4, #3
9001a77c:	d210      	bcs.n	9001a7a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
9001a77e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
9001a782:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001a786:	00db      	lsls	r3, r3, #3
9001a788:	ea02 2101 	and.w	r1, r2, r1, lsl #8
9001a78c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a790:	430b      	orrs	r3, r1
9001a792:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001a796:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
9001a79a:	f820 3b02 	strh.w	r3, [r0], #2
9001a79e:	e7e9      	b.n	9001a774 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
9001a7a0:	4438      	add	r0, r7
9001a7a2:	eb01 040c 	add.w	r4, r1, ip
9001a7a6:	e7e1      	b.n	9001a76c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
9001a7a8:	4438      	add	r0, r7
9001a7aa:	eb01 040c 	add.w	r4, r1, ip
9001a7ae:	e796      	b.n	9001a6de <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
9001a7b0:	4b03      	ldr	r3, [pc, #12]	; (9001a7c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
9001a7b2:	6818      	ldr	r0, [r3, #0]
9001a7b4:	6803      	ldr	r3, [r0, #0]
9001a7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a7b8:	4798      	blx	r3
9001a7ba:	e768      	b.n	9001a68e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
9001a7bc:	fffff800 	.word	0xfffff800
9001a7c0:	2402626c 	.word	0x2402626c
9001a7c4:	24026266 	.word	0x24026266

9001a7c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
9001a7c8:	b4f0      	push	{r4, r5, r6, r7}
9001a7ca:	4616      	mov	r6, r2
9001a7cc:	461c      	mov	r4, r3
9001a7ce:	460d      	mov	r5, r1
9001a7d0:	9a04      	ldr	r2, [sp, #16]
9001a7d2:	2e01      	cmp	r6, #1
9001a7d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001a7d8:	f89d 7018 	ldrb.w	r7, [sp, #24]
9001a7dc:	d012      	beq.n	9001a804 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
9001a7de:	d303      	bcc.n	9001a7e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
9001a7e0:	2e02      	cmp	r6, #2
9001a7e2:	d00a      	beq.n	9001a7fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
9001a7e4:	bcf0      	pop	{r4, r5, r6, r7}
9001a7e6:	4770      	bx	lr
9001a7e8:	6805      	ldr	r5, [r0, #0]
9001a7ea:	e9cd 3704 	strd	r3, r7, [sp, #16]
9001a7ee:	68ed      	ldr	r5, [r5, #12]
9001a7f0:	4613      	mov	r3, r2
9001a7f2:	4622      	mov	r2, r4
9001a7f4:	46ac      	mov	ip, r5
9001a7f6:	bcf0      	pop	{r4, r5, r6, r7}
9001a7f8:	4760      	bx	ip
9001a7fa:	4621      	mov	r1, r4
9001a7fc:	4628      	mov	r0, r5
9001a7fe:	bcf0      	pop	{r4, r5, r6, r7}
9001a800:	f7ff bd94 	b.w	9001a32c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001a804:	4621      	mov	r1, r4
9001a806:	4628      	mov	r0, r5
9001a808:	bcf0      	pop	{r4, r5, r6, r7}
9001a80a:	f7ff bee5 	b.w	9001a5d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

9001a810 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
9001a810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a814:	b093      	sub	sp, #76	; 0x4c
9001a816:	4681      	mov	r9, r0
9001a818:	4688      	mov	r8, r1
9001a81a:	6810      	ldr	r0, [r2, #0]
9001a81c:	6851      	ldr	r1, [r2, #4]
9001a81e:	ac0e      	add	r4, sp, #56	; 0x38
9001a820:	4616      	mov	r6, r2
9001a822:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
9001a826:	4f6b      	ldr	r7, [pc, #428]	; (9001a9d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
9001a828:	c403      	stmia	r4!, {r0, r1}
9001a82a:	6818      	ldr	r0, [r3, #0]
9001a82c:	ac10      	add	r4, sp, #64	; 0x40
9001a82e:	6859      	ldr	r1, [r3, #4]
9001a830:	c403      	stmia	r4!, {r0, r1}
9001a832:	a80e      	add	r0, sp, #56	; 0x38
9001a834:	f7f9 fac4 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a838:	4631      	mov	r1, r6
9001a83a:	a810      	add	r0, sp, #64	; 0x40
9001a83c:	4e66      	ldr	r6, [pc, #408]	; (9001a9d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001a83e:	f7f9 fae7 	bl	90013e10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a842:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
9001a846:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
9001a84a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
9001a84e:	6830      	ldr	r0, [r6, #0]
9001a850:	fb11 2103 	smlabb	r1, r1, r3, r2
9001a854:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
9001a858:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
9001a85c:	4489      	add	r9, r1
9001a85e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
9001a862:	440a      	add	r2, r1
9001a864:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
9001a868:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001a86c:	4413      	add	r3, r2
9001a86e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
9001a872:	6803      	ldr	r3, [r0, #0]
9001a874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a876:	4798      	blx	r3
9001a878:	f010 0f80 	tst.w	r0, #128	; 0x80
9001a87c:	6830      	ldr	r0, [r6, #0]
9001a87e:	d01d      	beq.n	9001a8bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
9001a880:	2200      	movs	r2, #0
9001a882:	6801      	ldr	r1, [r0, #0]
9001a884:	b2a4      	uxth	r4, r4
9001a886:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001a88a:	b2ad      	uxth	r5, r5
9001a88c:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001a890:	220b      	movs	r2, #11
9001a892:	9207      	str	r2, [sp, #28]
9001a894:	883a      	ldrh	r2, [r7, #0]
9001a896:	9502      	str	r5, [sp, #8]
9001a898:	9206      	str	r2, [sp, #24]
9001a89a:	2201      	movs	r2, #1
9001a89c:	9401      	str	r4, [sp, #4]
9001a89e:	e9cd a204 	strd	sl, r2, [sp, #16]
9001a8a2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
9001a8a6:	9203      	str	r2, [sp, #12]
9001a8a8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
9001a8ac:	9200      	str	r2, [sp, #0]
9001a8ae:	4642      	mov	r2, r8
9001a8b0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
9001a8b2:	4649      	mov	r1, r9
9001a8b4:	47a0      	blx	r4
9001a8b6:	b013      	add	sp, #76	; 0x4c
9001a8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a8bc:	6803      	ldr	r3, [r0, #0]
9001a8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a8c0:	4798      	blx	r3
9001a8c2:	883b      	ldrh	r3, [r7, #0]
9001a8c4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
9001a8c8:	f04f 0e04 	mov.w	lr, #4
9001a8cc:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
9001a8d0:	435d      	muls	r5, r3
9001a8d2:	fb03 1202 	mla	r2, r3, r2, r1
9001a8d6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001a8da:	eb00 0245 	add.w	r2, r0, r5, lsl #1
9001a8de:	920c      	str	r2, [sp, #48]	; 0x30
9001a8e0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
9001a8e4:	1b12      	subs	r2, r2, r4
9001a8e6:	920d      	str	r2, [sp, #52]	; 0x34
9001a8e8:	0062      	lsls	r2, r4, #1
9001a8ea:	1b1c      	subs	r4, r3, r4
9001a8ec:	920a      	str	r2, [sp, #40]	; 0x28
9001a8ee:	0063      	lsls	r3, r4, #1
9001a8f0:	930b      	str	r3, [sp, #44]	; 0x2c
9001a8f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001a8f4:	4298      	cmp	r0, r3
9001a8f6:	d266      	bcs.n	9001a9c6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
9001a8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001a8fa:	eb00 0b03 	add.w	fp, r0, r3
9001a8fe:	4558      	cmp	r0, fp
9001a900:	d25c      	bcs.n	9001a9bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
9001a902:	f819 3b01 	ldrb.w	r3, [r9], #1
9001a906:	fb1e e303 	smlabb	r3, lr, r3, lr
9001a90a:	f858 2003 	ldr.w	r2, [r8, r3]
9001a90e:	0e11      	lsrs	r1, r2, #24
9001a910:	d012      	beq.n	9001a938 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001a912:	29ff      	cmp	r1, #255	; 0xff
9001a914:	ea4f 2712 	mov.w	r7, r2, lsr #8
9001a918:	d110      	bne.n	9001a93c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001a91a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001a91e:	d10d      	bne.n	9001a93c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001a920:	0953      	lsrs	r3, r2, #5
9001a922:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
9001a926:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001a92a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001a92e:	f027 0707 	bic.w	r7, r7, #7
9001a932:	431f      	orrs	r7, r3
9001a934:	433a      	orrs	r2, r7
9001a936:	8002      	strh	r2, [r0, #0]
9001a938:	3002      	adds	r0, #2
9001a93a:	e7e0      	b.n	9001a8fe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
9001a93c:	fb0a f101 	mul.w	r1, sl, r1
9001a940:	8806      	ldrh	r6, [r0, #0]
9001a942:	f3c2 4c07 	ubfx	ip, r2, #16, #8
9001a946:	b2d2      	uxtb	r2, r2
9001a948:	1c4b      	adds	r3, r1, #1
9001a94a:	1235      	asrs	r5, r6, #8
9001a94c:	10f4      	asrs	r4, r6, #3
9001a94e:	eb03 2321 	add.w	r3, r3, r1, asr #8
9001a952:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001a956:	00f6      	lsls	r6, r6, #3
9001a958:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001a95c:	121b      	asrs	r3, r3, #8
9001a95e:	b2f6      	uxtb	r6, r6
9001a960:	b299      	uxth	r1, r3
9001a962:	43db      	mvns	r3, r3
9001a964:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
9001a968:	fb1c fc01 	smulbb	ip, ip, r1
9001a96c:	b2db      	uxtb	r3, r3
9001a96e:	fb12 f201 	smulbb	r2, r2, r1
9001a972:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001a976:	fb05 c503 	mla	r5, r5, r3, ip
9001a97a:	b2ff      	uxtb	r7, r7
9001a97c:	fb06 2203 	mla	r2, r6, r3, r2
9001a980:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
9001a984:	fb17 f701 	smulbb	r7, r7, r1
9001a988:	b2ad      	uxth	r5, r5
9001a98a:	b292      	uxth	r2, r2
9001a98c:	fb04 7403 	mla	r4, r4, r3, r7
9001a990:	f105 0c01 	add.w	ip, r5, #1
9001a994:	1c57      	adds	r7, r2, #1
9001a996:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001a99a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001a99e:	b2a4      	uxth	r4, r4
9001a9a0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001a9a4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001a9a8:	433d      	orrs	r5, r7
9001a9aa:	1c67      	adds	r7, r4, #1
9001a9ac:	eb07 2414 	add.w	r4, r7, r4, lsr #8
9001a9b0:	0964      	lsrs	r4, r4, #5
9001a9b2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001a9b6:	4325      	orrs	r5, r4
9001a9b8:	8005      	strh	r5, [r0, #0]
9001a9ba:	e7bd      	b.n	9001a938 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001a9bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001a9be:	4418      	add	r0, r3
9001a9c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001a9c2:	4499      	add	r9, r3
9001a9c4:	e795      	b.n	9001a8f2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
9001a9c6:	4b04      	ldr	r3, [pc, #16]	; (9001a9d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001a9c8:	6818      	ldr	r0, [r3, #0]
9001a9ca:	6803      	ldr	r3, [r0, #0]
9001a9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a9ce:	4798      	blx	r3
9001a9d0:	e771      	b.n	9001a8b6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
9001a9d2:	bf00      	nop
9001a9d4:	24026266 	.word	0x24026266
9001a9d8:	2402626c 	.word	0x2402626c

9001a9dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
9001a9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a9e0:	b087      	sub	sp, #28
9001a9e2:	4680      	mov	r8, r0
9001a9e4:	460d      	mov	r5, r1
9001a9e6:	4614      	mov	r4, r2
9001a9e8:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
9001a9ec:	2e00      	cmp	r6, #0
9001a9ee:	f000 80b9 	beq.w	9001ab64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
9001a9f2:	6810      	ldr	r0, [r2, #0]
9001a9f4:	af02      	add	r7, sp, #8
9001a9f6:	6851      	ldr	r1, [r2, #4]
9001a9f8:	c703      	stmia	r7!, {r0, r1}
9001a9fa:	6818      	ldr	r0, [r3, #0]
9001a9fc:	af04      	add	r7, sp, #16
9001a9fe:	6859      	ldr	r1, [r3, #4]
9001aa00:	c703      	stmia	r7!, {r0, r1}
9001aa02:	a802      	add	r0, sp, #8
9001aa04:	f7f9 f9dc 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001aa08:	4621      	mov	r1, r4
9001aa0a:	a804      	add	r0, sp, #16
9001aa0c:	f7f9 fa00 	bl	90013e10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001aa10:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001aa14:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001aa18:	f8bd 400c 	ldrh.w	r4, [sp, #12]
9001aa1c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
9001aa20:	fb14 2103 	smlabb	r1, r4, r3, r2
9001aa24:	eb08 0401 	add.w	r4, r8, r1
9001aa28:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001aa2c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001aa30:	440a      	add	r2, r1
9001aa32:	ea4f 0a48 	mov.w	sl, r8, lsl #1
9001aa36:	f8ad 2010 	strh.w	r2, [sp, #16]
9001aa3a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001aa3e:	4413      	add	r3, r2
9001aa40:	f8ad 3012 	strh.w	r3, [sp, #18]
9001aa44:	4b49      	ldr	r3, [pc, #292]	; (9001ab6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001aa46:	6818      	ldr	r0, [r3, #0]
9001aa48:	6803      	ldr	r3, [r0, #0]
9001aa4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001aa4c:	4798      	blx	r3
9001aa4e:	4b48      	ldr	r3, [pc, #288]	; (9001ab70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
9001aa50:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
9001aa54:	2eff      	cmp	r6, #255	; 0xff
9001aa56:	881a      	ldrh	r2, [r3, #0]
9001aa58:	f9bd c010 	ldrsh.w	ip, [sp, #16]
9001aa5c:	fb02 c101 	mla	r1, r2, r1, ip
9001aa60:	fb02 f207 	mul.w	r2, r2, r7
9001aa64:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001aa68:	f105 0104 	add.w	r1, r5, #4
9001aa6c:	461d      	mov	r5, r3
9001aa6e:	d05a      	beq.n	9001ab26 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
9001aa70:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
9001aa74:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001aa78:	b2b6      	uxth	r6, r6
9001aa7a:	9301      	str	r3, [sp, #4]
9001aa7c:	fa1f fe8e 	uxth.w	lr, lr
9001aa80:	4282      	cmp	r2, r0
9001aa82:	d96a      	bls.n	9001ab5a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001aa84:	eb00 0b0a 	add.w	fp, r0, sl
9001aa88:	4583      	cmp	fp, r0
9001aa8a:	d940      	bls.n	9001ab0e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
9001aa8c:	8805      	ldrh	r5, [r0, #0]
9001aa8e:	f814 3b01 	ldrb.w	r3, [r4], #1
9001aa92:	122f      	asrs	r7, r5, #8
9001aa94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001aa98:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001aa9c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001aaa0:	00ed      	lsls	r5, r5, #3
9001aaa2:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001aaa6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001aaaa:	fb17 f70e 	smulbb	r7, r7, lr
9001aaae:	b2ed      	uxtb	r5, r5
9001aab0:	fb19 f90e 	smulbb	r9, r9, lr
9001aab4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001aab8:	fb15 f50e 	smulbb	r5, r5, lr
9001aabc:	fb0c 7c06 	mla	ip, ip, r6, r7
9001aac0:	10df      	asrs	r7, r3, #3
9001aac2:	00db      	lsls	r3, r3, #3
9001aac4:	fa1f fc8c 	uxth.w	ip, ip
9001aac8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001aacc:	b2db      	uxtb	r3, r3
9001aace:	fb07 9706 	mla	r7, r7, r6, r9
9001aad2:	f10c 0901 	add.w	r9, ip, #1
9001aad6:	fb03 5306 	mla	r3, r3, r6, r5
9001aada:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
9001aade:	b29b      	uxth	r3, r3
9001aae0:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
9001aae4:	b2bf      	uxth	r7, r7
9001aae6:	f103 0c01 	add.w	ip, r3, #1
9001aaea:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001aaee:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001aaf2:	ea4c 0c09 	orr.w	ip, ip, r9
9001aaf6:	f107 0901 	add.w	r9, r7, #1
9001aafa:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001aafe:	097f      	lsrs	r7, r7, #5
9001ab00:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001ab04:	ea4c 0c07 	orr.w	ip, ip, r7
9001ab08:	f820 cb02 	strh.w	ip, [r0], #2
9001ab0c:	e7bc      	b.n	9001aa88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
9001ab0e:	9b01      	ldr	r3, [sp, #4]
9001ab10:	881b      	ldrh	r3, [r3, #0]
9001ab12:	eba3 0308 	sub.w	r3, r3, r8
9001ab16:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ab1a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001ab1e:	eba3 0308 	sub.w	r3, r3, r8
9001ab22:	441c      	add	r4, r3
9001ab24:	e7ac      	b.n	9001aa80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001ab26:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001ab2a:	4282      	cmp	r2, r0
9001ab2c:	d915      	bls.n	9001ab5a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001ab2e:	eb00 060a 	add.w	r6, r0, sl
9001ab32:	4286      	cmp	r6, r0
9001ab34:	d906      	bls.n	9001ab44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001ab36:	f814 3b01 	ldrb.w	r3, [r4], #1
9001ab3a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001ab3e:	f820 3b02 	strh.w	r3, [r0], #2
9001ab42:	e7f6      	b.n	9001ab32 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001ab44:	882b      	ldrh	r3, [r5, #0]
9001ab46:	eba3 0308 	sub.w	r3, r3, r8
9001ab4a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ab4e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001ab52:	eba3 0308 	sub.w	r3, r3, r8
9001ab56:	441c      	add	r4, r3
9001ab58:	e7e7      	b.n	9001ab2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
9001ab5a:	4b04      	ldr	r3, [pc, #16]	; (9001ab6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001ab5c:	6818      	ldr	r0, [r3, #0]
9001ab5e:	6803      	ldr	r3, [r0, #0]
9001ab60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ab62:	4798      	blx	r3
9001ab64:	b007      	add	sp, #28
9001ab66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ab6a:	bf00      	nop
9001ab6c:	2402626c 	.word	0x2402626c
9001ab70:	24026266 	.word	0x24026266

9001ab74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001ab74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ab78:	b091      	sub	sp, #68	; 0x44
9001ab7a:	4680      	mov	r8, r0
9001ab7c:	460f      	mov	r7, r1
9001ab7e:	4614      	mov	r4, r2
9001ab80:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
9001ab84:	2d00      	cmp	r5, #0
9001ab86:	d051      	beq.n	9001ac2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001ab88:	6810      	ldr	r0, [r2, #0]
9001ab8a:	ae0c      	add	r6, sp, #48	; 0x30
9001ab8c:	6851      	ldr	r1, [r2, #4]
9001ab8e:	f8df 9200 	ldr.w	r9, [pc, #512]	; 9001ad90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001ab92:	c603      	stmia	r6!, {r0, r1}
9001ab94:	6818      	ldr	r0, [r3, #0]
9001ab96:	ae0e      	add	r6, sp, #56	; 0x38
9001ab98:	6859      	ldr	r1, [r3, #4]
9001ab9a:	c603      	stmia	r6!, {r0, r1}
9001ab9c:	a80c      	add	r0, sp, #48	; 0x30
9001ab9e:	f7f9 f90f 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001aba2:	4621      	mov	r1, r4
9001aba4:	a80e      	add	r0, sp, #56	; 0x38
9001aba6:	f7f9 f933 	bl	90013e10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001abaa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001abae:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001abb2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
9001abb6:	f8d9 0000 	ldr.w	r0, [r9]
9001abba:	fb11 2103 	smlabb	r1, r1, r3, r2
9001abbe:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
9001abc2:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
9001abc6:	eb08 0401 	add.w	r4, r8, r1
9001abca:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
9001abce:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 9001ad94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
9001abd2:	440a      	add	r2, r1
9001abd4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
9001abd8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001abdc:	4413      	add	r3, r2
9001abde:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001abe2:	6803      	ldr	r3, [r0, #0]
9001abe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001abe6:	4798      	blx	r3
9001abe8:	f010 0f80 	tst.w	r0, #128	; 0x80
9001abec:	f8d9 0000 	ldr.w	r0, [r9]
9001abf0:	d01f      	beq.n	9001ac32 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
9001abf2:	2200      	movs	r2, #0
9001abf4:	6801      	ldr	r1, [r0, #0]
9001abf6:	b2b6      	uxth	r6, r6
9001abf8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001abfc:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001ac00:	220b      	movs	r2, #11
9001ac02:	9207      	str	r2, [sp, #28]
9001ac04:	f8b8 2000 	ldrh.w	r2, [r8]
9001ac08:	9601      	str	r6, [sp, #4]
9001ac0a:	9206      	str	r2, [sp, #24]
9001ac0c:	2201      	movs	r2, #1
9001ac0e:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001ac12:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001ac16:	9203      	str	r2, [sp, #12]
9001ac18:	fa1f f28a 	uxth.w	r2, sl
9001ac1c:	9202      	str	r2, [sp, #8]
9001ac1e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001ac22:	9200      	str	r2, [sp, #0]
9001ac24:	463a      	mov	r2, r7
9001ac26:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
9001ac28:	4621      	mov	r1, r4
9001ac2a:	47a8      	blx	r5
9001ac2c:	b011      	add	sp, #68	; 0x44
9001ac2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ac32:	6803      	ldr	r3, [r0, #0]
9001ac34:	ea4f 0946 	mov.w	r9, r6, lsl #1
9001ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ac3a:	4798      	blx	r3
9001ac3c:	f8b8 2000 	ldrh.w	r2, [r8]
9001ac40:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001ac44:	2dff      	cmp	r5, #255	; 0xff
9001ac46:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
9001ac4a:	fb0a fa02 	mul.w	sl, sl, r2
9001ac4e:	fb02 1303 	mla	r3, r2, r3, r1
9001ac52:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ac56:	d062      	beq.n	9001ad1e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
9001ac58:	ea6f 0c05 	mvn.w	ip, r5
9001ac5c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
9001ac60:	b2ad      	uxth	r5, r5
9001ac62:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
9001ac66:	fa5f fc8c 	uxtb.w	ip, ip
9001ac6a:	930a      	str	r3, [sp, #40]	; 0x28
9001ac6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ac6e:	4298      	cmp	r0, r3
9001ac70:	f080 8085 	bcs.w	9001ad7e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001ac74:	eb00 0b09 	add.w	fp, r0, r9
9001ac78:	4558      	cmp	r0, fp
9001ac7a:	d246      	bcs.n	9001ad0a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
9001ac7c:	f814 eb01 	ldrb.w	lr, [r4], #1
9001ac80:	2303      	movs	r3, #3
9001ac82:	2204      	movs	r2, #4
9001ac84:	fb13 2e0e 	smlabb	lr, r3, lr, r2
9001ac88:	8803      	ldrh	r3, [r0, #0]
9001ac8a:	eb07 0a0e 	add.w	sl, r7, lr
9001ac8e:	1219      	asrs	r1, r3, #8
9001ac90:	10da      	asrs	r2, r3, #3
9001ac92:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001ac96:	f89a 8002 	ldrb.w	r8, [sl, #2]
9001ac9a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001ac9e:	00db      	lsls	r3, r3, #3
9001aca0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001aca4:	fb18 f805 	smulbb	r8, r8, r5
9001aca8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
9001acac:	fb1e fe05 	smulbb	lr, lr, r5
9001acb0:	b2db      	uxtb	r3, r3
9001acb2:	fb01 810c 	mla	r1, r1, ip, r8
9001acb6:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001acba:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
9001acbe:	fb18 f805 	smulbb	r8, r8, r5
9001acc2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
9001acc6:	b289      	uxth	r1, r1
9001acc8:	fb02 820c 	mla	r2, r2, ip, r8
9001accc:	fb03 e30c 	mla	r3, r3, ip, lr
9001acd0:	f101 0801 	add.w	r8, r1, #1
9001acd4:	b292      	uxth	r2, r2
9001acd6:	b29b      	uxth	r3, r3
9001acd8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
9001acdc:	f102 0801 	add.w	r8, r2, #1
9001ace0:	f103 0e01 	add.w	lr, r3, #1
9001ace4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
9001ace8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001acec:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
9001acf0:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001acf4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001acf8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001acfc:	ea4e 0101 	orr.w	r1, lr, r1
9001ad00:	ea41 0108 	orr.w	r1, r1, r8
9001ad04:	f820 1b02 	strh.w	r1, [r0], #2
9001ad08:	e7b6      	b.n	9001ac78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
9001ad0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ad0c:	881b      	ldrh	r3, [r3, #0]
9001ad0e:	1b9b      	subs	r3, r3, r6
9001ad10:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ad14:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001ad18:	1b9b      	subs	r3, r3, r6
9001ad1a:	441c      	add	r4, r3
9001ad1c:	e7a6      	b.n	9001ac6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
9001ad1e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001ad22:	2203      	movs	r2, #3
9001ad24:	2504      	movs	r5, #4
9001ad26:	4919      	ldr	r1, [pc, #100]	; (9001ad8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
9001ad28:	4550      	cmp	r0, sl
9001ad2a:	d228      	bcs.n	9001ad7e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001ad2c:	eb00 0c09 	add.w	ip, r0, r9
9001ad30:	4560      	cmp	r0, ip
9001ad32:	4623      	mov	r3, r4
9001ad34:	d219      	bcs.n	9001ad6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001ad36:	f893 e000 	ldrb.w	lr, [r3]
9001ad3a:	3401      	adds	r4, #1
9001ad3c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
9001ad40:	eb07 0b0e 	add.w	fp, r7, lr
9001ad44:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001ad48:	f89b 3002 	ldrb.w	r3, [fp, #2]
9001ad4c:	f89b b001 	ldrb.w	fp, [fp, #1]
9001ad50:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001ad54:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
9001ad58:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001ad5c:	ea43 030b 	orr.w	r3, r3, fp
9001ad60:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
9001ad64:	f820 3b02 	strh.w	r3, [r0], #2
9001ad68:	e7e2      	b.n	9001ad30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
9001ad6a:	f8b8 3000 	ldrh.w	r3, [r8]
9001ad6e:	1b9b      	subs	r3, r3, r6
9001ad70:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ad74:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001ad78:	1b9b      	subs	r3, r3, r6
9001ad7a:	441c      	add	r4, r3
9001ad7c:	e7d4      	b.n	9001ad28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
9001ad7e:	4b04      	ldr	r3, [pc, #16]	; (9001ad90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
9001ad80:	6818      	ldr	r0, [r3, #0]
9001ad82:	6803      	ldr	r3, [r0, #0]
9001ad84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ad86:	4798      	blx	r3
9001ad88:	e750      	b.n	9001ac2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001ad8a:	bf00      	nop
9001ad8c:	fffff800 	.word	0xfffff800
9001ad90:	2402626c 	.word	0x2402626c
9001ad94:	24026266 	.word	0x24026266

9001ad98 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
9001ad98:	b430      	push	{r4, r5}
9001ad9a:	780d      	ldrb	r5, [r1, #0]
9001ad9c:	f89d 4008 	ldrb.w	r4, [sp, #8]
9001ada0:	2d01      	cmp	r5, #1
9001ada2:	d00a      	beq.n	9001adba <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
9001ada4:	d305      	bcc.n	9001adb2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
9001ada6:	2d02      	cmp	r5, #2
9001ada8:	d10b      	bne.n	9001adc2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
9001adaa:	9402      	str	r4, [sp, #8]
9001adac:	bc30      	pop	{r4, r5}
9001adae:	f7ff be15 	b.w	9001a9dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
9001adb2:	9402      	str	r4, [sp, #8]
9001adb4:	bc30      	pop	{r4, r5}
9001adb6:	f7ff bd2b 	b.w	9001a810 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
9001adba:	9402      	str	r4, [sp, #8]
9001adbc:	bc30      	pop	{r4, r5}
9001adbe:	f7ff bed9 	b.w	9001ab74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
9001adc2:	bc30      	pop	{r4, r5}
9001adc4:	4770      	bx	lr
	...

9001adc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
9001adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001adcc:	b087      	sub	sp, #28
9001adce:	4604      	mov	r4, r0
9001add0:	460e      	mov	r6, r1
9001add2:	6810      	ldr	r0, [r2, #0]
9001add4:	6851      	ldr	r1, [r2, #4]
9001add6:	ad02      	add	r5, sp, #8
9001add8:	4617      	mov	r7, r2
9001adda:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
9001adde:	f8df 9230 	ldr.w	r9, [pc, #560]	; 9001b010 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
9001ade2:	c503      	stmia	r5!, {r0, r1}
9001ade4:	6818      	ldr	r0, [r3, #0]
9001ade6:	ad04      	add	r5, sp, #16
9001ade8:	6859      	ldr	r1, [r3, #4]
9001adea:	c503      	stmia	r5!, {r0, r1}
9001adec:	a802      	add	r0, sp, #8
9001adee:	f7f8 ffe7 	bl	90013dc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001adf2:	4639      	mov	r1, r7
9001adf4:	a804      	add	r0, sp, #16
9001adf6:	f7f9 f80b 	bl	90013e10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001adfa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001adfe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001ae02:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001ae06:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001ae0a:	fb11 2103 	smlabb	r1, r1, r3, r2
9001ae0e:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001ae12:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001ae16:	440e      	add	r6, r1
9001ae18:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001ae1c:	440a      	add	r2, r1
9001ae1e:	f8ad 2010 	strh.w	r2, [sp, #16]
9001ae22:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001ae26:	4413      	add	r3, r2
9001ae28:	f8ad 3012 	strh.w	r3, [sp, #18]
9001ae2c:	4b77      	ldr	r3, [pc, #476]	; (9001b00c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001ae2e:	6818      	ldr	r0, [r3, #0]
9001ae30:	6803      	ldr	r3, [r0, #0]
9001ae32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ae34:	4798      	blx	r3
9001ae36:	f8b9 b000 	ldrh.w	fp, [r9]
9001ae3a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001ae3e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001ae42:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001ae46:	fb05 f50b 	mul.w	r5, r5, fp
9001ae4a:	fb0b 2303 	mla	r3, fp, r3, r2
9001ae4e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ae52:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001ae56:	9300      	str	r3, [sp, #0]
9001ae58:	d069      	beq.n	9001af2e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
9001ae5a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
9001ae5e:	4558      	cmp	r0, fp
9001ae60:	f080 80cc 	bcs.w	9001affc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001ae64:	9b00      	ldr	r3, [sp, #0]
9001ae66:	4631      	mov	r1, r6
9001ae68:	18c3      	adds	r3, r0, r3
9001ae6a:	9301      	str	r3, [sp, #4]
9001ae6c:	9b01      	ldr	r3, [sp, #4]
9001ae6e:	4298      	cmp	r0, r3
9001ae70:	d24f      	bcs.n	9001af12 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
9001ae72:	f811 2b01 	ldrb.w	r2, [r1], #1
9001ae76:	2a00      	cmp	r2, #0
9001ae78:	d048      	beq.n	9001af0c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001ae7a:	fb0a f202 	mul.w	r2, sl, r2
9001ae7e:	1c53      	adds	r3, r2, #1
9001ae80:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001ae84:	121b      	asrs	r3, r3, #8
9001ae86:	d041      	beq.n	9001af0c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001ae88:	8802      	ldrh	r2, [r0, #0]
9001ae8a:	b29e      	uxth	r6, r3
9001ae8c:	f8b4 c000 	ldrh.w	ip, [r4]
9001ae90:	43db      	mvns	r3, r3
9001ae92:	1215      	asrs	r5, r2, #8
9001ae94:	b2db      	uxtb	r3, r3
9001ae96:	ea4f 272c 	mov.w	r7, ip, asr #8
9001ae9a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001ae9e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
9001aea2:	fb15 f503 	smulbb	r5, r5, r3
9001aea6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001aeaa:	00d2      	lsls	r2, r2, #3
9001aeac:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001aeb0:	fb07 5706 	mla	r7, r7, r6, r5
9001aeb4:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001aeb8:	b2d2      	uxtb	r2, r2
9001aeba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001aebe:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001aec2:	fb1e fe03 	smulbb	lr, lr, r3
9001aec6:	b2bf      	uxth	r7, r7
9001aec8:	fb12 f203 	smulbb	r2, r2, r3
9001aecc:	fa5f fc8c 	uxtb.w	ip, ip
9001aed0:	fb05 e506 	mla	r5, r5, r6, lr
9001aed4:	f107 0e01 	add.w	lr, r7, #1
9001aed8:	fb0c 2c06 	mla	ip, ip, r6, r2
9001aedc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
9001aee0:	fa1f fc8c 	uxth.w	ip, ip
9001aee4:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
9001aee8:	b2ad      	uxth	r5, r5
9001aeea:	f10c 0701 	add.w	r7, ip, #1
9001aeee:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001aef2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001aef6:	ea47 070e 	orr.w	r7, r7, lr
9001aefa:	f105 0e01 	add.w	lr, r5, #1
9001aefe:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001af02:	096d      	lsrs	r5, r5, #5
9001af04:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001af08:	432f      	orrs	r7, r5
9001af0a:	8007      	strh	r7, [r0, #0]
9001af0c:	3002      	adds	r0, #2
9001af0e:	3402      	adds	r4, #2
9001af10:	e7ac      	b.n	9001ae6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001af12:	f8b9 3000 	ldrh.w	r3, [r9]
9001af16:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001af1a:	eba3 0308 	sub.w	r3, r3, r8
9001af1e:	eba6 0608 	sub.w	r6, r6, r8
9001af22:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001af26:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001af2a:	440e      	add	r6, r1
9001af2c:	e797      	b.n	9001ae5e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
9001af2e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001af32:	42a8      	cmp	r0, r5
9001af34:	d262      	bcs.n	9001affc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001af36:	9b00      	ldr	r3, [sp, #0]
9001af38:	4631      	mov	r1, r6
9001af3a:	eb00 0b03 	add.w	fp, r0, r3
9001af3e:	4558      	cmp	r0, fp
9001af40:	d24e      	bcs.n	9001afe0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001af42:	f811 3b01 	ldrb.w	r3, [r1], #1
9001af46:	b12b      	cbz	r3, 9001af54 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001af48:	2bff      	cmp	r3, #255	; 0xff
9001af4a:	f8b4 e000 	ldrh.w	lr, [r4]
9001af4e:	d104      	bne.n	9001af5a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
9001af50:	f8a0 e000 	strh.w	lr, [r0]
9001af54:	3002      	adds	r0, #2
9001af56:	3402      	adds	r4, #2
9001af58:	e7f1      	b.n	9001af3e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
9001af5a:	8802      	ldrh	r2, [r0, #0]
9001af5c:	b29f      	uxth	r7, r3
9001af5e:	43db      	mvns	r3, r3
9001af60:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001af64:	1216      	asrs	r6, r2, #8
9001af66:	b2db      	uxtb	r3, r3
9001af68:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001af6c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001af70:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001af74:	00d2      	lsls	r2, r2, #3
9001af76:	fb16 f603 	smulbb	r6, r6, r3
9001af7a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001af7e:	b2d2      	uxtb	r2, r2
9001af80:	fb0c 6c07 	mla	ip, ip, r7, r6
9001af84:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001af88:	fb1a fa03 	smulbb	sl, sl, r3
9001af8c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001af90:	fa1f fc8c 	uxth.w	ip, ip
9001af94:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001af98:	fb12 f303 	smulbb	r3, r2, r3
9001af9c:	fa5f fe8e 	uxtb.w	lr, lr
9001afa0:	fb06 a607 	mla	r6, r6, r7, sl
9001afa4:	f10c 0201 	add.w	r2, ip, #1
9001afa8:	fb0e 3307 	mla	r3, lr, r7, r3
9001afac:	b2b6      	uxth	r6, r6
9001afae:	b29b      	uxth	r3, r3
9001afb0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001afb4:	f106 0a01 	add.w	sl, r6, #1
9001afb8:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
9001afbc:	f103 0c01 	add.w	ip, r3, #1
9001afc0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
9001afc4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001afc8:	0976      	lsrs	r6, r6, #5
9001afca:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001afce:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001afd2:	ea4c 0c02 	orr.w	ip, ip, r2
9001afd6:	ea4c 0c06 	orr.w	ip, ip, r6
9001afda:	f8a0 c000 	strh.w	ip, [r0]
9001afde:	e7b9      	b.n	9001af54 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001afe0:	f8b9 3000 	ldrh.w	r3, [r9]
9001afe4:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001afe8:	eba3 0308 	sub.w	r3, r3, r8
9001afec:	eba6 0608 	sub.w	r6, r6, r8
9001aff0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001aff4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001aff8:	440e      	add	r6, r1
9001affa:	e79a      	b.n	9001af32 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
9001affc:	4b03      	ldr	r3, [pc, #12]	; (9001b00c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001affe:	6818      	ldr	r0, [r3, #0]
9001b000:	6803      	ldr	r3, [r0, #0]
9001b002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b004:	4798      	blx	r3
9001b006:	b007      	add	sp, #28
9001b008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b00c:	2402626c 	.word	0x2402626c
9001b010:	24026266 	.word	0x24026266

9001b014 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9001b014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b018:	b089      	sub	sp, #36	; 0x24
9001b01a:	4682      	mov	sl, r0
9001b01c:	460f      	mov	r7, r1
9001b01e:	4691      	mov	r9, r2
9001b020:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
9001b024:	4698      	mov	r8, r3
9001b026:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001b028:	2e00      	cmp	r6, #0
9001b02a:	d036      	beq.n	9001b09a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b02c:	4608      	mov	r0, r1
9001b02e:	f7fc f863 	bl	900170f8 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001b032:	4605      	mov	r5, r0
9001b034:	4638      	mov	r0, r7
9001b036:	f7fc f893 	bl	90017160 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001b03a:	f8ad 000e 	strh.w	r0, [sp, #14]
9001b03e:	4638      	mov	r0, r7
9001b040:	f8ad 9008 	strh.w	r9, [sp, #8]
9001b044:	f8ad 500c 	strh.w	r5, [sp, #12]
9001b048:	f8ad 800a 	strh.w	r8, [sp, #10]
9001b04c:	f7fc f940 	bl	900172d0 <_ZNK8touchgfx6Bitmap7getDataEv>
9001b050:	4605      	mov	r5, r0
9001b052:	4638      	mov	r0, r7
9001b054:	f7fc f96c 	bl	90017330 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001b058:	4681      	mov	r9, r0
9001b05a:	4638      	mov	r0, r7
9001b05c:	f7fc f9bc 	bl	900173d8 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001b060:	280b      	cmp	r0, #11
9001b062:	d81a      	bhi.n	9001b09a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b064:	e8df f000 	tbb	[pc, r0]
9001b068:	1906aebd 	.word	0x1906aebd
9001b06c:	19191919 	.word	0x19191919
9001b070:	b5191919 	.word	0xb5191919
9001b074:	4bb0      	ldr	r3, [pc, #704]	; (9001b338 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
9001b076:	6818      	ldr	r0, [r3, #0]
9001b078:	6803      	ldr	r3, [r0, #0]
9001b07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001b07c:	4798      	blx	r3
9001b07e:	2eff      	cmp	r6, #255	; 0xff
9001b080:	d121      	bne.n	9001b0c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001b082:	0683      	lsls	r3, r0, #26
9001b084:	d41f      	bmi.n	9001b0c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001b086:	4638      	mov	r0, r7
9001b088:	f7fc f8ea 	bl	90017260 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001b08c:	b940      	cbnz	r0, 9001b0a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
9001b08e:	4623      	mov	r3, r4
9001b090:	aa02      	add	r2, sp, #8
9001b092:	4629      	mov	r1, r5
9001b094:	4650      	mov	r0, sl
9001b096:	f7ff fa2f 	bl	9001a4f8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001b09a:	b009      	add	sp, #36	; 0x24
9001b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b0a0:	f10d 0818 	add.w	r8, sp, #24
9001b0a4:	4639      	mov	r1, r7
9001b0a6:	af04      	add	r7, sp, #16
9001b0a8:	4640      	mov	r0, r8
9001b0aa:	f7fc f88d 	bl	900171c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001b0ae:	e898 0003 	ldmia.w	r8, {r0, r1}
9001b0b2:	e887 0003 	stmia.w	r7, {r0, r1}
9001b0b6:	4638      	mov	r0, r7
9001b0b8:	4621      	mov	r1, r4
9001b0ba:	f7f6 f8f7 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
9001b0be:	4638      	mov	r0, r7
9001b0c0:	f7f6 f937 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
9001b0c4:	b130      	cbz	r0, 9001b0d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
9001b0c6:	4633      	mov	r3, r6
9001b0c8:	4622      	mov	r2, r4
9001b0ca:	a902      	add	r1, sp, #8
9001b0cc:	4628      	mov	r0, r5
9001b0ce:	f7ff f92d 	bl	9001a32c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b0d2:	e7e2      	b.n	9001b09a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b0d4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001b0d8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001b0dc:	4293      	cmp	r3, r2
9001b0de:	dd12      	ble.n	9001b106 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
9001b0e0:	1a9b      	subs	r3, r3, r2
9001b0e2:	f9b4 0000 	ldrsh.w	r0, [r4]
9001b0e6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001b0ea:	f8ad 0018 	strh.w	r0, [sp, #24]
9001b0ee:	4628      	mov	r0, r5
9001b0f0:	f8ad 201a 	strh.w	r2, [sp, #26]
9001b0f4:	4642      	mov	r2, r8
9001b0f6:	f8ad 101c 	strh.w	r1, [sp, #28]
9001b0fa:	a902      	add	r1, sp, #8
9001b0fc:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b100:	4633      	mov	r3, r6
9001b102:	f7ff f913 	bl	9001a32c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b106:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001b10a:	f9b4 2000 	ldrsh.w	r2, [r4]
9001b10e:	4293      	cmp	r3, r2
9001b110:	dd12      	ble.n	9001b138 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
9001b112:	1a9b      	subs	r3, r3, r2
9001b114:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001b118:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001b11c:	f8ad 2018 	strh.w	r2, [sp, #24]
9001b120:	4642      	mov	r2, r8
9001b122:	f8ad 001a 	strh.w	r0, [sp, #26]
9001b126:	4628      	mov	r0, r5
9001b128:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b12c:	23ff      	movs	r3, #255	; 0xff
9001b12e:	f8ad 101e 	strh.w	r1, [sp, #30]
9001b132:	a902      	add	r1, sp, #8
9001b134:	f7ff f8fa 	bl	9001a32c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b138:	463b      	mov	r3, r7
9001b13a:	aa02      	add	r2, sp, #8
9001b13c:	4629      	mov	r1, r5
9001b13e:	4650      	mov	r0, sl
9001b140:	f7ff f9da 	bl	9001a4f8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001b144:	88a2      	ldrh	r2, [r4, #4]
9001b146:	8823      	ldrh	r3, [r4, #0]
9001b148:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001b14c:	4413      	add	r3, r2
9001b14e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001b152:	440a      	add	r2, r1
9001b154:	b29b      	uxth	r3, r3
9001b156:	b292      	uxth	r2, r2
9001b158:	b218      	sxth	r0, r3
9001b15a:	b211      	sxth	r1, r2
9001b15c:	4288      	cmp	r0, r1
9001b15e:	dd12      	ble.n	9001b186 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
9001b160:	1a9b      	subs	r3, r3, r2
9001b162:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001b166:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
9001b16a:	4642      	mov	r2, r8
9001b16c:	f8ad 1018 	strh.w	r1, [sp, #24]
9001b170:	a902      	add	r1, sp, #8
9001b172:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b176:	23ff      	movs	r3, #255	; 0xff
9001b178:	f8ad 001e 	strh.w	r0, [sp, #30]
9001b17c:	4628      	mov	r0, r5
9001b17e:	f8ad 601a 	strh.w	r6, [sp, #26]
9001b182:	f7ff f8d3 	bl	9001a32c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b186:	88e2      	ldrh	r2, [r4, #6]
9001b188:	8863      	ldrh	r3, [r4, #2]
9001b18a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001b18e:	4413      	add	r3, r2
9001b190:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001b194:	440a      	add	r2, r1
9001b196:	b29b      	uxth	r3, r3
9001b198:	b292      	uxth	r2, r2
9001b19a:	b218      	sxth	r0, r3
9001b19c:	b211      	sxth	r1, r2
9001b19e:	4288      	cmp	r0, r1
9001b1a0:	f77f af7b 	ble.w	9001b09a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b1a4:	1a9b      	subs	r3, r3, r2
9001b1a6:	f9b4 6000 	ldrsh.w	r6, [r4]
9001b1aa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001b1ae:	4642      	mov	r2, r8
9001b1b0:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b1b4:	23ff      	movs	r3, #255	; 0xff
9001b1b6:	f8ad 6018 	strh.w	r6, [sp, #24]
9001b1ba:	f8ad 101a 	strh.w	r1, [sp, #26]
9001b1be:	f8ad 001c 	strh.w	r0, [sp, #28]
9001b1c2:	e782      	b.n	9001b0ca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
9001b1c4:	4633      	mov	r3, r6
9001b1c6:	4622      	mov	r2, r4
9001b1c8:	a902      	add	r1, sp, #8
9001b1ca:	4628      	mov	r0, r5
9001b1cc:	f7ff fa04 	bl	9001a5d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
9001b1d0:	e763      	b.n	9001b09a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b1d2:	9600      	str	r6, [sp, #0]
9001b1d4:	4623      	mov	r3, r4
9001b1d6:	aa02      	add	r2, sp, #8
9001b1d8:	4649      	mov	r1, r9
9001b1da:	4628      	mov	r0, r5
9001b1dc:	f7ff fddc 	bl	9001ad98 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
9001b1e0:	e75b      	b.n	9001b09a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b1e2:	4638      	mov	r0, r7
9001b1e4:	f7fc f83c 	bl	90017260 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001b1e8:	b950      	cbnz	r0, 9001b200 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
9001b1ea:	f8da 3000 	ldr.w	r3, [sl]
9001b1ee:	aa02      	add	r2, sp, #8
9001b1f0:	4629      	mov	r1, r5
9001b1f2:	e9cd 6000 	strd	r6, r0, [sp]
9001b1f6:	4650      	mov	r0, sl
9001b1f8:	68de      	ldr	r6, [r3, #12]
9001b1fa:	4623      	mov	r3, r4
9001b1fc:	47b0      	blx	r6
9001b1fe:	e74c      	b.n	9001b09a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b200:	f10d 0818 	add.w	r8, sp, #24
9001b204:	4639      	mov	r1, r7
9001b206:	af04      	add	r7, sp, #16
9001b208:	4640      	mov	r0, r8
9001b20a:	f7fb ffdd 	bl	900171c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001b20e:	e898 0003 	ldmia.w	r8, {r0, r1}
9001b212:	e887 0003 	stmia.w	r7, {r0, r1}
9001b216:	4638      	mov	r0, r7
9001b218:	4621      	mov	r1, r4
9001b21a:	f7f6 f847 	bl	900112ac <_ZN8touchgfx4RectaNERKS0_>
9001b21e:	4638      	mov	r0, r7
9001b220:	f7f6 f887 	bl	90011332 <_ZNK8touchgfx4Rect7isEmptyEv>
9001b224:	b138      	cbz	r0, 9001b236 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
9001b226:	4623      	mov	r3, r4
9001b228:	9600      	str	r6, [sp, #0]
9001b22a:	aa02      	add	r2, sp, #8
9001b22c:	4649      	mov	r1, r9
9001b22e:	4628      	mov	r0, r5
9001b230:	f7ff fdca 	bl	9001adc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b234:	e731      	b.n	9001b09a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b236:	f8da 3000 	ldr.w	r3, [sl]
9001b23a:	aa02      	add	r2, sp, #8
9001b23c:	4629      	mov	r1, r5
9001b23e:	e9cd 6000 	strd	r6, r0, [sp]
9001b242:	4650      	mov	r0, sl
9001b244:	f8d3 b00c 	ldr.w	fp, [r3, #12]
9001b248:	463b      	mov	r3, r7
9001b24a:	47d8      	blx	fp
9001b24c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001b250:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001b254:	4293      	cmp	r3, r2
9001b256:	dd13      	ble.n	9001b280 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
9001b258:	f9b4 0000 	ldrsh.w	r0, [r4]
9001b25c:	1a9b      	subs	r3, r3, r2
9001b25e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001b262:	f8ad 0018 	strh.w	r0, [sp, #24]
9001b266:	4628      	mov	r0, r5
9001b268:	f8ad 201a 	strh.w	r2, [sp, #26]
9001b26c:	aa02      	add	r2, sp, #8
9001b26e:	f8ad 101c 	strh.w	r1, [sp, #28]
9001b272:	4649      	mov	r1, r9
9001b274:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b278:	4643      	mov	r3, r8
9001b27a:	9600      	str	r6, [sp, #0]
9001b27c:	f7ff fda4 	bl	9001adc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b280:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001b284:	f9b4 2000 	ldrsh.w	r2, [r4]
9001b288:	4293      	cmp	r3, r2
9001b28a:	dd13      	ble.n	9001b2b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
9001b28c:	1a9b      	subs	r3, r3, r2
9001b28e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001b292:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001b296:	f8ad 2018 	strh.w	r2, [sp, #24]
9001b29a:	aa02      	add	r2, sp, #8
9001b29c:	f8ad 001a 	strh.w	r0, [sp, #26]
9001b2a0:	4628      	mov	r0, r5
9001b2a2:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b2a6:	4643      	mov	r3, r8
9001b2a8:	f8ad 101e 	strh.w	r1, [sp, #30]
9001b2ac:	4649      	mov	r1, r9
9001b2ae:	9600      	str	r6, [sp, #0]
9001b2b0:	f7ff fd8a 	bl	9001adc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b2b4:	88a2      	ldrh	r2, [r4, #4]
9001b2b6:	8823      	ldrh	r3, [r4, #0]
9001b2b8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001b2bc:	4413      	add	r3, r2
9001b2be:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001b2c2:	440a      	add	r2, r1
9001b2c4:	b29b      	uxth	r3, r3
9001b2c6:	b292      	uxth	r2, r2
9001b2c8:	b218      	sxth	r0, r3
9001b2ca:	b211      	sxth	r1, r2
9001b2cc:	4288      	cmp	r0, r1
9001b2ce:	dd13      	ble.n	9001b2f8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
9001b2d0:	1a9b      	subs	r3, r3, r2
9001b2d2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001b2d6:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
9001b2da:	aa02      	add	r2, sp, #8
9001b2dc:	f8ad 1018 	strh.w	r1, [sp, #24]
9001b2e0:	4649      	mov	r1, r9
9001b2e2:	f8ad 301c 	strh.w	r3, [sp, #28]
9001b2e6:	4643      	mov	r3, r8
9001b2e8:	f8ad 001e 	strh.w	r0, [sp, #30]
9001b2ec:	4628      	mov	r0, r5
9001b2ee:	9600      	str	r6, [sp, #0]
9001b2f0:	f8ad 701a 	strh.w	r7, [sp, #26]
9001b2f4:	f7ff fd68 	bl	9001adc8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001b2f8:	88e2      	ldrh	r2, [r4, #6]
9001b2fa:	8863      	ldrh	r3, [r4, #2]
9001b2fc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001b300:	4413      	add	r3, r2
9001b302:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001b306:	440a      	add	r2, r1
9001b308:	b29b      	uxth	r3, r3
9001b30a:	b292      	uxth	r2, r2
9001b30c:	b218      	sxth	r0, r3
9001b30e:	b211      	sxth	r1, r2
9001b310:	4288      	cmp	r0, r1
9001b312:	f77f aec2 	ble.w	9001b09a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b316:	f9b4 7000 	ldrsh.w	r7, [r4]
9001b31a:	1a9b      	subs	r3, r3, r2
9001b31c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001b320:	f8ad 301e 	strh.w	r3, [sp, #30]
9001b324:	4643      	mov	r3, r8
9001b326:	f8ad 7018 	strh.w	r7, [sp, #24]
9001b32a:	f8ad 101a 	strh.w	r1, [sp, #26]
9001b32e:	f8ad 001c 	strh.w	r0, [sp, #28]
9001b332:	9600      	str	r6, [sp, #0]
9001b334:	e779      	b.n	9001b22a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
9001b336:	bf00      	nop
9001b338:	2402626c 	.word	0x2402626c

9001b33c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
9001b33c:	b180      	cbz	r0, 9001b360 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
9001b33e:	2903      	cmp	r1, #3
9001b340:	d81c      	bhi.n	9001b37c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001b342:	e8df f001 	tbb	[pc, r1]
9001b346:	1d02      	.short	0x1d02
9001b348:	1f08      	.short	0x1f08
9001b34a:	4b10      	ldr	r3, [pc, #64]	; (9001b38c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001b34c:	8818      	ldrh	r0, [r3, #0]
9001b34e:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b352:	4240      	negs	r0, r0
9001b354:	4770      	bx	lr
9001b356:	4b0d      	ldr	r3, [pc, #52]	; (9001b38c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001b358:	8818      	ldrh	r0, [r3, #0]
9001b35a:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b35e:	4770      	bx	lr
9001b360:	2903      	cmp	r1, #3
9001b362:	d80b      	bhi.n	9001b37c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001b364:	a301      	add	r3, pc, #4	; (adr r3, 9001b36c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
9001b366:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001b36a:	bf00      	nop
9001b36c:	9001b381 	.word	0x9001b381
9001b370:	9001b357 	.word	0x9001b357
9001b374:	9001b385 	.word	0x9001b385
9001b378:	9001b34b 	.word	0x9001b34b
9001b37c:	2000      	movs	r0, #0
9001b37e:	4770      	bx	lr
9001b380:	2001      	movs	r0, #1
9001b382:	4770      	bx	lr
9001b384:	f04f 30ff 	mov.w	r0, #4294967295
9001b388:	4770      	bx	lr
9001b38a:	bf00      	nop
9001b38c:	24026266 	.word	0x24026266

9001b390 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
9001b390:	b180      	cbz	r0, 9001b3b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
9001b392:	2903      	cmp	r1, #3
9001b394:	d81c      	bhi.n	9001b3d0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001b396:	e8df f001 	tbb	[pc, r1]
9001b39a:	021d      	.short	0x021d
9001b39c:	071f      	.short	0x071f
9001b39e:	4b10      	ldr	r3, [pc, #64]	; (9001b3e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001b3a0:	8818      	ldrh	r0, [r3, #0]
9001b3a2:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b3a6:	4770      	bx	lr
9001b3a8:	4b0d      	ldr	r3, [pc, #52]	; (9001b3e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001b3aa:	8818      	ldrh	r0, [r3, #0]
9001b3ac:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001b3b0:	4240      	negs	r0, r0
9001b3b2:	4770      	bx	lr
9001b3b4:	2903      	cmp	r1, #3
9001b3b6:	d80b      	bhi.n	9001b3d0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001b3b8:	a301      	add	r3, pc, #4	; (adr r3, 9001b3c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
9001b3ba:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001b3be:	bf00      	nop
9001b3c0:	9001b39f 	.word	0x9001b39f
9001b3c4:	9001b3d9 	.word	0x9001b3d9
9001b3c8:	9001b3a9 	.word	0x9001b3a9
9001b3cc:	9001b3d5 	.word	0x9001b3d5
9001b3d0:	2000      	movs	r0, #0
9001b3d2:	4770      	bx	lr
9001b3d4:	2001      	movs	r0, #1
9001b3d6:	4770      	bx	lr
9001b3d8:	f04f 30ff 	mov.w	r0, #4294967295
9001b3dc:	4770      	bx	lr
9001b3de:	bf00      	nop
9001b3e0:	24026266 	.word	0x24026266

9001b3e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
9001b3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b3e8:	b099      	sub	sp, #100	; 0x64
9001b3ea:	910b      	str	r1, [sp, #44]	; 0x2c
9001b3ec:	a914      	add	r1, sp, #80	; 0x50
9001b3ee:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
9001b3f2:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
9001b3f6:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
9001b3fa:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
9001b3fe:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
9001b402:	e881 000c 	stmia.w	r1, {r2, r3}
9001b406:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
9001b40a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
9001b40e:	9309      	str	r3, [sp, #36]	; 0x24
9001b410:	f891 900d 	ldrb.w	r9, [r1, #13]
9001b414:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001b418:	ea4f 1749 	mov.w	r7, r9, lsl #5
9001b41c:	9310      	str	r3, [sp, #64]	; 0x40
9001b41e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
9001b422:	930c      	str	r3, [sp, #48]	; 0x30
9001b424:	f407 7380 	and.w	r3, r7, #256	; 0x100
9001b428:	798f      	ldrb	r7, [r1, #6]
9001b42a:	431f      	orrs	r7, r3
9001b42c:	f000 8195 	beq.w	9001b75a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b430:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001b434:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001b438:	f891 9007 	ldrb.w	r9, [r1, #7]
9001b43c:	ea59 0903 	orrs.w	r9, r9, r3
9001b440:	f000 818b 	beq.w	9001b75a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b444:	f991 3009 	ldrsb.w	r3, [r1, #9]
9001b448:	b29b      	uxth	r3, r3
9001b44a:	2d00      	cmp	r5, #0
9001b44c:	f000 812e 	beq.w	9001b6ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
9001b450:	1aed      	subs	r5, r5, r3
9001b452:	b2ad      	uxth	r5, r5
9001b454:	042b      	lsls	r3, r5, #16
9001b456:	d502      	bpl.n	9001b45e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001b458:	1b64      	subs	r4, r4, r5
9001b45a:	2500      	movs	r5, #0
9001b45c:	b224      	sxth	r4, r4
9001b45e:	f9b2 1000 	ldrsh.w	r1, [r2]
9001b462:	a814      	add	r0, sp, #80	; 0x50
9001b464:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9001b468:	428c      	cmp	r4, r1
9001b46a:	b28b      	uxth	r3, r1
9001b46c:	bfbf      	itttt	lt
9001b46e:	18ed      	addlt	r5, r5, r3
9001b470:	1b2c      	sublt	r4, r5, r4
9001b472:	b2a5      	uxthlt	r5, r4
9001b474:	460c      	movlt	r4, r1
9001b476:	8891      	ldrh	r1, [r2, #4]
9001b478:	440b      	add	r3, r1
9001b47a:	4621      	mov	r1, r4
9001b47c:	b21b      	sxth	r3, r3
9001b47e:	930f      	str	r3, [sp, #60]	; 0x3c
9001b480:	88d3      	ldrh	r3, [r2, #6]
9001b482:	8852      	ldrh	r2, [r2, #2]
9001b484:	4413      	add	r3, r2
9001b486:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001b488:	b21b      	sxth	r3, r3
9001b48a:	930d      	str	r3, [sp, #52]	; 0x34
9001b48c:	4bbd      	ldr	r3, [pc, #756]	; (9001b784 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
9001b48e:	f893 b000 	ldrb.w	fp, [r3]
9001b492:	f10b 3cff 	add.w	ip, fp, #4294967295
9001b496:	f1dc 0300 	rsbs	r3, ip, #0
9001b49a:	eb43 030c 	adc.w	r3, r3, ip
9001b49e:	930e      	str	r3, [sp, #56]	; 0x38
9001b4a0:	4653      	mov	r3, sl
9001b4a2:	f7f8 fb07 	bl	90013ab4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
9001b4a6:	4621      	mov	r1, r4
9001b4a8:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
9001b4ac:	4653      	mov	r3, sl
9001b4ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001b4b0:	a814      	add	r0, sp, #80	; 0x50
9001b4b2:	f7f8 fb1c 	bl	90013aee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
9001b4b6:	a918      	add	r1, sp, #96	; 0x60
9001b4b8:	f821 0d02 	strh.w	r0, [r1, #-2]!
9001b4bc:	a817      	add	r0, sp, #92	; 0x5c
9001b4be:	f7f8 fc3d 	bl	90013d3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
9001b4c2:	f1ba 0f00 	cmp.w	sl, #0
9001b4c6:	f040 80f4 	bne.w	9001b6b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
9001b4ca:	f1bb 0f01 	cmp.w	fp, #1
9001b4ce:	f040 80f8 	bne.w	9001b6c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
9001b4d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b4d4:	2b00      	cmp	r3, #0
9001b4d6:	f040 8145 	bne.w	9001b764 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9001b4da:	b2ba      	uxth	r2, r7
9001b4dc:	b905      	cbnz	r5, 9001b4e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
9001b4de:	b16e      	cbz	r6, 9001b4fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
9001b4e0:	fb06 5302 	mla	r3, r6, r2, r5
9001b4e4:	9828      	ldr	r0, [sp, #160]	; 0xa0
9001b4e6:	4631      	mov	r1, r6
9001b4e8:	fb08 f303 	mul.w	r3, r8, r3
9001b4ec:	f003 0607 	and.w	r6, r3, #7
9001b4f0:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
9001b4f4:	9328      	str	r3, [sp, #160]	; 0xa0
9001b4f6:	eba9 0301 	sub.w	r3, r9, r1
9001b4fa:	930a      	str	r3, [sp, #40]	; 0x28
9001b4fc:	4651      	mov	r1, sl
9001b4fe:	980e      	ldr	r0, [sp, #56]	; 0x38
9001b500:	f7ff ff1c 	bl	9001b33c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
9001b504:	4681      	mov	r9, r0
9001b506:	980e      	ldr	r0, [sp, #56]	; 0x38
9001b508:	f7ff ff42 	bl	9001b390 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9001b50c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b50e:	9909      	ldr	r1, [sp, #36]	; 0x24
9001b510:	4683      	mov	fp, r0
9001b512:	eba3 0a01 	sub.w	sl, r3, r1
9001b516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b518:	459a      	cmp	sl, r3
9001b51a:	bfa8      	it	ge
9001b51c:	469a      	movge	sl, r3
9001b51e:	f1ba 0f00 	cmp.w	sl, #0
9001b522:	f340 811a 	ble.w	9001b75a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b526:	1b64      	subs	r4, r4, r5
9001b528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b52a:	1b1c      	subs	r4, r3, r4
9001b52c:	42bc      	cmp	r4, r7
9001b52e:	bfd4      	ite	le
9001b530:	ebc5 0504 	rsble	r5, r5, r4
9001b534:	ebc5 0507 	rsbgt	r5, r5, r7
9001b538:	2d00      	cmp	r5, #0
9001b53a:	f340 810e 	ble.w	9001b75a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b53e:	1b52      	subs	r2, r2, r5
9001b540:	fb08 f302 	mul.w	r3, r8, r2
9001b544:	930f      	str	r3, [sp, #60]	; 0x3c
9001b546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b548:	2b00      	cmp	r3, #0
9001b54a:	f040 8116 	bne.w	9001b77a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
9001b54e:	4b8e      	ldr	r3, [pc, #568]	; (9001b788 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
9001b550:	6818      	ldr	r0, [r3, #0]
9001b552:	6803      	ldr	r3, [r0, #0]
9001b554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001b556:	4798      	blx	r3
9001b558:	2301      	movs	r3, #1
9001b55a:	4a8c      	ldr	r2, [pc, #560]	; (9001b78c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
9001b55c:	fa03 f308 	lsl.w	r3, r3, r8
9001b560:	8811      	ldrh	r1, [r2, #0]
9001b562:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
9001b566:	3b01      	subs	r3, #1
9001b568:	b2db      	uxtb	r3, r3
9001b56a:	930e      	str	r3, [sp, #56]	; 0x38
9001b56c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
9001b570:	fb01 2303 	mla	r3, r1, r3, r2
9001b574:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001b578:	930a      	str	r3, [sp, #40]	; 0x28
9001b57a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b57c:	f3c3 4307 	ubfx	r3, r3, #16, #8
9001b580:	9313      	str	r3, [sp, #76]	; 0x4c
9001b582:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b584:	0a19      	lsrs	r1, r3, #8
9001b586:	b2cb      	uxtb	r3, r1
9001b588:	9312      	str	r3, [sp, #72]	; 0x48
9001b58a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b58c:	b2db      	uxtb	r3, r3
9001b58e:	9311      	str	r3, [sp, #68]	; 0x44
9001b590:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001b592:	095a      	lsrs	r2, r3, #5
9001b594:	4b7e      	ldr	r3, [pc, #504]	; (9001b790 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
9001b596:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001b59a:	400b      	ands	r3, r1
9001b59c:	4313      	orrs	r3, r2
9001b59e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001b5a0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001b5a4:	4313      	orrs	r3, r2
9001b5a6:	b29b      	uxth	r3, r3
9001b5a8:	9310      	str	r3, [sp, #64]	; 0x40
9001b5aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001b5ac:	781a      	ldrb	r2, [r3, #0]
9001b5ae:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001b5b2:	fb05 b919 	mls	r9, r5, r9, fp
9001b5b6:	4132      	asrs	r2, r6
9001b5b8:	fb03 fb05 	mul.w	fp, r3, r5
9001b5bc:	930d      	str	r3, [sp, #52]	; 0x34
9001b5be:	b2d2      	uxtb	r2, r2
9001b5c0:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
9001b5c4:	f11a 3aff 	adds.w	sl, sl, #4294967295
9001b5c8:	f0c0 80f5 	bcc.w	9001b7b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
9001b5cc:	46ae      	mov	lr, r5
9001b5ce:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
9001b5d2:	f11e 3eff 	adds.w	lr, lr, #4294967295
9001b5d6:	f0c0 80dd 	bcc.w	9001b794 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
9001b5da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001b5dc:	4013      	ands	r3, r2
9001b5de:	d055      	beq.n	9001b68c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
9001b5e0:	20ff      	movs	r0, #255	; 0xff
9001b5e2:	990e      	ldr	r1, [sp, #56]	; 0x38
9001b5e4:	fb90 f1f1 	sdiv	r1, r0, r1
9001b5e8:	434b      	muls	r3, r1
9001b5ea:	2bfe      	cmp	r3, #254	; 0xfe
9001b5ec:	dd03      	ble.n	9001b5f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
9001b5ee:	990c      	ldr	r1, [sp, #48]	; 0x30
9001b5f0:	4281      	cmp	r1, r0
9001b5f2:	f000 80c4 	beq.w	9001b77e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
9001b5f6:	990c      	ldr	r1, [sp, #48]	; 0x30
9001b5f8:	f8bc 4000 	ldrh.w	r4, [ip]
9001b5fc:	fb11 f303 	smulbb	r3, r1, r3
9001b600:	1220      	asrs	r0, r4, #8
9001b602:	b29b      	uxth	r3, r3
9001b604:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001b608:	1c59      	adds	r1, r3, #1
9001b60a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
9001b60e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001b612:	10e1      	asrs	r1, r4, #3
9001b614:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001b618:	00e4      	lsls	r4, r4, #3
9001b61a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001b61e:	b29f      	uxth	r7, r3
9001b620:	43db      	mvns	r3, r3
9001b622:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
9001b626:	b2db      	uxtb	r3, r3
9001b628:	b2e4      	uxtb	r4, r4
9001b62a:	9309      	str	r3, [sp, #36]	; 0x24
9001b62c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001b62e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001b632:	fb13 f907 	smulbb	r9, r3, r7
9001b636:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b638:	fb00 9003 	mla	r0, r0, r3, r9
9001b63c:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001b63e:	fb13 f907 	smulbb	r9, r3, r7
9001b642:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b644:	b280      	uxth	r0, r0
9001b646:	fb01 9103 	mla	r1, r1, r3, r9
9001b64a:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001b64c:	fb13 f707 	smulbb	r7, r3, r7
9001b650:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b652:	b289      	uxth	r1, r1
9001b654:	fb04 7403 	mla	r4, r4, r3, r7
9001b658:	1c43      	adds	r3, r0, #1
9001b65a:	b2a4      	uxth	r4, r4
9001b65c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001b660:	f104 0901 	add.w	r9, r4, #1
9001b664:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001b668:	eb09 2914 	add.w	r9, r9, r4, lsr #8
9001b66c:	f3c9 29c4 	ubfx	r9, r9, #11, #5
9001b670:	ea49 0000 	orr.w	r0, r9, r0
9001b674:	f101 0901 	add.w	r9, r1, #1
9001b678:	eb09 2911 	add.w	r9, r9, r1, lsr #8
9001b67c:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001b680:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001b684:	ea40 0009 	orr.w	r0, r0, r9
9001b688:	f8ac 0000 	strh.w	r0, [ip]
9001b68c:	4446      	add	r6, r8
9001b68e:	b2b6      	uxth	r6, r6
9001b690:	2e07      	cmp	r6, #7
9001b692:	bf89      	itett	hi
9001b694:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
9001b696:	fa42 f208 	asrls.w	r2, r2, r8
9001b69a:	2600      	movhi	r6, #0
9001b69c:	785a      	ldrbhi	r2, [r3, #1]
9001b69e:	bf8a      	itet	hi
9001b6a0:	3301      	addhi	r3, #1
9001b6a2:	b2d2      	uxtbls	r2, r2
9001b6a4:	9328      	strhi	r3, [sp, #160]	; 0xa0
9001b6a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b6a8:	449c      	add	ip, r3
9001b6aa:	e792      	b.n	9001b5d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
9001b6ac:	441c      	add	r4, r3
9001b6ae:	b224      	sxth	r4, r4
9001b6b0:	e6d5      	b.n	9001b45e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001b6b2:	f1ba 0f01 	cmp.w	sl, #1
9001b6b6:	f47f af0c 	bne.w	9001b4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b6ba:	f1bb 0f01 	cmp.w	fp, #1
9001b6be:	f47f af08 	bne.w	9001b4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b6c2:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9001b788 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
9001b6c6:	f8db 0000 	ldr.w	r0, [fp]
9001b6ca:	6803      	ldr	r3, [r0, #0]
9001b6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001b6ce:	4798      	blx	r3
9001b6d0:	f410 7380 	ands.w	r3, r0, #256	; 0x100
9001b6d4:	465a      	mov	r2, fp
9001b6d6:	d006      	beq.n	9001b6e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001b6d8:	f1b8 0f04 	cmp.w	r8, #4
9001b6dc:	d140      	bne.n	9001b760 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
9001b6de:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b6e0:	3300      	adds	r3, #0
9001b6e2:	bf18      	it	ne
9001b6e4:	2301      	movne	r3, #1
9001b6e6:	0580      	lsls	r0, r0, #22
9001b6e8:	d56e      	bpl.n	9001b7c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001b6ea:	f1b8 0f08 	cmp.w	r8, #8
9001b6ee:	d16b      	bne.n	9001b7c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001b6f0:	2b00      	cmp	r3, #0
9001b6f2:	bf0c      	ite	eq
9001b6f4:	f44f 7100 	moveq.w	r1, #512	; 0x200
9001b6f8:	f44f 7180 	movne.w	r1, #256	; 0x100
9001b6fc:	2d00      	cmp	r5, #0
9001b6fe:	f47f aee8 	bne.w	9001b4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b702:	2e00      	cmp	r6, #0
9001b704:	f47f aee5 	bne.w	9001b4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b708:	19e3      	adds	r3, r4, r7
9001b70a:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001b70c:	4283      	cmp	r3, r0
9001b70e:	f73f aee0 	bgt.w	9001b4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b712:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b714:	980d      	ldr	r0, [sp, #52]	; 0x34
9001b716:	444b      	add	r3, r9
9001b718:	4283      	cmp	r3, r0
9001b71a:	f73f aeda 	bgt.w	9001b4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b71e:	b2bf      	uxth	r7, r7
9001b720:	f1b8 0f08 	cmp.w	r8, #8
9001b724:	6810      	ldr	r0, [r2, #0]
9001b726:	f04f 0500 	mov.w	r5, #0
9001b72a:	bf18      	it	ne
9001b72c:	3701      	addne	r7, #1
9001b72e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
9001b732:	6804      	ldr	r4, [r0, #0]
9001b734:	bf18      	it	ne
9001b736:	f027 0701 	bicne.w	r7, r7, #1
9001b73a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
9001b73e:	e9cd 1505 	strd	r1, r5, [sp, #20]
9001b742:	990c      	ldr	r1, [sp, #48]	; 0x30
9001b744:	bf18      	it	ne
9001b746:	b2bf      	uxthne	r7, r7
9001b748:	9104      	str	r1, [sp, #16]
9001b74a:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001b74c:	e9cd 7900 	strd	r7, r9, [sp]
9001b750:	e9cd 7102 	strd	r7, r1, [sp, #8]
9001b754:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001b756:	6d64      	ldr	r4, [r4, #84]	; 0x54
9001b758:	47a0      	blx	r4
9001b75a:	b019      	add	sp, #100	; 0x64
9001b75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b760:	2300      	movs	r3, #0
9001b762:	e7c0      	b.n	9001b6e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001b764:	2208      	movs	r2, #8
9001b766:	fb92 f3f8 	sdiv	r3, r2, r8
9001b76a:	1e5a      	subs	r2, r3, #1
9001b76c:	443a      	add	r2, r7
9001b76e:	fb92 f2f3 	sdiv	r2, r2, r3
9001b772:	fb12 f203 	smulbb	r2, r2, r3
9001b776:	b292      	uxth	r2, r2
9001b778:	e6b0      	b.n	9001b4dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
9001b77a:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001b77c:	e6ec      	b.n	9001b558 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
9001b77e:	9810      	ldr	r0, [sp, #64]	; 0x40
9001b780:	e782      	b.n	9001b688 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
9001b782:	bf00      	nop
9001b784:	24026264 	.word	0x24026264
9001b788:	2402626c 	.word	0x2402626c
9001b78c:	24026266 	.word	0x24026266
9001b790:	00fff800 	.word	0x00fff800
9001b794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001b796:	b153      	cbz	r3, 9001b7ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
9001b798:	441e      	add	r6, r3
9001b79a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001b79c:	b2b6      	uxth	r6, r6
9001b79e:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
9001b7a2:	f006 0607 	and.w	r6, r6, #7
9001b7a6:	781a      	ldrb	r2, [r3, #0]
9001b7a8:	9328      	str	r3, [sp, #160]	; 0xa0
9001b7aa:	4132      	asrs	r2, r6
9001b7ac:	b2d2      	uxtb	r2, r2
9001b7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b7b0:	445b      	add	r3, fp
9001b7b2:	930a      	str	r3, [sp, #40]	; 0x28
9001b7b4:	e706      	b.n	9001b5c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
9001b7b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b7b8:	2b00      	cmp	r3, #0
9001b7ba:	d1ce      	bne.n	9001b75a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b7bc:	4b05      	ldr	r3, [pc, #20]	; (9001b7d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
9001b7be:	6818      	ldr	r0, [r3, #0]
9001b7c0:	6803      	ldr	r3, [r0, #0]
9001b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b7c4:	4798      	blx	r3
9001b7c6:	e7c8      	b.n	9001b75a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001b7c8:	2b00      	cmp	r3, #0
9001b7ca:	f43f ae82 	beq.w	9001b4d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001b7ce:	f44f 7180 	mov.w	r1, #256	; 0x100
9001b7d2:	e793      	b.n	9001b6fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
9001b7d4:	2402626c 	.word	0x2402626c

9001b7d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
9001b7d8:	b538      	push	{r3, r4, r5, lr}
9001b7da:	4c15      	ldr	r4, [pc, #84]	; (9001b830 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
9001b7dc:	4605      	mov	r5, r0
9001b7de:	7823      	ldrb	r3, [r4, #0]
9001b7e0:	f3bf 8f5b 	dmb	ish
9001b7e4:	07da      	lsls	r2, r3, #31
9001b7e6:	d40b      	bmi.n	9001b800 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001b7e8:	4620      	mov	r0, r4
9001b7ea:	f007 fa68 	bl	90022cbe <__cxa_guard_acquire>
9001b7ee:	b138      	cbz	r0, 9001b800 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001b7f0:	4620      	mov	r0, r4
9001b7f2:	f007 fa70 	bl	90022cd6 <__cxa_guard_release>
9001b7f6:	4a0f      	ldr	r2, [pc, #60]	; (9001b834 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001b7f8:	490f      	ldr	r1, [pc, #60]	; (9001b838 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
9001b7fa:	4810      	ldr	r0, [pc, #64]	; (9001b83c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001b7fc:	f007 fa58 	bl	90022cb0 <__aeabi_atexit>
9001b800:	4c0f      	ldr	r4, [pc, #60]	; (9001b840 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9001b802:	7823      	ldrb	r3, [r4, #0]
9001b804:	f3bf 8f5b 	dmb	ish
9001b808:	07db      	lsls	r3, r3, #31
9001b80a:	d40b      	bmi.n	9001b824 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001b80c:	4620      	mov	r0, r4
9001b80e:	f007 fa56 	bl	90022cbe <__cxa_guard_acquire>
9001b812:	b138      	cbz	r0, 9001b824 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001b814:	4620      	mov	r0, r4
9001b816:	f007 fa5e 	bl	90022cd6 <__cxa_guard_release>
9001b81a:	4a06      	ldr	r2, [pc, #24]	; (9001b834 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001b81c:	4909      	ldr	r1, [pc, #36]	; (9001b844 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9001b81e:	480a      	ldr	r0, [pc, #40]	; (9001b848 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001b820:	f007 fa46 	bl	90022cb0 <__aeabi_atexit>
9001b824:	4b05      	ldr	r3, [pc, #20]	; (9001b83c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001b826:	612b      	str	r3, [r5, #16]
9001b828:	4b07      	ldr	r3, [pc, #28]	; (9001b848 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001b82a:	616b      	str	r3, [r5, #20]
9001b82c:	bd38      	pop	{r3, r4, r5, pc}
9001b82e:	bf00      	nop
9001b830:	24026338 	.word	0x24026338
9001b834:	24000000 	.word	0x24000000
9001b838:	900199e5 	.word	0x900199e5
9001b83c:	240000ac 	.word	0x240000ac
9001b840:	2402633c 	.word	0x2402633c
9001b844:	900199e3 	.word	0x900199e3
9001b848:	240000b0 	.word	0x240000b0

9001b84c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
9001b84c:	b538      	push	{r3, r4, r5, lr}
9001b84e:	4c15      	ldr	r4, [pc, #84]	; (9001b8a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9001b850:	4605      	mov	r5, r0
9001b852:	7823      	ldrb	r3, [r4, #0]
9001b854:	f3bf 8f5b 	dmb	ish
9001b858:	07da      	lsls	r2, r3, #31
9001b85a:	d40b      	bmi.n	9001b874 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001b85c:	4620      	mov	r0, r4
9001b85e:	f007 fa2e 	bl	90022cbe <__cxa_guard_acquire>
9001b862:	b138      	cbz	r0, 9001b874 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001b864:	4620      	mov	r0, r4
9001b866:	f007 fa36 	bl	90022cd6 <__cxa_guard_release>
9001b86a:	4a0f      	ldr	r2, [pc, #60]	; (9001b8a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001b86c:	490f      	ldr	r1, [pc, #60]	; (9001b8ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
9001b86e:	4810      	ldr	r0, [pc, #64]	; (9001b8b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001b870:	f007 fa1e 	bl	90022cb0 <__aeabi_atexit>
9001b874:	4c0f      	ldr	r4, [pc, #60]	; (9001b8b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
9001b876:	7823      	ldrb	r3, [r4, #0]
9001b878:	f3bf 8f5b 	dmb	ish
9001b87c:	07db      	lsls	r3, r3, #31
9001b87e:	d40b      	bmi.n	9001b898 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001b880:	4620      	mov	r0, r4
9001b882:	f007 fa1c 	bl	90022cbe <__cxa_guard_acquire>
9001b886:	b138      	cbz	r0, 9001b898 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001b888:	4620      	mov	r0, r4
9001b88a:	f007 fa24 	bl	90022cd6 <__cxa_guard_release>
9001b88e:	4a06      	ldr	r2, [pc, #24]	; (9001b8a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001b890:	4909      	ldr	r1, [pc, #36]	; (9001b8b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
9001b892:	480a      	ldr	r0, [pc, #40]	; (9001b8bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001b894:	f007 fa0c 	bl	90022cb0 <__aeabi_atexit>
9001b898:	4b05      	ldr	r3, [pc, #20]	; (9001b8b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001b89a:	60ab      	str	r3, [r5, #8]
9001b89c:	4b07      	ldr	r3, [pc, #28]	; (9001b8bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001b89e:	60eb      	str	r3, [r5, #12]
9001b8a0:	bd38      	pop	{r3, r4, r5, pc}
9001b8a2:	bf00      	nop
9001b8a4:	24026310 	.word	0x24026310
9001b8a8:	24000000 	.word	0x24000000
9001b8ac:	900199e9 	.word	0x900199e9
9001b8b0:	24000084 	.word	0x24000084
9001b8b4:	24026314 	.word	0x24026314
9001b8b8:	900199e7 	.word	0x900199e7
9001b8bc:	24000088 	.word	0x24000088

9001b8c0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
9001b8c0:	b510      	push	{r4, lr}
9001b8c2:	4604      	mov	r4, r0
9001b8c4:	f7ff ff88 	bl	9001b7d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
9001b8c8:	4620      	mov	r0, r4
9001b8ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001b8ce:	f7ff bfbd 	b.w	9001b84c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

9001b8d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
9001b8d4:	b538      	push	{r3, r4, r5, lr}
9001b8d6:	4c15      	ldr	r4, [pc, #84]	; (9001b92c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
9001b8d8:	4605      	mov	r5, r0
9001b8da:	7823      	ldrb	r3, [r4, #0]
9001b8dc:	f3bf 8f5b 	dmb	ish
9001b8e0:	07da      	lsls	r2, r3, #31
9001b8e2:	d40b      	bmi.n	9001b8fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001b8e4:	4620      	mov	r0, r4
9001b8e6:	f007 f9ea 	bl	90022cbe <__cxa_guard_acquire>
9001b8ea:	b138      	cbz	r0, 9001b8fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001b8ec:	4620      	mov	r0, r4
9001b8ee:	f007 f9f2 	bl	90022cd6 <__cxa_guard_release>
9001b8f2:	4a0f      	ldr	r2, [pc, #60]	; (9001b930 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001b8f4:	490f      	ldr	r1, [pc, #60]	; (9001b934 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
9001b8f6:	4810      	ldr	r0, [pc, #64]	; (9001b938 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001b8f8:	f007 f9da 	bl	90022cb0 <__aeabi_atexit>
9001b8fc:	4c0f      	ldr	r4, [pc, #60]	; (9001b93c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9001b8fe:	7823      	ldrb	r3, [r4, #0]
9001b900:	f3bf 8f5b 	dmb	ish
9001b904:	07db      	lsls	r3, r3, #31
9001b906:	d40b      	bmi.n	9001b920 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001b908:	4620      	mov	r0, r4
9001b90a:	f007 f9d8 	bl	90022cbe <__cxa_guard_acquire>
9001b90e:	b138      	cbz	r0, 9001b920 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001b910:	4620      	mov	r0, r4
9001b912:	f007 f9e0 	bl	90022cd6 <__cxa_guard_release>
9001b916:	4a06      	ldr	r2, [pc, #24]	; (9001b930 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001b918:	4909      	ldr	r1, [pc, #36]	; (9001b940 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
9001b91a:	480a      	ldr	r0, [pc, #40]	; (9001b944 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001b91c:	f007 f9c8 	bl	90022cb0 <__aeabi_atexit>
9001b920:	4b05      	ldr	r3, [pc, #20]	; (9001b938 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001b922:	622b      	str	r3, [r5, #32]
9001b924:	4b07      	ldr	r3, [pc, #28]	; (9001b944 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001b926:	626b      	str	r3, [r5, #36]	; 0x24
9001b928:	bd38      	pop	{r3, r4, r5, pc}
9001b92a:	bf00      	nop
9001b92c:	24026340 	.word	0x24026340
9001b930:	24000000 	.word	0x24000000
9001b934:	900199dd 	.word	0x900199dd
9001b938:	240000b4 	.word	0x240000b4
9001b93c:	24026344 	.word	0x24026344
9001b940:	900199db 	.word	0x900199db
9001b944:	240000b8 	.word	0x240000b8

9001b948 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
9001b948:	b538      	push	{r3, r4, r5, lr}
9001b94a:	4c15      	ldr	r4, [pc, #84]	; (9001b9a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
9001b94c:	4605      	mov	r5, r0
9001b94e:	7823      	ldrb	r3, [r4, #0]
9001b950:	f3bf 8f5b 	dmb	ish
9001b954:	07da      	lsls	r2, r3, #31
9001b956:	d40b      	bmi.n	9001b970 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001b958:	4620      	mov	r0, r4
9001b95a:	f007 f9b0 	bl	90022cbe <__cxa_guard_acquire>
9001b95e:	b138      	cbz	r0, 9001b970 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001b960:	4620      	mov	r0, r4
9001b962:	f007 f9b8 	bl	90022cd6 <__cxa_guard_release>
9001b966:	4a0f      	ldr	r2, [pc, #60]	; (9001b9a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001b968:	490f      	ldr	r1, [pc, #60]	; (9001b9a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
9001b96a:	4810      	ldr	r0, [pc, #64]	; (9001b9ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001b96c:	f007 f9a0 	bl	90022cb0 <__aeabi_atexit>
9001b970:	4c0f      	ldr	r4, [pc, #60]	; (9001b9b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
9001b972:	7823      	ldrb	r3, [r4, #0]
9001b974:	f3bf 8f5b 	dmb	ish
9001b978:	07db      	lsls	r3, r3, #31
9001b97a:	d40b      	bmi.n	9001b994 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001b97c:	4620      	mov	r0, r4
9001b97e:	f007 f99e 	bl	90022cbe <__cxa_guard_acquire>
9001b982:	b138      	cbz	r0, 9001b994 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001b984:	4620      	mov	r0, r4
9001b986:	f007 f9a6 	bl	90022cd6 <__cxa_guard_release>
9001b98a:	4a06      	ldr	r2, [pc, #24]	; (9001b9a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001b98c:	4909      	ldr	r1, [pc, #36]	; (9001b9b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
9001b98e:	480a      	ldr	r0, [pc, #40]	; (9001b9b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001b990:	f007 f98e 	bl	90022cb0 <__aeabi_atexit>
9001b994:	4b05      	ldr	r3, [pc, #20]	; (9001b9ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001b996:	61ab      	str	r3, [r5, #24]
9001b998:	4b07      	ldr	r3, [pc, #28]	; (9001b9b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001b99a:	61eb      	str	r3, [r5, #28]
9001b99c:	bd38      	pop	{r3, r4, r5, pc}
9001b99e:	bf00      	nop
9001b9a0:	24026318 	.word	0x24026318
9001b9a4:	24000000 	.word	0x24000000
9001b9a8:	900199e1 	.word	0x900199e1
9001b9ac:	2400008c 	.word	0x2400008c
9001b9b0:	2402631c 	.word	0x2402631c
9001b9b4:	900199df 	.word	0x900199df
9001b9b8:	24000090 	.word	0x24000090

9001b9bc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
9001b9bc:	b510      	push	{r4, lr}
9001b9be:	4604      	mov	r4, r0
9001b9c0:	f7ff ff88 	bl	9001b8d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
9001b9c4:	4620      	mov	r0, r4
9001b9c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001b9ca:	f7ff bfbd 	b.w	9001b948 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9001b9d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9001b9d0:	b538      	push	{r3, r4, r5, lr}
9001b9d2:	4c15      	ldr	r4, [pc, #84]	; (9001ba28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
9001b9d4:	4605      	mov	r5, r0
9001b9d6:	7823      	ldrb	r3, [r4, #0]
9001b9d8:	f3bf 8f5b 	dmb	ish
9001b9dc:	07da      	lsls	r2, r3, #31
9001b9de:	d40b      	bmi.n	9001b9f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001b9e0:	4620      	mov	r0, r4
9001b9e2:	f007 f96c 	bl	90022cbe <__cxa_guard_acquire>
9001b9e6:	b138      	cbz	r0, 9001b9f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001b9e8:	4620      	mov	r0, r4
9001b9ea:	f007 f974 	bl	90022cd6 <__cxa_guard_release>
9001b9ee:	4a0f      	ldr	r2, [pc, #60]	; (9001ba2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001b9f0:	490f      	ldr	r1, [pc, #60]	; (9001ba30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9001b9f2:	4810      	ldr	r0, [pc, #64]	; (9001ba34 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001b9f4:	f007 f95c 	bl	90022cb0 <__aeabi_atexit>
9001b9f8:	4c0f      	ldr	r4, [pc, #60]	; (9001ba38 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
9001b9fa:	7823      	ldrb	r3, [r4, #0]
9001b9fc:	f3bf 8f5b 	dmb	ish
9001ba00:	07db      	lsls	r3, r3, #31
9001ba02:	d40b      	bmi.n	9001ba1c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001ba04:	4620      	mov	r0, r4
9001ba06:	f007 f95a 	bl	90022cbe <__cxa_guard_acquire>
9001ba0a:	b138      	cbz	r0, 9001ba1c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001ba0c:	4620      	mov	r0, r4
9001ba0e:	f007 f962 	bl	90022cd6 <__cxa_guard_release>
9001ba12:	4a06      	ldr	r2, [pc, #24]	; (9001ba2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001ba14:	4909      	ldr	r1, [pc, #36]	; (9001ba3c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
9001ba16:	480a      	ldr	r0, [pc, #40]	; (9001ba40 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001ba18:	f007 f94a 	bl	90022cb0 <__aeabi_atexit>
9001ba1c:	4b05      	ldr	r3, [pc, #20]	; (9001ba34 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001ba1e:	632b      	str	r3, [r5, #48]	; 0x30
9001ba20:	4b07      	ldr	r3, [pc, #28]	; (9001ba40 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001ba22:	636b      	str	r3, [r5, #52]	; 0x34
9001ba24:	bd38      	pop	{r3, r4, r5, pc}
9001ba26:	bf00      	nop
9001ba28:	24026350 	.word	0x24026350
9001ba2c:	24000000 	.word	0x24000000
9001ba30:	900199d5 	.word	0x900199d5
9001ba34:	240000c4 	.word	0x240000c4
9001ba38:	24026354 	.word	0x24026354
9001ba3c:	900199d3 	.word	0x900199d3
9001ba40:	240000c8 	.word	0x240000c8

9001ba44 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
9001ba44:	b538      	push	{r3, r4, r5, lr}
9001ba46:	4c15      	ldr	r4, [pc, #84]	; (9001ba9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
9001ba48:	4605      	mov	r5, r0
9001ba4a:	7823      	ldrb	r3, [r4, #0]
9001ba4c:	f3bf 8f5b 	dmb	ish
9001ba50:	07da      	lsls	r2, r3, #31
9001ba52:	d40b      	bmi.n	9001ba6c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001ba54:	4620      	mov	r0, r4
9001ba56:	f007 f932 	bl	90022cbe <__cxa_guard_acquire>
9001ba5a:	b138      	cbz	r0, 9001ba6c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001ba5c:	4620      	mov	r0, r4
9001ba5e:	f007 f93a 	bl	90022cd6 <__cxa_guard_release>
9001ba62:	4a0f      	ldr	r2, [pc, #60]	; (9001baa0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001ba64:	490f      	ldr	r1, [pc, #60]	; (9001baa4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
9001ba66:	4810      	ldr	r0, [pc, #64]	; (9001baa8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001ba68:	f007 f922 	bl	90022cb0 <__aeabi_atexit>
9001ba6c:	4c0f      	ldr	r4, [pc, #60]	; (9001baac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
9001ba6e:	7823      	ldrb	r3, [r4, #0]
9001ba70:	f3bf 8f5b 	dmb	ish
9001ba74:	07db      	lsls	r3, r3, #31
9001ba76:	d40b      	bmi.n	9001ba90 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001ba78:	4620      	mov	r0, r4
9001ba7a:	f007 f920 	bl	90022cbe <__cxa_guard_acquire>
9001ba7e:	b138      	cbz	r0, 9001ba90 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001ba80:	4620      	mov	r0, r4
9001ba82:	f007 f928 	bl	90022cd6 <__cxa_guard_release>
9001ba86:	4a06      	ldr	r2, [pc, #24]	; (9001baa0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001ba88:	4909      	ldr	r1, [pc, #36]	; (9001bab0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
9001ba8a:	480a      	ldr	r0, [pc, #40]	; (9001bab4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001ba8c:	f007 f910 	bl	90022cb0 <__aeabi_atexit>
9001ba90:	4b05      	ldr	r3, [pc, #20]	; (9001baa8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001ba92:	62ab      	str	r3, [r5, #40]	; 0x28
9001ba94:	4b07      	ldr	r3, [pc, #28]	; (9001bab4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001ba96:	62eb      	str	r3, [r5, #44]	; 0x2c
9001ba98:	bd38      	pop	{r3, r4, r5, pc}
9001ba9a:	bf00      	nop
9001ba9c:	24026320 	.word	0x24026320
9001baa0:	24000000 	.word	0x24000000
9001baa4:	900199d9 	.word	0x900199d9
9001baa8:	24000094 	.word	0x24000094
9001baac:	24026324 	.word	0x24026324
9001bab0:	900199d7 	.word	0x900199d7
9001bab4:	24000098 	.word	0x24000098

9001bab8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
9001bab8:	b510      	push	{r4, lr}
9001baba:	4604      	mov	r4, r0
9001babc:	f7ff ff88 	bl	9001b9d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
9001bac0:	4620      	mov	r0, r4
9001bac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bac6:	f7ff bfbd 	b.w	9001ba44 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

9001bacc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
9001bacc:	b538      	push	{r3, r4, r5, lr}
9001bace:	4c15      	ldr	r4, [pc, #84]	; (9001bb24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
9001bad0:	4605      	mov	r5, r0
9001bad2:	7823      	ldrb	r3, [r4, #0]
9001bad4:	f3bf 8f5b 	dmb	ish
9001bad8:	07da      	lsls	r2, r3, #31
9001bada:	d40b      	bmi.n	9001baf4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001badc:	4620      	mov	r0, r4
9001bade:	f007 f8ee 	bl	90022cbe <__cxa_guard_acquire>
9001bae2:	b138      	cbz	r0, 9001baf4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001bae4:	4620      	mov	r0, r4
9001bae6:	f007 f8f6 	bl	90022cd6 <__cxa_guard_release>
9001baea:	4a0f      	ldr	r2, [pc, #60]	; (9001bb28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001baec:	490f      	ldr	r1, [pc, #60]	; (9001bb2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
9001baee:	4810      	ldr	r0, [pc, #64]	; (9001bb30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001baf0:	f007 f8de 	bl	90022cb0 <__aeabi_atexit>
9001baf4:	4c0f      	ldr	r4, [pc, #60]	; (9001bb34 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
9001baf6:	7823      	ldrb	r3, [r4, #0]
9001baf8:	f3bf 8f5b 	dmb	ish
9001bafc:	07db      	lsls	r3, r3, #31
9001bafe:	d40b      	bmi.n	9001bb18 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001bb00:	4620      	mov	r0, r4
9001bb02:	f007 f8dc 	bl	90022cbe <__cxa_guard_acquire>
9001bb06:	b138      	cbz	r0, 9001bb18 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001bb08:	4620      	mov	r0, r4
9001bb0a:	f007 f8e4 	bl	90022cd6 <__cxa_guard_release>
9001bb0e:	4a06      	ldr	r2, [pc, #24]	; (9001bb28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001bb10:	4909      	ldr	r1, [pc, #36]	; (9001bb38 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001bb12:	480a      	ldr	r0, [pc, #40]	; (9001bb3c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001bb14:	f007 f8cc 	bl	90022cb0 <__aeabi_atexit>
9001bb18:	4b05      	ldr	r3, [pc, #20]	; (9001bb30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001bb1a:	652b      	str	r3, [r5, #80]	; 0x50
9001bb1c:	4b07      	ldr	r3, [pc, #28]	; (9001bb3c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001bb1e:	656b      	str	r3, [r5, #84]	; 0x54
9001bb20:	bd38      	pop	{r3, r4, r5, pc}
9001bb22:	bf00      	nop
9001bb24:	24026358 	.word	0x24026358
9001bb28:	24000000 	.word	0x24000000
9001bb2c:	900199c5 	.word	0x900199c5
9001bb30:	240000cc 	.word	0x240000cc
9001bb34:	2402635c 	.word	0x2402635c
9001bb38:	900199c3 	.word	0x900199c3
9001bb3c:	240000d0 	.word	0x240000d0

9001bb40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001bb40:	b538      	push	{r3, r4, r5, lr}
9001bb42:	4c15      	ldr	r4, [pc, #84]	; (9001bb98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001bb44:	4605      	mov	r5, r0
9001bb46:	7823      	ldrb	r3, [r4, #0]
9001bb48:	f3bf 8f5b 	dmb	ish
9001bb4c:	07da      	lsls	r2, r3, #31
9001bb4e:	d40b      	bmi.n	9001bb68 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001bb50:	4620      	mov	r0, r4
9001bb52:	f007 f8b4 	bl	90022cbe <__cxa_guard_acquire>
9001bb56:	b138      	cbz	r0, 9001bb68 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001bb58:	4620      	mov	r0, r4
9001bb5a:	f007 f8bc 	bl	90022cd6 <__cxa_guard_release>
9001bb5e:	4a0f      	ldr	r2, [pc, #60]	; (9001bb9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001bb60:	490f      	ldr	r1, [pc, #60]	; (9001bba0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001bb62:	4810      	ldr	r0, [pc, #64]	; (9001bba4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001bb64:	f007 f8a4 	bl	90022cb0 <__aeabi_atexit>
9001bb68:	4c0f      	ldr	r4, [pc, #60]	; (9001bba8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001bb6a:	7823      	ldrb	r3, [r4, #0]
9001bb6c:	f3bf 8f5b 	dmb	ish
9001bb70:	07db      	lsls	r3, r3, #31
9001bb72:	d40b      	bmi.n	9001bb8c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001bb74:	4620      	mov	r0, r4
9001bb76:	f007 f8a2 	bl	90022cbe <__cxa_guard_acquire>
9001bb7a:	b138      	cbz	r0, 9001bb8c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001bb7c:	4620      	mov	r0, r4
9001bb7e:	f007 f8aa 	bl	90022cd6 <__cxa_guard_release>
9001bb82:	4a06      	ldr	r2, [pc, #24]	; (9001bb9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001bb84:	4909      	ldr	r1, [pc, #36]	; (9001bbac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001bb86:	480a      	ldr	r0, [pc, #40]	; (9001bbb0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001bb88:	f007 f892 	bl	90022cb0 <__aeabi_atexit>
9001bb8c:	4b05      	ldr	r3, [pc, #20]	; (9001bba4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001bb8e:	64ab      	str	r3, [r5, #72]	; 0x48
9001bb90:	4b07      	ldr	r3, [pc, #28]	; (9001bbb0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001bb92:	64eb      	str	r3, [r5, #76]	; 0x4c
9001bb94:	bd38      	pop	{r3, r4, r5, pc}
9001bb96:	bf00      	nop
9001bb98:	24026360 	.word	0x24026360
9001bb9c:	24000000 	.word	0x24000000
9001bba0:	900199c9 	.word	0x900199c9
9001bba4:	240000d4 	.word	0x240000d4
9001bba8:	24026364 	.word	0x24026364
9001bbac:	900199c7 	.word	0x900199c7
9001bbb0:	240000d8 	.word	0x240000d8

9001bbb4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001bbb4:	b538      	push	{r3, r4, r5, lr}
9001bbb6:	4c15      	ldr	r4, [pc, #84]	; (9001bc0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001bbb8:	4605      	mov	r5, r0
9001bbba:	7823      	ldrb	r3, [r4, #0]
9001bbbc:	f3bf 8f5b 	dmb	ish
9001bbc0:	07da      	lsls	r2, r3, #31
9001bbc2:	d40b      	bmi.n	9001bbdc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001bbc4:	4620      	mov	r0, r4
9001bbc6:	f007 f87a 	bl	90022cbe <__cxa_guard_acquire>
9001bbca:	b138      	cbz	r0, 9001bbdc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001bbcc:	4620      	mov	r0, r4
9001bbce:	f007 f882 	bl	90022cd6 <__cxa_guard_release>
9001bbd2:	4a0f      	ldr	r2, [pc, #60]	; (9001bc10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001bbd4:	490f      	ldr	r1, [pc, #60]	; (9001bc14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001bbd6:	4810      	ldr	r0, [pc, #64]	; (9001bc18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001bbd8:	f007 f86a 	bl	90022cb0 <__aeabi_atexit>
9001bbdc:	4c0f      	ldr	r4, [pc, #60]	; (9001bc1c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001bbde:	7823      	ldrb	r3, [r4, #0]
9001bbe0:	f3bf 8f5b 	dmb	ish
9001bbe4:	07db      	lsls	r3, r3, #31
9001bbe6:	d40b      	bmi.n	9001bc00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001bbe8:	4620      	mov	r0, r4
9001bbea:	f007 f868 	bl	90022cbe <__cxa_guard_acquire>
9001bbee:	b138      	cbz	r0, 9001bc00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001bbf0:	4620      	mov	r0, r4
9001bbf2:	f007 f870 	bl	90022cd6 <__cxa_guard_release>
9001bbf6:	4a06      	ldr	r2, [pc, #24]	; (9001bc10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001bbf8:	4909      	ldr	r1, [pc, #36]	; (9001bc20 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001bbfa:	480a      	ldr	r0, [pc, #40]	; (9001bc24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001bbfc:	f007 f858 	bl	90022cb0 <__aeabi_atexit>
9001bc00:	4b05      	ldr	r3, [pc, #20]	; (9001bc18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001bc02:	642b      	str	r3, [r5, #64]	; 0x40
9001bc04:	4b07      	ldr	r3, [pc, #28]	; (9001bc24 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001bc06:	646b      	str	r3, [r5, #68]	; 0x44
9001bc08:	bd38      	pop	{r3, r4, r5, pc}
9001bc0a:	bf00      	nop
9001bc0c:	24026328 	.word	0x24026328
9001bc10:	24000000 	.word	0x24000000
9001bc14:	900199cd 	.word	0x900199cd
9001bc18:	2400009c 	.word	0x2400009c
9001bc1c:	2402632c 	.word	0x2402632c
9001bc20:	900199cb 	.word	0x900199cb
9001bc24:	240000a0 	.word	0x240000a0

9001bc28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001bc28:	b538      	push	{r3, r4, r5, lr}
9001bc2a:	4c15      	ldr	r4, [pc, #84]	; (9001bc80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001bc2c:	4605      	mov	r5, r0
9001bc2e:	7823      	ldrb	r3, [r4, #0]
9001bc30:	f3bf 8f5b 	dmb	ish
9001bc34:	07da      	lsls	r2, r3, #31
9001bc36:	d40b      	bmi.n	9001bc50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001bc38:	4620      	mov	r0, r4
9001bc3a:	f007 f840 	bl	90022cbe <__cxa_guard_acquire>
9001bc3e:	b138      	cbz	r0, 9001bc50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001bc40:	4620      	mov	r0, r4
9001bc42:	f007 f848 	bl	90022cd6 <__cxa_guard_release>
9001bc46:	4a0f      	ldr	r2, [pc, #60]	; (9001bc84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001bc48:	490f      	ldr	r1, [pc, #60]	; (9001bc88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001bc4a:	4810      	ldr	r0, [pc, #64]	; (9001bc8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001bc4c:	f007 f830 	bl	90022cb0 <__aeabi_atexit>
9001bc50:	4c0f      	ldr	r4, [pc, #60]	; (9001bc90 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001bc52:	7823      	ldrb	r3, [r4, #0]
9001bc54:	f3bf 8f5b 	dmb	ish
9001bc58:	07db      	lsls	r3, r3, #31
9001bc5a:	d40b      	bmi.n	9001bc74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001bc5c:	4620      	mov	r0, r4
9001bc5e:	f007 f82e 	bl	90022cbe <__cxa_guard_acquire>
9001bc62:	b138      	cbz	r0, 9001bc74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001bc64:	4620      	mov	r0, r4
9001bc66:	f007 f836 	bl	90022cd6 <__cxa_guard_release>
9001bc6a:	4a06      	ldr	r2, [pc, #24]	; (9001bc84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001bc6c:	4909      	ldr	r1, [pc, #36]	; (9001bc94 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
9001bc6e:	480a      	ldr	r0, [pc, #40]	; (9001bc98 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001bc70:	f007 f81e 	bl	90022cb0 <__aeabi_atexit>
9001bc74:	4b05      	ldr	r3, [pc, #20]	; (9001bc8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001bc76:	63ab      	str	r3, [r5, #56]	; 0x38
9001bc78:	4b07      	ldr	r3, [pc, #28]	; (9001bc98 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001bc7a:	63eb      	str	r3, [r5, #60]	; 0x3c
9001bc7c:	bd38      	pop	{r3, r4, r5, pc}
9001bc7e:	bf00      	nop
9001bc80:	24026348 	.word	0x24026348
9001bc84:	24000000 	.word	0x24000000
9001bc88:	900199d1 	.word	0x900199d1
9001bc8c:	240000bc 	.word	0x240000bc
9001bc90:	2402634c 	.word	0x2402634c
9001bc94:	900199cf 	.word	0x900199cf
9001bc98:	240000c0 	.word	0x240000c0

9001bc9c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
9001bc9c:	b510      	push	{r4, lr}
9001bc9e:	4604      	mov	r4, r0
9001bca0:	f7ff ff14 	bl	9001bacc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9001bca4:	4620      	mov	r0, r4
9001bca6:	f7ff ff85 	bl	9001bbb4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
9001bcaa:	4620      	mov	r0, r4
9001bcac:	f7ff ff48 	bl	9001bb40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
9001bcb0:	4620      	mov	r0, r4
9001bcb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bcb6:	f7ff bfb7 	b.w	9001bc28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

9001bcbc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
9001bcbc:	b538      	push	{r3, r4, r5, lr}
9001bcbe:	4c15      	ldr	r4, [pc, #84]	; (9001bd14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
9001bcc0:	4605      	mov	r5, r0
9001bcc2:	7823      	ldrb	r3, [r4, #0]
9001bcc4:	f3bf 8f5b 	dmb	ish
9001bcc8:	07da      	lsls	r2, r3, #31
9001bcca:	d40b      	bmi.n	9001bce4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001bccc:	4620      	mov	r0, r4
9001bcce:	f006 fff6 	bl	90022cbe <__cxa_guard_acquire>
9001bcd2:	b138      	cbz	r0, 9001bce4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001bcd4:	4620      	mov	r0, r4
9001bcd6:	f006 fffe 	bl	90022cd6 <__cxa_guard_release>
9001bcda:	4a0f      	ldr	r2, [pc, #60]	; (9001bd18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001bcdc:	490f      	ldr	r1, [pc, #60]	; (9001bd1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
9001bcde:	4810      	ldr	r0, [pc, #64]	; (9001bd20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001bce0:	f006 ffe6 	bl	90022cb0 <__aeabi_atexit>
9001bce4:	4c0f      	ldr	r4, [pc, #60]	; (9001bd24 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9001bce6:	7823      	ldrb	r3, [r4, #0]
9001bce8:	f3bf 8f5b 	dmb	ish
9001bcec:	07db      	lsls	r3, r3, #31
9001bcee:	d40b      	bmi.n	9001bd08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001bcf0:	4620      	mov	r0, r4
9001bcf2:	f006 ffe4 	bl	90022cbe <__cxa_guard_acquire>
9001bcf6:	b138      	cbz	r0, 9001bd08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001bcf8:	4620      	mov	r0, r4
9001bcfa:	f006 ffec 	bl	90022cd6 <__cxa_guard_release>
9001bcfe:	4a06      	ldr	r2, [pc, #24]	; (9001bd18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001bd00:	4909      	ldr	r1, [pc, #36]	; (9001bd28 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9001bd02:	480a      	ldr	r0, [pc, #40]	; (9001bd2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001bd04:	f006 ffd4 	bl	90022cb0 <__aeabi_atexit>
9001bd08:	4b05      	ldr	r3, [pc, #20]	; (9001bd20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001bd0a:	662b      	str	r3, [r5, #96]	; 0x60
9001bd0c:	4b07      	ldr	r3, [pc, #28]	; (9001bd2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001bd0e:	666b      	str	r3, [r5, #100]	; 0x64
9001bd10:	bd38      	pop	{r3, r4, r5, pc}
9001bd12:	bf00      	nop
9001bd14:	24026330 	.word	0x24026330
9001bd18:	24000000 	.word	0x24000000
9001bd1c:	900199bd 	.word	0x900199bd
9001bd20:	240000a4 	.word	0x240000a4
9001bd24:	24026334 	.word	0x24026334
9001bd28:	900199bb 	.word	0x900199bb
9001bd2c:	240000a8 	.word	0x240000a8

9001bd30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
9001bd30:	b538      	push	{r3, r4, r5, lr}
9001bd32:	4c15      	ldr	r4, [pc, #84]	; (9001bd88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
9001bd34:	4605      	mov	r5, r0
9001bd36:	7823      	ldrb	r3, [r4, #0]
9001bd38:	f3bf 8f5b 	dmb	ish
9001bd3c:	07da      	lsls	r2, r3, #31
9001bd3e:	d40b      	bmi.n	9001bd58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001bd40:	4620      	mov	r0, r4
9001bd42:	f006 ffbc 	bl	90022cbe <__cxa_guard_acquire>
9001bd46:	b138      	cbz	r0, 9001bd58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001bd48:	4620      	mov	r0, r4
9001bd4a:	f006 ffc4 	bl	90022cd6 <__cxa_guard_release>
9001bd4e:	4a0f      	ldr	r2, [pc, #60]	; (9001bd8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001bd50:	490f      	ldr	r1, [pc, #60]	; (9001bd90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
9001bd52:	4810      	ldr	r0, [pc, #64]	; (9001bd94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001bd54:	f006 ffac 	bl	90022cb0 <__aeabi_atexit>
9001bd58:	4c0f      	ldr	r4, [pc, #60]	; (9001bd98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
9001bd5a:	7823      	ldrb	r3, [r4, #0]
9001bd5c:	f3bf 8f5b 	dmb	ish
9001bd60:	07db      	lsls	r3, r3, #31
9001bd62:	d40b      	bmi.n	9001bd7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001bd64:	4620      	mov	r0, r4
9001bd66:	f006 ffaa 	bl	90022cbe <__cxa_guard_acquire>
9001bd6a:	b138      	cbz	r0, 9001bd7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001bd6c:	4620      	mov	r0, r4
9001bd6e:	f006 ffb2 	bl	90022cd6 <__cxa_guard_release>
9001bd72:	4a06      	ldr	r2, [pc, #24]	; (9001bd8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001bd74:	4909      	ldr	r1, [pc, #36]	; (9001bd9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9001bd76:	480a      	ldr	r0, [pc, #40]	; (9001bda0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001bd78:	f006 ff9a 	bl	90022cb0 <__aeabi_atexit>
9001bd7c:	4b05      	ldr	r3, [pc, #20]	; (9001bd94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001bd7e:	65ab      	str	r3, [r5, #88]	; 0x58
9001bd80:	4b07      	ldr	r3, [pc, #28]	; (9001bda0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001bd82:	65eb      	str	r3, [r5, #92]	; 0x5c
9001bd84:	bd38      	pop	{r3, r4, r5, pc}
9001bd86:	bf00      	nop
9001bd88:	24026308 	.word	0x24026308
9001bd8c:	24000000 	.word	0x24000000
9001bd90:	900199c1 	.word	0x900199c1
9001bd94:	2400007c 	.word	0x2400007c
9001bd98:	2402630c 	.word	0x2402630c
9001bd9c:	900199bf 	.word	0x900199bf
9001bda0:	24000080 	.word	0x24000080

9001bda4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9001bda4:	b510      	push	{r4, lr}
9001bda6:	4604      	mov	r4, r0
9001bda8:	f7ff ff88 	bl	9001bcbc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
9001bdac:	4620      	mov	r0, r4
9001bdae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bdb2:	f7ff bfbd 	b.w	9001bd30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

9001bdb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
9001bdb8:	b538      	push	{r3, r4, r5, lr}
9001bdba:	4c15      	ldr	r4, [pc, #84]	; (9001be10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
9001bdbc:	4605      	mov	r5, r0
9001bdbe:	7823      	ldrb	r3, [r4, #0]
9001bdc0:	f3bf 8f5b 	dmb	ish
9001bdc4:	07da      	lsls	r2, r3, #31
9001bdc6:	d40b      	bmi.n	9001bde0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001bdc8:	4620      	mov	r0, r4
9001bdca:	f006 ff78 	bl	90022cbe <__cxa_guard_acquire>
9001bdce:	b138      	cbz	r0, 9001bde0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001bdd0:	4620      	mov	r0, r4
9001bdd2:	f006 ff80 	bl	90022cd6 <__cxa_guard_release>
9001bdd6:	4a0f      	ldr	r2, [pc, #60]	; (9001be14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001bdd8:	490f      	ldr	r1, [pc, #60]	; (9001be18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
9001bdda:	4810      	ldr	r0, [pc, #64]	; (9001be1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001bddc:	f006 ff68 	bl	90022cb0 <__aeabi_atexit>
9001bde0:	4c0f      	ldr	r4, [pc, #60]	; (9001be20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
9001bde2:	7823      	ldrb	r3, [r4, #0]
9001bde4:	f3bf 8f5b 	dmb	ish
9001bde8:	07db      	lsls	r3, r3, #31
9001bdea:	d40b      	bmi.n	9001be04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001bdec:	4620      	mov	r0, r4
9001bdee:	f006 ff66 	bl	90022cbe <__cxa_guard_acquire>
9001bdf2:	b138      	cbz	r0, 9001be04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001bdf4:	4620      	mov	r0, r4
9001bdf6:	f006 ff6e 	bl	90022cd6 <__cxa_guard_release>
9001bdfa:	4a06      	ldr	r2, [pc, #24]	; (9001be14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001bdfc:	4909      	ldr	r1, [pc, #36]	; (9001be24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
9001bdfe:	480a      	ldr	r0, [pc, #40]	; (9001be28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001be00:	f006 ff56 	bl	90022cb0 <__aeabi_atexit>
9001be04:	4b05      	ldr	r3, [pc, #20]	; (9001be1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001be06:	672b      	str	r3, [r5, #112]	; 0x70
9001be08:	4b07      	ldr	r3, [pc, #28]	; (9001be28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001be0a:	676b      	str	r3, [r5, #116]	; 0x74
9001be0c:	bd38      	pop	{r3, r4, r5, pc}
9001be0e:	bf00      	nop
9001be10:	24026300 	.word	0x24026300
9001be14:	24000000 	.word	0x24000000
9001be18:	900199b5 	.word	0x900199b5
9001be1c:	24000074 	.word	0x24000074
9001be20:	24026304 	.word	0x24026304
9001be24:	900199b3 	.word	0x900199b3
9001be28:	24000078 	.word	0x24000078

9001be2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
9001be2c:	b538      	push	{r3, r4, r5, lr}
9001be2e:	4c15      	ldr	r4, [pc, #84]	; (9001be84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
9001be30:	4605      	mov	r5, r0
9001be32:	7823      	ldrb	r3, [r4, #0]
9001be34:	f3bf 8f5b 	dmb	ish
9001be38:	07da      	lsls	r2, r3, #31
9001be3a:	d40b      	bmi.n	9001be54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001be3c:	4620      	mov	r0, r4
9001be3e:	f006 ff3e 	bl	90022cbe <__cxa_guard_acquire>
9001be42:	b138      	cbz	r0, 9001be54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001be44:	4620      	mov	r0, r4
9001be46:	f006 ff46 	bl	90022cd6 <__cxa_guard_release>
9001be4a:	4a0f      	ldr	r2, [pc, #60]	; (9001be88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001be4c:	490f      	ldr	r1, [pc, #60]	; (9001be8c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
9001be4e:	4810      	ldr	r0, [pc, #64]	; (9001be90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001be50:	f006 ff2e 	bl	90022cb0 <__aeabi_atexit>
9001be54:	4c0f      	ldr	r4, [pc, #60]	; (9001be94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
9001be56:	7823      	ldrb	r3, [r4, #0]
9001be58:	f3bf 8f5b 	dmb	ish
9001be5c:	07db      	lsls	r3, r3, #31
9001be5e:	d40b      	bmi.n	9001be78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001be60:	4620      	mov	r0, r4
9001be62:	f006 ff2c 	bl	90022cbe <__cxa_guard_acquire>
9001be66:	b138      	cbz	r0, 9001be78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001be68:	4620      	mov	r0, r4
9001be6a:	f006 ff34 	bl	90022cd6 <__cxa_guard_release>
9001be6e:	4a06      	ldr	r2, [pc, #24]	; (9001be88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001be70:	4909      	ldr	r1, [pc, #36]	; (9001be98 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
9001be72:	480a      	ldr	r0, [pc, #40]	; (9001be9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001be74:	f006 ff1c 	bl	90022cb0 <__aeabi_atexit>
9001be78:	4b05      	ldr	r3, [pc, #20]	; (9001be90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001be7a:	66ab      	str	r3, [r5, #104]	; 0x68
9001be7c:	4b07      	ldr	r3, [pc, #28]	; (9001be9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001be7e:	66eb      	str	r3, [r5, #108]	; 0x6c
9001be80:	bd38      	pop	{r3, r4, r5, pc}
9001be82:	bf00      	nop
9001be84:	240262f8 	.word	0x240262f8
9001be88:	24000000 	.word	0x24000000
9001be8c:	900199b9 	.word	0x900199b9
9001be90:	2400006c 	.word	0x2400006c
9001be94:	240262fc 	.word	0x240262fc
9001be98:	900199b7 	.word	0x900199b7
9001be9c:	24000070 	.word	0x24000070

9001bea0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
9001bea0:	b510      	push	{r4, lr}
9001bea2:	4604      	mov	r4, r0
9001bea4:	f7ff ff88 	bl	9001bdb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
9001bea8:	4620      	mov	r0, r4
9001beaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001beae:	f7ff bfbd 	b.w	9001be2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

9001beb2 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
9001beb2:	b510      	push	{r4, lr}
9001beb4:	4604      	mov	r4, r0
9001beb6:	f7ff fff3 	bl	9001bea0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
9001beba:	4620      	mov	r0, r4
9001bebc:	f7ff ff72 	bl	9001bda4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
9001bec0:	4620      	mov	r0, r4
9001bec2:	f7ff fdf9 	bl	9001bab8 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
9001bec6:	4620      	mov	r0, r4
9001bec8:	f7ff fcfa 	bl	9001b8c0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
9001becc:	4620      	mov	r0, r4
9001bece:	f7ff fd75 	bl	9001b9bc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
9001bed2:	4620      	mov	r0, r4
9001bed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001bed8:	f7ff bee0 	b.w	9001bc9c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

9001bedc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
9001bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bee0:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
9001bee4:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
9001bee8:	2d00      	cmp	r5, #0
9001beea:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
9001beee:	fb05 4c0e 	mla	ip, r5, lr, r4
9001bef2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
9001bef6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
9001befa:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
9001befe:	eb02 0a0c 	add.w	sl, r2, ip
9001bf02:	8808      	ldrh	r0, [r1, #0]
9001bf04:	f2c0 80b0 	blt.w	9001c068 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001bf08:	45ab      	cmp	fp, r5
9001bf0a:	f340 80ad 	ble.w	9001c068 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001bf0e:	2c00      	cmp	r4, #0
9001bf10:	f2c0 80a8 	blt.w	9001c064 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001bf14:	45a6      	cmp	lr, r4
9001bf16:	f340 80a5 	ble.w	9001c064 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001bf1a:	f812 200c 	ldrb.w	r2, [r2, ip]
9001bf1e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
9001bf22:	1c62      	adds	r2, r4, #1
9001bf24:	f100 80a3 	bmi.w	9001c06e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001bf28:	4596      	cmp	lr, r2
9001bf2a:	f340 80a0 	ble.w	9001c06e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001bf2e:	f1b9 0f00 	cmp.w	r9, #0
9001bf32:	f000 809c 	beq.w	9001c06e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001bf36:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001bf3a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001bf3e:	3501      	adds	r5, #1
9001bf40:	f100 8099 	bmi.w	9001c076 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001bf44:	45ab      	cmp	fp, r5
9001bf46:	f340 8096 	ble.w	9001c076 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001bf4a:	2f00      	cmp	r7, #0
9001bf4c:	f000 8093 	beq.w	9001c076 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001bf50:	2c00      	cmp	r4, #0
9001bf52:	f2c0 808e 	blt.w	9001c072 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001bf56:	45a6      	cmp	lr, r4
9001bf58:	f340 808b 	ble.w	9001c072 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001bf5c:	f81a 200e 	ldrb.w	r2, [sl, lr]
9001bf60:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
9001bf64:	3401      	adds	r4, #1
9001bf66:	f100 8089 	bmi.w	9001c07c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001bf6a:	45a6      	cmp	lr, r4
9001bf6c:	f340 8086 	ble.w	9001c07c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001bf70:	f1b9 0f00 	cmp.w	r9, #0
9001bf74:	f000 8082 	beq.w	9001c07c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001bf78:	44d6      	add	lr, sl
9001bf7a:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001bf7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
9001bf82:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001bf86:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
9001bf8a:	fb19 fe07 	smulbb	lr, r9, r7
9001bf8e:	f1c7 0210 	rsb	r2, r7, #16
9001bf92:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001bf96:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001bf9a:	eba2 0209 	sub.w	r2, r2, r9
9001bf9e:	ea44 0808 	orr.w	r8, r4, r8
9001bfa2:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001bfa6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001bfaa:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001bfae:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001bfb2:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001bfb6:	ea44 0c0c 	orr.w	ip, r4, ip
9001bfba:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001bfbe:	fb04 f40c 	mul.w	r4, r4, ip
9001bfc2:	fb02 4808 	mla	r8, r2, r8, r4
9001bfc6:	041a      	lsls	r2, r3, #16
9001bfc8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001bfcc:	b2b4      	uxth	r4, r6
9001bfce:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001bfd2:	43f6      	mvns	r6, r6
9001bfd4:	4313      	orrs	r3, r2
9001bfd6:	042a      	lsls	r2, r5, #16
9001bfd8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001bfdc:	b2f6      	uxtb	r6, r6
9001bfde:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001bfe2:	fb0e 8303 	mla	r3, lr, r3, r8
9001bfe6:	432a      	orrs	r2, r5
9001bfe8:	fb07 3202 	mla	r2, r7, r2, r3
9001bfec:	10c7      	asrs	r7, r0, #3
9001bfee:	0d53      	lsrs	r3, r2, #21
9001bff0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001bff4:	0952      	lsrs	r2, r2, #5
9001bff6:	fb17 f706 	smulbb	r7, r7, r6
9001bffa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001bffe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c002:	431a      	orrs	r2, r3
9001c004:	b293      	uxth	r3, r2
9001c006:	1202      	asrs	r2, r0, #8
9001c008:	121d      	asrs	r5, r3, #8
9001c00a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001c00e:	00c0      	lsls	r0, r0, #3
9001c010:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001c014:	fb12 f206 	smulbb	r2, r2, r6
9001c018:	b2c0      	uxtb	r0, r0
9001c01a:	fb05 2504 	mla	r5, r5, r4, r2
9001c01e:	10da      	asrs	r2, r3, #3
9001c020:	fb10 f006 	smulbb	r0, r0, r6
9001c024:	00db      	lsls	r3, r3, #3
9001c026:	b2ad      	uxth	r5, r5
9001c028:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001c02c:	b2db      	uxtb	r3, r3
9001c02e:	fb02 7204 	mla	r2, r2, r4, r7
9001c032:	fb03 0004 	mla	r0, r3, r4, r0
9001c036:	1c6b      	adds	r3, r5, #1
9001c038:	b292      	uxth	r2, r2
9001c03a:	b280      	uxth	r0, r0
9001c03c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001c040:	1c43      	adds	r3, r0, #1
9001c042:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001c046:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001c04a:	1c50      	adds	r0, r2, #1
9001c04c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001c050:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c054:	0952      	lsrs	r2, r2, #5
9001c056:	432b      	orrs	r3, r5
9001c058:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001c05c:	4313      	orrs	r3, r2
9001c05e:	800b      	strh	r3, [r1, #0]
9001c060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c064:	4680      	mov	r8, r0
9001c066:	e75c      	b.n	9001bf22 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
9001c068:	4684      	mov	ip, r0
9001c06a:	4680      	mov	r8, r0
9001c06c:	e767      	b.n	9001bf3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001c06e:	4684      	mov	ip, r0
9001c070:	e765      	b.n	9001bf3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001c072:	4605      	mov	r5, r0
9001c074:	e776      	b.n	9001bf64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
9001c076:	4603      	mov	r3, r0
9001c078:	4605      	mov	r5, r0
9001c07a:	e782      	b.n	9001bf82 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
9001c07c:	4603      	mov	r3, r0
9001c07e:	e780      	b.n	9001bf82 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

9001c080 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c084:	b099      	sub	sp, #100	; 0x64
9001c086:	9215      	str	r2, [sp, #84]	; 0x54
9001c088:	9309      	str	r3, [sp, #36]	; 0x24
9001c08a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
9001c08c:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
9001c090:	9016      	str	r0, [sp, #88]	; 0x58
9001c092:	930d      	str	r3, [sp, #52]	; 0x34
9001c094:	6850      	ldr	r0, [r2, #4]
9001c096:	910c      	str	r1, [sp, #48]	; 0x30
9001c098:	6812      	ldr	r2, [r2, #0]
9001c09a:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
9001c09e:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
9001c0a2:	fb00 1303 	mla	r3, r0, r3, r1
9001c0a6:	eb02 0843 	add.w	r8, r2, r3, lsl #1
9001c0aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c0ac:	681b      	ldr	r3, [r3, #0]
9001c0ae:	930b      	str	r3, [sp, #44]	; 0x2c
9001c0b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c0b2:	685e      	ldr	r6, [r3, #4]
9001c0b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001c0b6:	3604      	adds	r6, #4
9001c0b8:	43db      	mvns	r3, r3
9001c0ba:	b2db      	uxtb	r3, r3
9001c0bc:	930a      	str	r3, [sp, #40]	; 0x28
9001c0be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c0c0:	2b00      	cmp	r3, #0
9001c0c2:	dc03      	bgt.n	9001c0cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001c0c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
9001c0c6:	2b00      	cmp	r3, #0
9001c0c8:	f340 8225 	ble.w	9001c516 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001c0cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c0ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c0d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001c0d6:	1e48      	subs	r0, r1, #1
9001c0d8:	1e57      	subs	r7, r2, #1
9001c0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c0dc:	2b00      	cmp	r3, #0
9001c0de:	f340 80e3 	ble.w	9001c2a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001c0e2:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9001c0e6:	ea4f 4325 	mov.w	r3, r5, asr #16
9001c0ea:	d406      	bmi.n	9001c0fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c0ec:	4584      	cmp	ip, r0
9001c0ee:	da04      	bge.n	9001c0fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c0f0:	2b00      	cmp	r3, #0
9001c0f2:	db02      	blt.n	9001c0fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c0f4:	42bb      	cmp	r3, r7
9001c0f6:	f2c0 80d8 	blt.w	9001c2aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001c0fa:	f11c 0c01 	adds.w	ip, ip, #1
9001c0fe:	f100 80c9 	bmi.w	9001c294 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c102:	4561      	cmp	r1, ip
9001c104:	f2c0 80c6 	blt.w	9001c294 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c108:	3301      	adds	r3, #1
9001c10a:	f100 80c3 	bmi.w	9001c294 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c10e:	429a      	cmp	r2, r3
9001c110:	f2c0 80c0 	blt.w	9001c294 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c114:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001c118:	4647      	mov	r7, r8
9001c11a:	f1bb 0f00 	cmp.w	fp, #0
9001c11e:	f340 80e3 	ble.w	9001c2e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
9001c122:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001c124:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001c128:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c12a:	f3ca 3003 	ubfx	r0, sl, #12, #4
9001c12e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001c132:	ea5f 422a 	movs.w	r2, sl, asr #16
9001c136:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001c13a:	689b      	ldr	r3, [r3, #8]
9001c13c:	f100 8121 	bmi.w	9001c382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c140:	f103 39ff 	add.w	r9, r3, #4294967295
9001c144:	454a      	cmp	r2, r9
9001c146:	f280 811c 	bge.w	9001c382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c14a:	f1bc 0f00 	cmp.w	ip, #0
9001c14e:	f2c0 8118 	blt.w	9001c382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c152:	f10e 39ff 	add.w	r9, lr, #4294967295
9001c156:	45cc      	cmp	ip, r9
9001c158:	f280 8113 	bge.w	9001c382 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001c15c:	b21b      	sxth	r3, r3
9001c15e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c160:	fb0c 2203 	mla	r2, ip, r3, r2
9001c164:	eb04 0902 	add.w	r9, r4, r2
9001c168:	5ca2      	ldrb	r2, [r4, r2]
9001c16a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
9001c16e:	2800      	cmp	r0, #0
9001c170:	f000 80fe 	beq.w	9001c370 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
9001c174:	f899 2001 	ldrb.w	r2, [r9, #1]
9001c178:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
9001c17c:	9211      	str	r2, [sp, #68]	; 0x44
9001c17e:	b151      	cbz	r1, 9001c196 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c180:	eb09 0203 	add.w	r2, r9, r3
9001c184:	f819 3003 	ldrb.w	r3, [r9, r3]
9001c188:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c18c:	930f      	str	r3, [sp, #60]	; 0x3c
9001c18e:	7853      	ldrb	r3, [r2, #1]
9001c190:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c194:	9312      	str	r3, [sp, #72]	; 0x48
9001c196:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001c198:	fb10 f201 	smulbb	r2, r0, r1
9001c19c:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c19e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c1a2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c1a6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001c1aa:	10d2      	asrs	r2, r2, #3
9001c1ac:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c1b0:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
9001c1b4:	ea4c 0c03 	orr.w	ip, ip, r3
9001c1b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001c1ba:	041b      	lsls	r3, r3, #16
9001c1bc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c1c0:	4323      	orrs	r3, r4
9001c1c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001c1c4:	4353      	muls	r3, r2
9001c1c6:	fb09 330c 	mla	r3, r9, ip, r3
9001c1ca:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001c1ce:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001c1d2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c1d6:	ea4c 0e0e 	orr.w	lr, ip, lr
9001c1da:	f1c1 0c10 	rsb	ip, r1, #16
9001c1de:	ebac 0c00 	sub.w	ip, ip, r0
9001c1e2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c1e6:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001c1ea:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001c1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001c1f0:	0418      	lsls	r0, r3, #16
9001c1f2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c1f6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001c1fa:	4318      	orrs	r0, r3
9001c1fc:	fb02 c200 	mla	r2, r2, r0, ip
9001c200:	8838      	ldrh	r0, [r7, #0]
9001c202:	0d53      	lsrs	r3, r2, #21
9001c204:	0952      	lsrs	r2, r2, #5
9001c206:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c20a:	1201      	asrs	r1, r0, #8
9001c20c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c210:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9001c214:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001c218:	00c0      	lsls	r0, r0, #3
9001c21a:	431a      	orrs	r2, r3
9001c21c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
9001c220:	fb11 f104 	smulbb	r1, r1, r4
9001c224:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001c228:	b292      	uxth	r2, r2
9001c22a:	fb1e fe04 	smulbb	lr, lr, r4
9001c22e:	b2c0      	uxtb	r0, r0
9001c230:	ea4f 2c22 	mov.w	ip, r2, asr #8
9001c234:	fb10 f004 	smulbb	r0, r0, r4
9001c238:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c23c:	fb0c 1c03 	mla	ip, ip, r3, r1
9001c240:	10d1      	asrs	r1, r2, #3
9001c242:	00d2      	lsls	r2, r2, #3
9001c244:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001c248:	fa1f fc8c 	uxth.w	ip, ip
9001c24c:	b2d2      	uxtb	r2, r2
9001c24e:	fb01 e103 	mla	r1, r1, r3, lr
9001c252:	fb02 0303 	mla	r3, r2, r3, r0
9001c256:	b289      	uxth	r1, r1
9001c258:	b29a      	uxth	r2, r3
9001c25a:	f10c 0301 	add.w	r3, ip, #1
9001c25e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001c262:	1c53      	adds	r3, r2, #1
9001c264:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001c268:	1c4a      	adds	r2, r1, #1
9001c26a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c26e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001c272:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c276:	0949      	lsrs	r1, r1, #5
9001c278:	ea43 030c 	orr.w	r3, r3, ip
9001c27c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001c280:	430b      	orrs	r3, r1
9001c282:	803b      	strh	r3, [r7, #0]
9001c284:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c286:	3702      	adds	r7, #2
9001c288:	f10b 3bff 	add.w	fp, fp, #4294967295
9001c28c:	449a      	add	sl, r3
9001c28e:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001c290:	441d      	add	r5, r3
9001c292:	e742      	b.n	9001c11a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001c294:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c296:	f108 0802 	add.w	r8, r8, #2
9001c29a:	449a      	add	sl, r3
9001c29c:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001c29e:	441d      	add	r5, r3
9001c2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c2a2:	3b01      	subs	r3, #1
9001c2a4:	9309      	str	r3, [sp, #36]	; 0x24
9001c2a6:	e718      	b.n	9001c0da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001c2a8:	d023      	beq.n	9001c2f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001c2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c2ac:	9825      	ldr	r0, [sp, #148]	; 0x94
9001c2ae:	3b01      	subs	r3, #1
9001c2b0:	fb00 a003 	mla	r0, r0, r3, sl
9001c2b4:	1400      	asrs	r0, r0, #16
9001c2b6:	f53f af2d 	bmi.w	9001c114 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c2ba:	3901      	subs	r1, #1
9001c2bc:	4288      	cmp	r0, r1
9001c2be:	f6bf af29 	bge.w	9001c114 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c2c2:	9926      	ldr	r1, [sp, #152]	; 0x98
9001c2c4:	fb01 5303 	mla	r3, r1, r3, r5
9001c2c8:	141b      	asrs	r3, r3, #16
9001c2ca:	f53f af23 	bmi.w	9001c114 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c2ce:	3a01      	subs	r2, #1
9001c2d0:	4293      	cmp	r3, r2
9001c2d2:	f6bf af1f 	bge.w	9001c114 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001c2d6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001c2da:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
9001c2de:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
9001c2e2:	f1be 0f00 	cmp.w	lr, #0
9001c2e6:	dc6c      	bgt.n	9001c3c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001c2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c2ea:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001c2ee:	eb08 0844 	add.w	r8, r8, r4, lsl #1
9001c2f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c2f4:	2b00      	cmp	r3, #0
9001c2f6:	f340 810e 	ble.w	9001c516 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001c2fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001c2fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001c300:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c304:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c308:	eef0 6a62 	vmov.f32	s13, s5
9001c30c:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001c310:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c314:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c318:	ee16 aa90 	vmov	sl, s13
9001c31c:	eef0 6a43 	vmov.f32	s13, s6
9001c320:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001c324:	ee16 5a90 	vmov	r5, s13
9001c328:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c32c:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c330:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c334:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c338:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c33c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c340:	ee12 2a90 	vmov	r2, s5
9001c344:	eef0 2a47 	vmov.f32	s5, s14
9001c348:	fb92 f3f3 	sdiv	r3, r2, r3
9001c34c:	ee13 2a10 	vmov	r2, s6
9001c350:	9325      	str	r3, [sp, #148]	; 0x94
9001c352:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001c354:	eeb0 3a67 	vmov.f32	s6, s15
9001c358:	fb92 f3f3 	sdiv	r3, r2, r3
9001c35c:	9326      	str	r3, [sp, #152]	; 0x98
9001c35e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c360:	9a15      	ldr	r2, [sp, #84]	; 0x54
9001c362:	3b01      	subs	r3, #1
9001c364:	930c      	str	r3, [sp, #48]	; 0x30
9001c366:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001c368:	bf08      	it	eq
9001c36a:	4613      	moveq	r3, r2
9001c36c:	9309      	str	r3, [sp, #36]	; 0x24
9001c36e:	e6a6      	b.n	9001c0be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001c370:	2900      	cmp	r1, #0
9001c372:	f43f af10 	beq.w	9001c196 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c376:	f819 3003 	ldrb.w	r3, [r9, r3]
9001c37a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c37e:	930f      	str	r3, [sp, #60]	; 0x3c
9001c380:	e709      	b.n	9001c196 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001c382:	f112 0901 	adds.w	r9, r2, #1
9001c386:	f53f af7d 	bmi.w	9001c284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c38a:	454b      	cmp	r3, r9
9001c38c:	f6ff af7a 	blt.w	9001c284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c390:	f11c 0901 	adds.w	r9, ip, #1
9001c394:	f53f af76 	bmi.w	9001c284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c398:	45ce      	cmp	lr, r9
9001c39a:	f6ff af73 	blt.w	9001c284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c39e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001c3a0:	b21b      	sxth	r3, r3
9001c3a2:	9202      	str	r2, [sp, #8]
9001c3a4:	fa0f f28e 	sxth.w	r2, lr
9001c3a8:	9300      	str	r3, [sp, #0]
9001c3aa:	4633      	mov	r3, r6
9001c3ac:	9201      	str	r2, [sp, #4]
9001c3ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001c3b0:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001c3b4:	e9cd c003 	strd	ip, r0, [sp, #12]
9001c3b8:	4639      	mov	r1, r7
9001c3ba:	9816      	ldr	r0, [sp, #88]	; 0x58
9001c3bc:	f7ff fd8e 	bl	9001bedc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
9001c3c0:	e760      	b.n	9001c284 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001c3c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c3c4:	ea4f 422a 	mov.w	r2, sl, asr #16
9001c3c8:	1429      	asrs	r1, r5, #16
9001c3ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001c3cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001c3d0:	f3ca 3c03 	ubfx	ip, sl, #12, #4
9001c3d4:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001c3d8:	fb03 2101 	mla	r1, r3, r1, r2
9001c3dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001c3de:	440a      	add	r2, r1
9001c3e0:	5c61      	ldrb	r1, [r4, r1]
9001c3e2:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
9001c3e6:	f1bc 0f00 	cmp.w	ip, #0
9001c3ea:	f000 808c 	beq.w	9001c506 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
9001c3ee:	7857      	ldrb	r7, [r2, #1]
9001c3f0:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
9001c3f4:	9413      	str	r4, [sp, #76]	; 0x4c
9001c3f6:	b140      	cbz	r0, 9001c40a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c3f8:	18d7      	adds	r7, r2, r3
9001c3fa:	5cd3      	ldrb	r3, [r2, r3]
9001c3fc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c400:	9310      	str	r3, [sp, #64]	; 0x40
9001c402:	787b      	ldrb	r3, [r7, #1]
9001c404:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c408:	9314      	str	r3, [sp, #80]	; 0x50
9001c40a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001c40c:	fb1c f200 	smulbb	r2, ip, r0
9001c410:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c412:	f10e 3eff 	add.w	lr, lr, #4294967295
9001c416:	041f      	lsls	r7, r3, #16
9001c418:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c41c:	10d2      	asrs	r2, r2, #3
9001c41e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
9001c422:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
9001c426:	431f      	orrs	r7, r3
9001c428:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
9001c42c:	9317      	str	r3, [sp, #92]	; 0x5c
9001c42e:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001c430:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001c432:	041b      	lsls	r3, r3, #16
9001c434:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c438:	ea43 030b 	orr.w	r3, r3, fp
9001c43c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001c440:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001c444:	4353      	muls	r3, r2
9001c446:	fb04 3707 	mla	r7, r4, r7, r3
9001c44a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001c44e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001c450:	ea43 0b01 	orr.w	fp, r3, r1
9001c454:	f1c0 0110 	rsb	r1, r0, #16
9001c458:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c45a:	eba1 0c0c 	sub.w	ip, r1, ip
9001c45e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c462:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001c466:	fb0c 770b 	mla	r7, ip, fp, r7
9001c46a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c46e:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
9001c472:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c476:	ea4c 0c0b 	orr.w	ip, ip, fp
9001c47a:	fb02 770c 	mla	r7, r2, ip, r7
9001c47e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9001c480:	0d79      	lsrs	r1, r7, #21
9001c482:	8812      	ldrh	r2, [r2, #0]
9001c484:	097f      	lsrs	r7, r7, #5
9001c486:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001c48a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001c48e:	430f      	orrs	r7, r1
9001c490:	1211      	asrs	r1, r2, #8
9001c492:	b2bb      	uxth	r3, r7
9001c494:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001c498:	10d7      	asrs	r7, r2, #3
9001c49a:	fb11 f104 	smulbb	r1, r1, r4
9001c49e:	1218      	asrs	r0, r3, #8
9001c4a0:	00d2      	lsls	r2, r2, #3
9001c4a2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c4a6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001c4aa:	fb17 f704 	smulbb	r7, r7, r4
9001c4ae:	b2d2      	uxtb	r2, r2
9001c4b0:	fb00 1009 	mla	r0, r0, r9, r1
9001c4b4:	10d9      	asrs	r1, r3, #3
9001c4b6:	fb12 f204 	smulbb	r2, r2, r4
9001c4ba:	00db      	lsls	r3, r3, #3
9001c4bc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001c4c0:	b280      	uxth	r0, r0
9001c4c2:	b2db      	uxtb	r3, r3
9001c4c4:	fb01 7109 	mla	r1, r1, r9, r7
9001c4c8:	fb03 2309 	mla	r3, r3, r9, r2
9001c4cc:	1c42      	adds	r2, r0, #1
9001c4ce:	b289      	uxth	r1, r1
9001c4d0:	b29b      	uxth	r3, r3
9001c4d2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001c4d6:	1c4f      	adds	r7, r1, #1
9001c4d8:	1c5a      	adds	r2, r3, #1
9001c4da:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001c4de:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001c4e2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001c4e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c4e8:	0949      	lsrs	r1, r1, #5
9001c4ea:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001c4ee:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001c4f2:	4310      	orrs	r0, r2
9001c4f4:	4308      	orrs	r0, r1
9001c4f6:	f823 0b02 	strh.w	r0, [r3], #2
9001c4fa:	930e      	str	r3, [sp, #56]	; 0x38
9001c4fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001c4fe:	449a      	add	sl, r3
9001c500:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001c502:	441d      	add	r5, r3
9001c504:	e6ed      	b.n	9001c2e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
9001c506:	2800      	cmp	r0, #0
9001c508:	f43f af7f 	beq.w	9001c40a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c50c:	5cd3      	ldrb	r3, [r2, r3]
9001c50e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001c512:	9310      	str	r3, [sp, #64]	; 0x40
9001c514:	e779      	b.n	9001c40a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001c516:	b019      	add	sp, #100	; 0x64
9001c518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c51c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001c51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001c520:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
9001c524:	f9bd e020 	ldrsh.w	lr, [sp, #32]
9001c528:	f1b8 0f00 	cmp.w	r8, #0
9001c52c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
9001c530:	fb08 470e 	mla	r7, r8, lr, r4
9001c534:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
9001c538:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9001c53c:	eb02 0907 	add.w	r9, r2, r7
9001c540:	8808      	ldrh	r0, [r1, #0]
9001c542:	db67      	blt.n	9001c614 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001c544:	45c2      	cmp	sl, r8
9001c546:	dd65      	ble.n	9001c614 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001c548:	2c00      	cmp	r4, #0
9001c54a:	db61      	blt.n	9001c610 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001c54c:	45a6      	cmp	lr, r4
9001c54e:	dd5f      	ble.n	9001c610 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001c550:	5dd2      	ldrb	r2, [r2, r7]
9001c552:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001c556:	1c62      	adds	r2, r4, #1
9001c558:	d45f      	bmi.n	9001c61a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c55a:	4596      	cmp	lr, r2
9001c55c:	dd5d      	ble.n	9001c61a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c55e:	2d00      	cmp	r5, #0
9001c560:	d05b      	beq.n	9001c61a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001c562:	f899 2001 	ldrb.w	r2, [r9, #1]
9001c566:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
9001c56a:	f118 0801 	adds.w	r8, r8, #1
9001c56e:	d458      	bmi.n	9001c622 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c570:	45c2      	cmp	sl, r8
9001c572:	dd56      	ble.n	9001c622 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c574:	2e00      	cmp	r6, #0
9001c576:	d054      	beq.n	9001c622 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001c578:	2c00      	cmp	r4, #0
9001c57a:	db50      	blt.n	9001c61e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001c57c:	45a6      	cmp	lr, r4
9001c57e:	dd4e      	ble.n	9001c61e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001c580:	f819 200e 	ldrb.w	r2, [r9, lr]
9001c584:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
9001c588:	3401      	adds	r4, #1
9001c58a:	d407      	bmi.n	9001c59c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c58c:	45a6      	cmp	lr, r4
9001c58e:	dd05      	ble.n	9001c59c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c590:	b125      	cbz	r5, 9001c59c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001c592:	44ce      	add	lr, r9
9001c594:	f89e 0001 	ldrb.w	r0, [lr, #1]
9001c598:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
9001c59c:	fb15 f406 	smulbb	r4, r5, r6
9001c5a0:	ea4f 430c 	mov.w	r3, ip, lsl #16
9001c5a4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
9001c5a8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001c5ac:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c5b0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9001c5b4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001c5b8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001c5bc:	ea43 0c0c 	orr.w	ip, r3, ip
9001c5c0:	f1c6 0310 	rsb	r3, r6, #16
9001c5c4:	ea4e 0707 	orr.w	r7, lr, r7
9001c5c8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9001c5cc:	1b5b      	subs	r3, r3, r5
9001c5ce:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9001c5d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001c5d6:	437d      	muls	r5, r7
9001c5d8:	fb03 5c0c 	mla	ip, r3, ip, r5
9001c5dc:	0403      	lsls	r3, r0, #16
9001c5de:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001c5e2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c5e6:	4318      	orrs	r0, r3
9001c5e8:	0413      	lsls	r3, r2, #16
9001c5ea:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c5ee:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c5f2:	fb04 c000 	mla	r0, r4, r0, ip
9001c5f6:	4313      	orrs	r3, r2
9001c5f8:	fb06 0003 	mla	r0, r6, r3, r0
9001c5fc:	0d43      	lsrs	r3, r0, #21
9001c5fe:	0940      	lsrs	r0, r0, #5
9001c600:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c604:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001c608:	4318      	orrs	r0, r3
9001c60a:	8008      	strh	r0, [r1, #0]
9001c60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001c610:	4684      	mov	ip, r0
9001c612:	e7a0      	b.n	9001c556 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
9001c614:	4607      	mov	r7, r0
9001c616:	4684      	mov	ip, r0
9001c618:	e7a7      	b.n	9001c56a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001c61a:	4607      	mov	r7, r0
9001c61c:	e7a5      	b.n	9001c56a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001c61e:	4602      	mov	r2, r0
9001c620:	e7b2      	b.n	9001c588 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
9001c622:	4602      	mov	r2, r0
9001c624:	e7ba      	b.n	9001c59c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

9001c626 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c62a:	b093      	sub	sp, #76	; 0x4c
9001c62c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c630:	920f      	str	r2, [sp, #60]	; 0x3c
9001c632:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001c634:	9010      	str	r0, [sp, #64]	; 0x40
9001c636:	9108      	str	r1, [sp, #32]
9001c638:	6850      	ldr	r0, [r2, #4]
9001c63a:	9306      	str	r3, [sp, #24]
9001c63c:	6812      	ldr	r2, [r2, #0]
9001c63e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001c642:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
9001c646:	fb00 1303 	mla	r3, r0, r3, r1
9001c64a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
9001c64e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c650:	681b      	ldr	r3, [r3, #0]
9001c652:	9307      	str	r3, [sp, #28]
9001c654:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c656:	685f      	ldr	r7, [r3, #4]
9001c658:	3704      	adds	r7, #4
9001c65a:	9b08      	ldr	r3, [sp, #32]
9001c65c:	2b00      	cmp	r3, #0
9001c65e:	dc03      	bgt.n	9001c668 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
9001c660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001c662:	2b00      	cmp	r3, #0
9001c664:	f340 81b2 	ble.w	9001c9cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001c668:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c66a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001c66e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001c672:	1e48      	subs	r0, r1, #1
9001c674:	f102 3cff 	add.w	ip, r2, #4294967295
9001c678:	9b06      	ldr	r3, [sp, #24]
9001c67a:	2b00      	cmp	r3, #0
9001c67c:	f340 80a9 	ble.w	9001c7d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001c680:	ea5f 4e24 	movs.w	lr, r4, asr #16
9001c684:	ea4f 4326 	mov.w	r3, r6, asr #16
9001c688:	d406      	bmi.n	9001c698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c68a:	4586      	cmp	lr, r0
9001c68c:	da04      	bge.n	9001c698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c68e:	2b00      	cmp	r3, #0
9001c690:	db02      	blt.n	9001c698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001c692:	4563      	cmp	r3, ip
9001c694:	f2c0 809e 	blt.w	9001c7d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
9001c698:	f11e 0e01 	adds.w	lr, lr, #1
9001c69c:	f100 808f 	bmi.w	9001c7be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c6a0:	4571      	cmp	r1, lr
9001c6a2:	f2c0 808c 	blt.w	9001c7be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c6a6:	3301      	adds	r3, #1
9001c6a8:	f100 8089 	bmi.w	9001c7be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c6ac:	429a      	cmp	r2, r3
9001c6ae:	f2c0 8086 	blt.w	9001c7be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001c6b2:	f8dd b018 	ldr.w	fp, [sp, #24]
9001c6b6:	46c8      	mov	r8, r9
9001c6b8:	f1bb 0f00 	cmp.w	fp, #0
9001c6bc:	f340 80a6 	ble.w	9001c80c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001c6c0:	9a24      	ldr	r2, [sp, #144]	; 0x90
9001c6c2:	ea4f 4c26 	mov.w	ip, r6, asr #16
9001c6c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c6c8:	f3c4 3003 	ubfx	r0, r4, #12, #4
9001c6cc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001c6d0:	1422      	asrs	r2, r4, #16
9001c6d2:	f3c6 3103 	ubfx	r1, r6, #12, #4
9001c6d6:	689b      	ldr	r3, [r3, #8]
9001c6d8:	f100 80e3 	bmi.w	9001c8a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c6dc:	f103 3aff 	add.w	sl, r3, #4294967295
9001c6e0:	4552      	cmp	r2, sl
9001c6e2:	f280 80de 	bge.w	9001c8a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c6e6:	f1bc 0f00 	cmp.w	ip, #0
9001c6ea:	f2c0 80da 	blt.w	9001c8a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c6ee:	f10e 3aff 	add.w	sl, lr, #4294967295
9001c6f2:	45d4      	cmp	ip, sl
9001c6f4:	f280 80d5 	bge.w	9001c8a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001c6f8:	b21b      	sxth	r3, r3
9001c6fa:	9d07      	ldr	r5, [sp, #28]
9001c6fc:	fb0c 2203 	mla	r2, ip, r3, r2
9001c700:	eb05 0a02 	add.w	sl, r5, r2
9001c704:	5caa      	ldrb	r2, [r5, r2]
9001c706:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
9001c70a:	2800      	cmp	r0, #0
9001c70c:	f000 80c0 	beq.w	9001c890 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
9001c710:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001c714:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
9001c718:	920b      	str	r2, [sp, #44]	; 0x2c
9001c71a:	b151      	cbz	r1, 9001c732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001c71c:	eb0a 0203 	add.w	r2, sl, r3
9001c720:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001c724:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c728:	9309      	str	r3, [sp, #36]	; 0x24
9001c72a:	7853      	ldrb	r3, [r2, #1]
9001c72c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c730:	930c      	str	r3, [sp, #48]	; 0x30
9001c732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001c734:	fb10 f201 	smulbb	r2, r0, r1
9001c738:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001c73a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c73e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c742:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001c746:	10d2      	asrs	r2, r2, #3
9001c748:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c74c:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
9001c750:	ea4c 0c03 	orr.w	ip, ip, r3
9001c754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001c756:	041b      	lsls	r3, r3, #16
9001c758:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c75c:	432b      	orrs	r3, r5
9001c75e:	4353      	muls	r3, r2
9001c760:	fb0a 330c 	mla	r3, sl, ip, r3
9001c764:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001c768:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001c76c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c770:	ea4c 0e0e 	orr.w	lr, ip, lr
9001c774:	f1c1 0c10 	rsb	ip, r1, #16
9001c778:	ebac 0c00 	sub.w	ip, ip, r0
9001c77c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001c780:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001c784:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001c788:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c78a:	0418      	lsls	r0, r3, #16
9001c78c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c790:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001c794:	4318      	orrs	r0, r3
9001c796:	fb02 c200 	mla	r2, r2, r0, ip
9001c79a:	0d53      	lsrs	r3, r2, #21
9001c79c:	0952      	lsrs	r2, r2, #5
9001c79e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c7a2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c7a6:	431a      	orrs	r2, r3
9001c7a8:	f8a8 2000 	strh.w	r2, [r8]
9001c7ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001c7ae:	f108 0802 	add.w	r8, r8, #2
9001c7b2:	f10b 3bff 	add.w	fp, fp, #4294967295
9001c7b6:	441c      	add	r4, r3
9001c7b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001c7ba:	441e      	add	r6, r3
9001c7bc:	e77c      	b.n	9001c6b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001c7be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001c7c0:	f109 0902 	add.w	r9, r9, #2
9001c7c4:	441c      	add	r4, r3
9001c7c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001c7c8:	441e      	add	r6, r3
9001c7ca:	9b06      	ldr	r3, [sp, #24]
9001c7cc:	3b01      	subs	r3, #1
9001c7ce:	9306      	str	r3, [sp, #24]
9001c7d0:	e752      	b.n	9001c678 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001c7d2:	d020      	beq.n	9001c816 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c7d4:	9b06      	ldr	r3, [sp, #24]
9001c7d6:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001c7d8:	3b01      	subs	r3, #1
9001c7da:	fb00 4003 	mla	r0, r0, r3, r4
9001c7de:	1400      	asrs	r0, r0, #16
9001c7e0:	f53f af67 	bmi.w	9001c6b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c7e4:	3901      	subs	r1, #1
9001c7e6:	4288      	cmp	r0, r1
9001c7e8:	f6bf af63 	bge.w	9001c6b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c7ec:	9920      	ldr	r1, [sp, #128]	; 0x80
9001c7ee:	fb01 6303 	mla	r3, r1, r3, r6
9001c7f2:	141b      	asrs	r3, r3, #16
9001c7f4:	f53f af5d 	bmi.w	9001c6b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c7f8:	3a01      	subs	r2, #1
9001c7fa:	4293      	cmp	r3, r2
9001c7fc:	f6bf af59 	bge.w	9001c6b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001c800:	f8dd 8018 	ldr.w	r8, [sp, #24]
9001c804:	46ca      	mov	sl, r9
9001c806:	f1b8 0f00 	cmp.w	r8, #0
9001c80a:	dc67      	bgt.n	9001c8dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001c80c:	9b06      	ldr	r3, [sp, #24]
9001c80e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9001c812:	eb09 0945 	add.w	r9, r9, r5, lsl #1
9001c816:	9b08      	ldr	r3, [sp, #32]
9001c818:	2b00      	cmp	r3, #0
9001c81a:	f340 80d7 	ble.w	9001c9cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001c81e:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c822:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001c824:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c828:	eeb0 6a62 	vmov.f32	s12, s5
9001c82c:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c830:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c834:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c838:	ee16 4a10 	vmov	r4, s12
9001c83c:	eeb0 6a43 	vmov.f32	s12, s6
9001c840:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c844:	ee16 6a10 	vmov	r6, s12
9001c848:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c84c:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c850:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c854:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c858:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c85c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c860:	ee12 2a90 	vmov	r2, s5
9001c864:	eef0 2a47 	vmov.f32	s5, s14
9001c868:	fb92 f3f3 	sdiv	r3, r2, r3
9001c86c:	ee13 2a10 	vmov	r2, s6
9001c870:	931f      	str	r3, [sp, #124]	; 0x7c
9001c872:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001c874:	eeb0 3a67 	vmov.f32	s6, s15
9001c878:	fb92 f3f3 	sdiv	r3, r2, r3
9001c87c:	9320      	str	r3, [sp, #128]	; 0x80
9001c87e:	9b08      	ldr	r3, [sp, #32]
9001c880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c882:	3b01      	subs	r3, #1
9001c884:	9308      	str	r3, [sp, #32]
9001c886:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001c888:	bf08      	it	eq
9001c88a:	4613      	moveq	r3, r2
9001c88c:	9306      	str	r3, [sp, #24]
9001c88e:	e6e4      	b.n	9001c65a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
9001c890:	2900      	cmp	r1, #0
9001c892:	f43f af4e 	beq.w	9001c732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001c896:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001c89a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c89e:	9309      	str	r3, [sp, #36]	; 0x24
9001c8a0:	e747      	b.n	9001c732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001c8a2:	f112 0a01 	adds.w	sl, r2, #1
9001c8a6:	d481      	bmi.n	9001c7ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c8a8:	4553      	cmp	r3, sl
9001c8aa:	f6ff af7f 	blt.w	9001c7ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c8ae:	f11c 0a01 	adds.w	sl, ip, #1
9001c8b2:	f53f af7b 	bmi.w	9001c7ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c8b6:	45d6      	cmp	lr, sl
9001c8b8:	f6ff af78 	blt.w	9001c7ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c8bc:	b21b      	sxth	r3, r3
9001c8be:	e9cd 2c02 	strd	r2, ip, [sp, #8]
9001c8c2:	fa0f f28e 	sxth.w	r2, lr
9001c8c6:	9300      	str	r3, [sp, #0]
9001c8c8:	463b      	mov	r3, r7
9001c8ca:	9201      	str	r2, [sp, #4]
9001c8cc:	9a07      	ldr	r2, [sp, #28]
9001c8ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
9001c8d2:	4641      	mov	r1, r8
9001c8d4:	9810      	ldr	r0, [sp, #64]	; 0x40
9001c8d6:	f7ff fe21 	bl	9001c51c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001c8da:	e767      	b.n	9001c7ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001c8dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001c8de:	1422      	asrs	r2, r4, #16
9001c8e0:	1431      	asrs	r1, r6, #16
9001c8e2:	9d07      	ldr	r5, [sp, #28]
9001c8e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001c8e8:	f3c4 3e03 	ubfx	lr, r4, #12, #4
9001c8ec:	f3c6 3003 	ubfx	r0, r6, #12, #4
9001c8f0:	fb03 2101 	mla	r1, r3, r1, r2
9001c8f4:	9a07      	ldr	r2, [sp, #28]
9001c8f6:	440a      	add	r2, r1
9001c8f8:	5c69      	ldrb	r1, [r5, r1]
9001c8fa:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
9001c8fe:	f1be 0f00 	cmp.w	lr, #0
9001c902:	d05c      	beq.n	9001c9be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
9001c904:	f892 c001 	ldrb.w	ip, [r2, #1]
9001c908:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
9001c90c:	950d      	str	r5, [sp, #52]	; 0x34
9001c90e:	b150      	cbz	r0, 9001c926 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001c910:	eb02 0c03 	add.w	ip, r2, r3
9001c914:	5cd3      	ldrb	r3, [r2, r3]
9001c916:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c91a:	930a      	str	r3, [sp, #40]	; 0x28
9001c91c:	f89c 3001 	ldrb.w	r3, [ip, #1]
9001c920:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c924:	930e      	str	r3, [sp, #56]	; 0x38
9001c926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001c928:	fb1e f200 	smulbb	r2, lr, r0
9001c92c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001c92e:	f108 38ff 	add.w	r8, r8, #4294967295
9001c932:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001c936:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c93a:	10d2      	asrs	r2, r2, #3
9001c93c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
9001c940:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001c944:	ea4c 0c03 	orr.w	ip, ip, r3
9001c948:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
9001c94c:	9311      	str	r3, [sp, #68]	; 0x44
9001c94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c950:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001c952:	041b      	lsls	r3, r3, #16
9001c954:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001c958:	ea43 030b 	orr.w	r3, r3, fp
9001c95c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001c960:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001c964:	4353      	muls	r3, r2
9001c966:	fb05 3c0c 	mla	ip, r5, ip, r3
9001c96a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001c96e:	ea43 0b01 	orr.w	fp, r3, r1
9001c972:	f1c0 0110 	rsb	r1, r0, #16
9001c976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001c978:	eba1 0e0e 	sub.w	lr, r1, lr
9001c97c:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
9001c980:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001c984:	fb0e cc0b 	mla	ip, lr, fp, ip
9001c988:	ea4f 4b03 	mov.w	fp, r3, lsl #16
9001c98c:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
9001c990:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001c994:	ea4b 0e0e 	orr.w	lr, fp, lr
9001c998:	fb02 cc0e 	mla	ip, r2, lr, ip
9001c99c:	ea4f 535c 	mov.w	r3, ip, lsr #21
9001c9a0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9001c9a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c9a8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001c9ac:	ea43 0c0c 	orr.w	ip, r3, ip
9001c9b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001c9b2:	441c      	add	r4, r3
9001c9b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001c9b6:	f82a cb02 	strh.w	ip, [sl], #2
9001c9ba:	441e      	add	r6, r3
9001c9bc:	e723      	b.n	9001c806 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001c9be:	2800      	cmp	r0, #0
9001c9c0:	d0b1      	beq.n	9001c926 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001c9c2:	5cd3      	ldrb	r3, [r2, r3]
9001c9c4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001c9c8:	930a      	str	r3, [sp, #40]	; 0x28
9001c9ca:	e7ac      	b.n	9001c926 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001c9cc:	b013      	add	sp, #76	; 0x4c
9001c9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c9d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
9001c9d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c9d6:	880d      	ldrh	r5, [r1, #0]
9001c9d8:	b087      	sub	sp, #28
9001c9da:	10ef      	asrs	r7, r5, #3
9001c9dc:	9103      	str	r1, [sp, #12]
9001c9de:	ea4f 2a25 	mov.w	sl, r5, asr #8
9001c9e2:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
9001c9e6:	00ed      	lsls	r5, r5, #3
9001c9e8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c9ec:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
9001c9f0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
9001c9f4:	b2ed      	uxtb	r5, r5
9001c9f6:	9701      	str	r7, [sp, #4]
9001c9f8:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
9001c9fc:	9502      	str	r5, [sp, #8]
9001c9fe:	9d01      	ldr	r5, [sp, #4]
9001ca00:	9902      	ldr	r1, [sp, #8]
9001ca02:	022d      	lsls	r5, r5, #8
9001ca04:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
9001ca08:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
9001ca0c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
9001ca10:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
9001ca14:	430d      	orrs	r5, r1
9001ca16:	fb06 0709 	mla	r7, r6, r9, r0
9001ca1a:	2e00      	cmp	r6, #0
9001ca1c:	9505      	str	r5, [sp, #20]
9001ca1e:	eb02 0c07 	add.w	ip, r2, r7
9001ca22:	f2c0 80b6 	blt.w	9001cb92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001ca26:	45b3      	cmp	fp, r6
9001ca28:	f340 80b3 	ble.w	9001cb92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001ca2c:	2800      	cmp	r0, #0
9001ca2e:	f2c0 80ae 	blt.w	9001cb8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001ca32:	4581      	cmp	r9, r0
9001ca34:	f340 80ab 	ble.w	9001cb8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001ca38:	5dd7      	ldrb	r7, [r2, r7]
9001ca3a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001ca3e:	441f      	add	r7, r3
9001ca40:	1c42      	adds	r2, r0, #1
9001ca42:	f100 80a9 	bmi.w	9001cb98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001ca46:	4591      	cmp	r9, r2
9001ca48:	f340 80a6 	ble.w	9001cb98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001ca4c:	2c00      	cmp	r4, #0
9001ca4e:	f000 80a3 	beq.w	9001cb98 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001ca52:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001ca56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001ca5a:	441d      	add	r5, r3
9001ca5c:	3601      	adds	r6, #1
9001ca5e:	f100 809f 	bmi.w	9001cba0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001ca62:	45b3      	cmp	fp, r6
9001ca64:	f340 809c 	ble.w	9001cba0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001ca68:	f1be 0f00 	cmp.w	lr, #0
9001ca6c:	f000 8098 	beq.w	9001cba0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001ca70:	2800      	cmp	r0, #0
9001ca72:	f2c0 8093 	blt.w	9001cb9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001ca76:	4581      	cmp	r9, r0
9001ca78:	f340 8090 	ble.w	9001cb9c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001ca7c:	f81c 6009 	ldrb.w	r6, [ip, r9]
9001ca80:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001ca84:	441e      	add	r6, r3
9001ca86:	3001      	adds	r0, #1
9001ca88:	f100 808d 	bmi.w	9001cba6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001ca8c:	4581      	cmp	r9, r0
9001ca8e:	f340 808a 	ble.w	9001cba6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001ca92:	2c00      	cmp	r4, #0
9001ca94:	f000 8087 	beq.w	9001cba6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001ca98:	44e1      	add	r9, ip
9001ca9a:	f899 2001 	ldrb.w	r2, [r9, #1]
9001ca9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001caa2:	4413      	add	r3, r2
9001caa4:	b2a4      	uxth	r4, r4
9001caa6:	f897 c002 	ldrb.w	ip, [r7, #2]
9001caaa:	fa1f fe8e 	uxth.w	lr, lr
9001caae:	9901      	ldr	r1, [sp, #4]
9001cab0:	fb04 fb0e 	mul.w	fp, r4, lr
9001cab4:	0124      	lsls	r4, r4, #4
9001cab6:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
9001caba:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
9001cabe:	eba4 040b 	sub.w	r4, r4, fp
9001cac2:	fa1f f08e 	uxth.w	r0, lr
9001cac6:	b2a2      	uxth	r2, r4
9001cac8:	78ac      	ldrb	r4, [r5, #2]
9001caca:	eba9 0900 	sub.w	r9, r9, r0
9001cace:	fa1f fe88 	uxth.w	lr, r8
9001cad2:	4354      	muls	r4, r2
9001cad4:	ea6f 0808 	mvn.w	r8, r8
9001cad8:	fa1f f989 	uxth.w	r9, r9
9001cadc:	fa5f f888 	uxtb.w	r8, r8
9001cae0:	fb09 440c 	mla	r4, r9, ip, r4
9001cae4:	f896 c002 	ldrb.w	ip, [r6, #2]
9001cae8:	fb1a fa08 	smulbb	sl, sl, r8
9001caec:	fb00 440c 	mla	r4, r0, ip, r4
9001caf0:	f893 c002 	ldrb.w	ip, [r3, #2]
9001caf4:	fb0b 4c0c 	mla	ip, fp, ip, r4
9001caf8:	787c      	ldrb	r4, [r7, #1]
9001cafa:	783f      	ldrb	r7, [r7, #0]
9001cafc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001cb00:	fb0c ac0e 	mla	ip, ip, lr, sl
9001cb04:	f895 a001 	ldrb.w	sl, [r5, #1]
9001cb08:	782d      	ldrb	r5, [r5, #0]
9001cb0a:	fb02 fa0a 	mul.w	sl, r2, sl
9001cb0e:	fa1f fc8c 	uxth.w	ip, ip
9001cb12:	436a      	muls	r2, r5
9001cb14:	7835      	ldrb	r5, [r6, #0]
9001cb16:	fb09 aa04 	mla	sl, r9, r4, sl
9001cb1a:	7874      	ldrb	r4, [r6, #1]
9001cb1c:	fb09 2207 	mla	r2, r9, r7, r2
9001cb20:	fb00 aa04 	mla	sl, r0, r4, sl
9001cb24:	785c      	ldrb	r4, [r3, #1]
9001cb26:	fb00 2005 	mla	r0, r0, r5, r2
9001cb2a:	781b      	ldrb	r3, [r3, #0]
9001cb2c:	fb0b a404 	mla	r4, fp, r4, sl
9001cb30:	fb11 fa08 	smulbb	sl, r1, r8
9001cb34:	fb0b 0b03 	mla	fp, fp, r3, r0
9001cb38:	9b02      	ldr	r3, [sp, #8]
9001cb3a:	f3c4 2407 	ubfx	r4, r4, #8, #8
9001cb3e:	fb13 f808 	smulbb	r8, r3, r8
9001cb42:	f3cb 2b07 	ubfx	fp, fp, #8, #8
9001cb46:	fb04 a40e 	mla	r4, r4, lr, sl
9001cb4a:	f10c 0301 	add.w	r3, ip, #1
9001cb4e:	fb0b 8e0e 	mla	lr, fp, lr, r8
9001cb52:	b2a4      	uxth	r4, r4
9001cb54:	fa1f fe8e 	uxth.w	lr, lr
9001cb58:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001cb5c:	f104 0a01 	add.w	sl, r4, #1
9001cb60:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
9001cb64:	f10e 0c01 	add.w	ip, lr, #1
9001cb68:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001cb6c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001cb70:	0964      	lsrs	r4, r4, #5
9001cb72:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001cb76:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001cb7a:	ea4c 0c03 	orr.w	ip, ip, r3
9001cb7e:	9b03      	ldr	r3, [sp, #12]
9001cb80:	ea4c 0c04 	orr.w	ip, ip, r4
9001cb84:	f8a3 c000 	strh.w	ip, [r3]
9001cb88:	b007      	add	sp, #28
9001cb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001cb8e:	af05      	add	r7, sp, #20
9001cb90:	e756      	b.n	9001ca40 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
9001cb92:	ad05      	add	r5, sp, #20
9001cb94:	462f      	mov	r7, r5
9001cb96:	e761      	b.n	9001ca5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001cb98:	ad05      	add	r5, sp, #20
9001cb9a:	e75f      	b.n	9001ca5c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001cb9c:	ae05      	add	r6, sp, #20
9001cb9e:	e772      	b.n	9001ca86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
9001cba0:	ab05      	add	r3, sp, #20
9001cba2:	461e      	mov	r6, r3
9001cba4:	e77e      	b.n	9001caa4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
9001cba6:	ab05      	add	r3, sp, #20
9001cba8:	e77c      	b.n	9001caa4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

9001cbaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cbaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cbae:	b095      	sub	sp, #84	; 0x54
9001cbb0:	9212      	str	r2, [sp, #72]	; 0x48
9001cbb2:	9309      	str	r3, [sp, #36]	; 0x24
9001cbb4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001cbb6:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
9001cbba:	9013      	str	r0, [sp, #76]	; 0x4c
9001cbbc:	930f      	str	r3, [sp, #60]	; 0x3c
9001cbbe:	6850      	ldr	r0, [r2, #4]
9001cbc0:	910e      	str	r1, [sp, #56]	; 0x38
9001cbc2:	6812      	ldr	r2, [r2, #0]
9001cbc4:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
9001cbc8:	fb00 1303 	mla	r3, r0, r3, r1
9001cbcc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001cbd0:	930a      	str	r3, [sp, #40]	; 0x28
9001cbd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001cbd4:	681b      	ldr	r3, [r3, #0]
9001cbd6:	930d      	str	r3, [sp, #52]	; 0x34
9001cbd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001cbda:	685c      	ldr	r4, [r3, #4]
9001cbdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001cbde:	3404      	adds	r4, #4
9001cbe0:	43db      	mvns	r3, r3
9001cbe2:	b2db      	uxtb	r3, r3
9001cbe4:	930b      	str	r3, [sp, #44]	; 0x2c
9001cbe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cbe8:	2b00      	cmp	r3, #0
9001cbea:	dc03      	bgt.n	9001cbf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001cbec:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001cbee:	2b00      	cmp	r3, #0
9001cbf0:	f340 8255 	ble.w	9001d09e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001cbf4:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001cbf6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001cbfa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001cbfe:	1e48      	subs	r0, r1, #1
9001cc00:	1e55      	subs	r5, r2, #1
9001cc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cc04:	2b00      	cmp	r3, #0
9001cc06:	f340 80f9 	ble.w	9001cdfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001cc0a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001cc0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cc0e:	1436      	asrs	r6, r6, #16
9001cc10:	ea4f 4323 	mov.w	r3, r3, asr #16
9001cc14:	d406      	bmi.n	9001cc24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001cc16:	4286      	cmp	r6, r0
9001cc18:	da04      	bge.n	9001cc24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001cc1a:	2b00      	cmp	r3, #0
9001cc1c:	db02      	blt.n	9001cc24 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001cc1e:	42ab      	cmp	r3, r5
9001cc20:	f2c0 80ed 	blt.w	9001cdfe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
9001cc24:	3601      	adds	r6, #1
9001cc26:	f100 80da 	bmi.w	9001cdde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cc2a:	42b1      	cmp	r1, r6
9001cc2c:	f2c0 80d7 	blt.w	9001cdde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cc30:	3301      	adds	r3, #1
9001cc32:	f100 80d4 	bmi.w	9001cdde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cc36:	429a      	cmp	r2, r3
9001cc38:	f2c0 80d1 	blt.w	9001cdde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001cc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cc3e:	9311      	str	r3, [sp, #68]	; 0x44
9001cc40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001cc42:	930c      	str	r3, [sp, #48]	; 0x30
9001cc44:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001cc46:	2b00      	cmp	r3, #0
9001cc48:	f340 80fa 	ble.w	9001ce40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001cc4c:	9826      	ldr	r0, [sp, #152]	; 0x98
9001cc4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cc50:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001cc52:	68c6      	ldr	r6, [r0, #12]
9001cc54:	141d      	asrs	r5, r3, #16
9001cc56:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001cc58:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001cc5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cc5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001cc60:	1400      	asrs	r0, r0, #16
9001cc62:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001cc66:	6892      	ldr	r2, [r2, #8]
9001cc68:	f100 813e 	bmi.w	9001cee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cc6c:	1e57      	subs	r7, r2, #1
9001cc6e:	42b8      	cmp	r0, r7
9001cc70:	f280 813a 	bge.w	9001cee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cc74:	2d00      	cmp	r5, #0
9001cc76:	f2c0 8137 	blt.w	9001cee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cc7a:	1e77      	subs	r7, r6, #1
9001cc7c:	42bd      	cmp	r5, r7
9001cc7e:	f280 8133 	bge.w	9001cee8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001cc82:	b212      	sxth	r2, r2
9001cc84:	fb05 0002 	mla	r0, r5, r2, r0
9001cc88:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001cc8a:	f815 a000 	ldrb.w	sl, [r5, r0]
9001cc8e:	182e      	adds	r6, r5, r0
9001cc90:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
9001cc94:	eb04 050a 	add.w	r5, r4, sl
9001cc98:	2b00      	cmp	r3, #0
9001cc9a:	f000 8117 	beq.w	9001cecc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
9001cc9e:	f896 c001 	ldrb.w	ip, [r6, #1]
9001cca2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001cca6:	44a4      	add	ip, r4
9001cca8:	2900      	cmp	r1, #0
9001ccaa:	f000 8117 	beq.w	9001cedc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
9001ccae:	18b0      	adds	r0, r6, r2
9001ccb0:	5cb2      	ldrb	r2, [r6, r2]
9001ccb2:	7840      	ldrb	r0, [r0, #1]
9001ccb4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001ccb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001ccbc:	4422      	add	r2, r4
9001ccbe:	4420      	add	r0, r4
9001ccc0:	b29b      	uxth	r3, r3
9001ccc2:	f89c 7002 	ldrb.w	r7, [ip, #2]
9001ccc6:	b289      	uxth	r1, r1
9001ccc8:	f895 b002 	ldrb.w	fp, [r5, #2]
9001cccc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001ccce:	fb03 f901 	mul.w	r9, r3, r1
9001ccd2:	011b      	lsls	r3, r3, #4
9001ccd4:	f8b6 e000 	ldrh.w	lr, [r6]
9001ccd8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001ccdc:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
9001cce0:	eba3 0309 	sub.w	r3, r3, r9
9001cce4:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
9001cce8:	b289      	uxth	r1, r1
9001ccea:	f814 a00a 	ldrb.w	sl, [r4, sl]
9001ccee:	b29b      	uxth	r3, r3
9001ccf0:	eba8 0801 	sub.w	r8, r8, r1
9001ccf4:	435f      	muls	r7, r3
9001ccf6:	fa1f f888 	uxth.w	r8, r8
9001ccfa:	9310      	str	r3, [sp, #64]	; 0x40
9001ccfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ccfe:	fb08 770b 	mla	r7, r8, fp, r7
9001cd02:	f892 b002 	ldrb.w	fp, [r2, #2]
9001cd06:	fb01 770b 	mla	r7, r1, fp, r7
9001cd0a:	f890 b002 	ldrb.w	fp, [r0, #2]
9001cd0e:	fb09 770b 	mla	r7, r9, fp, r7
9001cd12:	ea4f 2b2e 	mov.w	fp, lr, asr #8
9001cd16:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001cd1a:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001cd1e:	fb1b fb03 	smulbb	fp, fp, r3
9001cd22:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cd24:	fb07 b706 	mla	r7, r7, r6, fp
9001cd28:	f895 b001 	ldrb.w	fp, [r5, #1]
9001cd2c:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001cd30:	f89c c000 	ldrb.w	ip, [ip]
9001cd34:	b2bf      	uxth	r7, r7
9001cd36:	435d      	muls	r5, r3
9001cd38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001cd3a:	fb08 550b 	mla	r5, r8, fp, r5
9001cd3e:	f892 b001 	ldrb.w	fp, [r2, #1]
9001cd42:	fb01 550b 	mla	r5, r1, fp, r5
9001cd46:	f890 b001 	ldrb.w	fp, [r0, #1]
9001cd4a:	fb09 550b 	mla	r5, r9, fp, r5
9001cd4e:	ea4f 0bee 	mov.w	fp, lr, asr #3
9001cd52:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001cd56:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001cd5a:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001cd5e:	fa5f fe8e 	uxtb.w	lr, lr
9001cd62:	fb1b fb03 	smulbb	fp, fp, r3
9001cd66:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cd68:	fb03 f30c 	mul.w	r3, r3, ip
9001cd6c:	f892 c000 	ldrb.w	ip, [r2]
9001cd70:	fb05 b506 	mla	r5, r5, r6, fp
9001cd74:	fb08 330a 	mla	r3, r8, sl, r3
9001cd78:	b2ad      	uxth	r5, r5
9001cd7a:	fb01 330c 	mla	r3, r1, ip, r3
9001cd7e:	f890 c000 	ldrb.w	ip, [r0]
9001cd82:	f105 0b01 	add.w	fp, r5, #1
9001cd86:	fb09 3c0c 	mla	ip, r9, ip, r3
9001cd8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001cd8c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001cd90:	fb1e fe03 	smulbb	lr, lr, r3
9001cd94:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001cd98:	1c7b      	adds	r3, r7, #1
9001cd9a:	096d      	lsrs	r5, r5, #5
9001cd9c:	fb0c e606 	mla	r6, ip, r6, lr
9001cda0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001cda4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001cda8:	b2b6      	uxth	r6, r6
9001cdaa:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
9001cdae:	1c77      	adds	r7, r6, #1
9001cdb0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
9001cdb4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001cdb8:	431f      	orrs	r7, r3
9001cdba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001cdbc:	433d      	orrs	r5, r7
9001cdbe:	801d      	strh	r5, [r3, #0]
9001cdc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001cdc2:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001cdc4:	3302      	adds	r3, #2
9001cdc6:	930c      	str	r3, [sp, #48]	; 0x30
9001cdc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cdca:	4413      	add	r3, r2
9001cdcc:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001cdce:	931f      	str	r3, [sp, #124]	; 0x7c
9001cdd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cdd2:	4413      	add	r3, r2
9001cdd4:	9320      	str	r3, [sp, #128]	; 0x80
9001cdd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001cdd8:	3b01      	subs	r3, #1
9001cdda:	9311      	str	r3, [sp, #68]	; 0x44
9001cddc:	e732      	b.n	9001cc44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001cdde:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cde0:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001cde2:	4433      	add	r3, r6
9001cde4:	9e22      	ldr	r6, [sp, #136]	; 0x88
9001cde6:	931f      	str	r3, [sp, #124]	; 0x7c
9001cde8:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001cdea:	4433      	add	r3, r6
9001cdec:	9320      	str	r3, [sp, #128]	; 0x80
9001cdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cdf0:	3b01      	subs	r3, #1
9001cdf2:	9309      	str	r3, [sp, #36]	; 0x24
9001cdf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001cdf6:	3302      	adds	r3, #2
9001cdf8:	930a      	str	r3, [sp, #40]	; 0x28
9001cdfa:	e702      	b.n	9001cc02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001cdfc:	d027      	beq.n	9001ce4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
9001cdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ce00:	9821      	ldr	r0, [sp, #132]	; 0x84
9001ce02:	3b01      	subs	r3, #1
9001ce04:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001ce06:	fb00 5003 	mla	r0, r0, r3, r5
9001ce0a:	1400      	asrs	r0, r0, #16
9001ce0c:	f53f af16 	bmi.w	9001cc3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001ce10:	3901      	subs	r1, #1
9001ce12:	4288      	cmp	r0, r1
9001ce14:	f6bf af12 	bge.w	9001cc3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001ce18:	9922      	ldr	r1, [sp, #136]	; 0x88
9001ce1a:	9820      	ldr	r0, [sp, #128]	; 0x80
9001ce1c:	fb01 0303 	mla	r3, r1, r3, r0
9001ce20:	141b      	asrs	r3, r3, #16
9001ce22:	f53f af0b 	bmi.w	9001cc3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001ce26:	3a01      	subs	r2, #1
9001ce28:	4293      	cmp	r3, r2
9001ce2a:	f6bf af07 	bge.w	9001cc3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001ce2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ce30:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
9001ce34:	9311      	str	r3, [sp, #68]	; 0x44
9001ce36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ce38:	930c      	str	r3, [sp, #48]	; 0x30
9001ce3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001ce3c:	2b00      	cmp	r3, #0
9001ce3e:	dc70      	bgt.n	9001cf22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
9001ce40:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ce42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001ce44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001ce48:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001ce4c:	930a      	str	r3, [sp, #40]	; 0x28
9001ce4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ce50:	2b00      	cmp	r3, #0
9001ce52:	f340 8124 	ble.w	9001d09e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001ce56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001ce5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001ce5c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ce60:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ce64:	eef0 6a62 	vmov.f32	s13, s5
9001ce68:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001ce6c:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ce70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ce74:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
9001ce78:	eef0 6a43 	vmov.f32	s13, s6
9001ce7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ce80:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
9001ce84:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001ce88:	ee61 7a27 	vmul.f32	s15, s2, s15
9001ce8c:	ee77 2a62 	vsub.f32	s5, s14, s5
9001ce90:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001ce94:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001ce98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001ce9c:	ee12 2a90 	vmov	r2, s5
9001cea0:	eef0 2a47 	vmov.f32	s5, s14
9001cea4:	fb92 f3f3 	sdiv	r3, r2, r3
9001cea8:	ee13 2a10 	vmov	r2, s6
9001ceac:	9321      	str	r3, [sp, #132]	; 0x84
9001ceae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001ceb0:	eeb0 3a67 	vmov.f32	s6, s15
9001ceb4:	fb92 f3f3 	sdiv	r3, r2, r3
9001ceb8:	9322      	str	r3, [sp, #136]	; 0x88
9001ceba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001cebe:	3b01      	subs	r3, #1
9001cec0:	930e      	str	r3, [sp, #56]	; 0x38
9001cec2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001cec4:	bf08      	it	eq
9001cec6:	4613      	moveq	r3, r2
9001cec8:	9309      	str	r3, [sp, #36]	; 0x24
9001ceca:	e68c      	b.n	9001cbe6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001cecc:	b149      	cbz	r1, 9001cee2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
9001cece:	5cb2      	ldrb	r2, [r6, r2]
9001ced0:	4628      	mov	r0, r5
9001ced2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001ced6:	4422      	add	r2, r4
9001ced8:	46ac      	mov	ip, r5
9001ceda:	e6f1      	b.n	9001ccc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001cedc:	4628      	mov	r0, r5
9001cede:	462a      	mov	r2, r5
9001cee0:	e6ee      	b.n	9001ccc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001cee2:	4628      	mov	r0, r5
9001cee4:	462a      	mov	r2, r5
9001cee6:	e7f7      	b.n	9001ced8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
9001cee8:	1c47      	adds	r7, r0, #1
9001ceea:	f53f af69 	bmi.w	9001cdc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001ceee:	42ba      	cmp	r2, r7
9001cef0:	f6ff af66 	blt.w	9001cdc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001cef4:	1c6f      	adds	r7, r5, #1
9001cef6:	f53f af63 	bmi.w	9001cdc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001cefa:	42be      	cmp	r6, r7
9001cefc:	f6ff af60 	blt.w	9001cdc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001cf00:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001cf02:	b236      	sxth	r6, r6
9001cf04:	b212      	sxth	r2, r2
9001cf06:	9002      	str	r0, [sp, #8]
9001cf08:	9601      	str	r6, [sp, #4]
9001cf0a:	9200      	str	r2, [sp, #0]
9001cf0c:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001cf0e:	e9cd 1705 	strd	r1, r7, [sp, #20]
9001cf12:	e9cd 5303 	strd	r5, r3, [sp, #12]
9001cf16:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
9001cf1a:	4623      	mov	r3, r4
9001cf1c:	f7ff fd59 	bl	9001c9d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
9001cf20:	e74e      	b.n	9001cdc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001cf22:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001cf24:	9820      	ldr	r0, [sp, #128]	; 0x80
9001cf26:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001cf2a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001cf2c:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001cf2e:	1400      	asrs	r0, r0, #16
9001cf30:	142d      	asrs	r5, r5, #16
9001cf32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001cf34:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001cf38:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001cf3c:	fb02 5000 	mla	r0, r2, r0, r5
9001cf40:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001cf42:	f815 9000 	ldrb.w	r9, [r5, r0]
9001cf46:	182e      	adds	r6, r5, r0
9001cf48:	eb09 0949 	add.w	r9, r9, r9, lsl #1
9001cf4c:	eb04 0509 	add.w	r5, r4, r9
9001cf50:	2b00      	cmp	r3, #0
9001cf52:	f000 8096 	beq.w	9001d082 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
9001cf56:	7877      	ldrb	r7, [r6, #1]
9001cf58:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001cf5c:	4427      	add	r7, r4
9001cf5e:	2900      	cmp	r1, #0
9001cf60:	f000 8097 	beq.w	9001d092 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
9001cf64:	18b0      	adds	r0, r6, r2
9001cf66:	5cb2      	ldrb	r2, [r6, r2]
9001cf68:	7840      	ldrb	r0, [r0, #1]
9001cf6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001cf6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001cf72:	4422      	add	r2, r4
9001cf74:	4420      	add	r0, r4
9001cf76:	b29b      	uxth	r3, r3
9001cf78:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001cf7a:	b289      	uxth	r1, r1
9001cf7c:	f895 b002 	ldrb.w	fp, [r5, #2]
9001cf80:	f8b6 c000 	ldrh.w	ip, [r6]
9001cf84:	fb03 f801 	mul.w	r8, r3, r1
9001cf88:	011b      	lsls	r3, r3, #4
9001cf8a:	78be      	ldrb	r6, [r7, #2]
9001cf8c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
9001cf90:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001cf94:	eba3 0308 	sub.w	r3, r3, r8
9001cf98:	f814 9009 	ldrb.w	r9, [r4, r9]
9001cf9c:	b289      	uxth	r1, r1
9001cf9e:	b29b      	uxth	r3, r3
9001cfa0:	ebae 0e01 	sub.w	lr, lr, r1
9001cfa4:	435e      	muls	r6, r3
9001cfa6:	fa1f fe8e 	uxth.w	lr, lr
9001cfaa:	9310      	str	r3, [sp, #64]	; 0x40
9001cfac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001cfae:	fb0e 660b 	mla	r6, lr, fp, r6
9001cfb2:	f892 b002 	ldrb.w	fp, [r2, #2]
9001cfb6:	fb01 660b 	mla	r6, r1, fp, r6
9001cfba:	f890 b002 	ldrb.w	fp, [r0, #2]
9001cfbe:	fb08 660b 	mla	r6, r8, fp, r6
9001cfc2:	ea4f 2b2c 	mov.w	fp, ip, asr #8
9001cfc6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001cfca:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001cfce:	fb1b fb03 	smulbb	fp, fp, r3
9001cfd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cfd4:	fb06 b60a 	mla	r6, r6, sl, fp
9001cfd8:	f895 b001 	ldrb.w	fp, [r5, #1]
9001cfdc:	787d      	ldrb	r5, [r7, #1]
9001cfde:	783f      	ldrb	r7, [r7, #0]
9001cfe0:	b2b6      	uxth	r6, r6
9001cfe2:	435d      	muls	r5, r3
9001cfe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001cfe6:	fb0e 550b 	mla	r5, lr, fp, r5
9001cfea:	f892 b001 	ldrb.w	fp, [r2, #1]
9001cfee:	fb01 550b 	mla	r5, r1, fp, r5
9001cff2:	f890 b001 	ldrb.w	fp, [r0, #1]
9001cff6:	fb08 550b 	mla	r5, r8, fp, r5
9001cffa:	ea4f 0bec 	mov.w	fp, ip, asr #3
9001cffe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d002:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001d006:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001d00a:	fa5f fc8c 	uxtb.w	ip, ip
9001d00e:	fb1b fb03 	smulbb	fp, fp, r3
9001d012:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d014:	437b      	muls	r3, r7
9001d016:	7817      	ldrb	r7, [r2, #0]
9001d018:	fb05 b50a 	mla	r5, r5, sl, fp
9001d01c:	fb0e 3309 	mla	r3, lr, r9, r3
9001d020:	b2ad      	uxth	r5, r5
9001d022:	fb01 3307 	mla	r3, r1, r7, r3
9001d026:	7807      	ldrb	r7, [r0, #0]
9001d028:	f105 0b01 	add.w	fp, r5, #1
9001d02c:	fb08 3707 	mla	r7, r8, r7, r3
9001d030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d032:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001d036:	fb1c fc03 	smulbb	ip, ip, r3
9001d03a:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001d03e:	1c73      	adds	r3, r6, #1
9001d040:	096d      	lsrs	r5, r5, #5
9001d042:	fb07 c70a 	mla	r7, r7, sl, ip
9001d046:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001d04a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d04e:	b2bf      	uxth	r7, r7
9001d050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d052:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001d056:	1c7a      	adds	r2, r7, #1
9001d058:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001d05c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001d060:	4316      	orrs	r6, r2
9001d062:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001d064:	432e      	orrs	r6, r5
9001d066:	f823 6b02 	strh.w	r6, [r3], #2
9001d06a:	930c      	str	r3, [sp, #48]	; 0x30
9001d06c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d06e:	4413      	add	r3, r2
9001d070:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001d072:	931f      	str	r3, [sp, #124]	; 0x7c
9001d074:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d076:	4413      	add	r3, r2
9001d078:	9320      	str	r3, [sp, #128]	; 0x80
9001d07a:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d07c:	3b01      	subs	r3, #1
9001d07e:	9311      	str	r3, [sp, #68]	; 0x44
9001d080:	e6db      	b.n	9001ce3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
9001d082:	b149      	cbz	r1, 9001d098 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
9001d084:	5cb2      	ldrb	r2, [r6, r2]
9001d086:	4628      	mov	r0, r5
9001d088:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d08c:	4422      	add	r2, r4
9001d08e:	462f      	mov	r7, r5
9001d090:	e771      	b.n	9001cf76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001d092:	4628      	mov	r0, r5
9001d094:	462a      	mov	r2, r5
9001d096:	e76e      	b.n	9001cf76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001d098:	4628      	mov	r0, r5
9001d09a:	462a      	mov	r2, r5
9001d09c:	e7f7      	b.n	9001d08e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
9001d09e:	b015      	add	sp, #84	; 0x54
9001d0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d0a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
9001d0a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d0a8:	880f      	ldrh	r7, [r1, #0]
9001d0aa:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
9001d0ae:	023c      	lsls	r4, r7, #8
9001d0b0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
9001d0b4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
9001d0b8:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
9001d0bc:	017c      	lsls	r4, r7, #5
9001d0be:	00ff      	lsls	r7, r7, #3
9001d0c0:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9001d0c4:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
9001d0c8:	b2ff      	uxtb	r7, r7
9001d0ca:	ea4b 0404 	orr.w	r4, fp, r4
9001d0ce:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
9001d0d2:	4327      	orrs	r7, r4
9001d0d4:	fb05 ca0e 	mla	sl, r5, lr, ip
9001d0d8:	2d00      	cmp	r5, #0
9001d0da:	9701      	str	r7, [sp, #4]
9001d0dc:	eb02 080a 	add.w	r8, r2, sl
9001d0e0:	db7e      	blt.n	9001d1e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001d0e2:	45a9      	cmp	r9, r5
9001d0e4:	dd7c      	ble.n	9001d1e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001d0e6:	f1bc 0f00 	cmp.w	ip, #0
9001d0ea:	db77      	blt.n	9001d1dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001d0ec:	45e6      	cmp	lr, ip
9001d0ee:	dd75      	ble.n	9001d1dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001d0f0:	f812 700a 	ldrb.w	r7, [r2, sl]
9001d0f4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001d0f8:	441f      	add	r7, r3
9001d0fa:	f11c 0201 	adds.w	r2, ip, #1
9001d0fe:	d472      	bmi.n	9001d1e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d100:	4596      	cmp	lr, r2
9001d102:	dd70      	ble.n	9001d1e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d104:	2800      	cmp	r0, #0
9001d106:	d06e      	beq.n	9001d1e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001d108:	f898 4001 	ldrb.w	r4, [r8, #1]
9001d10c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
9001d110:	441c      	add	r4, r3
9001d112:	3501      	adds	r5, #1
9001d114:	d46b      	bmi.n	9001d1ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d116:	45a9      	cmp	r9, r5
9001d118:	dd69      	ble.n	9001d1ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d11a:	2e00      	cmp	r6, #0
9001d11c:	d067      	beq.n	9001d1ee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001d11e:	f1bc 0f00 	cmp.w	ip, #0
9001d122:	db62      	blt.n	9001d1ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001d124:	45e6      	cmp	lr, ip
9001d126:	dd60      	ble.n	9001d1ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001d128:	f818 500e 	ldrb.w	r5, [r8, lr]
9001d12c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001d130:	441d      	add	r5, r3
9001d132:	f11c 0201 	adds.w	r2, ip, #1
9001d136:	d45d      	bmi.n	9001d1f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d138:	4596      	cmp	lr, r2
9001d13a:	dd5b      	ble.n	9001d1f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d13c:	2800      	cmp	r0, #0
9001d13e:	d059      	beq.n	9001d1f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001d140:	44c6      	add	lr, r8
9001d142:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001d146:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d14a:	4413      	add	r3, r2
9001d14c:	b280      	uxth	r0, r0
9001d14e:	f897 e002 	ldrb.w	lr, [r7, #2]
9001d152:	b2b2      	uxth	r2, r6
9001d154:	f897 9000 	ldrb.w	r9, [r7]
9001d158:	787f      	ldrb	r7, [r7, #1]
9001d15a:	fb00 f602 	mul.w	r6, r0, r2
9001d15e:	0100      	lsls	r0, r0, #4
9001d160:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
9001d164:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
9001d168:	1b80      	subs	r0, r0, r6
9001d16a:	fa1f fc82 	uxth.w	ip, r2
9001d16e:	b282      	uxth	r2, r0
9001d170:	78a0      	ldrb	r0, [r4, #2]
9001d172:	eba8 080c 	sub.w	r8, r8, ip
9001d176:	4350      	muls	r0, r2
9001d178:	fa1f f888 	uxth.w	r8, r8
9001d17c:	fb08 0e0e 	mla	lr, r8, lr, r0
9001d180:	78a8      	ldrb	r0, [r5, #2]
9001d182:	fb0c e000 	mla	r0, ip, r0, lr
9001d186:	f893 e002 	ldrb.w	lr, [r3, #2]
9001d18a:	fb06 0e0e 	mla	lr, r6, lr, r0
9001d18e:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
9001d192:	f894 e000 	ldrb.w	lr, [r4]
9001d196:	fb02 fe0e 	mul.w	lr, r2, lr
9001d19a:	fb08 e909 	mla	r9, r8, r9, lr
9001d19e:	f895 e000 	ldrb.w	lr, [r5]
9001d1a2:	fb0c 990e 	mla	r9, ip, lr, r9
9001d1a6:	f893 e000 	ldrb.w	lr, [r3]
9001d1aa:	785b      	ldrb	r3, [r3, #1]
9001d1ac:	fb06 9e0e 	mla	lr, r6, lr, r9
9001d1b0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001d1b4:	ea4e 0e00 	orr.w	lr, lr, r0
9001d1b8:	7860      	ldrb	r0, [r4, #1]
9001d1ba:	4350      	muls	r0, r2
9001d1bc:	786a      	ldrb	r2, [r5, #1]
9001d1be:	fb08 0007 	mla	r0, r8, r7, r0
9001d1c2:	fb0c 0202 	mla	r2, ip, r2, r0
9001d1c6:	fb06 2303 	mla	r3, r6, r3, r2
9001d1ca:	095b      	lsrs	r3, r3, #5
9001d1cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001d1d0:	ea4e 0303 	orr.w	r3, lr, r3
9001d1d4:	800b      	strh	r3, [r1, #0]
9001d1d6:	b003      	add	sp, #12
9001d1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d1dc:	af01      	add	r7, sp, #4
9001d1de:	e78c      	b.n	9001d0fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
9001d1e0:	ac01      	add	r4, sp, #4
9001d1e2:	4627      	mov	r7, r4
9001d1e4:	e795      	b.n	9001d112 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001d1e6:	ac01      	add	r4, sp, #4
9001d1e8:	e793      	b.n	9001d112 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001d1ea:	ad01      	add	r5, sp, #4
9001d1ec:	e7a1      	b.n	9001d132 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
9001d1ee:	ab01      	add	r3, sp, #4
9001d1f0:	461d      	mov	r5, r3
9001d1f2:	e7ab      	b.n	9001d14c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
9001d1f4:	ab01      	add	r3, sp, #4
9001d1f6:	e7a9      	b.n	9001d14c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

9001d1f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d1fc:	b08f      	sub	sp, #60	; 0x3c
9001d1fe:	920c      	str	r2, [sp, #48]	; 0x30
9001d200:	9a1d      	ldr	r2, [sp, #116]	; 0x74
9001d202:	900d      	str	r0, [sp, #52]	; 0x34
9001d204:	910a      	str	r1, [sp, #40]	; 0x28
9001d206:	6850      	ldr	r0, [r2, #4]
9001d208:	9306      	str	r3, [sp, #24]
9001d20a:	6812      	ldr	r2, [r2, #0]
9001d20c:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
9001d210:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
9001d214:	fb00 1303 	mla	r3, r0, r3, r1
9001d218:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d21c:	9307      	str	r3, [sp, #28]
9001d21e:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d220:	681b      	ldr	r3, [r3, #0]
9001d222:	9308      	str	r3, [sp, #32]
9001d224:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d226:	685c      	ldr	r4, [r3, #4]
9001d228:	3404      	adds	r4, #4
9001d22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d22c:	2b00      	cmp	r3, #0
9001d22e:	dc03      	bgt.n	9001d238 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001d230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d232:	2b00      	cmp	r3, #0
9001d234:	f340 81d5 	ble.w	9001d5e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001d238:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d23a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d23e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001d242:	1e48      	subs	r0, r1, #1
9001d244:	1e56      	subs	r6, r2, #1
9001d246:	9b06      	ldr	r3, [sp, #24]
9001d248:	2b00      	cmp	r3, #0
9001d24a:	f340 80b6 	ble.w	9001d3ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9001d24e:	ea5f 472b 	movs.w	r7, fp, asr #16
9001d252:	ea4f 4325 	mov.w	r3, r5, asr #16
9001d256:	d406      	bmi.n	9001d266 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d258:	4287      	cmp	r7, r0
9001d25a:	da04      	bge.n	9001d266 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d25c:	2b00      	cmp	r3, #0
9001d25e:	db02      	blt.n	9001d266 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d260:	42b3      	cmp	r3, r6
9001d262:	f2c0 80ab 	blt.w	9001d3bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
9001d266:	3701      	adds	r7, #1
9001d268:	f100 809c 	bmi.w	9001d3a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d26c:	42b9      	cmp	r1, r7
9001d26e:	f2c0 8099 	blt.w	9001d3a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d272:	3301      	adds	r3, #1
9001d274:	f100 8096 	bmi.w	9001d3a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d278:	429a      	cmp	r2, r3
9001d27a:	f2c0 8093 	blt.w	9001d3a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001d27e:	9b06      	ldr	r3, [sp, #24]
9001d280:	930b      	str	r3, [sp, #44]	; 0x2c
9001d282:	9b07      	ldr	r3, [sp, #28]
9001d284:	9309      	str	r3, [sp, #36]	; 0x24
9001d286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d288:	2b00      	cmp	r3, #0
9001d28a:	f340 80b4 	ble.w	9001d3f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001d28e:	9820      	ldr	r0, [sp, #128]	; 0x80
9001d290:	142e      	asrs	r6, r5, #16
9001d292:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d294:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001d298:	68c7      	ldr	r7, [r0, #12]
9001d29a:	ea5f 402b 	movs.w	r0, fp, asr #16
9001d29e:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001d2a2:	6892      	ldr	r2, [r2, #8]
9001d2a4:	f100 80fb 	bmi.w	9001d49e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d2a8:	f102 3cff 	add.w	ip, r2, #4294967295
9001d2ac:	4560      	cmp	r0, ip
9001d2ae:	f280 80f6 	bge.w	9001d49e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d2b2:	2e00      	cmp	r6, #0
9001d2b4:	f2c0 80f3 	blt.w	9001d49e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d2b8:	f107 3cff 	add.w	ip, r7, #4294967295
9001d2bc:	4566      	cmp	r6, ip
9001d2be:	f280 80ee 	bge.w	9001d49e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001d2c2:	b212      	sxth	r2, r2
9001d2c4:	fb06 0002 	mla	r0, r6, r2, r0
9001d2c8:	9e08      	ldr	r6, [sp, #32]
9001d2ca:	1837      	adds	r7, r6, r0
9001d2cc:	5c30      	ldrb	r0, [r6, r0]
9001d2ce:	eb00 0840 	add.w	r8, r0, r0, lsl #1
9001d2d2:	eb04 0c08 	add.w	ip, r4, r8
9001d2d6:	2b00      	cmp	r3, #0
9001d2d8:	f000 80d3 	beq.w	9001d482 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
9001d2dc:	787e      	ldrb	r6, [r7, #1]
9001d2de:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001d2e2:	4426      	add	r6, r4
9001d2e4:	2900      	cmp	r1, #0
9001d2e6:	f000 80d4 	beq.w	9001d492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001d2ea:	18b8      	adds	r0, r7, r2
9001d2ec:	5cba      	ldrb	r2, [r7, r2]
9001d2ee:	7840      	ldrb	r0, [r0, #1]
9001d2f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d2f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d2f8:	4422      	add	r2, r4
9001d2fa:	4420      	add	r0, r4
9001d2fc:	b29b      	uxth	r3, r3
9001d2fe:	78b7      	ldrb	r7, [r6, #2]
9001d300:	b289      	uxth	r1, r1
9001d302:	f89c a002 	ldrb.w	sl, [ip, #2]
9001d306:	f89c c001 	ldrb.w	ip, [ip, #1]
9001d30a:	fb03 f901 	mul.w	r9, r3, r1
9001d30e:	011b      	lsls	r3, r3, #4
9001d310:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d314:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001d318:	eba3 0309 	sub.w	r3, r3, r9
9001d31c:	b289      	uxth	r1, r1
9001d31e:	b29b      	uxth	r3, r3
9001d320:	ebae 0e01 	sub.w	lr, lr, r1
9001d324:	435f      	muls	r7, r3
9001d326:	fa1f fe8e 	uxth.w	lr, lr
9001d32a:	fb0e 770a 	mla	r7, lr, sl, r7
9001d32e:	f892 a002 	ldrb.w	sl, [r2, #2]
9001d332:	fb01 770a 	mla	r7, r1, sl, r7
9001d336:	f890 a002 	ldrb.w	sl, [r0, #2]
9001d33a:	fb09 7a0a 	mla	sl, r9, sl, r7
9001d33e:	f814 7008 	ldrb.w	r7, [r4, r8]
9001d342:	f896 8000 	ldrb.w	r8, [r6]
9001d346:	7876      	ldrb	r6, [r6, #1]
9001d348:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001d34c:	fb03 f808 	mul.w	r8, r3, r8
9001d350:	4373      	muls	r3, r6
9001d352:	fb0e 8807 	mla	r8, lr, r7, r8
9001d356:	7817      	ldrb	r7, [r2, #0]
9001d358:	fb0e 330c 	mla	r3, lr, ip, r3
9001d35c:	fb01 8807 	mla	r8, r1, r7, r8
9001d360:	7807      	ldrb	r7, [r0, #0]
9001d362:	fb09 8707 	mla	r7, r9, r7, r8
9001d366:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001d36a:	ea47 070a 	orr.w	r7, r7, sl
9001d36e:	f892 a001 	ldrb.w	sl, [r2, #1]
9001d372:	fb01 310a 	mla	r1, r1, sl, r3
9001d376:	f890 a001 	ldrb.w	sl, [r0, #1]
9001d37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d37c:	fb09 1a0a 	mla	sl, r9, sl, r1
9001d380:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d384:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d388:	ea47 070a 	orr.w	r7, r7, sl
9001d38c:	801f      	strh	r7, [r3, #0]
9001d38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d390:	3302      	adds	r3, #2
9001d392:	9309      	str	r3, [sp, #36]	; 0x24
9001d394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d396:	449b      	add	fp, r3
9001d398:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d39a:	441d      	add	r5, r3
9001d39c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d39e:	3b01      	subs	r3, #1
9001d3a0:	930b      	str	r3, [sp, #44]	; 0x2c
9001d3a2:	e770      	b.n	9001d286 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001d3a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d3a6:	449b      	add	fp, r3
9001d3a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d3aa:	441d      	add	r5, r3
9001d3ac:	9b06      	ldr	r3, [sp, #24]
9001d3ae:	3b01      	subs	r3, #1
9001d3b0:	9306      	str	r3, [sp, #24]
9001d3b2:	9b07      	ldr	r3, [sp, #28]
9001d3b4:	3302      	adds	r3, #2
9001d3b6:	9307      	str	r3, [sp, #28]
9001d3b8:	e745      	b.n	9001d246 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
9001d3ba:	d023      	beq.n	9001d404 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
9001d3bc:	9b06      	ldr	r3, [sp, #24]
9001d3be:	981b      	ldr	r0, [sp, #108]	; 0x6c
9001d3c0:	3b01      	subs	r3, #1
9001d3c2:	fb00 b003 	mla	r0, r0, r3, fp
9001d3c6:	1400      	asrs	r0, r0, #16
9001d3c8:	f53f af59 	bmi.w	9001d27e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d3cc:	3901      	subs	r1, #1
9001d3ce:	4288      	cmp	r0, r1
9001d3d0:	f6bf af55 	bge.w	9001d27e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d3d4:	991c      	ldr	r1, [sp, #112]	; 0x70
9001d3d6:	fb01 5303 	mla	r3, r1, r3, r5
9001d3da:	141b      	asrs	r3, r3, #16
9001d3dc:	f53f af4f 	bmi.w	9001d27e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d3e0:	3a01      	subs	r2, #1
9001d3e2:	4293      	cmp	r3, r2
9001d3e4:	f6bf af4b 	bge.w	9001d27e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001d3e8:	9b06      	ldr	r3, [sp, #24]
9001d3ea:	9309      	str	r3, [sp, #36]	; 0x24
9001d3ec:	9b07      	ldr	r3, [sp, #28]
9001d3ee:	930b      	str	r3, [sp, #44]	; 0x2c
9001d3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d3f2:	2b00      	cmp	r3, #0
9001d3f4:	dc70      	bgt.n	9001d4d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9001d3f6:	9b06      	ldr	r3, [sp, #24]
9001d3f8:	9a07      	ldr	r2, [sp, #28]
9001d3fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d3fe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d402:	9307      	str	r3, [sp, #28]
9001d404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d406:	2b00      	cmp	r3, #0
9001d408:	f340 80eb 	ble.w	9001d5e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001d40c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001d410:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001d412:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d416:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d41a:	eef0 6a62 	vmov.f32	s13, s5
9001d41e:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001d422:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d426:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d42a:	ee16 ba90 	vmov	fp, s13
9001d42e:	eef0 6a43 	vmov.f32	s13, s6
9001d432:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d436:	ee16 5a90 	vmov	r5, s13
9001d43a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d43e:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d442:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d446:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d44a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d44e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d452:	ee12 2a90 	vmov	r2, s5
9001d456:	eef0 2a47 	vmov.f32	s5, s14
9001d45a:	fb92 f3f3 	sdiv	r3, r2, r3
9001d45e:	ee13 2a10 	vmov	r2, s6
9001d462:	931b      	str	r3, [sp, #108]	; 0x6c
9001d464:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001d466:	eeb0 3a67 	vmov.f32	s6, s15
9001d46a:	fb92 f3f3 	sdiv	r3, r2, r3
9001d46e:	931c      	str	r3, [sp, #112]	; 0x70
9001d470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001d474:	3b01      	subs	r3, #1
9001d476:	930a      	str	r3, [sp, #40]	; 0x28
9001d478:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001d47a:	bf08      	it	eq
9001d47c:	4613      	moveq	r3, r2
9001d47e:	9306      	str	r3, [sp, #24]
9001d480:	e6d3      	b.n	9001d22a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001d482:	b149      	cbz	r1, 9001d498 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
9001d484:	5cba      	ldrb	r2, [r7, r2]
9001d486:	4660      	mov	r0, ip
9001d488:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d48c:	4422      	add	r2, r4
9001d48e:	4666      	mov	r6, ip
9001d490:	e734      	b.n	9001d2fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001d492:	4660      	mov	r0, ip
9001d494:	4662      	mov	r2, ip
9001d496:	e731      	b.n	9001d2fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001d498:	4660      	mov	r0, ip
9001d49a:	4662      	mov	r2, ip
9001d49c:	e7f7      	b.n	9001d48e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001d49e:	f110 0c01 	adds.w	ip, r0, #1
9001d4a2:	f53f af74 	bmi.w	9001d38e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d4a6:	4562      	cmp	r2, ip
9001d4a8:	f6ff af71 	blt.w	9001d38e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d4ac:	f116 0c01 	adds.w	ip, r6, #1
9001d4b0:	f53f af6d 	bmi.w	9001d38e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d4b4:	4567      	cmp	r7, ip
9001d4b6:	f6ff af6a 	blt.w	9001d38e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d4ba:	b23f      	sxth	r7, r7
9001d4bc:	b212      	sxth	r2, r2
9001d4be:	9701      	str	r7, [sp, #4]
9001d4c0:	9200      	str	r2, [sp, #0]
9001d4c2:	e9cd 3104 	strd	r3, r1, [sp, #16]
9001d4c6:	e9cd 0602 	strd	r0, r6, [sp, #8]
9001d4ca:	4623      	mov	r3, r4
9001d4cc:	980d      	ldr	r0, [sp, #52]	; 0x34
9001d4ce:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001d4d2:	f7ff fde7 	bl	9001d0a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
9001d4d6:	e75a      	b.n	9001d38e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001d4d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d4da:	ea4f 462b 	mov.w	r6, fp, asr #16
9001d4de:	1428      	asrs	r0, r5, #16
9001d4e0:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001d4e4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001d4e8:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001d4ec:	fb02 6000 	mla	r0, r2, r0, r6
9001d4f0:	9e08      	ldr	r6, [sp, #32]
9001d4f2:	f816 8000 	ldrb.w	r8, [r6, r0]
9001d4f6:	1837      	adds	r7, r6, r0
9001d4f8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001d4fc:	eb04 0c08 	add.w	ip, r4, r8
9001d500:	2b00      	cmp	r3, #0
9001d502:	d060      	beq.n	9001d5c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
9001d504:	787e      	ldrb	r6, [r7, #1]
9001d506:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001d50a:	4426      	add	r6, r4
9001d50c:	2900      	cmp	r1, #0
9001d50e:	d062      	beq.n	9001d5d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
9001d510:	18b8      	adds	r0, r7, r2
9001d512:	5cba      	ldrb	r2, [r7, r2]
9001d514:	7840      	ldrb	r0, [r0, #1]
9001d516:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d51a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d51e:	4422      	add	r2, r4
9001d520:	4420      	add	r0, r4
9001d522:	b29b      	uxth	r3, r3
9001d524:	78b7      	ldrb	r7, [r6, #2]
9001d526:	b289      	uxth	r1, r1
9001d528:	f89c a002 	ldrb.w	sl, [ip, #2]
9001d52c:	f89c c001 	ldrb.w	ip, [ip, #1]
9001d530:	fb03 f901 	mul.w	r9, r3, r1
9001d534:	011b      	lsls	r3, r3, #4
9001d536:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d53a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001d53e:	eba3 0309 	sub.w	r3, r3, r9
9001d542:	b289      	uxth	r1, r1
9001d544:	b29b      	uxth	r3, r3
9001d546:	ebae 0e01 	sub.w	lr, lr, r1
9001d54a:	435f      	muls	r7, r3
9001d54c:	fa1f fe8e 	uxth.w	lr, lr
9001d550:	fb0e 770a 	mla	r7, lr, sl, r7
9001d554:	f892 a002 	ldrb.w	sl, [r2, #2]
9001d558:	fb01 770a 	mla	r7, r1, sl, r7
9001d55c:	f890 a002 	ldrb.w	sl, [r0, #2]
9001d560:	fb09 7a0a 	mla	sl, r9, sl, r7
9001d564:	f814 7008 	ldrb.w	r7, [r4, r8]
9001d568:	f896 8000 	ldrb.w	r8, [r6]
9001d56c:	7876      	ldrb	r6, [r6, #1]
9001d56e:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001d572:	fb03 f808 	mul.w	r8, r3, r8
9001d576:	4373      	muls	r3, r6
9001d578:	7856      	ldrb	r6, [r2, #1]
9001d57a:	fb0e 8807 	mla	r8, lr, r7, r8
9001d57e:	7817      	ldrb	r7, [r2, #0]
9001d580:	fb0e 330c 	mla	r3, lr, ip, r3
9001d584:	fb01 8807 	mla	r8, r1, r7, r8
9001d588:	7807      	ldrb	r7, [r0, #0]
9001d58a:	fb01 3306 	mla	r3, r1, r6, r3
9001d58e:	fb09 8707 	mla	r7, r9, r7, r8
9001d592:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001d596:	ea47 070a 	orr.w	r7, r7, sl
9001d59a:	f890 a001 	ldrb.w	sl, [r0, #1]
9001d59e:	fb09 3a0a 	mla	sl, r9, sl, r3
9001d5a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d5a4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d5a8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d5ac:	ea47 070a 	orr.w	r7, r7, sl
9001d5b0:	f823 7b02 	strh.w	r7, [r3], #2
9001d5b4:	930b      	str	r3, [sp, #44]	; 0x2c
9001d5b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d5b8:	449b      	add	fp, r3
9001d5ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d5bc:	441d      	add	r5, r3
9001d5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d5c0:	3b01      	subs	r3, #1
9001d5c2:	9309      	str	r3, [sp, #36]	; 0x24
9001d5c4:	e714      	b.n	9001d3f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
9001d5c6:	b149      	cbz	r1, 9001d5dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
9001d5c8:	5cba      	ldrb	r2, [r7, r2]
9001d5ca:	4660      	mov	r0, ip
9001d5cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d5d0:	4422      	add	r2, r4
9001d5d2:	4666      	mov	r6, ip
9001d5d4:	e7a5      	b.n	9001d522 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001d5d6:	4660      	mov	r0, ip
9001d5d8:	4662      	mov	r2, ip
9001d5da:	e7a2      	b.n	9001d522 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001d5dc:	4660      	mov	r0, ip
9001d5de:	4662      	mov	r2, ip
9001d5e0:	e7f7      	b.n	9001d5d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
9001d5e2:	b00f      	add	sp, #60	; 0x3c
9001d5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d5e8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
9001d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d5ec:	b085      	sub	sp, #20
9001d5ee:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
9001d5f2:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
9001d5f6:	9102      	str	r1, [sp, #8]
9001d5f8:	2c00      	cmp	r4, #0
9001d5fa:	fb04 710c 	mla	r1, r4, ip, r7
9001d5fe:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
9001d602:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
9001d606:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
9001d60a:	eb02 0e01 	add.w	lr, r2, r1
9001d60e:	f2c0 8122 	blt.w	9001d856 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001d612:	45a0      	cmp	r8, r4
9001d614:	f340 811f 	ble.w	9001d856 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001d618:	2f00      	cmp	r7, #0
9001d61a:	f2c0 811a 	blt.w	9001d852 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001d61e:	45bc      	cmp	ip, r7
9001d620:	f340 8117 	ble.w	9001d852 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001d624:	5c52      	ldrb	r2, [r2, r1]
9001d626:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
9001d62a:	1c7a      	adds	r2, r7, #1
9001d62c:	f100 8116 	bmi.w	9001d85c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001d630:	4594      	cmp	ip, r2
9001d632:	f340 8113 	ble.w	9001d85c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001d636:	2e00      	cmp	r6, #0
9001d638:	f000 8112 	beq.w	9001d860 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
9001d63c:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001d640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001d644:	3401      	adds	r4, #1
9001d646:	f100 810f 	bmi.w	9001d868 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001d64a:	45a0      	cmp	r8, r4
9001d64c:	f340 810c 	ble.w	9001d868 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001d650:	2800      	cmp	r0, #0
9001d652:	f000 810c 	beq.w	9001d86e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
9001d656:	2f00      	cmp	r7, #0
9001d658:	f2c0 8104 	blt.w	9001d864 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001d65c:	45bc      	cmp	ip, r7
9001d65e:	f340 8101 	ble.w	9001d864 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001d662:	f81e 200c 	ldrb.w	r2, [lr, ip]
9001d666:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
9001d66a:	3701      	adds	r7, #1
9001d66c:	f100 8102 	bmi.w	9001d874 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001d670:	45bc      	cmp	ip, r7
9001d672:	f340 80ff 	ble.w	9001d874 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001d676:	2e00      	cmp	r6, #0
9001d678:	f000 80fe 	beq.w	9001d878 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
9001d67c:	44f4      	add	ip, lr
9001d67e:	f89c 2001 	ldrb.w	r2, [ip, #1]
9001d682:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
9001d686:	b2b6      	uxth	r6, r6
9001d688:	b280      	uxth	r0, r0
9001d68a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9001d68e:	fb00 fe06 	mul.w	lr, r0, r6
9001d692:	0136      	lsls	r6, r6, #4
9001d694:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9001d698:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9001d69c:	eba6 070e 	sub.w	r7, r6, lr
9001d6a0:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9001d6a4:	ea4f 6914 	mov.w	r9, r4, lsr #24
9001d6a8:	b280      	uxth	r0, r0
9001d6aa:	b2bf      	uxth	r7, r7
9001d6ac:	1a1b      	subs	r3, r3, r0
9001d6ae:	ea4f 6812 	mov.w	r8, r2, lsr #24
9001d6b2:	fb0a f607 	mul.w	r6, sl, r7
9001d6b6:	b29b      	uxth	r3, r3
9001d6b8:	fb0b 6603 	mla	r6, fp, r3, r6
9001d6bc:	fb00 6609 	mla	r6, r0, r9, r6
9001d6c0:	fb0e 6608 	mla	r6, lr, r8, r6
9001d6c4:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001d6c8:	9600      	str	r6, [sp, #0]
9001d6ca:	2e00      	cmp	r6, #0
9001d6cc:	f000 80be 	beq.w	9001d84c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
9001d6d0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001d6d4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9001d6d8:	9e02      	ldr	r6, [sp, #8]
9001d6da:	fb0b fc0c 	mul.w	ip, fp, ip
9001d6de:	fb0b f505 	mul.w	r5, fp, r5
9001d6e2:	8836      	ldrh	r6, [r6, #0]
9001d6e4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9001d6e8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001d6ec:	9501      	str	r5, [sp, #4]
9001d6ee:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
9001d6f2:	44dc      	add	ip, fp
9001d6f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001d6f8:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
9001d6fc:	9503      	str	r5, [sp, #12]
9001d6fe:	9d01      	ldr	r5, [sp, #4]
9001d700:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9001d704:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001d708:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9001d70c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001d710:	fb0a fc0c 	mul.w	ip, sl, ip
9001d714:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9001d718:	fb0a fa01 	mul.w	sl, sl, r1
9001d71c:	ea4f 251c 	mov.w	r5, ip, lsr #8
9001d720:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001d724:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9001d728:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001d72c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9001d730:	4465      	add	r5, ip
9001d732:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001d736:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
9001d73a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001d73e:	fb09 fc0c 	mul.w	ip, r9, ip
9001d742:	0a2d      	lsrs	r5, r5, #8
9001d744:	fb09 f904 	mul.w	r9, r9, r4
9001d748:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001d74c:	ea4f 211c 	mov.w	r1, ip, lsr #8
9001d750:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001d754:	f509 7480 	add.w	r4, r9, #256	; 0x100
9001d758:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001d75c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001d760:	437d      	muls	r5, r7
9001d762:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9001d766:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
9001d76a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001d76e:	4461      	add	r1, ip
9001d770:	fb08 f404 	mul.w	r4, r8, r4
9001d774:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001d778:	fb08 f802 	mul.w	r8, r8, r2
9001d77c:	0a09      	lsrs	r1, r1, #8
9001d77e:	0a22      	lsrs	r2, r4, #8
9001d780:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9001d784:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001d788:	fb07 f70a 	mul.w	r7, r7, sl
9001d78c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001d790:	4414      	add	r4, r2
9001d792:	f508 7280 	add.w	r2, r8, #256	; 0x100
9001d796:	0a24      	lsrs	r4, r4, #8
9001d798:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9001d79c:	9a03      	ldr	r2, [sp, #12]
9001d79e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9001d7a2:	fb02 5503 	mla	r5, r2, r3, r5
9001d7a6:	ea4f 2818 	mov.w	r8, r8, lsr #8
9001d7aa:	9a00      	ldr	r2, [sp, #0]
9001d7ac:	fb04 540e 	mla	r4, r4, lr, r5
9001d7b0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
9001d7b4:	1235      	asrs	r5, r6, #8
9001d7b6:	fb01 4100 	mla	r1, r1, r0, r4
9001d7ba:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001d7be:	0a09      	lsrs	r1, r1, #8
9001d7c0:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
9001d7c4:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
9001d7c8:	fb03 7101 	mla	r1, r3, r1, r7
9001d7cc:	fb0e 1e08 	mla	lr, lr, r8, r1
9001d7d0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9001d7d4:	fb00 e101 	mla	r1, r0, r1, lr
9001d7d8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
9001d7dc:	b287      	uxth	r7, r0
9001d7de:	0a09      	lsrs	r1, r1, #8
9001d7e0:	437a      	muls	r2, r7
9001d7e2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001d7e6:	1c53      	adds	r3, r2, #1
9001d7e8:	4321      	orrs	r1, r4
9001d7ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001d7ee:	0c0a      	lsrs	r2, r1, #16
9001d7f0:	f3c1 2407 	ubfx	r4, r1, #8, #8
9001d7f4:	ea6f 2313 	mvn.w	r3, r3, lsr #8
9001d7f8:	b2c8      	uxtb	r0, r1
9001d7fa:	fb12 f207 	smulbb	r2, r2, r7
9001d7fe:	fb14 f407 	smulbb	r4, r4, r7
9001d802:	b2db      	uxtb	r3, r3
9001d804:	fb10 f007 	smulbb	r0, r0, r7
9001d808:	fb05 2503 	mla	r5, r5, r3, r2
9001d80c:	10f2      	asrs	r2, r6, #3
9001d80e:	00f6      	lsls	r6, r6, #3
9001d810:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001d814:	b2ad      	uxth	r5, r5
9001d816:	b2f6      	uxtb	r6, r6
9001d818:	fb02 4203 	mla	r2, r2, r3, r4
9001d81c:	fb06 0303 	mla	r3, r6, r3, r0
9001d820:	b294      	uxth	r4, r2
9001d822:	b299      	uxth	r1, r3
9001d824:	1c6b      	adds	r3, r5, #1
9001d826:	1c62      	adds	r2, r4, #1
9001d828:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001d82c:	1c4b      	adds	r3, r1, #1
9001d82e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9001d832:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001d836:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001d83a:	0952      	lsrs	r2, r2, #5
9001d83c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001d840:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d844:	432b      	orrs	r3, r5
9001d846:	4313      	orrs	r3, r2
9001d848:	9a02      	ldr	r2, [sp, #8]
9001d84a:	8013      	strh	r3, [r2, #0]
9001d84c:	b005      	add	sp, #20
9001d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d852:	2500      	movs	r5, #0
9001d854:	e6e9      	b.n	9001d62a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
9001d856:	2100      	movs	r1, #0
9001d858:	460d      	mov	r5, r1
9001d85a:	e6f3      	b.n	9001d644 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001d85c:	2100      	movs	r1, #0
9001d85e:	e6f1      	b.n	9001d644 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001d860:	4631      	mov	r1, r6
9001d862:	e6ef      	b.n	9001d644 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001d864:	2400      	movs	r4, #0
9001d866:	e700      	b.n	9001d66a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
9001d868:	2200      	movs	r2, #0
9001d86a:	4614      	mov	r4, r2
9001d86c:	e70b      	b.n	9001d686 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001d86e:	4602      	mov	r2, r0
9001d870:	4604      	mov	r4, r0
9001d872:	e708      	b.n	9001d686 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001d874:	2200      	movs	r2, #0
9001d876:	e706      	b.n	9001d686 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001d878:	4632      	mov	r2, r6
9001d87a:	e704      	b.n	9001d686 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

9001d87c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d880:	b09f      	sub	sp, #124	; 0x7c
9001d882:	921b      	str	r2, [sp, #108]	; 0x6c
9001d884:	9309      	str	r3, [sp, #36]	; 0x24
9001d886:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
9001d888:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
9001d88c:	901d      	str	r0, [sp, #116]	; 0x74
9001d88e:	931c      	str	r3, [sp, #112]	; 0x70
9001d890:	6850      	ldr	r0, [r2, #4]
9001d892:	9119      	str	r1, [sp, #100]	; 0x64
9001d894:	6812      	ldr	r2, [r2, #0]
9001d896:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001d898:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
9001d89c:	fb00 1303 	mla	r3, r0, r3, r1
9001d8a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d8a4:	930c      	str	r3, [sp, #48]	; 0x30
9001d8a6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001d8a8:	681b      	ldr	r3, [r3, #0]
9001d8aa:	9312      	str	r3, [sp, #72]	; 0x48
9001d8ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001d8ae:	685e      	ldr	r6, [r3, #4]
9001d8b0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
9001d8b4:	3604      	adds	r6, #4
9001d8b6:	930d      	str	r3, [sp, #52]	; 0x34
9001d8b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001d8ba:	2b00      	cmp	r3, #0
9001d8bc:	dc03      	bgt.n	9001d8c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001d8be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001d8c0:	2b00      	cmp	r3, #0
9001d8c2:	f340 8387 	ble.w	9001dfd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001d8c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001d8c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d8cc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001d8d0:	1e48      	subs	r0, r1, #1
9001d8d2:	1e57      	subs	r7, r2, #1
9001d8d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d8d6:	2b00      	cmp	r3, #0
9001d8d8:	f340 8194 	ble.w	9001dc04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
9001d8dc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001d8de:	142b      	asrs	r3, r5, #16
9001d8e0:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001d8e4:	d406      	bmi.n	9001d8f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d8e6:	4584      	cmp	ip, r0
9001d8e8:	da04      	bge.n	9001d8f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d8ea:	2b00      	cmp	r3, #0
9001d8ec:	db02      	blt.n	9001d8f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001d8ee:	42bb      	cmp	r3, r7
9001d8f0:	f2c0 8189 	blt.w	9001dc06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001d8f4:	f11c 0c01 	adds.w	ip, ip, #1
9001d8f8:	f100 8177 	bmi.w	9001dbea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001d8fc:	4561      	cmp	r1, ip
9001d8fe:	f2c0 8174 	blt.w	9001dbea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001d902:	3301      	adds	r3, #1
9001d904:	f100 8171 	bmi.w	9001dbea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001d908:	429a      	cmp	r2, r3
9001d90a:	f2c0 816e 	blt.w	9001dbea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001d90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d910:	9f0c      	ldr	r7, [sp, #48]	; 0x30
9001d912:	931a      	str	r3, [sp, #104]	; 0x68
9001d914:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001d916:	2b00      	cmp	r3, #0
9001d918:	f340 8193 	ble.w	9001dc42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
9001d91c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001d91e:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001d922:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001d926:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001d92a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001d92c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
9001d930:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001d932:	141b      	asrs	r3, r3, #16
9001d934:	f100 81d6 	bmi.w	9001dce4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001d938:	f100 38ff 	add.w	r8, r0, #4294967295
9001d93c:	4543      	cmp	r3, r8
9001d93e:	f280 81d1 	bge.w	9001dce4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001d942:	f1bc 0f00 	cmp.w	ip, #0
9001d946:	f2c0 81cd 	blt.w	9001dce4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001d94a:	f10e 38ff 	add.w	r8, lr, #4294967295
9001d94e:	45c4      	cmp	ip, r8
9001d950:	f280 81c8 	bge.w	9001dce4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001d954:	b200      	sxth	r0, r0
9001d956:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001d958:	fb0c 3300 	mla	r3, ip, r0, r3
9001d95c:	eb04 0803 	add.w	r8, r4, r3
9001d960:	5ce3      	ldrb	r3, [r4, r3]
9001d962:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001d966:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001d96a:	2a00      	cmp	r2, #0
9001d96c:	f000 81af 	beq.w	9001dcce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001d970:	f898 c001 	ldrb.w	ip, [r8, #1]
9001d974:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001d978:	940e      	str	r4, [sp, #56]	; 0x38
9001d97a:	0e24      	lsrs	r4, r4, #24
9001d97c:	9415      	str	r4, [sp, #84]	; 0x54
9001d97e:	b179      	cbz	r1, 9001d9a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001d980:	eb08 0c00 	add.w	ip, r8, r0
9001d984:	f818 0000 	ldrb.w	r0, [r8, r0]
9001d988:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001d98c:	900a      	str	r0, [sp, #40]	; 0x28
9001d98e:	0e00      	lsrs	r0, r0, #24
9001d990:	9013      	str	r0, [sp, #76]	; 0x4c
9001d992:	f89c 0001 	ldrb.w	r0, [ip, #1]
9001d996:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001d99a:	900f      	str	r0, [sp, #60]	; 0x3c
9001d99c:	0e00      	lsrs	r0, r0, #24
9001d99e:	9016      	str	r0, [sp, #88]	; 0x58
9001d9a0:	b292      	uxth	r2, r2
9001d9a2:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d9a4:	b289      	uxth	r1, r1
9001d9a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001d9a8:	fb02 f901 	mul.w	r9, r2, r1
9001d9ac:	0112      	lsls	r2, r2, #4
9001d9ae:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d9b2:	eba2 0809 	sub.w	r8, r2, r9
9001d9b6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001d9ba:	b289      	uxth	r1, r1
9001d9bc:	fa1f f888 	uxth.w	r8, r8
9001d9c0:	1a52      	subs	r2, r2, r1
9001d9c2:	fb08 f000 	mul.w	r0, r8, r0
9001d9c6:	b292      	uxth	r2, r2
9001d9c8:	fb02 000e 	mla	r0, r2, lr, r0
9001d9cc:	fb01 0004 	mla	r0, r1, r4, r0
9001d9d0:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001d9d2:	fb09 0004 	mla	r0, r9, r4, r0
9001d9d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
9001d9da:	2800      	cmp	r0, #0
9001d9dc:	f000 80fa 	beq.w	9001dbd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001d9e0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001d9e4:	d01b      	beq.n	9001da1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9001d9e6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001d9ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001d9ee:	fb0e fa0a 	mul.w	sl, lr, sl
9001d9f2:	fb0e fe03 	mul.w	lr, lr, r3
9001d9f6:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001d9fa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001d9fe:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001da02:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001da06:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001da0a:	4453      	add	r3, sl
9001da0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001da10:	0a1b      	lsrs	r3, r3, #8
9001da12:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001da16:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001da1a:	ea43 030c 	orr.w	r3, r3, ip
9001da1e:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001da20:	2cff      	cmp	r4, #255	; 0xff
9001da22:	d021      	beq.n	9001da68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
9001da24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001da26:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001da2a:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001da2c:	fb04 fb0b 	mul.w	fp, r4, fp
9001da30:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001da32:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001da36:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001da38:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001da3c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001da40:	fb04 fa0a 	mul.w	sl, r4, sl
9001da44:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001da48:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001da4c:	44de      	add	lr, fp
9001da4e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001da52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001da56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001da5a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001da5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001da62:	ea4e 040a 	orr.w	r4, lr, sl
9001da66:	940e      	str	r4, [sp, #56]	; 0x38
9001da68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001da6a:	2cff      	cmp	r4, #255	; 0xff
9001da6c:	d021      	beq.n	9001dab2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001da6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001da70:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001da74:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001da76:	fb04 fb0b 	mul.w	fp, r4, fp
9001da7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001da7c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001da80:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001da82:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001da86:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001da8a:	fb04 fa0a 	mul.w	sl, r4, sl
9001da8e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001da92:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001da96:	44de      	add	lr, fp
9001da98:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001da9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001daa0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001daa4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001daa8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001daac:	ea4e 040a 	orr.w	r4, lr, sl
9001dab0:	940a      	str	r4, [sp, #40]	; 0x28
9001dab2:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dab4:	2cff      	cmp	r4, #255	; 0xff
9001dab6:	d021      	beq.n	9001dafc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
9001dab8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001daba:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001dabe:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dac0:	fb04 fb0b 	mul.w	fp, r4, fp
9001dac4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001dac6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001daca:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001dacc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001dad0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001dad4:	fb04 fa0a 	mul.w	sl, r4, sl
9001dad8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001dadc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001dae0:	44de      	add	lr, fp
9001dae2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001dae6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001daea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001daee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001daf2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001daf6:	ea4e 040a 	orr.w	r4, lr, sl
9001dafa:	940f      	str	r4, [sp, #60]	; 0x3c
9001dafc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001dafe:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001db02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001db06:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001db0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001db0c:	fb08 fc0c 	mul.w	ip, r8, ip
9001db10:	fb02 cc0e 	mla	ip, r2, lr, ip
9001db14:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001db18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001db1a:	fb01 cc0e 	mla	ip, r1, lr, ip
9001db1e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001db22:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001db24:	fb09 cc0e 	mla	ip, r9, lr, ip
9001db28:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001db2c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001db2e:	fb08 f80e 	mul.w	r8, r8, lr
9001db32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001db36:	fb02 8303 	mla	r3, r2, r3, r8
9001db3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001db3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001db40:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001db44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001db46:	fb01 330a 	mla	r3, r1, sl, r3
9001db4a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
9001db4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001db50:	fb09 3901 	mla	r9, r9, r1, r3
9001db54:	883b      	ldrh	r3, [r7, #0]
9001db56:	4342      	muls	r2, r0
9001db58:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001db5c:	1c50      	adds	r0, r2, #1
9001db5e:	1219      	asrs	r1, r3, #8
9001db60:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001db64:	eb00 2012 	add.w	r0, r0, r2, lsr #8
9001db68:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001db6c:	ea4c 0c09 	orr.w	ip, ip, r9
9001db70:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9001db74:	ea4f 421c 	mov.w	r2, ip, lsr #16
9001db78:	f3cc 2e07 	ubfx	lr, ip, #8, #8
9001db7c:	b2c0      	uxtb	r0, r0
9001db7e:	fb12 f204 	smulbb	r2, r2, r4
9001db82:	fa5f fc8c 	uxtb.w	ip, ip
9001db86:	fb1e fe04 	smulbb	lr, lr, r4
9001db8a:	fb01 2100 	mla	r1, r1, r0, r2
9001db8e:	10da      	asrs	r2, r3, #3
9001db90:	fb1c fc04 	smulbb	ip, ip, r4
9001db94:	00db      	lsls	r3, r3, #3
9001db96:	b289      	uxth	r1, r1
9001db98:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001db9c:	b2db      	uxtb	r3, r3
9001db9e:	fb02 e200 	mla	r2, r2, r0, lr
9001dba2:	fb03 c300 	mla	r3, r3, r0, ip
9001dba6:	b292      	uxth	r2, r2
9001dba8:	fa1f fc83 	uxth.w	ip, r3
9001dbac:	1c4b      	adds	r3, r1, #1
9001dbae:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9001dbb2:	f10c 0301 	add.w	r3, ip, #1
9001dbb6:	eb03 231c 	add.w	r3, r3, ip, lsr #8
9001dbba:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001dbbe:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001dbc2:	430b      	orrs	r3, r1
9001dbc4:	1c51      	adds	r1, r2, #1
9001dbc6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001dbca:	0952      	lsrs	r2, r2, #5
9001dbcc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001dbd0:	4313      	orrs	r3, r2
9001dbd2:	803b      	strh	r3, [r7, #0]
9001dbd4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001dbd6:	3702      	adds	r7, #2
9001dbd8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001dbda:	441a      	add	r2, r3
9001dbdc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001dbde:	441d      	add	r5, r3
9001dbe0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001dbe2:	9229      	str	r2, [sp, #164]	; 0xa4
9001dbe4:	3b01      	subs	r3, #1
9001dbe6:	931a      	str	r3, [sp, #104]	; 0x68
9001dbe8:	e694      	b.n	9001d914 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001dbea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001dbec:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001dbee:	441c      	add	r4, r3
9001dbf0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001dbf2:	441d      	add	r5, r3
9001dbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dbf6:	9429      	str	r4, [sp, #164]	; 0xa4
9001dbf8:	3b01      	subs	r3, #1
9001dbfa:	9309      	str	r3, [sp, #36]	; 0x24
9001dbfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001dbfe:	3302      	adds	r3, #2
9001dc00:	930c      	str	r3, [sp, #48]	; 0x30
9001dc02:	e667      	b.n	9001d8d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001dc04:	d024      	beq.n	9001dc50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
9001dc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dc08:	982b      	ldr	r0, [sp, #172]	; 0xac
9001dc0a:	3b01      	subs	r3, #1
9001dc0c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001dc0e:	fb00 4003 	mla	r0, r0, r3, r4
9001dc12:	1400      	asrs	r0, r0, #16
9001dc14:	f53f ae7b 	bmi.w	9001d90e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001dc18:	3901      	subs	r1, #1
9001dc1a:	4288      	cmp	r0, r1
9001dc1c:	f6bf ae77 	bge.w	9001d90e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001dc20:	992c      	ldr	r1, [sp, #176]	; 0xb0
9001dc22:	fb01 5303 	mla	r3, r1, r3, r5
9001dc26:	141b      	asrs	r3, r3, #16
9001dc28:	f53f ae71 	bmi.w	9001d90e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001dc2c:	3a01      	subs	r2, #1
9001dc2e:	4293      	cmp	r3, r2
9001dc30:	f6bf ae6d 	bge.w	9001d90e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001dc34:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001dc38:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
9001dc3c:	f1bb 0f00 	cmp.w	fp, #0
9001dc40:	dc70      	bgt.n	9001dd24 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
9001dc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dc44:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001dc48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001dc4a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001dc4e:	930c      	str	r3, [sp, #48]	; 0x30
9001dc50:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001dc52:	2b00      	cmp	r3, #0
9001dc54:	f340 81be 	ble.w	9001dfd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001dc58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001dc5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001dc5e:	ee30 0a04 	vadd.f32	s0, s0, s8
9001dc62:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001dc66:	eef0 6a62 	vmov.f32	s13, s5
9001dc6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001dc6e:	ee31 1a05 	vadd.f32	s2, s2, s10
9001dc72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001dc76:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
9001dc7a:	eef0 6a43 	vmov.f32	s13, s6
9001dc7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001dc82:	ee16 5a90 	vmov	r5, s13
9001dc86:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001dc8a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001dc8e:	ee77 2a62 	vsub.f32	s5, s14, s5
9001dc92:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001dc96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001dc9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001dc9e:	ee12 2a90 	vmov	r2, s5
9001dca2:	eef0 2a47 	vmov.f32	s5, s14
9001dca6:	fb92 f3f3 	sdiv	r3, r2, r3
9001dcaa:	ee13 2a10 	vmov	r2, s6
9001dcae:	932b      	str	r3, [sp, #172]	; 0xac
9001dcb0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001dcb2:	eeb0 3a67 	vmov.f32	s6, s15
9001dcb6:	fb92 f3f3 	sdiv	r3, r2, r3
9001dcba:	932c      	str	r3, [sp, #176]	; 0xb0
9001dcbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001dcbe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
9001dcc0:	3b01      	subs	r3, #1
9001dcc2:	9319      	str	r3, [sp, #100]	; 0x64
9001dcc4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001dcc6:	bf08      	it	eq
9001dcc8:	4613      	moveq	r3, r2
9001dcca:	9309      	str	r3, [sp, #36]	; 0x24
9001dccc:	e5f4      	b.n	9001d8b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001dcce:	2900      	cmp	r1, #0
9001dcd0:	f43f ae66 	beq.w	9001d9a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001dcd4:	f818 0000 	ldrb.w	r0, [r8, r0]
9001dcd8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001dcdc:	900a      	str	r0, [sp, #40]	; 0x28
9001dcde:	0e00      	lsrs	r0, r0, #24
9001dce0:	9013      	str	r0, [sp, #76]	; 0x4c
9001dce2:	e65d      	b.n	9001d9a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001dce4:	f113 0801 	adds.w	r8, r3, #1
9001dce8:	f53f af74 	bmi.w	9001dbd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001dcec:	4540      	cmp	r0, r8
9001dcee:	f6ff af71 	blt.w	9001dbd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001dcf2:	f11c 0801 	adds.w	r8, ip, #1
9001dcf6:	f53f af6d 	bmi.w	9001dbd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001dcfa:	45c6      	cmp	lr, r8
9001dcfc:	f6ff af6a 	blt.w	9001dbd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001dd00:	9c1c      	ldr	r4, [sp, #112]	; 0x70
9001dd02:	b200      	sxth	r0, r0
9001dd04:	9302      	str	r3, [sp, #8]
9001dd06:	fa0f f38e 	sxth.w	r3, lr
9001dd0a:	9000      	str	r0, [sp, #0]
9001dd0c:	9301      	str	r3, [sp, #4]
9001dd0e:	4633      	mov	r3, r6
9001dd10:	981d      	ldr	r0, [sp, #116]	; 0x74
9001dd12:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001dd16:	e9cd c203 	strd	ip, r2, [sp, #12]
9001dd1a:	4639      	mov	r1, r7
9001dd1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001dd1e:	f7ff fc63 	bl	9001d5e8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
9001dd22:	e757      	b.n	9001dbd4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001dd24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001dd26:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001dd2a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001dd2c:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001dd30:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001dd32:	1427      	asrs	r7, r4, #16
9001dd34:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001dd36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001dd3a:	142b      	asrs	r3, r5, #16
9001dd3c:	fb01 7303 	mla	r3, r1, r3, r7
9001dd40:	18e7      	adds	r7, r4, r3
9001dd42:	5ce3      	ldrb	r3, [r4, r3]
9001dd44:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001dd48:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001dd4c:	2a00      	cmp	r2, #0
9001dd4e:	f000 8137 	beq.w	9001dfc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
9001dd52:	f897 e001 	ldrb.w	lr, [r7, #1]
9001dd56:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001dd5a:	9410      	str	r4, [sp, #64]	; 0x40
9001dd5c:	0e24      	lsrs	r4, r4, #24
9001dd5e:	9417      	str	r4, [sp, #92]	; 0x5c
9001dd60:	b170      	cbz	r0, 9001dd80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001dd62:	eb07 0e01 	add.w	lr, r7, r1
9001dd66:	5c79      	ldrb	r1, [r7, r1]
9001dd68:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001dd6c:	910b      	str	r1, [sp, #44]	; 0x2c
9001dd6e:	0e09      	lsrs	r1, r1, #24
9001dd70:	9114      	str	r1, [sp, #80]	; 0x50
9001dd72:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001dd76:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001dd7a:	9111      	str	r1, [sp, #68]	; 0x44
9001dd7c:	0e09      	lsrs	r1, r1, #24
9001dd7e:	9118      	str	r1, [sp, #96]	; 0x60
9001dd80:	b292      	uxth	r2, r2
9001dd82:	9917      	ldr	r1, [sp, #92]	; 0x5c
9001dd84:	b280      	uxth	r0, r0
9001dd86:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001dd88:	fb02 f800 	mul.w	r8, r2, r0
9001dd8c:	0112      	lsls	r2, r2, #4
9001dd8e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001dd92:	eba2 0e08 	sub.w	lr, r2, r8
9001dd96:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001dd9a:	b280      	uxth	r0, r0
9001dd9c:	fa1f fe8e 	uxth.w	lr, lr
9001dda0:	1a12      	subs	r2, r2, r0
9001dda2:	fb0e f101 	mul.w	r1, lr, r1
9001dda6:	b292      	uxth	r2, r2
9001dda8:	fb02 110c 	mla	r1, r2, ip, r1
9001ddac:	fb00 1104 	mla	r1, r0, r4, r1
9001ddb0:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001ddb2:	fb08 1104 	mla	r1, r8, r4, r1
9001ddb6:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001ddba:	2900      	cmp	r1, #0
9001ddbc:	f000 80f5 	beq.w	9001dfaa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
9001ddc0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001ddc4:	d019      	beq.n	9001ddfa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
9001ddc6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001ddca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001ddce:	fb0c fa0a 	mul.w	sl, ip, sl
9001ddd2:	fb0c fc03 	mul.w	ip, ip, r3
9001ddd6:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001ddda:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001ddde:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001dde2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001dde6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001ddea:	4453      	add	r3, sl
9001ddec:	0a3f      	lsrs	r7, r7, #8
9001ddee:	0a1b      	lsrs	r3, r3, #8
9001ddf0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001ddf4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001ddf8:	433b      	orrs	r3, r7
9001ddfa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001ddfc:	2cff      	cmp	r4, #255	; 0xff
9001ddfe:	d020      	beq.n	9001de42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
9001de00:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001de02:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001de06:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001de08:	4367      	muls	r7, r4
9001de0a:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001de0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001de10:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001de14:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001de16:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001de1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001de1e:	fb04 fa0a 	mul.w	sl, r4, sl
9001de22:	44bc      	add	ip, r7
9001de24:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001de28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001de2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001de30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001de34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001de38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001de3c:	ea4c 040a 	orr.w	r4, ip, sl
9001de40:	9410      	str	r4, [sp, #64]	; 0x40
9001de42:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001de44:	2cff      	cmp	r4, #255	; 0xff
9001de46:	d020      	beq.n	9001de8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
9001de48:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001de4a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001de4e:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001de50:	4367      	muls	r7, r4
9001de52:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001de54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001de58:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001de5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001de5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001de62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001de66:	fb04 fa0a 	mul.w	sl, r4, sl
9001de6a:	44bc      	add	ip, r7
9001de6c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001de70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001de74:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001de78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001de7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001de80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001de84:	ea4c 040a 	orr.w	r4, ip, sl
9001de88:	940b      	str	r4, [sp, #44]	; 0x2c
9001de8a:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001de8c:	2cff      	cmp	r4, #255	; 0xff
9001de8e:	d020      	beq.n	9001ded2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
9001de90:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001de92:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001de96:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001de98:	4367      	muls	r7, r4
9001de9a:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001de9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001dea0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001dea4:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001dea6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001deaa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001deae:	fb04 fa0a 	mul.w	sl, r4, sl
9001deb2:	44bc      	add	ip, r7
9001deb4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001deb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001debc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001dec0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001dec4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001dec8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001decc:	ea4c 040a 	orr.w	r4, ip, sl
9001ded0:	9411      	str	r4, [sp, #68]	; 0x44
9001ded2:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001ded4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001ded8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001dedc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001dee0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001dee2:	fb0e f707 	mul.w	r7, lr, r7
9001dee6:	fb02 770c 	mla	r7, r2, ip, r7
9001deea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001deee:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001def0:	fb00 770c 	mla	r7, r0, ip, r7
9001def4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001def8:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001defa:	fb08 770c 	mla	r7, r8, ip, r7
9001defe:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001df02:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001df04:	fb0e fe0c 	mul.w	lr, lr, ip
9001df08:	0a3f      	lsrs	r7, r7, #8
9001df0a:	fb02 e303 	mla	r3, r2, r3, lr
9001df0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001df10:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001df14:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001df18:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001df1a:	fb00 330a 	mla	r3, r0, sl, r3
9001df1e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9001df22:	f8b9 0000 	ldrh.w	r0, [r9]
9001df26:	fb08 3c0c 	mla	ip, r8, ip, r3
9001df2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001df2c:	1202      	asrs	r2, r0, #8
9001df2e:	434b      	muls	r3, r1
9001df30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001df34:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001df38:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001df3c:	1c59      	adds	r1, r3, #1
9001df3e:	ea47 070c 	orr.w	r7, r7, ip
9001df42:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001df46:	0c3b      	lsrs	r3, r7, #16
9001df48:	ea6f 2111 	mvn.w	r1, r1, lsr #8
9001df4c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9001df50:	b2ff      	uxtb	r7, r7
9001df52:	fb13 f304 	smulbb	r3, r3, r4
9001df56:	b2c9      	uxtb	r1, r1
9001df58:	fb1c fc04 	smulbb	ip, ip, r4
9001df5c:	fb02 3201 	mla	r2, r2, r1, r3
9001df60:	10c3      	asrs	r3, r0, #3
9001df62:	fb17 f704 	smulbb	r7, r7, r4
9001df66:	00c0      	lsls	r0, r0, #3
9001df68:	b292      	uxth	r2, r2
9001df6a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001df6e:	b2c0      	uxtb	r0, r0
9001df70:	fb03 c301 	mla	r3, r3, r1, ip
9001df74:	f102 0c01 	add.w	ip, r2, #1
9001df78:	fb00 7001 	mla	r0, r0, r1, r7
9001df7c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
9001df80:	b280      	uxth	r0, r0
9001df82:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
9001df86:	b29b      	uxth	r3, r3
9001df88:	1c42      	adds	r2, r0, #1
9001df8a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9001df8e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001df92:	ea42 020c 	orr.w	r2, r2, ip
9001df96:	f103 0c01 	add.w	ip, r3, #1
9001df9a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9001df9e:	095b      	lsrs	r3, r3, #5
9001dfa0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001dfa4:	431a      	orrs	r2, r3
9001dfa6:	f8a9 2000 	strh.w	r2, [r9]
9001dfaa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001dfac:	f109 0902 	add.w	r9, r9, #2
9001dfb0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001dfb2:	f10b 3bff 	add.w	fp, fp, #4294967295
9001dfb6:	441a      	add	r2, r3
9001dfb8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001dfba:	9229      	str	r2, [sp, #164]	; 0xa4
9001dfbc:	441d      	add	r5, r3
9001dfbe:	e63d      	b.n	9001dc3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
9001dfc0:	2800      	cmp	r0, #0
9001dfc2:	f43f aedd 	beq.w	9001dd80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001dfc6:	5c79      	ldrb	r1, [r7, r1]
9001dfc8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001dfcc:	910b      	str	r1, [sp, #44]	; 0x2c
9001dfce:	0e09      	lsrs	r1, r1, #24
9001dfd0:	9114      	str	r1, [sp, #80]	; 0x50
9001dfd2:	e6d5      	b.n	9001dd80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001dfd4:	b01f      	add	sp, #124	; 0x7c
9001dfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001dfda <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
9001dfda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001dfde:	b089      	sub	sp, #36	; 0x24
9001dfe0:	9101      	str	r1, [sp, #4]
9001dfe2:	9801      	ldr	r0, [sp, #4]
9001dfe4:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
9001dfe8:	8800      	ldrh	r0, [r0, #0]
9001dfea:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
9001dfee:	1206      	asrs	r6, r0, #8
9001dff0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9001dff4:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
9001dff8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001dffc:	9602      	str	r6, [sp, #8]
9001dffe:	10c6      	asrs	r6, r0, #3
9001e000:	00c0      	lsls	r0, r0, #3
9001e002:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001e006:	b2c0      	uxtb	r0, r0
9001e008:	9603      	str	r6, [sp, #12]
9001e00a:	9004      	str	r0, [sp, #16]
9001e00c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
9001e010:	fb07 100c 	mla	r0, r7, ip, r1
9001e014:	2f00      	cmp	r7, #0
9001e016:	eb02 0e00 	add.w	lr, r2, r0
9001e01a:	f2c0 810a 	blt.w	9001e232 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001e01e:	45b8      	cmp	r8, r7
9001e020:	f340 8107 	ble.w	9001e232 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001e024:	2900      	cmp	r1, #0
9001e026:	f2c0 8102 	blt.w	9001e22e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001e02a:	458c      	cmp	ip, r1
9001e02c:	f340 80ff 	ble.w	9001e22e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001e030:	5c12      	ldrb	r2, [r2, r0]
9001e032:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
9001e036:	1c4a      	adds	r2, r1, #1
9001e038:	f100 80fe 	bmi.w	9001e238 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001e03c:	4594      	cmp	ip, r2
9001e03e:	f340 80fb 	ble.w	9001e238 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001e042:	2d00      	cmp	r5, #0
9001e044:	f000 80fa 	beq.w	9001e23c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
9001e048:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001e04c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
9001e050:	3701      	adds	r7, #1
9001e052:	f100 80f7 	bmi.w	9001e244 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001e056:	45b8      	cmp	r8, r7
9001e058:	f340 80f4 	ble.w	9001e244 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001e05c:	2c00      	cmp	r4, #0
9001e05e:	f000 80f4 	beq.w	9001e24a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
9001e062:	2900      	cmp	r1, #0
9001e064:	eb0e 020c 	add.w	r2, lr, ip
9001e068:	f2c0 80ea 	blt.w	9001e240 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001e06c:	458c      	cmp	ip, r1
9001e06e:	f340 80e7 	ble.w	9001e240 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001e072:	f81e 700c 	ldrb.w	r7, [lr, ip]
9001e076:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
9001e07a:	3101      	adds	r1, #1
9001e07c:	f100 80e8 	bmi.w	9001e250 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001e080:	458c      	cmp	ip, r1
9001e082:	f340 80e5 	ble.w	9001e250 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001e086:	2d00      	cmp	r5, #0
9001e088:	f000 80e4 	beq.w	9001e254 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
9001e08c:	7852      	ldrb	r2, [r2, #1]
9001e08e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001e092:	0e0b      	lsrs	r3, r1, #24
9001e094:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
9001e098:	ea4f 6a10 	mov.w	sl, r0, lsr #24
9001e09c:	9300      	str	r3, [sp, #0]
9001e09e:	b2a4      	uxth	r4, r4
9001e0a0:	b2ab      	uxth	r3, r5
9001e0a2:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
9001e0a6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
9001e0aa:	fb03 f904 	mul.w	r9, r3, r4
9001e0ae:	011b      	lsls	r3, r3, #4
9001e0b0:	fb0a f505 	mul.w	r5, sl, r5
9001e0b4:	ea4f 6817 	mov.w	r8, r7, lsr #24
9001e0b8:	eba3 0e09 	sub.w	lr, r3, r9
9001e0bc:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
9001e0c0:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
9001e0c4:	0a28      	lsrs	r0, r5, #8
9001e0c6:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
9001e0ca:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001e0ce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001e0d2:	fb0a f303 	mul.w	r3, sl, r3
9001e0d6:	fb08 f707 	mul.w	r7, r8, r7
9001e0da:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
9001e0de:	4405      	add	r5, r0
9001e0e0:	fb08 fc0c 	mul.w	ip, r8, ip
9001e0e4:	b2a4      	uxth	r4, r4
9001e0e6:	0a2d      	lsrs	r5, r5, #8
9001e0e8:	fa1f fe8e 	uxth.w	lr, lr
9001e0ec:	1b12      	subs	r2, r2, r4
9001e0ee:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
9001e0f2:	b292      	uxth	r2, r2
9001e0f4:	9005      	str	r0, [sp, #20]
9001e0f6:	f503 7080 	add.w	r0, r3, #256	; 0x100
9001e0fa:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001e0fe:	ea4f 201c 	mov.w	r0, ip, lsr #8
9001e102:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001e106:	0a1b      	lsrs	r3, r3, #8
9001e108:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001e10c:	9306      	str	r3, [sp, #24]
9001e10e:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
9001e112:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001e116:	4460      	add	r0, ip
9001e118:	fb0b f303 	mul.w	r3, fp, r3
9001e11c:	fb0b f606 	mul.w	r6, fp, r6
9001e120:	0a00      	lsrs	r0, r0, #8
9001e122:	0a1d      	lsrs	r5, r3, #8
9001e124:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
9001e128:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001e12c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e130:	441d      	add	r5, r3
9001e132:	f506 7380 	add.w	r3, r6, #256	; 0x100
9001e136:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001e13a:	f507 7380 	add.w	r3, r7, #256	; 0x100
9001e13e:	0a2d      	lsrs	r5, r5, #8
9001e140:	eb03 2317 	add.w	r3, r3, r7, lsr #8
9001e144:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
9001e148:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e14c:	0a36      	lsrs	r6, r6, #8
9001e14e:	0a1b      	lsrs	r3, r3, #8
9001e150:	fb05 f50e 	mul.w	r5, r5, lr
9001e154:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001e158:	9307      	str	r3, [sp, #28]
9001e15a:	0e0b      	lsrs	r3, r1, #24
9001e15c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001e160:	fb0e f606 	mul.w	r6, lr, r6
9001e164:	435f      	muls	r7, r3
9001e166:	4359      	muls	r1, r3
9001e168:	9b05      	ldr	r3, [sp, #20]
9001e16a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e16e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e172:	fb03 5502 	mla	r5, r3, r2, r5
9001e176:	9b06      	ldr	r3, [sp, #24]
9001e178:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e17c:	fb0e fe0b 	mul.w	lr, lr, fp
9001e180:	44bc      	add	ip, r7
9001e182:	f501 7780 	add.w	r7, r1, #256	; 0x100
9001e186:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e18a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001e18e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e192:	0a09      	lsrs	r1, r1, #8
9001e194:	fb0c 5509 	mla	r5, ip, r9, r5
9001e198:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001e19c:	fb00 5504 	mla	r5, r0, r4, r5
9001e1a0:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
9001e1a4:	9b07      	ldr	r3, [sp, #28]
9001e1a6:	fb02 6000 	mla	r0, r2, r0, r6
9001e1aa:	0a2d      	lsrs	r5, r5, #8
9001e1ac:	fb02 e20a 	mla	r2, r2, sl, lr
9001e1b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e1b4:	fb09 0001 	mla	r0, r9, r1, r0
9001e1b8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e1bc:	fb04 0003 	mla	r0, r4, r3, r0
9001e1c0:	9b00      	ldr	r3, [sp, #0]
9001e1c2:	fb04 2408 	mla	r4, r4, r8, r2
9001e1c6:	9a04      	ldr	r2, [sp, #16]
9001e1c8:	0a00      	lsrs	r0, r0, #8
9001e1ca:	fb09 4903 	mla	r9, r9, r3, r4
9001e1ce:	9b02      	ldr	r3, [sp, #8]
9001e1d0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9001e1d4:	ea6f 2929 	mvn.w	r9, r9, asr #8
9001e1d8:	4305      	orrs	r5, r0
9001e1da:	fa5f f989 	uxtb.w	r9, r9
9001e1de:	fb03 f109 	mul.w	r1, r3, r9
9001e1e2:	9b03      	ldr	r3, [sp, #12]
9001e1e4:	fb03 f309 	mul.w	r3, r3, r9
9001e1e8:	fb02 f909 	mul.w	r9, r2, r9
9001e1ec:	1c4a      	adds	r2, r1, #1
9001e1ee:	1c58      	adds	r0, r3, #1
9001e1f0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e1f4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001e1f8:	0c2a      	lsrs	r2, r5, #16
9001e1fa:	0a2b      	lsrs	r3, r5, #8
9001e1fc:	eb02 2211 	add.w	r2, r2, r1, lsr #8
9001e200:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001e204:	0212      	lsls	r2, r2, #8
9001e206:	00db      	lsls	r3, r3, #3
9001e208:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
9001e20c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e210:	4313      	orrs	r3, r2
9001e212:	f109 0201 	add.w	r2, r9, #1
9001e216:	eb02 2919 	add.w	r9, r2, r9, lsr #8
9001e21a:	eb05 2519 	add.w	r5, r5, r9, lsr #8
9001e21e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001e222:	431d      	orrs	r5, r3
9001e224:	9b01      	ldr	r3, [sp, #4]
9001e226:	801d      	strh	r5, [r3, #0]
9001e228:	b009      	add	sp, #36	; 0x24
9001e22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e22e:	2000      	movs	r0, #0
9001e230:	e701      	b.n	9001e036 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
9001e232:	2600      	movs	r6, #0
9001e234:	4630      	mov	r0, r6
9001e236:	e70b      	b.n	9001e050 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e238:	2600      	movs	r6, #0
9001e23a:	e709      	b.n	9001e050 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e23c:	462e      	mov	r6, r5
9001e23e:	e707      	b.n	9001e050 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001e240:	2700      	movs	r7, #0
9001e242:	e71a      	b.n	9001e07a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
9001e244:	2100      	movs	r1, #0
9001e246:	460f      	mov	r7, r1
9001e248:	e723      	b.n	9001e092 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e24a:	4621      	mov	r1, r4
9001e24c:	4627      	mov	r7, r4
9001e24e:	e720      	b.n	9001e092 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e250:	2100      	movs	r1, #0
9001e252:	e71e      	b.n	9001e092 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001e254:	4629      	mov	r1, r5
9001e256:	e71c      	b.n	9001e092 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

9001e258 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e25c:	b09b      	sub	sp, #108	; 0x6c
9001e25e:	9218      	str	r2, [sp, #96]	; 0x60
9001e260:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001e262:	9019      	str	r0, [sp, #100]	; 0x64
9001e264:	9116      	str	r1, [sp, #88]	; 0x58
9001e266:	6850      	ldr	r0, [r2, #4]
9001e268:	9307      	str	r3, [sp, #28]
9001e26a:	6812      	ldr	r2, [r2, #0]
9001e26c:	9d26      	ldr	r5, [sp, #152]	; 0x98
9001e26e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9001e272:	fb00 1303 	mla	r3, r0, r3, r1
9001e276:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001e27a:	930a      	str	r3, [sp, #40]	; 0x28
9001e27c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e27e:	681b      	ldr	r3, [r3, #0]
9001e280:	930f      	str	r3, [sp, #60]	; 0x3c
9001e282:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e284:	685e      	ldr	r6, [r3, #4]
9001e286:	3604      	adds	r6, #4
9001e288:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001e28a:	2b00      	cmp	r3, #0
9001e28c:	dc03      	bgt.n	9001e296 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001e28e:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001e290:	2b00      	cmp	r3, #0
9001e292:	f340 8373 	ble.w	9001e97c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001e296:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e298:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e29c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001e2a0:	1e48      	subs	r0, r1, #1
9001e2a2:	1e57      	subs	r7, r2, #1
9001e2a4:	9b07      	ldr	r3, [sp, #28]
9001e2a6:	2b00      	cmp	r3, #0
9001e2a8:	f340 818f 	ble.w	9001e5ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
9001e2ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e2ae:	142b      	asrs	r3, r5, #16
9001e2b0:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001e2b4:	d406      	bmi.n	9001e2c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e2b6:	4584      	cmp	ip, r0
9001e2b8:	da04      	bge.n	9001e2c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e2ba:	2b00      	cmp	r3, #0
9001e2bc:	db02      	blt.n	9001e2c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001e2be:	42bb      	cmp	r3, r7
9001e2c0:	f2c0 8184 	blt.w	9001e5cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
9001e2c4:	f11c 0c01 	adds.w	ip, ip, #1
9001e2c8:	f100 8172 	bmi.w	9001e5b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e2cc:	4561      	cmp	r1, ip
9001e2ce:	f2c0 816f 	blt.w	9001e5b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e2d2:	3301      	adds	r3, #1
9001e2d4:	f100 816c 	bmi.w	9001e5b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e2d8:	429a      	cmp	r2, r3
9001e2da:	f2c0 8169 	blt.w	9001e5b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e2de:	9b07      	ldr	r3, [sp, #28]
9001e2e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9001e2e2:	9317      	str	r3, [sp, #92]	; 0x5c
9001e2e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001e2e6:	2b00      	cmp	r3, #0
9001e2e8:	f340 818e 	ble.w	9001e608 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
9001e2ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001e2ee:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001e2f2:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001e2f6:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e2fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e2fc:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
9001e300:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001e302:	141b      	asrs	r3, r3, #16
9001e304:	f100 81d1 	bmi.w	9001e6aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e308:	f101 38ff 	add.w	r8, r1, #4294967295
9001e30c:	4543      	cmp	r3, r8
9001e30e:	f280 81cc 	bge.w	9001e6aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e312:	f1bc 0f00 	cmp.w	ip, #0
9001e316:	f2c0 81c8 	blt.w	9001e6aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e31a:	f10e 38ff 	add.w	r8, lr, #4294967295
9001e31e:	45c4      	cmp	ip, r8
9001e320:	f280 81c3 	bge.w	9001e6aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e324:	b209      	sxth	r1, r1
9001e326:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001e328:	fb0c 3301 	mla	r3, ip, r1, r3
9001e32c:	eb04 0803 	add.w	r8, r4, r3
9001e330:	5ce3      	ldrb	r3, [r4, r3]
9001e332:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001e336:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001e33a:	2a00      	cmp	r2, #0
9001e33c:	f000 81aa 	beq.w	9001e694 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
9001e340:	f898 c001 	ldrb.w	ip, [r8, #1]
9001e344:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001e348:	940b      	str	r4, [sp, #44]	; 0x2c
9001e34a:	0e24      	lsrs	r4, r4, #24
9001e34c:	9412      	str	r4, [sp, #72]	; 0x48
9001e34e:	b178      	cbz	r0, 9001e370 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e350:	eb08 0c01 	add.w	ip, r8, r1
9001e354:	f818 1001 	ldrb.w	r1, [r8, r1]
9001e358:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e35c:	9108      	str	r1, [sp, #32]
9001e35e:	0e09      	lsrs	r1, r1, #24
9001e360:	9110      	str	r1, [sp, #64]	; 0x40
9001e362:	f89c 1001 	ldrb.w	r1, [ip, #1]
9001e366:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e36a:	910c      	str	r1, [sp, #48]	; 0x30
9001e36c:	0e09      	lsrs	r1, r1, #24
9001e36e:	9113      	str	r1, [sp, #76]	; 0x4c
9001e370:	b292      	uxth	r2, r2
9001e372:	9912      	ldr	r1, [sp, #72]	; 0x48
9001e374:	b280      	uxth	r0, r0
9001e376:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e378:	fb02 f900 	mul.w	r9, r2, r0
9001e37c:	0112      	lsls	r2, r2, #4
9001e37e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9001e382:	eba2 0809 	sub.w	r8, r2, r9
9001e386:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001e38a:	b280      	uxth	r0, r0
9001e38c:	fa1f f888 	uxth.w	r8, r8
9001e390:	1a12      	subs	r2, r2, r0
9001e392:	fb08 f101 	mul.w	r1, r8, r1
9001e396:	b292      	uxth	r2, r2
9001e398:	fb02 110e 	mla	r1, r2, lr, r1
9001e39c:	fb00 1104 	mla	r1, r0, r4, r1
9001e3a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e3a2:	fb09 1104 	mla	r1, r9, r4, r1
9001e3a6:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001e3aa:	2900      	cmp	r1, #0
9001e3ac:	f000 80f5 	beq.w	9001e59a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e3b0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001e3b4:	d01b      	beq.n	9001e3ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001e3b6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001e3ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e3be:	fb0e fa0a 	mul.w	sl, lr, sl
9001e3c2:	fb0e fe03 	mul.w	lr, lr, r3
9001e3c6:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e3ca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001e3ce:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001e3d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e3d6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001e3da:	4453      	add	r3, sl
9001e3dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e3e0:	0a1b      	lsrs	r3, r3, #8
9001e3e2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001e3e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e3ea:	ea43 030c 	orr.w	r3, r3, ip
9001e3ee:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e3f0:	2cff      	cmp	r4, #255	; 0xff
9001e3f2:	d021      	beq.n	9001e438 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001e3f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e3f6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e3fa:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e3fc:	fb04 fb0b 	mul.w	fp, r4, fp
9001e400:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e402:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e406:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e408:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e40c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e410:	fb04 fa0a 	mul.w	sl, r4, sl
9001e414:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e418:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e41c:	44de      	add	lr, fp
9001e41e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e422:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e426:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e42a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e42e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e432:	ea4e 040a 	orr.w	r4, lr, sl
9001e436:	940b      	str	r4, [sp, #44]	; 0x2c
9001e438:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e43a:	2cff      	cmp	r4, #255	; 0xff
9001e43c:	d021      	beq.n	9001e482 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001e43e:	9c08      	ldr	r4, [sp, #32]
9001e440:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e444:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e446:	fb04 fb0b 	mul.w	fp, r4, fp
9001e44a:	9c08      	ldr	r4, [sp, #32]
9001e44c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e450:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e452:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e456:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e45a:	fb04 fa0a 	mul.w	sl, r4, sl
9001e45e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e462:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e466:	44de      	add	lr, fp
9001e468:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e46c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e470:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e474:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e478:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e47c:	ea4e 040a 	orr.w	r4, lr, sl
9001e480:	9408      	str	r4, [sp, #32]
9001e482:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e484:	2cff      	cmp	r4, #255	; 0xff
9001e486:	d021      	beq.n	9001e4cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
9001e488:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e48a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e48e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e490:	fb04 fb0b 	mul.w	fp, r4, fp
9001e494:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e496:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e49a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e49c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e4a0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e4a4:	fb04 fa0a 	mul.w	sl, r4, sl
9001e4a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e4ac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e4b0:	44de      	add	lr, fp
9001e4b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e4b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e4ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e4be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e4c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e4c6:	ea4e 040a 	orr.w	r4, lr, sl
9001e4ca:	940c      	str	r4, [sp, #48]	; 0x30
9001e4cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e4ce:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001e4d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e4d6:	43c9      	mvns	r1, r1
9001e4d8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e4dc:	9c08      	ldr	r4, [sp, #32]
9001e4de:	fb08 fc0c 	mul.w	ip, r8, ip
9001e4e2:	fb02 cc0e 	mla	ip, r2, lr, ip
9001e4e6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001e4ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001e4ec:	fb00 cc0e 	mla	ip, r0, lr, ip
9001e4f0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001e4f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e4f6:	fb09 cc0e 	mla	ip, r9, lr, ip
9001e4fa:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001e4fe:	fb08 f80e 	mul.w	r8, r8, lr
9001e502:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e506:	fa5f fe81 	uxtb.w	lr, r1
9001e50a:	fb02 8303 	mla	r3, r2, r3, r8
9001e50e:	9a08      	ldr	r2, [sp, #32]
9001e510:	f8b7 8000 	ldrh.w	r8, [r7]
9001e514:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e518:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001e51c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001e51e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
9001e522:	fb00 330a 	mla	r3, r0, sl, r3
9001e526:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
9001e52a:	ea4f 2228 	mov.w	r2, r8, asr #8
9001e52e:	fb09 3900 	mla	r9, r9, r0, r3
9001e532:	ea4f 00e8 	mov.w	r0, r8, asr #3
9001e536:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001e53a:	b2c9      	uxtb	r1, r1
9001e53c:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001e540:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001e544:	fb02 f20e 	mul.w	r2, r2, lr
9001e548:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001e54c:	fb00 f00e 	mul.w	r0, r0, lr
9001e550:	1c53      	adds	r3, r2, #1
9001e552:	fb01 f10e 	mul.w	r1, r1, lr
9001e556:	ea4c 0c09 	orr.w	ip, ip, r9
9001e55a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
9001e55e:	ea4f 431c 	mov.w	r3, ip, lsr #16
9001e562:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001e566:	4a60      	ldr	r2, [pc, #384]	; (9001e6e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
9001e568:	b2db      	uxtb	r3, r3
9001e56a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
9001e56e:	1c43      	adds	r3, r0, #1
9001e570:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001e574:	ea4f 231c 	mov.w	r3, ip, lsr #8
9001e578:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001e57c:	00db      	lsls	r3, r3, #3
9001e57e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e582:	4313      	orrs	r3, r2
9001e584:	1c4a      	adds	r2, r1, #1
9001e586:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e58a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
9001e58e:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9001e592:	ea4c 0c03 	orr.w	ip, ip, r3
9001e596:	f8a7 c000 	strh.w	ip, [r7]
9001e59a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001e59c:	3702      	adds	r7, #2
9001e59e:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001e5a0:	441a      	add	r2, r3
9001e5a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001e5a4:	441d      	add	r5, r3
9001e5a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001e5a8:	9225      	str	r2, [sp, #148]	; 0x94
9001e5aa:	3b01      	subs	r3, #1
9001e5ac:	9317      	str	r3, [sp, #92]	; 0x5c
9001e5ae:	e699      	b.n	9001e2e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001e5b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001e5b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e5b4:	441c      	add	r4, r3
9001e5b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001e5b8:	441d      	add	r5, r3
9001e5ba:	9b07      	ldr	r3, [sp, #28]
9001e5bc:	9425      	str	r4, [sp, #148]	; 0x94
9001e5be:	3b01      	subs	r3, #1
9001e5c0:	9307      	str	r3, [sp, #28]
9001e5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e5c4:	3302      	adds	r3, #2
9001e5c6:	930a      	str	r3, [sp, #40]	; 0x28
9001e5c8:	e66c      	b.n	9001e2a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001e5ca:	d024      	beq.n	9001e616 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
9001e5cc:	9b07      	ldr	r3, [sp, #28]
9001e5ce:	9827      	ldr	r0, [sp, #156]	; 0x9c
9001e5d0:	3b01      	subs	r3, #1
9001e5d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e5d4:	fb00 4003 	mla	r0, r0, r3, r4
9001e5d8:	1400      	asrs	r0, r0, #16
9001e5da:	f53f ae80 	bmi.w	9001e2de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e5de:	3901      	subs	r1, #1
9001e5e0:	4288      	cmp	r0, r1
9001e5e2:	f6bf ae7c 	bge.w	9001e2de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e5e6:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001e5e8:	fb01 5303 	mla	r3, r1, r3, r5
9001e5ec:	141b      	asrs	r3, r3, #16
9001e5ee:	f53f ae76 	bmi.w	9001e2de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e5f2:	3a01      	subs	r2, #1
9001e5f4:	4293      	cmp	r3, r2
9001e5f6:	f6bf ae72 	bge.w	9001e2de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001e5fa:	f8dd b01c 	ldr.w	fp, [sp, #28]
9001e5fe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9001e602:	f1bb 0f00 	cmp.w	fp, #0
9001e606:	dc71      	bgt.n	9001e6ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001e608:	9b07      	ldr	r3, [sp, #28]
9001e60a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001e60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001e610:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001e614:	930a      	str	r3, [sp, #40]	; 0x28
9001e616:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001e618:	2b00      	cmp	r3, #0
9001e61a:	f340 81af 	ble.w	9001e97c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001e61e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001e622:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e624:	ee30 0a04 	vadd.f32	s0, s0, s8
9001e628:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001e62c:	eef0 6a62 	vmov.f32	s13, s5
9001e630:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001e634:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e638:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e63c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
9001e640:	eef0 6a43 	vmov.f32	s13, s6
9001e644:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e648:	ee16 5a90 	vmov	r5, s13
9001e64c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e650:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e654:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e658:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e65c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e660:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e664:	ee12 2a90 	vmov	r2, s5
9001e668:	eef0 2a47 	vmov.f32	s5, s14
9001e66c:	fb92 f3f3 	sdiv	r3, r2, r3
9001e670:	ee13 2a10 	vmov	r2, s6
9001e674:	9327      	str	r3, [sp, #156]	; 0x9c
9001e676:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e678:	eeb0 3a67 	vmov.f32	s6, s15
9001e67c:	fb92 f3f3 	sdiv	r3, r2, r3
9001e680:	9328      	str	r3, [sp, #160]	; 0xa0
9001e682:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001e684:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001e686:	3b01      	subs	r3, #1
9001e688:	9316      	str	r3, [sp, #88]	; 0x58
9001e68a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001e68c:	bf08      	it	eq
9001e68e:	4613      	moveq	r3, r2
9001e690:	9307      	str	r3, [sp, #28]
9001e692:	e5f9      	b.n	9001e288 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001e694:	2800      	cmp	r0, #0
9001e696:	f43f ae6b 	beq.w	9001e370 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e69a:	f818 1001 	ldrb.w	r1, [r8, r1]
9001e69e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e6a2:	9108      	str	r1, [sp, #32]
9001e6a4:	0e09      	lsrs	r1, r1, #24
9001e6a6:	9110      	str	r1, [sp, #64]	; 0x40
9001e6a8:	e662      	b.n	9001e370 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001e6aa:	f113 0801 	adds.w	r8, r3, #1
9001e6ae:	f53f af74 	bmi.w	9001e59a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e6b2:	4541      	cmp	r1, r8
9001e6b4:	f6ff af71 	blt.w	9001e59a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e6b8:	f11c 0801 	adds.w	r8, ip, #1
9001e6bc:	f53f af6d 	bmi.w	9001e59a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e6c0:	45c6      	cmp	lr, r8
9001e6c2:	f6ff af6a 	blt.w	9001e59a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e6c6:	b209      	sxth	r1, r1
9001e6c8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
9001e6cc:	fa0f f38e 	sxth.w	r3, lr
9001e6d0:	9100      	str	r1, [sp, #0]
9001e6d2:	4639      	mov	r1, r7
9001e6d4:	9301      	str	r3, [sp, #4]
9001e6d6:	4633      	mov	r3, r6
9001e6d8:	e9cd 2004 	strd	r2, r0, [sp, #16]
9001e6dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001e6de:	9819      	ldr	r0, [sp, #100]	; 0x64
9001e6e0:	f7ff fc7b 	bl	9001dfda <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
9001e6e4:	e759      	b.n	9001e59a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001e6e6:	bf00      	nop
9001e6e8:	fffff800 	.word	0xfffff800
9001e6ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001e6ee:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001e6f2:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001e6f4:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e6f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e6fa:	1427      	asrs	r7, r4, #16
9001e6fc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001e6fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e702:	142b      	asrs	r3, r5, #16
9001e704:	fb01 7303 	mla	r3, r1, r3, r7
9001e708:	18e7      	adds	r7, r4, r3
9001e70a:	5ce3      	ldrb	r3, [r4, r3]
9001e70c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001e710:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001e714:	2a00      	cmp	r2, #0
9001e716:	f000 8127 	beq.w	9001e968 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
9001e71a:	f897 e001 	ldrb.w	lr, [r7, #1]
9001e71e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001e722:	940d      	str	r4, [sp, #52]	; 0x34
9001e724:	0e24      	lsrs	r4, r4, #24
9001e726:	9414      	str	r4, [sp, #80]	; 0x50
9001e728:	b170      	cbz	r0, 9001e748 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001e72a:	eb07 0e01 	add.w	lr, r7, r1
9001e72e:	5c79      	ldrb	r1, [r7, r1]
9001e730:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e734:	9109      	str	r1, [sp, #36]	; 0x24
9001e736:	0e09      	lsrs	r1, r1, #24
9001e738:	9111      	str	r1, [sp, #68]	; 0x44
9001e73a:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001e73e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e742:	910e      	str	r1, [sp, #56]	; 0x38
9001e744:	0e09      	lsrs	r1, r1, #24
9001e746:	9115      	str	r1, [sp, #84]	; 0x54
9001e748:	b292      	uxth	r2, r2
9001e74a:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e74c:	b280      	uxth	r0, r0
9001e74e:	fb02 f800 	mul.w	r8, r2, r0
9001e752:	0112      	lsls	r2, r2, #4
9001e754:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001e758:	eba2 0e08 	sub.w	lr, r2, r8
9001e75c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
9001e760:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001e762:	b280      	uxth	r0, r0
9001e764:	fa1f fe8e 	uxth.w	lr, lr
9001e768:	1a09      	subs	r1, r1, r0
9001e76a:	fb0e f202 	mul.w	r2, lr, r2
9001e76e:	b289      	uxth	r1, r1
9001e770:	fb01 220c 	mla	r2, r1, ip, r2
9001e774:	fb00 2204 	mla	r2, r0, r4, r2
9001e778:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e77a:	fb08 2204 	mla	r2, r8, r4, r2
9001e77e:	f3c2 2207 	ubfx	r2, r2, #8, #8
9001e782:	2a00      	cmp	r2, #0
9001e784:	f000 80e5 	beq.w	9001e952 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
9001e788:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001e78c:	d019      	beq.n	9001e7c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
9001e78e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001e792:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e796:	fb0c fa0a 	mul.w	sl, ip, sl
9001e79a:	fb0c fc03 	mul.w	ip, ip, r3
9001e79e:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e7a2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001e7a6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001e7aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e7ae:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001e7b2:	4453      	add	r3, sl
9001e7b4:	0a3f      	lsrs	r7, r7, #8
9001e7b6:	0a1b      	lsrs	r3, r3, #8
9001e7b8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001e7bc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e7c0:	433b      	orrs	r3, r7
9001e7c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e7c4:	2cff      	cmp	r4, #255	; 0xff
9001e7c6:	d020      	beq.n	9001e80a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
9001e7c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e7ca:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e7ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e7d0:	4367      	muls	r7, r4
9001e7d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e7d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e7d8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e7dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e7de:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e7e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e7e6:	fb04 fa0a 	mul.w	sl, r4, sl
9001e7ea:	44bc      	add	ip, r7
9001e7ec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e7f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e7f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e7f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e7fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e800:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e804:	ea4c 040a 	orr.w	r4, ip, sl
9001e808:	940d      	str	r4, [sp, #52]	; 0x34
9001e80a:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e80c:	2cff      	cmp	r4, #255	; 0xff
9001e80e:	d020      	beq.n	9001e852 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
9001e810:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001e812:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e816:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e818:	4367      	muls	r7, r4
9001e81a:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001e81c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e820:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e824:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e826:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e82a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e82e:	fb04 fa0a 	mul.w	sl, r4, sl
9001e832:	44bc      	add	ip, r7
9001e834:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e838:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e83c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e840:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e844:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e848:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e84c:	ea4c 040a 	orr.w	r4, ip, sl
9001e850:	9409      	str	r4, [sp, #36]	; 0x24
9001e852:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e854:	2cff      	cmp	r4, #255	; 0xff
9001e856:	d020      	beq.n	9001e89a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
9001e858:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001e85a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e85e:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e860:	4367      	muls	r7, r4
9001e862:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001e864:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e868:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e86c:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e86e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e872:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e876:	fb04 fa0a 	mul.w	sl, r4, sl
9001e87a:	44bc      	add	ip, r7
9001e87c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e880:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e884:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e888:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e88c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e890:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e894:	ea4c 040a 	orr.w	r4, ip, sl
9001e898:	940e      	str	r4, [sp, #56]	; 0x38
9001e89a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e89c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001e8a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e8a4:	43d2      	mvns	r2, r2
9001e8a6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e8aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001e8ac:	b2d2      	uxtb	r2, r2
9001e8ae:	fb0e f707 	mul.w	r7, lr, r7
9001e8b2:	fb01 770c 	mla	r7, r1, ip, r7
9001e8b6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e8ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001e8bc:	fb00 770c 	mla	r7, r0, ip, r7
9001e8c0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e8c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e8c6:	fb08 770c 	mla	r7, r8, ip, r7
9001e8ca:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001e8ce:	fb0e fe0c 	mul.w	lr, lr, ip
9001e8d2:	0a3f      	lsrs	r7, r7, #8
9001e8d4:	fb01 e303 	mla	r3, r1, r3, lr
9001e8d8:	9909      	ldr	r1, [sp, #36]	; 0x24
9001e8da:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001e8de:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
9001e8e2:	990e      	ldr	r1, [sp, #56]	; 0x38
9001e8e4:	fb00 330a 	mla	r3, r0, sl, r3
9001e8e8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
9001e8ec:	fb08 3c0c 	mla	ip, r8, ip, r3
9001e8f0:	f8b9 3000 	ldrh.w	r3, [r9]
9001e8f4:	1218      	asrs	r0, r3, #8
9001e8f6:	10d9      	asrs	r1, r3, #3
9001e8f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e8fc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001e900:	00db      	lsls	r3, r3, #3
9001e902:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001e906:	4350      	muls	r0, r2
9001e908:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001e90c:	b2db      	uxtb	r3, r3
9001e90e:	4351      	muls	r1, r2
9001e910:	ea47 070c 	orr.w	r7, r7, ip
9001e914:	4353      	muls	r3, r2
9001e916:	1c42      	adds	r2, r0, #1
9001e918:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001e91c:	0c3a      	lsrs	r2, r7, #16
9001e91e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001e922:	4a18      	ldr	r2, [pc, #96]	; (9001e984 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
9001e924:	b2c0      	uxtb	r0, r0
9001e926:	ea02 2000 	and.w	r0, r2, r0, lsl #8
9001e92a:	1c4a      	adds	r2, r1, #1
9001e92c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e930:	0a3a      	lsrs	r2, r7, #8
9001e932:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001e936:	00c9      	lsls	r1, r1, #3
9001e938:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001e93c:	4301      	orrs	r1, r0
9001e93e:	1c58      	adds	r0, r3, #1
9001e940:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001e944:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001e948:	f3c7 00c4 	ubfx	r0, r7, #3, #5
9001e94c:	4308      	orrs	r0, r1
9001e94e:	f8a9 0000 	strh.w	r0, [r9]
9001e952:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001e954:	f109 0902 	add.w	r9, r9, #2
9001e958:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001e95a:	f10b 3bff 	add.w	fp, fp, #4294967295
9001e95e:	441a      	add	r2, r3
9001e960:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001e962:	9225      	str	r2, [sp, #148]	; 0x94
9001e964:	441d      	add	r5, r3
9001e966:	e64c      	b.n	9001e602 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001e968:	2800      	cmp	r0, #0
9001e96a:	f43f aeed 	beq.w	9001e748 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001e96e:	5c79      	ldrb	r1, [r7, r1]
9001e970:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e974:	9109      	str	r1, [sp, #36]	; 0x24
9001e976:	0e09      	lsrs	r1, r1, #24
9001e978:	9111      	str	r1, [sp, #68]	; 0x44
9001e97a:	e6e5      	b.n	9001e748 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001e97c:	b01b      	add	sp, #108	; 0x6c
9001e97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e982:	bf00      	nop
9001e984:	fffff800 	.word	0xfffff800

9001e988 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
9001e988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e98c:	b085      	sub	sp, #20
9001e98e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001e992:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001e996:	2800      	cmp	r0, #0
9001e998:	9103      	str	r1, [sp, #12]
9001e99a:	fb00 7406 	mla	r4, r0, r6, r7
9001e99e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001e9a2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001e9a6:	eb02 0544 	add.w	r5, r2, r4, lsl #1
9001e9aa:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001e9ae:	eb03 0904 	add.w	r9, r3, r4
9001e9b2:	9501      	str	r5, [sp, #4]
9001e9b4:	f2c0 8150 	blt.w	9001ec58 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001e9b8:	4583      	cmp	fp, r0
9001e9ba:	f340 814d 	ble.w	9001ec58 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001e9be:	2f00      	cmp	r7, #0
9001e9c0:	f2c0 8146 	blt.w	9001ec50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001e9c4:	42be      	cmp	r6, r7
9001e9c6:	f340 8143 	ble.w	9001ec50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001e9ca:	f813 c004 	ldrb.w	ip, [r3, r4]
9001e9ce:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
9001e9d2:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001e9d6:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001e9da:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001e9de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e9e2:	4355      	muls	r5, r2
9001e9e4:	fb0c f203 	mul.w	r2, ip, r3
9001e9e8:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001e9ec:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001e9f0:	441d      	add	r5, r3
9001e9f2:	f102 0320 	add.w	r3, r2, #32
9001e9f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001e9fa:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001e9fe:	0a1b      	lsrs	r3, r3, #8
9001ea00:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ea04:	431c      	orrs	r4, r3
9001ea06:	1c7b      	adds	r3, r7, #1
9001ea08:	f100 812b 	bmi.w	9001ec62 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001ea0c:	429e      	cmp	r6, r3
9001ea0e:	f340 8128 	ble.w	9001ec62 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001ea12:	2900      	cmp	r1, #0
9001ea14:	f000 8128 	beq.w	9001ec68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
9001ea18:	9a01      	ldr	r2, [sp, #4]
9001ea1a:	f899 3001 	ldrb.w	r3, [r9, #1]
9001ea1e:	8855      	ldrh	r5, [r2, #2]
9001ea20:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001ea24:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001ea28:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ea2c:	fb08 f802 	mul.w	r8, r8, r2
9001ea30:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001ea34:	435d      	muls	r5, r3
9001ea36:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001ea3a:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001ea3e:	44d0      	add	r8, sl
9001ea40:	f105 0a20 	add.w	sl, r5, #32
9001ea44:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001ea48:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001ea4c:	0a2d      	lsrs	r5, r5, #8
9001ea4e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ea52:	432a      	orrs	r2, r5
9001ea54:	3001      	adds	r0, #1
9001ea56:	f100 810d 	bmi.w	9001ec74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001ea5a:	4583      	cmp	fp, r0
9001ea5c:	f340 810a 	ble.w	9001ec74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001ea60:	f1be 0f00 	cmp.w	lr, #0
9001ea64:	f000 810b 	beq.w	9001ec7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
9001ea68:	2f00      	cmp	r7, #0
9001ea6a:	f2c0 8100 	blt.w	9001ec6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001ea6e:	42be      	cmp	r6, r7
9001ea70:	f340 80fd 	ble.w	9001ec6e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001ea74:	9801      	ldr	r0, [sp, #4]
9001ea76:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001ea7a:	f819 5006 	ldrb.w	r5, [r9, r6]
9001ea7e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001ea82:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001ea86:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001ea8a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001ea8e:	fb0a fa00 	mul.w	sl, sl, r0
9001ea92:	fb05 f808 	mul.w	r8, r5, r8
9001ea96:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001ea9a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001ea9e:	4482      	add	sl, r0
9001eaa0:	f108 0020 	add.w	r0, r8, #32
9001eaa4:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001eaa8:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001eaac:	0a00      	lsrs	r0, r0, #8
9001eaae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001eab2:	ea4b 0b00 	orr.w	fp, fp, r0
9001eab6:	3701      	adds	r7, #1
9001eab8:	f100 80e6 	bmi.w	9001ec88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001eabc:	42be      	cmp	r6, r7
9001eabe:	f340 80e3 	ble.w	9001ec88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001eac2:	2900      	cmp	r1, #0
9001eac4:	f000 80e3 	beq.w	9001ec8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
9001eac8:	3601      	adds	r6, #1
9001eaca:	9801      	ldr	r0, [sp, #4]
9001eacc:	f819 7006 	ldrb.w	r7, [r9, r6]
9001ead0:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001ead4:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001ead8:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001eadc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001eae0:	fb09 f906 	mul.w	r9, r9, r6
9001eae4:	fb07 f800 	mul.w	r8, r7, r0
9001eae8:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001eaec:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001eaf0:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001eaf4:	44d1      	add	r9, sl
9001eaf6:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001eafa:	f108 0020 	add.w	r0, r8, #32
9001eafe:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001eb02:	0a00      	lsrs	r0, r0, #8
9001eb04:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001eb08:	4330      	orrs	r0, r6
9001eb0a:	b28e      	uxth	r6, r1
9001eb0c:	fa1f f98e 	uxth.w	r9, lr
9001eb10:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001eb14:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001eb18:	fb06 f809 	mul.w	r8, r6, r9
9001eb1c:	0136      	lsls	r6, r6, #4
9001eb1e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001eb22:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001eb26:	9601      	str	r6, [sp, #4]
9001eb28:	ea4a 0404 	orr.w	r4, sl, r4
9001eb2c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001eb30:	fa1f f689 	uxth.w	r6, r9
9001eb34:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001eb38:	fb11 f90e 	smulbb	r9, r1, lr
9001eb3c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001eb40:	9602      	str	r6, [sp, #8]
9001eb42:	4626      	mov	r6, r4
9001eb44:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001eb48:	f1ce 0410 	rsb	r4, lr, #16
9001eb4c:	ea4a 0202 	orr.w	r2, sl, r2
9001eb50:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001eb54:	1a64      	subs	r4, r4, r1
9001eb56:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001eb5a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001eb5e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001eb62:	434a      	muls	r2, r1
9001eb64:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001eb68:	ea4a 0000 	orr.w	r0, sl, r0
9001eb6c:	9903      	ldr	r1, [sp, #12]
9001eb6e:	fb04 2406 	mla	r4, r4, r6, r2
9001eb72:	9e02      	ldr	r6, [sp, #8]
9001eb74:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001eb78:	fb09 4200 	mla	r2, r9, r0, r4
9001eb7c:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001eb80:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001eb84:	8808      	ldrh	r0, [r1, #0]
9001eb86:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001eb8a:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
9001eb8e:	ea44 0b0b 	orr.w	fp, r4, fp
9001eb92:	9c01      	ldr	r4, [sp, #4]
9001eb94:	b289      	uxth	r1, r1
9001eb96:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
9001eb9a:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001eb9e:	1ba4      	subs	r4, r4, r6
9001eba0:	9e01      	ldr	r6, [sp, #4]
9001eba2:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001eba6:	eba6 0608 	sub.w	r6, r6, r8
9001ebaa:	b2a4      	uxth	r4, r4
9001ebac:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001ebb0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001ebb4:	b2b6      	uxth	r6, r6
9001ebb6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001ebba:	4373      	muls	r3, r6
9001ebbc:	ea42 0e0e 	orr.w	lr, r2, lr
9001ebc0:	fb0c 3304 	mla	r3, ip, r4, r3
9001ebc4:	9c02      	ldr	r4, [sp, #8]
9001ebc6:	fa1f f28e 	uxth.w	r2, lr
9001ebca:	fb04 3505 	mla	r5, r4, r5, r3
9001ebce:	10d4      	asrs	r4, r2, #3
9001ebd0:	fb08 5707 	mla	r7, r8, r7, r5
9001ebd4:	1215      	asrs	r5, r2, #8
9001ebd6:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001ebda:	00d2      	lsls	r2, r2, #3
9001ebdc:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001ebe0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001ebe4:	b2d2      	uxtb	r2, r2
9001ebe6:	434f      	muls	r7, r1
9001ebe8:	1c7b      	adds	r3, r7, #1
9001ebea:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001ebee:	1203      	asrs	r3, r0, #8
9001ebf0:	ea6f 2717 	mvn.w	r7, r7, lsr #8
9001ebf4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001ebf8:	b2ff      	uxtb	r7, r7
9001ebfa:	fb13 f307 	smulbb	r3, r3, r7
9001ebfe:	fb05 3501 	mla	r5, r5, r1, r3
9001ec02:	10c3      	asrs	r3, r0, #3
9001ec04:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001ec08:	b2ad      	uxth	r5, r5
9001ec0a:	fb13 f307 	smulbb	r3, r3, r7
9001ec0e:	fb04 3401 	mla	r4, r4, r1, r3
9001ec12:	00c3      	lsls	r3, r0, #3
9001ec14:	b2db      	uxtb	r3, r3
9001ec16:	b2a4      	uxth	r4, r4
9001ec18:	fb13 f307 	smulbb	r3, r3, r7
9001ec1c:	fb02 3101 	mla	r1, r2, r1, r3
9001ec20:	1c6b      	adds	r3, r5, #1
9001ec22:	1c62      	adds	r2, r4, #1
9001ec24:	b289      	uxth	r1, r1
9001ec26:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001ec2a:	1c4b      	adds	r3, r1, #1
9001ec2c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
9001ec30:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001ec34:	9a03      	ldr	r2, [sp, #12]
9001ec36:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001ec3a:	0964      	lsrs	r4, r4, #5
9001ec3c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001ec40:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001ec44:	432b      	orrs	r3, r5
9001ec46:	4323      	orrs	r3, r4
9001ec48:	8013      	strh	r3, [r2, #0]
9001ec4a:	b005      	add	sp, #20
9001ec4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ec50:	f04f 0c00 	mov.w	ip, #0
9001ec54:	4664      	mov	r4, ip
9001ec56:	e6d6      	b.n	9001ea06 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
9001ec58:	2300      	movs	r3, #0
9001ec5a:	469c      	mov	ip, r3
9001ec5c:	461a      	mov	r2, r3
9001ec5e:	461c      	mov	r4, r3
9001ec60:	e6f8      	b.n	9001ea54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001ec62:	2300      	movs	r3, #0
9001ec64:	461a      	mov	r2, r3
9001ec66:	e6f5      	b.n	9001ea54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001ec68:	460b      	mov	r3, r1
9001ec6a:	460a      	mov	r2, r1
9001ec6c:	e6f2      	b.n	9001ea54 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001ec6e:	2500      	movs	r5, #0
9001ec70:	46ab      	mov	fp, r5
9001ec72:	e720      	b.n	9001eab6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
9001ec74:	2700      	movs	r7, #0
9001ec76:	463d      	mov	r5, r7
9001ec78:	4638      	mov	r0, r7
9001ec7a:	46bb      	mov	fp, r7
9001ec7c:	e745      	b.n	9001eb0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001ec7e:	4677      	mov	r7, lr
9001ec80:	4675      	mov	r5, lr
9001ec82:	4670      	mov	r0, lr
9001ec84:	46f3      	mov	fp, lr
9001ec86:	e740      	b.n	9001eb0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001ec88:	2700      	movs	r7, #0
9001ec8a:	4638      	mov	r0, r7
9001ec8c:	e73d      	b.n	9001eb0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001ec8e:	460f      	mov	r7, r1
9001ec90:	4608      	mov	r0, r1
9001ec92:	e73a      	b.n	9001eb0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

9001ec94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ec94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ec98:	b097      	sub	sp, #92	; 0x5c
9001ec9a:	9214      	str	r2, [sp, #80]	; 0x50
9001ec9c:	9308      	str	r3, [sp, #32]
9001ec9e:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001eca0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001eca4:	9015      	str	r0, [sp, #84]	; 0x54
9001eca6:	9312      	str	r3, [sp, #72]	; 0x48
9001eca8:	6850      	ldr	r0, [r2, #4]
9001ecaa:	9111      	str	r1, [sp, #68]	; 0x44
9001ecac:	6812      	ldr	r2, [r2, #0]
9001ecae:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
9001ecb2:	fb00 1303 	mla	r3, r0, r3, r1
9001ecb6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001ecba:	9309      	str	r3, [sp, #36]	; 0x24
9001ecbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ecbe:	681b      	ldr	r3, [r3, #0]
9001ecc0:	930b      	str	r3, [sp, #44]	; 0x2c
9001ecc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ecc4:	685b      	ldr	r3, [r3, #4]
9001ecc6:	930c      	str	r3, [sp, #48]	; 0x30
9001ecc8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001eccc:	930a      	str	r3, [sp, #40]	; 0x28
9001ecce:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001ecd0:	2b00      	cmp	r3, #0
9001ecd2:	dc03      	bgt.n	9001ecdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001ecd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001ecd6:	2b00      	cmp	r3, #0
9001ecd8:	f340 83cd 	ble.w	9001f476 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001ecdc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ecde:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001ece2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001ece6:	1e48      	subs	r0, r1, #1
9001ece8:	1e55      	subs	r5, r2, #1
9001ecea:	9b08      	ldr	r3, [sp, #32]
9001ecec:	2b00      	cmp	r3, #0
9001ecee:	f340 81a5 	ble.w	9001f03c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
9001ecf2:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001ecf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001ecf6:	1436      	asrs	r6, r6, #16
9001ecf8:	ea4f 4323 	mov.w	r3, r3, asr #16
9001ecfc:	d406      	bmi.n	9001ed0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ecfe:	4286      	cmp	r6, r0
9001ed00:	da04      	bge.n	9001ed0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ed02:	2b00      	cmp	r3, #0
9001ed04:	db02      	blt.n	9001ed0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001ed06:	42ab      	cmp	r3, r5
9001ed08:	f2c0 8199 	blt.w	9001f03e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001ed0c:	3601      	adds	r6, #1
9001ed0e:	f100 8186 	bmi.w	9001f01e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ed12:	42b1      	cmp	r1, r6
9001ed14:	f2c0 8183 	blt.w	9001f01e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ed18:	3301      	adds	r3, #1
9001ed1a:	f100 8180 	bmi.w	9001f01e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ed1e:	429a      	cmp	r2, r3
9001ed20:	f2c0 817d 	blt.w	9001f01e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ed24:	9b08      	ldr	r3, [sp, #32]
9001ed26:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001ed2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
9001ed2c:	9313      	str	r3, [sp, #76]	; 0x4c
9001ed2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001ed30:	2b00      	cmp	r3, #0
9001ed32:	f340 81a6 	ble.w	9001f082 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001ed36:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001ed38:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001ed3a:	1418      	asrs	r0, r3, #16
9001ed3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001ed3e:	142d      	asrs	r5, r5, #16
9001ed40:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001ed44:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001ed46:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001ed4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ed4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001ed50:	f100 81fa 	bmi.w	9001f148 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ed54:	f102 3eff 	add.w	lr, r2, #4294967295
9001ed58:	4575      	cmp	r5, lr
9001ed5a:	f280 81f5 	bge.w	9001f148 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ed5e:	2800      	cmp	r0, #0
9001ed60:	f2c0 81f2 	blt.w	9001f148 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ed64:	f103 3eff 	add.w	lr, r3, #4294967295
9001ed68:	4570      	cmp	r0, lr
9001ed6a:	f280 81ed 	bge.w	9001f148 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001ed6e:	b212      	sxth	r2, r2
9001ed70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ed72:	fa1f fe81 	uxth.w	lr, r1
9001ed76:	fb00 5002 	mla	r0, r0, r2, r5
9001ed7a:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001ed7e:	eb03 0a00 	add.w	sl, r3, r0
9001ed82:	f813 9000 	ldrb.w	r9, [r3, r0]
9001ed86:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001ed8a:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001ed8e:	b29b      	uxth	r3, r3
9001ed90:	f1bc 0f00 	cmp.w	ip, #0
9001ed94:	f000 81bb 	beq.w	9001f10e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
9001ed98:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001ed9c:	eb0a 0b02 	add.w	fp, sl, r2
9001eda0:	fa1f fa8c 	uxth.w	sl, ip
9001eda4:	940d      	str	r4, [sp, #52]	; 0x34
9001eda6:	fb0a fe0e 	mul.w	lr, sl, lr
9001edaa:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001edae:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001edb2:	eba5 050e 	sub.w	r5, r5, lr
9001edb6:	940e      	str	r4, [sp, #56]	; 0x38
9001edb8:	fa1f fa8a 	uxth.w	sl, sl
9001edbc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001edbe:	b2ad      	uxth	r5, r5
9001edc0:	eba3 030a 	sub.w	r3, r3, sl
9001edc4:	fb08 f505 	mul.w	r5, r8, r5
9001edc8:	b29b      	uxth	r3, r3
9001edca:	fb09 5303 	mla	r3, r9, r3, r5
9001edce:	fb0a 3304 	mla	r3, sl, r4, r3
9001edd2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001edd4:	fb0e 3304 	mla	r3, lr, r4, r3
9001edd8:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001eddc:	2b00      	cmp	r3, #0
9001edde:	f000 8111 	beq.w	9001f004 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001ede2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001ede4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001ede8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001edec:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001edf0:	f000 8192 	beq.w	9001f118 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
9001edf4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001edf8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001edfc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ee00:	fb0a fe0e 	mul.w	lr, sl, lr
9001ee04:	fb09 f000 	mul.w	r0, r9, r0
9001ee08:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001ee0c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001ee10:	f100 0b20 	add.w	fp, r0, #32
9001ee14:	44ce      	add	lr, r9
9001ee16:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001ee1a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001ee1e:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001ee22:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001ee26:	ea4e 0909 	orr.w	r9, lr, r9
9001ee2a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001ee2e:	8868      	ldrh	r0, [r5, #2]
9001ee30:	d019      	beq.n	9001ee66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001ee32:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001ee36:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001ee3a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ee3e:	fb0a fe0e 	mul.w	lr, sl, lr
9001ee42:	fb08 f800 	mul.w	r8, r8, r0
9001ee46:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001ee4a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001ee4e:	f108 0b20 	add.w	fp, r8, #32
9001ee52:	4486      	add	lr, r0
9001ee54:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001ee58:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001ee5c:	0a00      	lsrs	r0, r0, #8
9001ee5e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ee62:	ea4e 0000 	orr.w	r0, lr, r0
9001ee66:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001ee6a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001ee6e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001ee72:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001ee76:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001ee7a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ee7e:	ea4e 0909 	orr.w	r9, lr, r9
9001ee82:	ea4a 0000 	orr.w	r0, sl, r0
9001ee86:	f1bc 0f00 	cmp.w	ip, #0
9001ee8a:	f000 8147 	beq.w	9001f11c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
9001ee8e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001ee92:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001ee94:	3a01      	subs	r2, #1
9001ee96:	2cff      	cmp	r4, #255	; 0xff
9001ee98:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001ee9c:	f102 0202 	add.w	r2, r2, #2
9001eea0:	eb05 0e02 	add.w	lr, r5, r2
9001eea4:	5aaa      	ldrh	r2, [r5, r2]
9001eea6:	d018      	beq.n	9001eeda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
9001eea8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001eeac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001eeb0:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001eeb4:	fb04 fa02 	mul.w	sl, r4, r2
9001eeb8:	fb08 f805 	mul.w	r8, r8, r5
9001eebc:	f10a 0520 	add.w	r5, sl, #32
9001eec0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001eec4:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001eec8:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001eecc:	4442      	add	r2, r8
9001eece:	0a2d      	lsrs	r5, r5, #8
9001eed0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001eed4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001eed8:	432a      	orrs	r2, r5
9001eeda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001eedc:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001eee0:	2cff      	cmp	r4, #255	; 0xff
9001eee2:	d01a      	beq.n	9001ef1a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
9001eee4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001eee8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001eeec:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001eef0:	fb04 fa05 	mul.w	sl, r4, r5
9001eef4:	fb08 f80e 	mul.w	r8, r8, lr
9001eef8:	f10a 0e20 	add.w	lr, sl, #32
9001eefc:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001ef00:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001ef04:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001ef08:	4445      	add	r5, r8
9001ef0a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001ef0e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001ef12:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001ef16:	ea45 050e 	orr.w	r5, r5, lr
9001ef1a:	fb1c fe01 	smulbb	lr, ip, r1
9001ef1e:	f1cc 0810 	rsb	r8, ip, #16
9001ef22:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001ef26:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ef2a:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001ef2e:	eba8 0801 	sub.w	r8, r8, r1
9001ef32:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001ef36:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ef3a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001ef3e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001ef42:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001ef46:	ea4a 0202 	orr.w	r2, sl, r2
9001ef4a:	4341      	muls	r1, r0
9001ef4c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001ef50:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001ef54:	fb09 1108 	mla	r1, r9, r8, r1
9001ef58:	ea4b 0505 	orr.w	r5, fp, r5
9001ef5c:	fb0c 1102 	mla	r1, ip, r2, r1
9001ef60:	fb0e 1e05 	mla	lr, lr, r5, r1
9001ef64:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001ef68:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001ef6c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001ef70:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001ef74:	ea42 0e0e 	orr.w	lr, r2, lr
9001ef78:	fa1f f28e 	uxth.w	r2, lr
9001ef7c:	2bff      	cmp	r3, #255	; 0xff
9001ef7e:	d103      	bne.n	9001ef88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001ef80:	9912      	ldr	r1, [sp, #72]	; 0x48
9001ef82:	29ff      	cmp	r1, #255	; 0xff
9001ef84:	f000 80de 	beq.w	9001f144 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
9001ef88:	990a      	ldr	r1, [sp, #40]	; 0x28
9001ef8a:	1215      	asrs	r5, r2, #8
9001ef8c:	8838      	ldrh	r0, [r7, #0]
9001ef8e:	434b      	muls	r3, r1
9001ef90:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001ef94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001ef96:	f103 0c01 	add.w	ip, r3, #1
9001ef9a:	eb0c 2323 	add.w	r3, ip, r3, asr #8
9001ef9e:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001efa2:	fa5f fc83 	uxtb.w	ip, r3
9001efa6:	1203      	asrs	r3, r0, #8
9001efa8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001efac:	fb13 f30c 	smulbb	r3, r3, ip
9001efb0:	fb05 3501 	mla	r5, r5, r1, r3
9001efb4:	10c3      	asrs	r3, r0, #3
9001efb6:	10d1      	asrs	r1, r2, #3
9001efb8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001efbc:	00d2      	lsls	r2, r2, #3
9001efbe:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001efc2:	b2ad      	uxth	r5, r5
9001efc4:	fb13 f30c 	smulbb	r3, r3, ip
9001efc8:	b2d2      	uxtb	r2, r2
9001efca:	fb01 3104 	mla	r1, r1, r4, r3
9001efce:	00c3      	lsls	r3, r0, #3
9001efd0:	b2db      	uxtb	r3, r3
9001efd2:	b289      	uxth	r1, r1
9001efd4:	fb13 f30c 	smulbb	r3, r3, ip
9001efd8:	fb02 3304 	mla	r3, r2, r4, r3
9001efdc:	b29a      	uxth	r2, r3
9001efde:	1c6b      	adds	r3, r5, #1
9001efe0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001efe4:	1c53      	adds	r3, r2, #1
9001efe6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001efea:	1c4a      	adds	r2, r1, #1
9001efec:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001eff0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001eff4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001eff8:	0949      	lsrs	r1, r1, #5
9001effa:	432b      	orrs	r3, r5
9001effc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f000:	430b      	orrs	r3, r1
9001f002:	803b      	strh	r3, [r7, #0]
9001f004:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f006:	3702      	adds	r7, #2
9001f008:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001f00a:	4413      	add	r3, r2
9001f00c:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001f00e:	9321      	str	r3, [sp, #132]	; 0x84
9001f010:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f012:	441a      	add	r2, r3
9001f014:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f016:	3b01      	subs	r3, #1
9001f018:	9222      	str	r2, [sp, #136]	; 0x88
9001f01a:	9313      	str	r3, [sp, #76]	; 0x4c
9001f01c:	e687      	b.n	9001ed2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001f01e:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f020:	9e23      	ldr	r6, [sp, #140]	; 0x8c
9001f022:	9c22      	ldr	r4, [sp, #136]	; 0x88
9001f024:	4433      	add	r3, r6
9001f026:	9321      	str	r3, [sp, #132]	; 0x84
9001f028:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f02a:	441c      	add	r4, r3
9001f02c:	9b08      	ldr	r3, [sp, #32]
9001f02e:	3b01      	subs	r3, #1
9001f030:	9422      	str	r4, [sp, #136]	; 0x88
9001f032:	9308      	str	r3, [sp, #32]
9001f034:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f036:	3302      	adds	r3, #2
9001f038:	9309      	str	r3, [sp, #36]	; 0x24
9001f03a:	e656      	b.n	9001ecea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
9001f03c:	d028      	beq.n	9001f090 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001f03e:	9b08      	ldr	r3, [sp, #32]
9001f040:	9823      	ldr	r0, [sp, #140]	; 0x8c
9001f042:	3b01      	subs	r3, #1
9001f044:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001f046:	fb00 5003 	mla	r0, r0, r3, r5
9001f04a:	1400      	asrs	r0, r0, #16
9001f04c:	f53f ae6a 	bmi.w	9001ed24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f050:	3901      	subs	r1, #1
9001f052:	4288      	cmp	r0, r1
9001f054:	f6bf ae66 	bge.w	9001ed24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f058:	9924      	ldr	r1, [sp, #144]	; 0x90
9001f05a:	9822      	ldr	r0, [sp, #136]	; 0x88
9001f05c:	fb01 0303 	mla	r3, r1, r3, r0
9001f060:	141b      	asrs	r3, r3, #16
9001f062:	f53f ae5f 	bmi.w	9001ed24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f066:	3a01      	subs	r2, #1
9001f068:	4293      	cmp	r3, r2
9001f06a:	f6bf ae5b 	bge.w	9001ed24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f06e:	9b08      	ldr	r3, [sp, #32]
9001f070:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001f074:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001f078:	9313      	str	r3, [sp, #76]	; 0x4c
9001f07a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f07c:	2b00      	cmp	r3, #0
9001f07e:	f300 8082 	bgt.w	9001f186 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
9001f082:	9b08      	ldr	r3, [sp, #32]
9001f084:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001f088:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f08a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001f08e:	9309      	str	r3, [sp, #36]	; 0x24
9001f090:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f092:	2b00      	cmp	r3, #0
9001f094:	f340 81ef 	ble.w	9001f476 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001f098:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001f09c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f09e:	ee30 0a04 	vadd.f32	s0, s0, s8
9001f0a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001f0a6:	eef0 6a62 	vmov.f32	s13, s5
9001f0aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001f0ae:	ee31 1a05 	vadd.f32	s2, s2, s10
9001f0b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f0b6:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
9001f0ba:	eef0 6a43 	vmov.f32	s13, s6
9001f0be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001f0c2:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
9001f0c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001f0ca:	ee61 7a27 	vmul.f32	s15, s2, s15
9001f0ce:	ee77 2a62 	vsub.f32	s5, s14, s5
9001f0d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001f0d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001f0da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001f0de:	ee12 2a90 	vmov	r2, s5
9001f0e2:	eef0 2a47 	vmov.f32	s5, s14
9001f0e6:	fb92 f3f3 	sdiv	r3, r2, r3
9001f0ea:	ee13 2a10 	vmov	r2, s6
9001f0ee:	9323      	str	r3, [sp, #140]	; 0x8c
9001f0f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f0f2:	eeb0 3a67 	vmov.f32	s6, s15
9001f0f6:	fb92 f3f3 	sdiv	r3, r2, r3
9001f0fa:	9324      	str	r3, [sp, #144]	; 0x90
9001f0fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f0fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001f100:	3b01      	subs	r3, #1
9001f102:	9311      	str	r3, [sp, #68]	; 0x44
9001f104:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f106:	bf08      	it	eq
9001f108:	4613      	moveq	r3, r2
9001f10a:	9308      	str	r3, [sp, #32]
9001f10c:	e5df      	b.n	9001ecce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001f10e:	fb08 f505 	mul.w	r5, r8, r5
9001f112:	fb09 5303 	mla	r3, r9, r3, r5
9001f116:	e65f      	b.n	9001edd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
9001f118:	4681      	mov	r9, r0
9001f11a:	e686      	b.n	9001ee2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001f11c:	f1c1 0210 	rsb	r2, r1, #16
9001f120:	4341      	muls	r1, r0
9001f122:	fb09 1902 	mla	r9, r9, r2, r1
9001f126:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001f12a:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001f12e:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001f132:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f136:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001f13a:	ea42 0909 	orr.w	r9, r2, r9
9001f13e:	fa1f f289 	uxth.w	r2, r9
9001f142:	e71b      	b.n	9001ef7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9001f144:	803a      	strh	r2, [r7, #0]
9001f146:	e75d      	b.n	9001f004 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f148:	f115 0e01 	adds.w	lr, r5, #1
9001f14c:	f53f af5a 	bmi.w	9001f004 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f150:	4572      	cmp	r2, lr
9001f152:	f6ff af57 	blt.w	9001f004 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f156:	f110 0e01 	adds.w	lr, r0, #1
9001f15a:	f53f af53 	bmi.w	9001f004 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f15e:	4573      	cmp	r3, lr
9001f160:	f6ff af50 	blt.w	9001f004 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f164:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001f166:	b21b      	sxth	r3, r3
9001f168:	b212      	sxth	r2, r2
9001f16a:	9502      	str	r5, [sp, #8]
9001f16c:	9301      	str	r3, [sp, #4]
9001f16e:	9200      	str	r2, [sp, #0]
9001f170:	e9cd 0103 	strd	r0, r1, [sp, #12]
9001f174:	e9cd c405 	strd	ip, r4, [sp, #20]
9001f178:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
9001f17c:	4639      	mov	r1, r7
9001f17e:	9815      	ldr	r0, [sp, #84]	; 0x54
9001f180:	f7ff fc02 	bl	9001e988 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
9001f184:	e73e      	b.n	9001f004 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f186:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f188:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001f18c:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001f18e:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001f192:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f194:	fa1f fc82 	uxth.w	ip, r2
9001f198:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f19c:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001f19e:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001f1a2:	141f      	asrs	r7, r3, #16
9001f1a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f1a6:	141b      	asrs	r3, r3, #16
9001f1a8:	fb01 3707 	mla	r7, r1, r7, r3
9001f1ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001f1ae:	eb03 0a07 	add.w	sl, r3, r7
9001f1b2:	f813 9007 	ldrb.w	r9, [r3, r7]
9001f1b6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001f1ba:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001f1be:	b29b      	uxth	r3, r3
9001f1c0:	2d00      	cmp	r5, #0
9001f1c2:	f000 813d 	beq.w	9001f440 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
9001f1c6:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001f1ca:	eb0a 0b01 	add.w	fp, sl, r1
9001f1ce:	fa1f fa85 	uxth.w	sl, r5
9001f1d2:	940f      	str	r4, [sp, #60]	; 0x3c
9001f1d4:	fb0a fc0c 	mul.w	ip, sl, ip
9001f1d8:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001f1dc:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001f1e0:	eba0 000c 	sub.w	r0, r0, ip
9001f1e4:	9410      	str	r4, [sp, #64]	; 0x40
9001f1e6:	fa1f fa8a 	uxth.w	sl, sl
9001f1ea:	b280      	uxth	r0, r0
9001f1ec:	eba3 030a 	sub.w	r3, r3, sl
9001f1f0:	fb08 f000 	mul.w	r0, r8, r0
9001f1f4:	b29b      	uxth	r3, r3
9001f1f6:	fb09 0303 	mla	r3, r9, r3, r0
9001f1fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001f1fc:	fb0a 3300 	mla	r3, sl, r0, r3
9001f200:	fb0c 3304 	mla	r3, ip, r4, r3
9001f204:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f208:	2b00      	cmp	r3, #0
9001f20a:	f000 810b 	beq.w	9001f424 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001f20e:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001f210:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001f214:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001f216:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001f21a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001f21e:	f000 8114 	beq.w	9001f44a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
9001f222:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001f226:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001f22a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f22e:	fb0a fc0c 	mul.w	ip, sl, ip
9001f232:	fb09 f707 	mul.w	r7, r9, r7
9001f236:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001f23a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001f23e:	f107 0b20 	add.w	fp, r7, #32
9001f242:	44cc      	add	ip, r9
9001f244:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001f248:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001f24c:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001f250:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001f254:	ea4c 0909 	orr.w	r9, ip, r9
9001f258:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001f25c:	8847      	ldrh	r7, [r0, #2]
9001f25e:	d019      	beq.n	9001f294 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
9001f260:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001f264:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001f268:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f26c:	fb0a fc0c 	mul.w	ip, sl, ip
9001f270:	fb08 f807 	mul.w	r8, r8, r7
9001f274:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001f278:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001f27c:	f108 0b20 	add.w	fp, r8, #32
9001f280:	44bc      	add	ip, r7
9001f282:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001f286:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001f28a:	0a3f      	lsrs	r7, r7, #8
9001f28c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f290:	ea4c 0707 	orr.w	r7, ip, r7
9001f294:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001f298:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001f29c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001f2a0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001f2a4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001f2a8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f2ac:	ea4c 0909 	orr.w	r9, ip, r9
9001f2b0:	ea4a 0707 	orr.w	r7, sl, r7
9001f2b4:	2d00      	cmp	r5, #0
9001f2b6:	f000 80ca 	beq.w	9001f44e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
9001f2ba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001f2be:	3901      	subs	r1, #1
9001f2c0:	0049      	lsls	r1, r1, #1
9001f2c2:	3102      	adds	r1, #2
9001f2c4:	eb00 0c01 	add.w	ip, r0, r1
9001f2c8:	5a41      	ldrh	r1, [r0, r1]
9001f2ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001f2cc:	28ff      	cmp	r0, #255	; 0xff
9001f2ce:	d019      	beq.n	9001f304 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
9001f2d0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001f2d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001f2d6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f2da:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f2de:	fb04 fa01 	mul.w	sl, r4, r1
9001f2e2:	fb08 f800 	mul.w	r8, r8, r0
9001f2e6:	f10a 0020 	add.w	r0, sl, #32
9001f2ea:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001f2ee:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f2f2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001f2f6:	4441      	add	r1, r8
9001f2f8:	0a00      	lsrs	r0, r0, #8
9001f2fa:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001f2fe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f302:	4301      	orrs	r1, r0
9001f304:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001f306:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001f30a:	2cff      	cmp	r4, #255	; 0xff
9001f30c:	d01a      	beq.n	9001f344 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
9001f30e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9001f312:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f316:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f31a:	fb04 fa00 	mul.w	sl, r4, r0
9001f31e:	fb08 f80c 	mul.w	r8, r8, ip
9001f322:	f10a 0c20 	add.w	ip, sl, #32
9001f326:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001f32a:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f32e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001f332:	4440      	add	r0, r8
9001f334:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f338:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001f33c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001f340:	ea40 000c 	orr.w	r0, r0, ip
9001f344:	fb15 fc02 	smulbb	ip, r5, r2
9001f348:	f1c5 0810 	rsb	r8, r5, #16
9001f34c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001f350:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001f354:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001f358:	eba8 0802 	sub.w	r8, r8, r2
9001f35c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001f360:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f364:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001f368:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f36c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001f370:	ea4a 0101 	orr.w	r1, sl, r1
9001f374:	437a      	muls	r2, r7
9001f376:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001f37a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f37e:	fb09 2208 	mla	r2, r9, r8, r2
9001f382:	ea4b 0000 	orr.w	r0, fp, r0
9001f386:	fb05 2201 	mla	r2, r5, r1, r2
9001f38a:	fb0c 2200 	mla	r2, ip, r0, r2
9001f38e:	0d57      	lsrs	r7, r2, #21
9001f390:	0952      	lsrs	r2, r2, #5
9001f392:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f396:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f39a:	433a      	orrs	r2, r7
9001f39c:	2bff      	cmp	r3, #255	; 0xff
9001f39e:	b292      	uxth	r2, r2
9001f3a0:	d102      	bne.n	9001f3a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001f3a2:	9912      	ldr	r1, [sp, #72]	; 0x48
9001f3a4:	29ff      	cmp	r1, #255	; 0xff
9001f3a6:	d063      	beq.n	9001f470 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
9001f3a8:	980a      	ldr	r0, [sp, #40]	; 0x28
9001f3aa:	1215      	asrs	r5, r2, #8
9001f3ac:	f8be 1000 	ldrh.w	r1, [lr]
9001f3b0:	4343      	muls	r3, r0
9001f3b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001f3b4:	10cf      	asrs	r7, r1, #3
9001f3b6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f3ba:	1c58      	adds	r0, r3, #1
9001f3bc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001f3c0:	eb00 2323 	add.w	r3, r0, r3, asr #8
9001f3c4:	1208      	asrs	r0, r1, #8
9001f3c6:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001f3ca:	00c9      	lsls	r1, r1, #3
9001f3cc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001f3d0:	b2db      	uxtb	r3, r3
9001f3d2:	b2c9      	uxtb	r1, r1
9001f3d4:	fb10 f003 	smulbb	r0, r0, r3
9001f3d8:	fb11 f103 	smulbb	r1, r1, r3
9001f3dc:	fb05 0504 	mla	r5, r5, r4, r0
9001f3e0:	10d0      	asrs	r0, r2, #3
9001f3e2:	fb17 f703 	smulbb	r7, r7, r3
9001f3e6:	00d2      	lsls	r2, r2, #3
9001f3e8:	b2ad      	uxth	r5, r5
9001f3ea:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001f3ee:	b2d2      	uxtb	r2, r2
9001f3f0:	fb00 7004 	mla	r0, r0, r4, r7
9001f3f4:	1c6b      	adds	r3, r5, #1
9001f3f6:	fb02 1204 	mla	r2, r2, r4, r1
9001f3fa:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f3fe:	b292      	uxth	r2, r2
9001f400:	b280      	uxth	r0, r0
9001f402:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001f406:	1c57      	adds	r7, r2, #1
9001f408:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001f40c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001f410:	433d      	orrs	r5, r7
9001f412:	1c47      	adds	r7, r0, #1
9001f414:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001f418:	097f      	lsrs	r7, r7, #5
9001f41a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001f41e:	433d      	orrs	r5, r7
9001f420:	f8ae 5000 	strh.w	r5, [lr]
9001f424:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f426:	f10e 0e02 	add.w	lr, lr, #2
9001f42a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001f42c:	4413      	add	r3, r2
9001f42e:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001f430:	9321      	str	r3, [sp, #132]	; 0x84
9001f432:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f434:	441a      	add	r2, r3
9001f436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f438:	3b01      	subs	r3, #1
9001f43a:	9222      	str	r2, [sp, #136]	; 0x88
9001f43c:	9313      	str	r3, [sp, #76]	; 0x4c
9001f43e:	e61c      	b.n	9001f07a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
9001f440:	fb08 f000 	mul.w	r0, r8, r0
9001f444:	fb09 0303 	mla	r3, r9, r3, r0
9001f448:	e6dc      	b.n	9001f204 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
9001f44a:	46b9      	mov	r9, r7
9001f44c:	e704      	b.n	9001f258 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
9001f44e:	f1c2 0110 	rsb	r1, r2, #16
9001f452:	437a      	muls	r2, r7
9001f454:	fb09 2901 	mla	r9, r9, r1, r2
9001f458:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001f45c:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001f460:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001f464:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f468:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f46c:	4302      	orrs	r2, r0
9001f46e:	e795      	b.n	9001f39c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
9001f470:	f8ae 2000 	strh.w	r2, [lr]
9001f474:	e7d6      	b.n	9001f424 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001f476:	b017      	add	sp, #92	; 0x5c
9001f478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001f47c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001f47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f480:	b085      	sub	sp, #20
9001f482:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001f486:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001f48a:	2800      	cmp	r0, #0
9001f48c:	9103      	str	r1, [sp, #12]
9001f48e:	fb00 7406 	mla	r4, r0, r6, r7
9001f492:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001f496:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001f49a:	eb03 0544 	add.w	r5, r3, r4, lsl #1
9001f49e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001f4a2:	eb02 0904 	add.w	r9, r2, r4
9001f4a6:	9501      	str	r5, [sp, #4]
9001f4a8:	f2c0 8141 	blt.w	9001f72e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001f4ac:	4583      	cmp	fp, r0
9001f4ae:	f340 813e 	ble.w	9001f72e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001f4b2:	2f00      	cmp	r7, #0
9001f4b4:	f2c0 8137 	blt.w	9001f726 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001f4b8:	42be      	cmp	r6, r7
9001f4ba:	f340 8134 	ble.w	9001f726 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001f4be:	f812 c004 	ldrb.w	ip, [r2, r4]
9001f4c2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
9001f4c6:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001f4ca:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001f4ce:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001f4d2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f4d6:	4355      	muls	r5, r2
9001f4d8:	fb0c f203 	mul.w	r2, ip, r3
9001f4dc:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001f4e0:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001f4e4:	441d      	add	r5, r3
9001f4e6:	f102 0320 	add.w	r3, r2, #32
9001f4ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f4ee:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001f4f2:	0a1b      	lsrs	r3, r3, #8
9001f4f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f4f8:	431c      	orrs	r4, r3
9001f4fa:	1c7b      	adds	r3, r7, #1
9001f4fc:	f100 811c 	bmi.w	9001f738 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001f500:	429e      	cmp	r6, r3
9001f502:	f340 8119 	ble.w	9001f738 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001f506:	2900      	cmp	r1, #0
9001f508:	f000 8119 	beq.w	9001f73e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
9001f50c:	9a01      	ldr	r2, [sp, #4]
9001f50e:	f899 3001 	ldrb.w	r3, [r9, #1]
9001f512:	8855      	ldrh	r5, [r2, #2]
9001f514:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001f518:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001f51c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f520:	fb08 f802 	mul.w	r8, r8, r2
9001f524:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001f528:	435d      	muls	r5, r3
9001f52a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001f52e:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f532:	44d0      	add	r8, sl
9001f534:	f105 0a20 	add.w	sl, r5, #32
9001f538:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001f53c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001f540:	0a2d      	lsrs	r5, r5, #8
9001f542:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f546:	432a      	orrs	r2, r5
9001f548:	3001      	adds	r0, #1
9001f54a:	f100 80fe 	bmi.w	9001f74a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001f54e:	4583      	cmp	fp, r0
9001f550:	f340 80fb 	ble.w	9001f74a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001f554:	f1be 0f00 	cmp.w	lr, #0
9001f558:	f000 80fc 	beq.w	9001f754 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
9001f55c:	2f00      	cmp	r7, #0
9001f55e:	f2c0 80f1 	blt.w	9001f744 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001f562:	42be      	cmp	r6, r7
9001f564:	f340 80ee 	ble.w	9001f744 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001f568:	9801      	ldr	r0, [sp, #4]
9001f56a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001f56e:	f819 5006 	ldrb.w	r5, [r9, r6]
9001f572:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001f576:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001f57a:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001f57e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001f582:	fb0a fa00 	mul.w	sl, sl, r0
9001f586:	fb05 f808 	mul.w	r8, r5, r8
9001f58a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001f58e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001f592:	4482      	add	sl, r0
9001f594:	f108 0020 	add.w	r0, r8, #32
9001f598:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001f59c:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001f5a0:	0a00      	lsrs	r0, r0, #8
9001f5a2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f5a6:	ea4b 0b00 	orr.w	fp, fp, r0
9001f5aa:	3701      	adds	r7, #1
9001f5ac:	f100 80d7 	bmi.w	9001f75e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001f5b0:	42be      	cmp	r6, r7
9001f5b2:	f340 80d4 	ble.w	9001f75e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001f5b6:	2900      	cmp	r1, #0
9001f5b8:	f000 80d4 	beq.w	9001f764 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
9001f5bc:	3601      	adds	r6, #1
9001f5be:	9801      	ldr	r0, [sp, #4]
9001f5c0:	f819 7006 	ldrb.w	r7, [r9, r6]
9001f5c4:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001f5c8:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001f5cc:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001f5d0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f5d4:	fb09 f906 	mul.w	r9, r9, r6
9001f5d8:	fb07 f800 	mul.w	r8, r7, r0
9001f5dc:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001f5e0:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001f5e4:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001f5e8:	44d1      	add	r9, sl
9001f5ea:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001f5ee:	f108 0020 	add.w	r0, r8, #32
9001f5f2:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001f5f6:	0a00      	lsrs	r0, r0, #8
9001f5f8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f5fc:	4330      	orrs	r0, r6
9001f5fe:	b28e      	uxth	r6, r1
9001f600:	fa1f f98e 	uxth.w	r9, lr
9001f604:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001f608:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001f60c:	fb06 f809 	mul.w	r8, r6, r9
9001f610:	0136      	lsls	r6, r6, #4
9001f612:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f616:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001f61a:	9601      	str	r6, [sp, #4]
9001f61c:	ea4a 0404 	orr.w	r4, sl, r4
9001f620:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001f624:	fa1f f689 	uxth.w	r6, r9
9001f628:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f62c:	fb11 f90e 	smulbb	r9, r1, lr
9001f630:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f634:	9602      	str	r6, [sp, #8]
9001f636:	4626      	mov	r6, r4
9001f638:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001f63c:	f1ce 0410 	rsb	r4, lr, #16
9001f640:	ea4a 0202 	orr.w	r2, sl, r2
9001f644:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001f648:	1a64      	subs	r4, r4, r1
9001f64a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001f64e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f652:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f656:	434a      	muls	r2, r1
9001f658:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001f65c:	ea4a 0000 	orr.w	r0, sl, r0
9001f660:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001f664:	fb04 2406 	mla	r4, r4, r6, r2
9001f668:	9903      	ldr	r1, [sp, #12]
9001f66a:	fb09 4200 	mla	r2, r9, r0, r4
9001f66e:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001f672:	9801      	ldr	r0, [sp, #4]
9001f674:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001f678:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001f67c:	8809      	ldrh	r1, [r1, #0]
9001f67e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
9001f682:	ea44 0b0b 	orr.w	fp, r4, fp
9001f686:	9c02      	ldr	r4, [sp, #8]
9001f688:	1b00      	subs	r0, r0, r4
9001f68a:	9c01      	ldr	r4, [sp, #4]
9001f68c:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001f690:	eba4 0608 	sub.w	r6, r4, r8
9001f694:	b280      	uxth	r0, r0
9001f696:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001f69a:	b2b6      	uxth	r6, r6
9001f69c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001f6a0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f6a4:	4373      	muls	r3, r6
9001f6a6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001f6aa:	fb0c 3300 	mla	r3, ip, r0, r3
9001f6ae:	9802      	ldr	r0, [sp, #8]
9001f6b0:	ea42 0e0e 	orr.w	lr, r2, lr
9001f6b4:	fb00 3505 	mla	r5, r0, r5, r3
9001f6b8:	120b      	asrs	r3, r1, #8
9001f6ba:	10c8      	asrs	r0, r1, #3
9001f6bc:	fb08 5707 	mla	r7, r8, r7, r5
9001f6c0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001f6c4:	00c9      	lsls	r1, r1, #3
9001f6c6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001f6ca:	ea6f 2727 	mvn.w	r7, r7, asr #8
9001f6ce:	fa1f f28e 	uxth.w	r2, lr
9001f6d2:	b2c9      	uxtb	r1, r1
9001f6d4:	b2ff      	uxtb	r7, r7
9001f6d6:	437b      	muls	r3, r7
9001f6d8:	4378      	muls	r0, r7
9001f6da:	434f      	muls	r7, r1
9001f6dc:	1c59      	adds	r1, r3, #1
9001f6de:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001f6e2:	1213      	asrs	r3, r2, #8
9001f6e4:	f023 0307 	bic.w	r3, r3, #7
9001f6e8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001f6ec:	1c41      	adds	r1, r0, #1
9001f6ee:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001f6f2:	10d1      	asrs	r1, r2, #3
9001f6f4:	021b      	lsls	r3, r3, #8
9001f6f6:	f021 0103 	bic.w	r1, r1, #3
9001f6fa:	00d2      	lsls	r2, r2, #3
9001f6fc:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
9001f700:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001f704:	00c9      	lsls	r1, r1, #3
9001f706:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f70a:	430b      	orrs	r3, r1
9001f70c:	1c79      	adds	r1, r7, #1
9001f70e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
9001f712:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001f716:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001f71a:	431a      	orrs	r2, r3
9001f71c:	9b03      	ldr	r3, [sp, #12]
9001f71e:	801a      	strh	r2, [r3, #0]
9001f720:	b005      	add	sp, #20
9001f722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f726:	f04f 0c00 	mov.w	ip, #0
9001f72a:	4664      	mov	r4, ip
9001f72c:	e6e5      	b.n	9001f4fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
9001f72e:	2300      	movs	r3, #0
9001f730:	469c      	mov	ip, r3
9001f732:	461a      	mov	r2, r3
9001f734:	461c      	mov	r4, r3
9001f736:	e707      	b.n	9001f548 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f738:	2300      	movs	r3, #0
9001f73a:	461a      	mov	r2, r3
9001f73c:	e704      	b.n	9001f548 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f73e:	460b      	mov	r3, r1
9001f740:	460a      	mov	r2, r1
9001f742:	e701      	b.n	9001f548 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9001f744:	2500      	movs	r5, #0
9001f746:	46ab      	mov	fp, r5
9001f748:	e72f      	b.n	9001f5aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
9001f74a:	2700      	movs	r7, #0
9001f74c:	463d      	mov	r5, r7
9001f74e:	4638      	mov	r0, r7
9001f750:	46bb      	mov	fp, r7
9001f752:	e754      	b.n	9001f5fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f754:	4677      	mov	r7, lr
9001f756:	4675      	mov	r5, lr
9001f758:	4670      	mov	r0, lr
9001f75a:	46f3      	mov	fp, lr
9001f75c:	e74f      	b.n	9001f5fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f75e:	2700      	movs	r7, #0
9001f760:	4638      	mov	r0, r7
9001f762:	e74c      	b.n	9001f5fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9001f764:	460f      	mov	r7, r1
9001f766:	4608      	mov	r0, r1
9001f768:	e749      	b.n	9001f5fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

9001f76c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001f76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f770:	b093      	sub	sp, #76	; 0x4c
9001f772:	9210      	str	r2, [sp, #64]	; 0x40
9001f774:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001f776:	9011      	str	r0, [sp, #68]	; 0x44
9001f778:	910e      	str	r1, [sp, #56]	; 0x38
9001f77a:	6850      	ldr	r0, [r2, #4]
9001f77c:	9306      	str	r3, [sp, #24]
9001f77e:	6812      	ldr	r2, [r2, #0]
9001f780:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001f784:	fb00 1303 	mla	r3, r0, r3, r1
9001f788:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001f78c:	9307      	str	r3, [sp, #28]
9001f78e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f790:	681b      	ldr	r3, [r3, #0]
9001f792:	9308      	str	r3, [sp, #32]
9001f794:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f796:	685b      	ldr	r3, [r3, #4]
9001f798:	9309      	str	r3, [sp, #36]	; 0x24
9001f79a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001f79c:	2b00      	cmp	r3, #0
9001f79e:	dc03      	bgt.n	9001f7a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001f7a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f7a2:	2b00      	cmp	r3, #0
9001f7a4:	f340 83b6 	ble.w	9001ff14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001f7a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f7aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f7ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001f7b2:	1e48      	subs	r0, r1, #1
9001f7b4:	1e55      	subs	r5, r2, #1
9001f7b6:	9b06      	ldr	r3, [sp, #24]
9001f7b8:	2b00      	cmp	r3, #0
9001f7ba:	f340 8165 	ble.w	9001fa88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
9001f7be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
9001f7c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001f7c2:	1436      	asrs	r6, r6, #16
9001f7c4:	ea4f 4323 	mov.w	r3, r3, asr #16
9001f7c8:	d406      	bmi.n	9001f7d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001f7ca:	4286      	cmp	r6, r0
9001f7cc:	da04      	bge.n	9001f7d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001f7ce:	2b00      	cmp	r3, #0
9001f7d0:	db02      	blt.n	9001f7d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001f7d2:	42ab      	cmp	r3, r5
9001f7d4:	f2c0 8159 	blt.w	9001fa8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001f7d8:	3601      	adds	r6, #1
9001f7da:	f100 8146 	bmi.w	9001fa6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f7de:	42b1      	cmp	r1, r6
9001f7e0:	f2c0 8143 	blt.w	9001fa6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f7e4:	3301      	adds	r3, #1
9001f7e6:	f100 8140 	bmi.w	9001fa6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f7ea:	429a      	cmp	r2, r3
9001f7ec:	f2c0 813d 	blt.w	9001fa6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9001f7f0:	9b06      	ldr	r3, [sp, #24]
9001f7f2:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001f7f6:	9f07      	ldr	r7, [sp, #28]
9001f7f8:	930f      	str	r3, [sp, #60]	; 0x3c
9001f7fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001f7fc:	2b00      	cmp	r3, #0
9001f7fe:	f340 8166 	ble.w	9001face <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9001f802:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001f804:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9001f806:	1418      	asrs	r0, r3, #16
9001f808:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001f80a:	142d      	asrs	r5, r5, #16
9001f80c:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001f810:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001f812:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001f816:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f818:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001f81c:	f100 81f0 	bmi.w	9001fc00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f820:	f102 3eff 	add.w	lr, r2, #4294967295
9001f824:	4575      	cmp	r5, lr
9001f826:	f280 81eb 	bge.w	9001fc00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f82a:	2800      	cmp	r0, #0
9001f82c:	f2c0 81e8 	blt.w	9001fc00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f830:	f103 3eff 	add.w	lr, r3, #4294967295
9001f834:	4570      	cmp	r0, lr
9001f836:	f280 81e3 	bge.w	9001fc00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001f83a:	b212      	sxth	r2, r2
9001f83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f83e:	fa1f fe81 	uxth.w	lr, r1
9001f842:	fb00 5002 	mla	r0, r0, r2, r5
9001f846:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001f84a:	eb03 0a00 	add.w	sl, r3, r0
9001f84e:	f813 9000 	ldrb.w	r9, [r3, r0]
9001f852:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001f856:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001f85a:	b29b      	uxth	r3, r3
9001f85c:	f1bc 0f00 	cmp.w	ip, #0
9001f860:	f000 817b 	beq.w	9001fb5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001f864:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001f868:	eb0a 0b02 	add.w	fp, sl, r2
9001f86c:	fa1f fa8c 	uxth.w	sl, ip
9001f870:	940a      	str	r4, [sp, #40]	; 0x28
9001f872:	fb0a fe0e 	mul.w	lr, sl, lr
9001f876:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001f87a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001f87e:	eba5 050e 	sub.w	r5, r5, lr
9001f882:	940b      	str	r4, [sp, #44]	; 0x2c
9001f884:	fa1f fa8a 	uxth.w	sl, sl
9001f888:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001f88a:	b2ad      	uxth	r5, r5
9001f88c:	eba3 030a 	sub.w	r3, r3, sl
9001f890:	fb08 f505 	mul.w	r5, r8, r5
9001f894:	b29b      	uxth	r3, r3
9001f896:	fb09 5303 	mla	r3, r9, r3, r5
9001f89a:	fb0a 3304 	mla	r3, sl, r4, r3
9001f89e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001f8a0:	fb0e 3304 	mla	r3, lr, r4, r3
9001f8a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f8a8:	2b00      	cmp	r3, #0
9001f8aa:	f000 80d1 	beq.w	9001fa50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001f8ae:	9c08      	ldr	r4, [sp, #32]
9001f8b0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001f8b4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001f8b8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001f8bc:	f000 8152 	beq.w	9001fb64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
9001f8c0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001f8c4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001f8c8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f8cc:	fb0a fe0e 	mul.w	lr, sl, lr
9001f8d0:	fb09 f000 	mul.w	r0, r9, r0
9001f8d4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001f8d8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001f8dc:	f100 0b20 	add.w	fp, r0, #32
9001f8e0:	44ce      	add	lr, r9
9001f8e2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001f8e6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001f8ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001f8ee:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001f8f2:	ea4e 0909 	orr.w	r9, lr, r9
9001f8f6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001f8fa:	8868      	ldrh	r0, [r5, #2]
9001f8fc:	d019      	beq.n	9001f932 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9001f8fe:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001f902:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001f906:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f90a:	fb0a fe0e 	mul.w	lr, sl, lr
9001f90e:	fb08 f800 	mul.w	r8, r8, r0
9001f912:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001f916:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001f91a:	f108 0b20 	add.w	fp, r8, #32
9001f91e:	4486      	add	lr, r0
9001f920:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001f924:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001f928:	0a00      	lsrs	r0, r0, #8
9001f92a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f92e:	ea4e 0000 	orr.w	r0, lr, r0
9001f932:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001f936:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001f93a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001f93e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f942:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001f946:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f94a:	ea4e 0909 	orr.w	r9, lr, r9
9001f94e:	ea4a 0000 	orr.w	r0, sl, r0
9001f952:	f1bc 0f00 	cmp.w	ip, #0
9001f956:	f000 8107 	beq.w	9001fb68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001f95a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001f95e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001f960:	3a01      	subs	r2, #1
9001f962:	2cff      	cmp	r4, #255	; 0xff
9001f964:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001f968:	f102 0202 	add.w	r2, r2, #2
9001f96c:	eb05 0e02 	add.w	lr, r5, r2
9001f970:	5aaa      	ldrh	r2, [r5, r2]
9001f972:	d018      	beq.n	9001f9a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
9001f974:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001f978:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f97c:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f980:	fb04 fa02 	mul.w	sl, r4, r2
9001f984:	fb08 f805 	mul.w	r8, r8, r5
9001f988:	f10a 0520 	add.w	r5, sl, #32
9001f98c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001f990:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f994:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001f998:	4442      	add	r2, r8
9001f99a:	0a2d      	lsrs	r5, r5, #8
9001f99c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001f9a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f9a4:	432a      	orrs	r2, r5
9001f9a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001f9a8:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001f9ac:	2cff      	cmp	r4, #255	; 0xff
9001f9ae:	d01a      	beq.n	9001f9e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001f9b0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001f9b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f9b8:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f9bc:	fb04 fa05 	mul.w	sl, r4, r5
9001f9c0:	fb08 f80e 	mul.w	r8, r8, lr
9001f9c4:	f10a 0e20 	add.w	lr, sl, #32
9001f9c8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001f9cc:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f9d0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001f9d4:	4445      	add	r5, r8
9001f9d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001f9da:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001f9de:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001f9e2:	ea45 050e 	orr.w	r5, r5, lr
9001f9e6:	fb1c fe01 	smulbb	lr, ip, r1
9001f9ea:	f1cc 0810 	rsb	r8, ip, #16
9001f9ee:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001f9f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f9f6:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001f9fa:	eba8 0801 	sub.w	r8, r8, r1
9001f9fe:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001fa02:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fa06:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001fa0a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001fa0e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001fa12:	ea4a 0202 	orr.w	r2, sl, r2
9001fa16:	4341      	muls	r1, r0
9001fa18:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001fa1c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001fa20:	fb09 1108 	mla	r1, r9, r8, r1
9001fa24:	ea4b 0505 	orr.w	r5, fp, r5
9001fa28:	fb0c 1102 	mla	r1, ip, r2, r1
9001fa2c:	fb0e 1e05 	mla	lr, lr, r5, r1
9001fa30:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001fa34:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001fa38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fa3c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001fa40:	ea42 0e0e 	orr.w	lr, r2, lr
9001fa44:	fa1f f28e 	uxth.w	r2, lr
9001fa48:	2bff      	cmp	r3, #255	; 0xff
9001fa4a:	f040 80a1 	bne.w	9001fb90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
9001fa4e:	803a      	strh	r2, [r7, #0]
9001fa50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fa52:	3702      	adds	r7, #2
9001fa54:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9001fa56:	4413      	add	r3, r2
9001fa58:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9001fa5a:	931d      	str	r3, [sp, #116]	; 0x74
9001fa5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001fa5e:	441a      	add	r2, r3
9001fa60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001fa62:	3b01      	subs	r3, #1
9001fa64:	921e      	str	r2, [sp, #120]	; 0x78
9001fa66:	930f      	str	r3, [sp, #60]	; 0x3c
9001fa68:	e6c7      	b.n	9001f7fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001fa6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fa6c:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001fa6e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
9001fa70:	4433      	add	r3, r6
9001fa72:	931d      	str	r3, [sp, #116]	; 0x74
9001fa74:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001fa76:	441c      	add	r4, r3
9001fa78:	9b06      	ldr	r3, [sp, #24]
9001fa7a:	3b01      	subs	r3, #1
9001fa7c:	941e      	str	r4, [sp, #120]	; 0x78
9001fa7e:	9306      	str	r3, [sp, #24]
9001fa80:	9b07      	ldr	r3, [sp, #28]
9001fa82:	3302      	adds	r3, #2
9001fa84:	9307      	str	r3, [sp, #28]
9001fa86:	e696      	b.n	9001f7b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001fa88:	d028      	beq.n	9001fadc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001fa8a:	9b06      	ldr	r3, [sp, #24]
9001fa8c:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001fa8e:	3b01      	subs	r3, #1
9001fa90:	9d1d      	ldr	r5, [sp, #116]	; 0x74
9001fa92:	fb00 5003 	mla	r0, r0, r3, r5
9001fa96:	1400      	asrs	r0, r0, #16
9001fa98:	f53f aeaa 	bmi.w	9001f7f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fa9c:	3901      	subs	r1, #1
9001fa9e:	4288      	cmp	r0, r1
9001faa0:	f6bf aea6 	bge.w	9001f7f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001faa4:	9920      	ldr	r1, [sp, #128]	; 0x80
9001faa6:	981e      	ldr	r0, [sp, #120]	; 0x78
9001faa8:	fb01 0303 	mla	r3, r1, r3, r0
9001faac:	141b      	asrs	r3, r3, #16
9001faae:	f53f ae9f 	bmi.w	9001f7f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001fab2:	3a01      	subs	r2, #1
9001fab4:	4293      	cmp	r3, r2
9001fab6:	f6bf ae9b 	bge.w	9001f7f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001faba:	9b06      	ldr	r3, [sp, #24]
9001fabc:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001fac0:	f8dd e01c 	ldr.w	lr, [sp, #28]
9001fac4:	930f      	str	r3, [sp, #60]	; 0x3c
9001fac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001fac8:	2b00      	cmp	r3, #0
9001faca:	f300 80b6 	bgt.w	9001fc3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
9001face:	9b06      	ldr	r3, [sp, #24]
9001fad0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001fad4:	9b07      	ldr	r3, [sp, #28]
9001fad6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001fada:	9307      	str	r3, [sp, #28]
9001fadc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001fade:	2b00      	cmp	r3, #0
9001fae0:	f340 8218 	ble.w	9001ff14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
9001fae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001fae8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001faea:	ee30 0a04 	vadd.f32	s0, s0, s8
9001faee:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001faf2:	eef0 6a62 	vmov.f32	s13, s5
9001faf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001fafa:	ee31 1a05 	vadd.f32	s2, s2, s10
9001fafe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fb02:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
9001fb06:	eef0 6a43 	vmov.f32	s13, s6
9001fb0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fb0e:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
9001fb12:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001fb16:	ee61 7a27 	vmul.f32	s15, s2, s15
9001fb1a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001fb1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001fb22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001fb26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001fb2a:	ee12 2a90 	vmov	r2, s5
9001fb2e:	eef0 2a47 	vmov.f32	s5, s14
9001fb32:	fb92 f3f3 	sdiv	r3, r2, r3
9001fb36:	ee13 2a10 	vmov	r2, s6
9001fb3a:	931f      	str	r3, [sp, #124]	; 0x7c
9001fb3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001fb3e:	eeb0 3a67 	vmov.f32	s6, s15
9001fb42:	fb92 f3f3 	sdiv	r3, r2, r3
9001fb46:	9320      	str	r3, [sp, #128]	; 0x80
9001fb48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001fb4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001fb4c:	3b01      	subs	r3, #1
9001fb4e:	930e      	str	r3, [sp, #56]	; 0x38
9001fb50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001fb52:	bf08      	it	eq
9001fb54:	4613      	moveq	r3, r2
9001fb56:	9306      	str	r3, [sp, #24]
9001fb58:	e61f      	b.n	9001f79a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001fb5a:	fb08 f505 	mul.w	r5, r8, r5
9001fb5e:	fb09 5303 	mla	r3, r9, r3, r5
9001fb62:	e69f      	b.n	9001f8a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
9001fb64:	4681      	mov	r9, r0
9001fb66:	e6c6      	b.n	9001f8f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
9001fb68:	f1c1 0210 	rsb	r2, r1, #16
9001fb6c:	4341      	muls	r1, r0
9001fb6e:	fb09 1902 	mla	r9, r9, r2, r1
9001fb72:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001fb76:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001fb7a:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001fb7e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fb82:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001fb86:	ea42 0909 	orr.w	r9, r2, r9
9001fb8a:	fa1f f289 	uxth.w	r2, r9
9001fb8e:	e75b      	b.n	9001fa48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
9001fb90:	f8b7 c000 	ldrh.w	ip, [r7]
9001fb94:	43db      	mvns	r3, r3
9001fb96:	ea4f 202c 	mov.w	r0, ip, asr #8
9001fb9a:	fa5f fe83 	uxtb.w	lr, r3
9001fb9e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001fba2:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001fba6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
9001fbaa:	fb00 f00e 	mul.w	r0, r0, lr
9001fbae:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001fbb2:	b2db      	uxtb	r3, r3
9001fbb4:	1c41      	adds	r1, r0, #1
9001fbb6:	fb05 f50e 	mul.w	r5, r5, lr
9001fbba:	fb03 f30e 	mul.w	r3, r3, lr
9001fbbe:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9001fbc2:	1211      	asrs	r1, r2, #8
9001fbc4:	f021 0107 	bic.w	r1, r1, #7
9001fbc8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9001fbcc:	48d3      	ldr	r0, [pc, #844]	; (9001ff1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9001fbce:	b2c9      	uxtb	r1, r1
9001fbd0:	ea00 2001 	and.w	r0, r0, r1, lsl #8
9001fbd4:	1c69      	adds	r1, r5, #1
9001fbd6:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001fbda:	10d1      	asrs	r1, r2, #3
9001fbdc:	00d2      	lsls	r2, r2, #3
9001fbde:	f021 0103 	bic.w	r1, r1, #3
9001fbe2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9001fbe6:	00c9      	lsls	r1, r1, #3
9001fbe8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001fbec:	4301      	orrs	r1, r0
9001fbee:	1c58      	adds	r0, r3, #1
9001fbf0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001fbf4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001fbf8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001fbfc:	430a      	orrs	r2, r1
9001fbfe:	e726      	b.n	9001fa4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
9001fc00:	f115 0e01 	adds.w	lr, r5, #1
9001fc04:	f53f af24 	bmi.w	9001fa50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fc08:	4572      	cmp	r2, lr
9001fc0a:	f6ff af21 	blt.w	9001fa50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fc0e:	f110 0e01 	adds.w	lr, r0, #1
9001fc12:	f53f af1d 	bmi.w	9001fa50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fc16:	4573      	cmp	r3, lr
9001fc18:	f6ff af1a 	blt.w	9001fa50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fc1c:	b21b      	sxth	r3, r3
9001fc1e:	b212      	sxth	r2, r2
9001fc20:	9301      	str	r3, [sp, #4]
9001fc22:	9200      	str	r2, [sp, #0]
9001fc24:	e9cd 1c04 	strd	r1, ip, [sp, #16]
9001fc28:	e9cd 5002 	strd	r5, r0, [sp, #8]
9001fc2c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
9001fc30:	4639      	mov	r1, r7
9001fc32:	9811      	ldr	r0, [sp, #68]	; 0x44
9001fc34:	f7ff fc22 	bl	9001f47c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001fc38:	e70a      	b.n	9001fa50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9001fc3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fc3c:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001fc40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001fc42:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001fc46:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001fc48:	fa1f fc82 	uxth.w	ip, r2
9001fc4c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001fc50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001fc52:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001fc56:	141f      	asrs	r7, r3, #16
9001fc58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fc5a:	141b      	asrs	r3, r3, #16
9001fc5c:	fb01 3707 	mla	r7, r1, r7, r3
9001fc60:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001fc62:	eb03 0a07 	add.w	sl, r3, r7
9001fc66:	f813 9007 	ldrb.w	r9, [r3, r7]
9001fc6a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001fc6e:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001fc72:	b29b      	uxth	r3, r3
9001fc74:	2d00      	cmp	r5, #0
9001fc76:	f000 80fe 	beq.w	9001fe76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
9001fc7a:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001fc7e:	eb0a 0b01 	add.w	fp, sl, r1
9001fc82:	fa1f fa85 	uxth.w	sl, r5
9001fc86:	940c      	str	r4, [sp, #48]	; 0x30
9001fc88:	fb0a fc0c 	mul.w	ip, sl, ip
9001fc8c:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001fc90:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001fc94:	eba0 000c 	sub.w	r0, r0, ip
9001fc98:	940d      	str	r4, [sp, #52]	; 0x34
9001fc9a:	fa1f fa8a 	uxth.w	sl, sl
9001fc9e:	b280      	uxth	r0, r0
9001fca0:	eba3 030a 	sub.w	r3, r3, sl
9001fca4:	fb08 f000 	mul.w	r0, r8, r0
9001fca8:	b29b      	uxth	r3, r3
9001fcaa:	fb09 0303 	mla	r3, r9, r3, r0
9001fcae:	980c      	ldr	r0, [sp, #48]	; 0x30
9001fcb0:	fb0a 3300 	mla	r3, sl, r0, r3
9001fcb4:	fb0c 3304 	mla	r3, ip, r4, r3
9001fcb8:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001fcbc:	2b00      	cmp	r3, #0
9001fcbe:	f000 80cc 	beq.w	9001fe5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9001fcc2:	9808      	ldr	r0, [sp, #32]
9001fcc4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001fcc8:	9c08      	ldr	r4, [sp, #32]
9001fcca:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001fcce:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001fcd2:	f000 80d5 	beq.w	9001fe80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001fcd6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001fcda:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001fcde:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fce2:	fb0a fc0c 	mul.w	ip, sl, ip
9001fce6:	fb09 f707 	mul.w	r7, r9, r7
9001fcea:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001fcee:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001fcf2:	f107 0b20 	add.w	fp, r7, #32
9001fcf6:	44cc      	add	ip, r9
9001fcf8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001fcfc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001fd00:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001fd04:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001fd08:	ea4c 0909 	orr.w	r9, ip, r9
9001fd0c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001fd10:	8847      	ldrh	r7, [r0, #2]
9001fd12:	d019      	beq.n	9001fd48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
9001fd14:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001fd18:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001fd1c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fd20:	fb0a fc0c 	mul.w	ip, sl, ip
9001fd24:	fb08 f807 	mul.w	r8, r8, r7
9001fd28:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001fd2c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001fd30:	f108 0b20 	add.w	fp, r8, #32
9001fd34:	44bc      	add	ip, r7
9001fd36:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001fd3a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001fd3e:	0a3f      	lsrs	r7, r7, #8
9001fd40:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fd44:	ea4c 0707 	orr.w	r7, ip, r7
9001fd48:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001fd4c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001fd50:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001fd54:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001fd58:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001fd5c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fd60:	ea4c 0909 	orr.w	r9, ip, r9
9001fd64:	ea4a 0707 	orr.w	r7, sl, r7
9001fd68:	2d00      	cmp	r5, #0
9001fd6a:	f000 808b 	beq.w	9001fe84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
9001fd6e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001fd72:	3901      	subs	r1, #1
9001fd74:	0049      	lsls	r1, r1, #1
9001fd76:	3102      	adds	r1, #2
9001fd78:	eb00 0c01 	add.w	ip, r0, r1
9001fd7c:	5a41      	ldrh	r1, [r0, r1]
9001fd7e:	980c      	ldr	r0, [sp, #48]	; 0x30
9001fd80:	28ff      	cmp	r0, #255	; 0xff
9001fd82:	d019      	beq.n	9001fdb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
9001fd84:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001fd88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001fd8a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001fd8e:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001fd92:	fb04 fa01 	mul.w	sl, r4, r1
9001fd96:	fb08 f800 	mul.w	r8, r8, r0
9001fd9a:	f10a 0020 	add.w	r0, sl, #32
9001fd9e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001fda2:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001fda6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001fdaa:	4441      	add	r1, r8
9001fdac:	0a00      	lsrs	r0, r0, #8
9001fdae:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001fdb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fdb6:	4301      	orrs	r1, r0
9001fdb8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001fdba:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001fdbe:	2cff      	cmp	r4, #255	; 0xff
9001fdc0:	d01a      	beq.n	9001fdf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
9001fdc2:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9001fdc6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fdca:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001fdce:	fb04 fa00 	mul.w	sl, r4, r0
9001fdd2:	fb08 f80c 	mul.w	r8, r8, ip
9001fdd6:	f10a 0c20 	add.w	ip, sl, #32
9001fdda:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001fdde:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001fde2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001fde6:	4440      	add	r0, r8
9001fde8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001fdec:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001fdf0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001fdf4:	ea40 000c 	orr.w	r0, r0, ip
9001fdf8:	fb15 fc02 	smulbb	ip, r5, r2
9001fdfc:	f1c5 0810 	rsb	r8, r5, #16
9001fe00:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001fe04:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001fe08:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001fe0c:	eba8 0802 	sub.w	r8, r8, r2
9001fe10:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001fe14:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fe18:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001fe1c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001fe20:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001fe24:	ea4a 0101 	orr.w	r1, sl, r1
9001fe28:	437a      	muls	r2, r7
9001fe2a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001fe2e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001fe32:	fb09 2208 	mla	r2, r9, r8, r2
9001fe36:	ea4b 0000 	orr.w	r0, fp, r0
9001fe3a:	fb05 2201 	mla	r2, r5, r1, r2
9001fe3e:	fb0c 2200 	mla	r2, ip, r0, r2
9001fe42:	0d57      	lsrs	r7, r2, #21
9001fe44:	0952      	lsrs	r2, r2, #5
9001fe46:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fe4a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001fe4e:	433a      	orrs	r2, r7
9001fe50:	2bff      	cmp	r3, #255	; 0xff
9001fe52:	b292      	uxth	r2, r2
9001fe54:	d127      	bne.n	9001fea6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
9001fe56:	f8ae 2000 	strh.w	r2, [lr]
9001fe5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9001fe5c:	f10e 0e02 	add.w	lr, lr, #2
9001fe60:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9001fe62:	4413      	add	r3, r2
9001fe64:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9001fe66:	931d      	str	r3, [sp, #116]	; 0x74
9001fe68:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001fe6a:	441a      	add	r2, r3
9001fe6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001fe6e:	3b01      	subs	r3, #1
9001fe70:	921e      	str	r2, [sp, #120]	; 0x78
9001fe72:	930f      	str	r3, [sp, #60]	; 0x3c
9001fe74:	e627      	b.n	9001fac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
9001fe76:	fb08 f000 	mul.w	r0, r8, r0
9001fe7a:	fb09 0303 	mla	r3, r9, r3, r0
9001fe7e:	e71b      	b.n	9001fcb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
9001fe80:	46b9      	mov	r9, r7
9001fe82:	e743      	b.n	9001fd0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
9001fe84:	f1c2 0110 	rsb	r1, r2, #16
9001fe88:	437a      	muls	r2, r7
9001fe8a:	fb09 2901 	mla	r9, r9, r1, r2
9001fe8e:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001fe92:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001fe96:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001fe9a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fe9e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001fea2:	4302      	orrs	r2, r0
9001fea4:	e7d4      	b.n	9001fe50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
9001fea6:	f8be 7000 	ldrh.w	r7, [lr]
9001feaa:	43db      	mvns	r3, r3
9001feac:	4c1b      	ldr	r4, [pc, #108]	; (9001ff1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9001feae:	1238      	asrs	r0, r7, #8
9001feb0:	fa5f fc83 	uxtb.w	ip, r3
9001feb4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001feb8:	10fd      	asrs	r5, r7, #3
9001feba:	00fb      	lsls	r3, r7, #3
9001febc:	fb00 f00c 	mul.w	r0, r0, ip
9001fec0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001fec4:	b2db      	uxtb	r3, r3
9001fec6:	fb05 f10c 	mul.w	r1, r5, ip
9001feca:	1c45      	adds	r5, r0, #1
9001fecc:	fb03 f30c 	mul.w	r3, r3, ip
9001fed0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9001fed4:	1215      	asrs	r5, r2, #8
9001fed6:	f025 0507 	bic.w	r5, r5, #7
9001feda:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9001fede:	1c4d      	adds	r5, r1, #1
9001fee0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
9001fee4:	10d1      	asrs	r1, r2, #3
9001fee6:	b2c0      	uxtb	r0, r0
9001fee8:	f021 0103 	bic.w	r1, r1, #3
9001feec:	00d2      	lsls	r2, r2, #3
9001feee:	ea04 2000 	and.w	r0, r4, r0, lsl #8
9001fef2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9001fef6:	00c9      	lsls	r1, r1, #3
9001fef8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001fefc:	4308      	orrs	r0, r1
9001fefe:	1c59      	adds	r1, r3, #1
9001ff00:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001ff04:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9001ff08:	f3c3 03c4 	ubfx	r3, r3, #3, #5
9001ff0c:	4318      	orrs	r0, r3
9001ff0e:	f8ae 0000 	strh.w	r0, [lr]
9001ff12:	e7a2      	b.n	9001fe5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9001ff14:	b013      	add	sp, #76	; 0x4c
9001ff16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ff1a:	bf00      	nop
9001ff1c:	fffff800 	.word	0xfffff800

9001ff20 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
9001ff20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001ff24:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
9001ff28:	f9bd a020 	ldrsh.w	sl, [sp, #32]
9001ff2c:	fb05 4c03 	mla	ip, r5, r3, r4
9001ff30:	2d00      	cmp	r5, #0
9001ff32:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
9001ff36:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9001ff3a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
9001ff3e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9001ff42:	8808      	ldrh	r0, [r1, #0]
9001ff44:	f2c0 80a7 	blt.w	90020096 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
9001ff48:	45aa      	cmp	sl, r5
9001ff4a:	f340 80a4 	ble.w	90020096 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
9001ff4e:	2c00      	cmp	r4, #0
9001ff50:	f2c0 809f 	blt.w	90020092 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
9001ff54:	42a3      	cmp	r3, r4
9001ff56:	f340 809c 	ble.w	90020092 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
9001ff5a:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
9001ff5e:	1c62      	adds	r2, r4, #1
9001ff60:	f100 809c 	bmi.w	9002009c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9001ff64:	4293      	cmp	r3, r2
9001ff66:	f340 8099 	ble.w	9002009c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9001ff6a:	f1b9 0f00 	cmp.w	r9, #0
9001ff6e:	f000 8095 	beq.w	9002009c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9001ff72:	f8be c002 	ldrh.w	ip, [lr, #2]
9001ff76:	3501      	adds	r5, #1
9001ff78:	f100 8094 	bmi.w	900200a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9001ff7c:	45aa      	cmp	sl, r5
9001ff7e:	f340 8091 	ble.w	900200a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9001ff82:	2f00      	cmp	r7, #0
9001ff84:	f000 808e 	beq.w	900200a4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
9001ff88:	2c00      	cmp	r4, #0
9001ff8a:	f2c0 8089 	blt.w	900200a0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
9001ff8e:	42a3      	cmp	r3, r4
9001ff90:	f340 8086 	ble.w	900200a0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
9001ff94:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
9001ff98:	3401      	adds	r4, #1
9001ff9a:	f100 8086 	bmi.w	900200aa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9001ff9e:	42a3      	cmp	r3, r4
9001ffa0:	f340 8083 	ble.w	900200aa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9001ffa4:	f1b9 0f00 	cmp.w	r9, #0
9001ffa8:	d07f      	beq.n	900200aa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
9001ffaa:	3301      	adds	r3, #1
9001ffac:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
9001ffb0:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001ffb4:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
9001ffb8:	fb19 fe07 	smulbb	lr, r9, r7
9001ffbc:	f1c7 0210 	rsb	r2, r7, #16
9001ffc0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001ffc4:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001ffc8:	eba2 0209 	sub.w	r2, r2, r9
9001ffcc:	ea44 0808 	orr.w	r8, r4, r8
9001ffd0:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001ffd4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001ffd8:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001ffdc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001ffe0:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001ffe4:	ea44 0c0c 	orr.w	ip, r4, ip
9001ffe8:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001ffec:	fb04 f40c 	mul.w	r4, r4, ip
9001fff0:	fb02 4808 	mla	r8, r2, r8, r4
9001fff4:	041a      	lsls	r2, r3, #16
9001fff6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001fffa:	b2b4      	uxth	r4, r6
9001fffc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020000:	43f6      	mvns	r6, r6
90020002:	4313      	orrs	r3, r2
90020004:	042a      	lsls	r2, r5, #16
90020006:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9002000a:	b2f6      	uxtb	r6, r6
9002000c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020010:	fb0e 8303 	mla	r3, lr, r3, r8
90020014:	432a      	orrs	r2, r5
90020016:	fb07 3202 	mla	r2, r7, r2, r3
9002001a:	10c7      	asrs	r7, r0, #3
9002001c:	0d53      	lsrs	r3, r2, #21
9002001e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90020022:	0952      	lsrs	r2, r2, #5
90020024:	fb17 f706 	smulbb	r7, r7, r6
90020028:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002002c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020030:	431a      	orrs	r2, r3
90020032:	b293      	uxth	r3, r2
90020034:	1202      	asrs	r2, r0, #8
90020036:	121d      	asrs	r5, r3, #8
90020038:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9002003c:	00c0      	lsls	r0, r0, #3
9002003e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90020042:	fb12 f206 	smulbb	r2, r2, r6
90020046:	b2c0      	uxtb	r0, r0
90020048:	fb05 2504 	mla	r5, r5, r4, r2
9002004c:	10da      	asrs	r2, r3, #3
9002004e:	fb10 f006 	smulbb	r0, r0, r6
90020052:	00db      	lsls	r3, r3, #3
90020054:	b2ad      	uxth	r5, r5
90020056:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9002005a:	b2db      	uxtb	r3, r3
9002005c:	fb02 7204 	mla	r2, r2, r4, r7
90020060:	fb03 0004 	mla	r0, r3, r4, r0
90020064:	1c6b      	adds	r3, r5, #1
90020066:	b292      	uxth	r2, r2
90020068:	b280      	uxth	r0, r0
9002006a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9002006e:	1c43      	adds	r3, r0, #1
90020070:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90020074:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90020078:	1c50      	adds	r0, r2, #1
9002007a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9002007e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020082:	0952      	lsrs	r2, r2, #5
90020084:	432b      	orrs	r3, r5
90020086:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002008a:	4313      	orrs	r3, r2
9002008c:	800b      	strh	r3, [r1, #0]
9002008e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90020092:	4680      	mov	r8, r0
90020094:	e763      	b.n	9001ff5e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
90020096:	4684      	mov	ip, r0
90020098:	4680      	mov	r8, r0
9002009a:	e76c      	b.n	9001ff76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
9002009c:	4684      	mov	ip, r0
9002009e:	e76a      	b.n	9001ff76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
900200a0:	4605      	mov	r5, r0
900200a2:	e779      	b.n	9001ff98 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
900200a4:	4603      	mov	r3, r0
900200a6:	4605      	mov	r5, r0
900200a8:	e782      	b.n	9001ffb0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
900200aa:	4603      	mov	r3, r0
900200ac:	e780      	b.n	9001ffb0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

900200ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900200ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900200b2:	b093      	sub	sp, #76	; 0x4c
900200b4:	461d      	mov	r5, r3
900200b6:	9210      	str	r2, [sp, #64]	; 0x40
900200b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
900200ba:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
900200be:	910a      	str	r1, [sp, #40]	; 0x28
900200c0:	920b      	str	r2, [sp, #44]	; 0x2c
900200c2:	6859      	ldr	r1, [r3, #4]
900200c4:	681b      	ldr	r3, [r3, #0]
900200c6:	9011      	str	r0, [sp, #68]	; 0x44
900200c8:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
900200cc:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
900200d0:	fb01 2707 	mla	r7, r1, r7, r2
900200d4:	eb03 0347 	add.w	r3, r3, r7, lsl #1
900200d8:	9307      	str	r3, [sp, #28]
900200da:	9b24      	ldr	r3, [sp, #144]	; 0x90
900200dc:	681b      	ldr	r3, [r3, #0]
900200de:	9309      	str	r3, [sp, #36]	; 0x24
900200e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900200e2:	43db      	mvns	r3, r3
900200e4:	b2db      	uxtb	r3, r3
900200e6:	9308      	str	r3, [sp, #32]
900200e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900200ea:	2b00      	cmp	r3, #0
900200ec:	dc03      	bgt.n	900200f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900200ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
900200f0:	2b00      	cmp	r3, #0
900200f2:	f340 8205 	ble.w	90020500 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900200f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900200f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900200fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020100:	1e48      	subs	r0, r1, #1
90020102:	f102 3cff 	add.w	ip, r2, #4294967295
90020106:	2d00      	cmp	r5, #0
90020108:	f340 80da 	ble.w	900202c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
9002010c:	ea5f 4e24 	movs.w	lr, r4, asr #16
90020110:	ea4f 4326 	mov.w	r3, r6, asr #16
90020114:	d406      	bmi.n	90020124 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90020116:	4586      	cmp	lr, r0
90020118:	da04      	bge.n	90020124 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9002011a:	2b00      	cmp	r3, #0
9002011c:	db02      	blt.n	90020124 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9002011e:	4563      	cmp	r3, ip
90020120:	f2c0 80cf 	blt.w	900202c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90020124:	f11e 0e01 	adds.w	lr, lr, #1
90020128:	f100 80c1 	bmi.w	900202ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9002012c:	4571      	cmp	r1, lr
9002012e:	f2c0 80be 	blt.w	900202ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020132:	3301      	adds	r3, #1
90020134:	f100 80bb 	bmi.w	900202ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020138:	429a      	cmp	r2, r3
9002013a:	f2c0 80b8 	blt.w	900202ae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9002013e:	46a9      	mov	r9, r5
90020140:	f8dd 801c 	ldr.w	r8, [sp, #28]
90020144:	f1b9 0f00 	cmp.w	r9, #0
90020148:	f340 80d8 	ble.w	900202fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
9002014c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002014e:	1421      	asrs	r1, r4, #16
90020150:	ea4f 4026 	mov.w	r0, r6, asr #16
90020154:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020158:	f3c6 3c03 	ubfx	ip, r6, #12, #4
9002015c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90020160:	f100 8112 	bmi.w	90020388 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90020164:	f10e 3aff 	add.w	sl, lr, #4294967295
90020168:	4551      	cmp	r1, sl
9002016a:	f280 810d 	bge.w	90020388 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9002016e:	2800      	cmp	r0, #0
90020170:	f2c0 810a 	blt.w	90020388 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90020174:	f103 3aff 	add.w	sl, r3, #4294967295
90020178:	4550      	cmp	r0, sl
9002017a:	f280 8105 	bge.w	90020388 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9002017e:	fa0f f38e 	sxth.w	r3, lr
90020182:	fb00 1103 	mla	r1, r0, r3, r1
90020186:	9809      	ldr	r0, [sp, #36]	; 0x24
90020188:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
9002018c:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
90020190:	f8ba 1002 	ldrh.w	r1, [sl, #2]
90020194:	f1bc 0f00 	cmp.w	ip, #0
90020198:	d007      	beq.n	900201aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
9002019a:	005b      	lsls	r3, r3, #1
9002019c:	eb0a 0003 	add.w	r0, sl, r3
900201a0:	f83a 3003 	ldrh.w	r3, [sl, r3]
900201a4:	930c      	str	r3, [sp, #48]	; 0x30
900201a6:	8843      	ldrh	r3, [r0, #2]
900201a8:	930d      	str	r3, [sp, #52]	; 0x34
900201aa:	ea4f 400e 	mov.w	r0, lr, lsl #16
900201ae:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900201b2:	fb12 f30c 	smulbb	r3, r2, ip
900201b6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
900201ba:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900201be:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900201c2:	10db      	asrs	r3, r3, #3
900201c4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900201c8:	ea40 000e 	orr.w	r0, r0, lr
900201cc:	f1cc 0e10 	rsb	lr, ip, #16
900201d0:	ea4a 0101 	orr.w	r1, sl, r1
900201d4:	9f08      	ldr	r7, [sp, #32]
900201d6:	ebae 0e02 	sub.w	lr, lr, r2
900201da:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
900201de:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
900201e2:	4351      	muls	r1, r2
900201e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
900201e6:	fb0e 1e00 	mla	lr, lr, r0, r1
900201ea:	990c      	ldr	r1, [sp, #48]	; 0x30
900201ec:	0410      	lsls	r0, r2, #16
900201ee:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900201f2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900201f6:	4310      	orrs	r0, r2
900201f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
900201fa:	0412      	lsls	r2, r2, #16
900201fc:	fb03 e000 	mla	r0, r3, r0, lr
90020200:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90020204:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90020208:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9002020c:	ea42 020e 	orr.w	r2, r2, lr
90020210:	fb03 0302 	mla	r3, r3, r2, r0
90020214:	f8b8 0000 	ldrh.w	r0, [r8]
90020218:	0d5a      	lsrs	r2, r3, #21
9002021a:	095b      	lsrs	r3, r3, #5
9002021c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020220:	1201      	asrs	r1, r0, #8
90020222:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020226:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9002022a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9002022e:	00c0      	lsls	r0, r0, #3
90020230:	4313      	orrs	r3, r2
90020232:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90020236:	fb11 f107 	smulbb	r1, r1, r7
9002023a:	b2c0      	uxtb	r0, r0
9002023c:	b29b      	uxth	r3, r3
9002023e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
90020242:	fb10 f007 	smulbb	r0, r0, r7
90020246:	fb1e fe07 	smulbb	lr, lr, r7
9002024a:	ea4f 2c23 	mov.w	ip, r3, asr #8
9002024e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90020252:	fb0c 1c02 	mla	ip, ip, r2, r1
90020256:	10d9      	asrs	r1, r3, #3
90020258:	00db      	lsls	r3, r3, #3
9002025a:	fa1f fc8c 	uxth.w	ip, ip
9002025e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90020262:	b2db      	uxtb	r3, r3
90020264:	fb01 e102 	mla	r1, r1, r2, lr
90020268:	fb03 0302 	mla	r3, r3, r2, r0
9002026c:	b289      	uxth	r1, r1
9002026e:	b29a      	uxth	r2, r3
90020270:	f10c 0301 	add.w	r3, ip, #1
90020274:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
90020278:	1c53      	adds	r3, r2, #1
9002027a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9002027e:	1c4a      	adds	r2, r1, #1
90020280:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90020284:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90020288:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002028c:	0949      	lsrs	r1, r1, #5
9002028e:	ea43 030c 	orr.w	r3, r3, ip
90020292:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020296:	430b      	orrs	r3, r1
90020298:	f8a8 3000 	strh.w	r3, [r8]
9002029c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002029e:	f108 0802 	add.w	r8, r8, #2
900202a2:	f109 39ff 	add.w	r9, r9, #4294967295
900202a6:	441c      	add	r4, r3
900202a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
900202aa:	441e      	add	r6, r3
900202ac:	e74a      	b.n	90020144 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900202ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900202b0:	3d01      	subs	r5, #1
900202b2:	441c      	add	r4, r3
900202b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
900202b6:	441e      	add	r6, r3
900202b8:	9b07      	ldr	r3, [sp, #28]
900202ba:	3302      	adds	r3, #2
900202bc:	9307      	str	r3, [sp, #28]
900202be:	e722      	b.n	90020106 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900202c0:	d022      	beq.n	90020308 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
900202c2:	1e6b      	subs	r3, r5, #1
900202c4:	981f      	ldr	r0, [sp, #124]	; 0x7c
900202c6:	fb00 4003 	mla	r0, r0, r3, r4
900202ca:	1400      	asrs	r0, r0, #16
900202cc:	f53f af37 	bmi.w	9002013e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900202d0:	3901      	subs	r1, #1
900202d2:	4288      	cmp	r0, r1
900202d4:	f6bf af33 	bge.w	9002013e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900202d8:	9920      	ldr	r1, [sp, #128]	; 0x80
900202da:	fb01 6303 	mla	r3, r1, r3, r6
900202de:	141b      	asrs	r3, r3, #16
900202e0:	f53f af2d 	bmi.w	9002013e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900202e4:	3a01      	subs	r2, #1
900202e6:	4293      	cmp	r3, r2
900202e8:	f6bf af29 	bge.w	9002013e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900202ec:	46a8      	mov	r8, r5
900202ee:	f8dd 901c 	ldr.w	r9, [sp, #28]
900202f2:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
900202f6:	f1b8 0f00 	cmp.w	r8, #0
900202fa:	dc60      	bgt.n	900203be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
900202fc:	9b07      	ldr	r3, [sp, #28]
900202fe:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90020302:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90020306:	9307      	str	r3, [sp, #28]
90020308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002030a:	2b00      	cmp	r3, #0
9002030c:	f340 80f8 	ble.w	90020500 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020314:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020316:	ee30 0a04 	vadd.f32	s0, s0, s8
9002031a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9002031e:	eef0 6a62 	vmov.f32	s13, s5
90020322:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020326:	ee31 1a05 	vadd.f32	s2, s2, s10
9002032a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002032e:	ee16 4a90 	vmov	r4, s13
90020332:	eef0 6a43 	vmov.f32	s13, s6
90020336:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002033a:	ee16 6a90 	vmov	r6, s13
9002033e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020342:	ee61 7a27 	vmul.f32	s15, s2, s15
90020346:	ee77 2a62 	vsub.f32	s5, s14, s5
9002034a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002034e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020352:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020356:	ee12 2a90 	vmov	r2, s5
9002035a:	eef0 2a47 	vmov.f32	s5, s14
9002035e:	fb92 f3f3 	sdiv	r3, r2, r3
90020362:	ee13 2a10 	vmov	r2, s6
90020366:	931f      	str	r3, [sp, #124]	; 0x7c
90020368:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002036a:	eeb0 3a67 	vmov.f32	s6, s15
9002036e:	fb92 f3f3 	sdiv	r3, r2, r3
90020372:	9320      	str	r3, [sp, #128]	; 0x80
90020374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020376:	9a10      	ldr	r2, [sp, #64]	; 0x40
90020378:	3b01      	subs	r3, #1
9002037a:	930a      	str	r3, [sp, #40]	; 0x28
9002037c:	bf08      	it	eq
9002037e:	4615      	moveq	r5, r2
90020380:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020382:	bf18      	it	ne
90020384:	461d      	movne	r5, r3
90020386:	e6af      	b.n	900200e8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90020388:	f111 0a01 	adds.w	sl, r1, #1
9002038c:	d486      	bmi.n	9002029c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9002038e:	45d6      	cmp	lr, sl
90020390:	db84      	blt.n	9002029c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90020392:	f110 0a01 	adds.w	sl, r0, #1
90020396:	d481      	bmi.n	9002029c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90020398:	4553      	cmp	r3, sl
9002039a:	f6ff af7f 	blt.w	9002029c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
9002039e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
900203a0:	b21b      	sxth	r3, r3
900203a2:	9101      	str	r1, [sp, #4]
900203a4:	4641      	mov	r1, r8
900203a6:	9300      	str	r3, [sp, #0]
900203a8:	fa0f f38e 	sxth.w	r3, lr
900203ac:	e9cd 0202 	strd	r0, r2, [sp, #8]
900203b0:	e9cd c704 	strd	ip, r7, [sp, #16]
900203b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
900203b6:	9811      	ldr	r0, [sp, #68]	; 0x44
900203b8:	f7ff fdb2 	bl	9001ff20 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
900203bc:	e76e      	b.n	9002029c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900203be:	9b24      	ldr	r3, [sp, #144]	; 0x90
900203c0:	1430      	asrs	r0, r6, #16
900203c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
900203c4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
900203c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900203cc:	1423      	asrs	r3, r4, #16
900203ce:	f3c4 3203 	ubfx	r2, r4, #12, #4
900203d2:	fb01 3000 	mla	r0, r1, r0, r3
900203d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900203d8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
900203dc:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
900203e0:	8858      	ldrh	r0, [r3, #2]
900203e2:	f1be 0f00 	cmp.w	lr, #0
900203e6:	d00b      	beq.n	90020400 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
900203e8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
900203ec:	3901      	subs	r1, #1
900203ee:	0049      	lsls	r1, r1, #1
900203f0:	3102      	adds	r1, #2
900203f2:	eb03 0b01 	add.w	fp, r3, r1
900203f6:	5a5b      	ldrh	r3, [r3, r1]
900203f8:	930e      	str	r3, [sp, #56]	; 0x38
900203fa:	f8bb 3002 	ldrh.w	r3, [fp, #2]
900203fe:	930f      	str	r3, [sp, #60]	; 0x3c
90020400:	ea4f 410c 	mov.w	r1, ip, lsl #16
90020404:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020408:	fb12 f30e 	smulbb	r3, r2, lr
9002040c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90020410:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
90020414:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020418:	10db      	asrs	r3, r3, #3
9002041a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002041e:	ea41 010c 	orr.w	r1, r1, ip
90020422:	f1ce 0c10 	rsb	ip, lr, #16
90020426:	ea4b 0000 	orr.w	r0, fp, r0
9002042a:	9f08      	ldr	r7, [sp, #32]
9002042c:	ebac 0c02 	sub.w	ip, ip, r2
90020430:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90020434:	f108 38ff 	add.w	r8, r8, #4294967295
90020438:	4350      	muls	r0, r2
9002043a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
9002043e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90020440:	fb0c 0c01 	mla	ip, ip, r1, r0
90020444:	980e      	ldr	r0, [sp, #56]	; 0x38
90020446:	ea4f 4b02 	mov.w	fp, r2, lsl #16
9002044a:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
9002044e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90020450:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020454:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020458:	0412      	lsls	r2, r2, #16
9002045a:	ea4b 0101 	orr.w	r1, fp, r1
9002045e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020462:	fb03 c101 	mla	r1, r3, r1, ip
90020466:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
9002046a:	4302      	orrs	r2, r0
9002046c:	fb03 1202 	mla	r2, r3, r2, r1
90020470:	ea4f 5b52 	mov.w	fp, r2, lsr #21
90020474:	0952      	lsrs	r2, r2, #5
90020476:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9002047a:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
9002047e:	f8b9 2000 	ldrh.w	r2, [r9]
90020482:	ea4b 0303 	orr.w	r3, fp, r3
90020486:	1211      	asrs	r1, r2, #8
90020488:	ea4f 0ce2 	mov.w	ip, r2, asr #3
9002048c:	b29b      	uxth	r3, r3
9002048e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020492:	00d2      	lsls	r2, r2, #3
90020494:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90020498:	fb11 f107 	smulbb	r1, r1, r7
9002049c:	1218      	asrs	r0, r3, #8
9002049e:	fb1c fc07 	smulbb	ip, ip, r7
900204a2:	b2d2      	uxtb	r2, r2
900204a4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900204a8:	fb12 f207 	smulbb	r2, r2, r7
900204ac:	fb00 100a 	mla	r0, r0, sl, r1
900204b0:	10d9      	asrs	r1, r3, #3
900204b2:	00db      	lsls	r3, r3, #3
900204b4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900204b8:	b280      	uxth	r0, r0
900204ba:	b2db      	uxtb	r3, r3
900204bc:	fb01 c10a 	mla	r1, r1, sl, ip
900204c0:	fb03 230a 	mla	r3, r3, sl, r2
900204c4:	1c42      	adds	r2, r0, #1
900204c6:	b289      	uxth	r1, r1
900204c8:	b29b      	uxth	r3, r3
900204ca:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900204ce:	f101 0c01 	add.w	ip, r1, #1
900204d2:	1c5a      	adds	r2, r3, #1
900204d4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
900204d8:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900204dc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
900204e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900204e2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900204e6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900204ea:	441c      	add	r4, r3
900204ec:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900204f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900204f2:	4310      	orrs	r0, r2
900204f4:	441e      	add	r6, r3
900204f6:	ea40 000c 	orr.w	r0, r0, ip
900204fa:	f829 0b02 	strh.w	r0, [r9], #2
900204fe:	e6fa      	b.n	900202f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
90020500:	b013      	add	sp, #76	; 0x4c
90020502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020506 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
90020506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9002050a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
9002050e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
90020512:	fb0e 4703 	mla	r7, lr, r3, r4
90020516:	f1be 0f00 	cmp.w	lr, #0
9002051a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
9002051e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
90020522:	eb02 0847 	add.w	r8, r2, r7, lsl #1
90020526:	8808      	ldrh	r0, [r1, #0]
90020528:	db60      	blt.n	900205ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
9002052a:	45f1      	cmp	r9, lr
9002052c:	dd5e      	ble.n	900205ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
9002052e:	2c00      	cmp	r4, #0
90020530:	db5a      	blt.n	900205e8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
90020532:	42a3      	cmp	r3, r4
90020534:	dd58      	ble.n	900205e8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
90020536:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
9002053a:	1c62      	adds	r2, r4, #1
9002053c:	d459      	bmi.n	900205f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9002053e:	4293      	cmp	r3, r2
90020540:	dd57      	ble.n	900205f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
90020542:	2d00      	cmp	r5, #0
90020544:	d055      	beq.n	900205f2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
90020546:	f8b8 7002 	ldrh.w	r7, [r8, #2]
9002054a:	f11e 0e01 	adds.w	lr, lr, #1
9002054e:	d454      	bmi.n	900205fa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020550:	45f1      	cmp	r9, lr
90020552:	dd52      	ble.n	900205fa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020554:	2e00      	cmp	r6, #0
90020556:	d050      	beq.n	900205fa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020558:	2c00      	cmp	r4, #0
9002055a:	db4c      	blt.n	900205f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
9002055c:	42a3      	cmp	r3, r4
9002055e:	dd4a      	ble.n	900205f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
90020560:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
90020564:	3401      	adds	r4, #1
90020566:	d405      	bmi.n	90020574 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90020568:	42a3      	cmp	r3, r4
9002056a:	dd03      	ble.n	90020574 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
9002056c:	b115      	cbz	r5, 90020574 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
9002056e:	3301      	adds	r3, #1
90020570:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
90020574:	fb15 f406 	smulbb	r4, r5, r6
90020578:	ea4f 430c 	mov.w	r3, ip, lsl #16
9002057c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
90020580:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020584:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020588:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9002058c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90020590:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90020594:	ea43 0c0c 	orr.w	ip, r3, ip
90020598:	f1c6 0310 	rsb	r3, r6, #16
9002059c:	ea4e 0707 	orr.w	r7, lr, r7
900205a0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
900205a4:	1b5b      	subs	r3, r3, r5
900205a6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
900205aa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900205ae:	437d      	muls	r5, r7
900205b0:	fb03 5c0c 	mla	ip, r3, ip, r5
900205b4:	0403      	lsls	r3, r0, #16
900205b6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900205ba:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900205be:	4318      	orrs	r0, r3
900205c0:	0413      	lsls	r3, r2, #16
900205c2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900205c6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900205ca:	fb04 c000 	mla	r0, r4, r0, ip
900205ce:	4313      	orrs	r3, r2
900205d0:	fb06 0003 	mla	r0, r6, r3, r0
900205d4:	0d43      	lsrs	r3, r0, #21
900205d6:	0940      	lsrs	r0, r0, #5
900205d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900205dc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900205e0:	4318      	orrs	r0, r3
900205e2:	8008      	strh	r0, [r1, #0]
900205e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900205e8:	4684      	mov	ip, r0
900205ea:	e7a6      	b.n	9002053a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
900205ec:	4607      	mov	r7, r0
900205ee:	4684      	mov	ip, r0
900205f0:	e7ab      	b.n	9002054a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
900205f2:	4607      	mov	r7, r0
900205f4:	e7a9      	b.n	9002054a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
900205f6:	4602      	mov	r2, r0
900205f8:	e7b4      	b.n	90020564 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
900205fa:	4602      	mov	r2, r0
900205fc:	e7ba      	b.n	90020574 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

900205fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900205fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020602:	b08f      	sub	sp, #60	; 0x3c
90020604:	461d      	mov	r5, r3
90020606:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90020608:	9107      	str	r1, [sp, #28]
9002060a:	920c      	str	r2, [sp, #48]	; 0x30
9002060c:	6859      	ldr	r1, [r3, #4]
9002060e:	681b      	ldr	r3, [r3, #0]
90020610:	900d      	str	r0, [sp, #52]	; 0x34
90020612:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
90020616:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
9002061a:	fb01 2707 	mla	r7, r1, r7, r2
9002061e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
90020622:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020624:	f8d3 8000 	ldr.w	r8, [r3]
90020628:	9b07      	ldr	r3, [sp, #28]
9002062a:	2b00      	cmp	r3, #0
9002062c:	dc03      	bgt.n	90020636 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9002062e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020630:	2b00      	cmp	r3, #0
90020632:	f340 8182 	ble.w	9002093a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
90020636:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020638:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002063c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020640:	1e48      	subs	r0, r1, #1
90020642:	f102 3cff 	add.w	ip, r2, #4294967295
90020646:	2d00      	cmp	r5, #0
90020648:	f340 809b 	ble.w	90020782 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
9002064c:	ea5f 4e24 	movs.w	lr, r4, asr #16
90020650:	ea4f 4326 	mov.w	r3, r6, asr #16
90020654:	d406      	bmi.n	90020664 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90020656:	4586      	cmp	lr, r0
90020658:	da04      	bge.n	90020664 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9002065a:	2b00      	cmp	r3, #0
9002065c:	db02      	blt.n	90020664 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9002065e:	4563      	cmp	r3, ip
90020660:	f2c0 8090 	blt.w	90020784 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020664:	f11e 0e01 	adds.w	lr, lr, #1
90020668:	f100 8084 	bmi.w	90020774 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9002066c:	4571      	cmp	r1, lr
9002066e:	f2c0 8081 	blt.w	90020774 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90020672:	3301      	adds	r3, #1
90020674:	d47e      	bmi.n	90020774 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90020676:	429a      	cmp	r2, r3
90020678:	db7c      	blt.n	90020774 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
9002067a:	46aa      	mov	sl, r5
9002067c:	46b9      	mov	r9, r7
9002067e:	f1ba 0f00 	cmp.w	sl, #0
90020682:	f340 8099 	ble.w	900207b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
90020686:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020688:	1421      	asrs	r1, r4, #16
9002068a:	ea4f 4026 	mov.w	r0, r6, asr #16
9002068e:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020692:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90020696:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
9002069a:	f100 80d1 	bmi.w	90020840 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9002069e:	f10e 3bff 	add.w	fp, lr, #4294967295
900206a2:	4559      	cmp	r1, fp
900206a4:	f280 80cc 	bge.w	90020840 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900206a8:	2800      	cmp	r0, #0
900206aa:	f2c0 80c9 	blt.w	90020840 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900206ae:	f103 3bff 	add.w	fp, r3, #4294967295
900206b2:	4558      	cmp	r0, fp
900206b4:	f280 80c4 	bge.w	90020840 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900206b8:	fa0f fe8e 	sxth.w	lr, lr
900206bc:	fb00 110e 	mla	r1, r0, lr, r1
900206c0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
900206c4:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
900206c8:	8841      	ldrh	r1, [r0, #2]
900206ca:	f1bc 0f00 	cmp.w	ip, #0
900206ce:	d00b      	beq.n	900206e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
900206d0:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
900206d4:	3b01      	subs	r3, #1
900206d6:	005b      	lsls	r3, r3, #1
900206d8:	3302      	adds	r3, #2
900206da:	eb00 0e03 	add.w	lr, r0, r3
900206de:	5ac3      	ldrh	r3, [r0, r3]
900206e0:	9308      	str	r3, [sp, #32]
900206e2:	f8be 3002 	ldrh.w	r3, [lr, #2]
900206e6:	9309      	str	r3, [sp, #36]	; 0x24
900206e8:	ea4f 400b 	mov.w	r0, fp, lsl #16
900206ec:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
900206f0:	fb12 f30c 	smulbb	r3, r2, ip
900206f4:	f1cc 0e10 	rsb	lr, ip, #16
900206f8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900206fc:	10db      	asrs	r3, r3, #3
900206fe:	ebae 0e02 	sub.w	lr, lr, r2
90020702:	ea40 000b 	orr.w	r0, r0, fp
90020706:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9002070a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002070e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90020712:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020716:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
9002071a:	ea4b 0101 	orr.w	r1, fp, r1
9002071e:	4351      	muls	r1, r2
90020720:	9a09      	ldr	r2, [sp, #36]	; 0x24
90020722:	fb0e 1e00 	mla	lr, lr, r0, r1
90020726:	0410      	lsls	r0, r2, #16
90020728:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002072c:	9908      	ldr	r1, [sp, #32]
9002072e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020732:	4310      	orrs	r0, r2
90020734:	9a08      	ldr	r2, [sp, #32]
90020736:	0412      	lsls	r2, r2, #16
90020738:	fb03 e000 	mla	r0, r3, r0, lr
9002073c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90020740:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90020744:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020748:	ea42 020e 	orr.w	r2, r2, lr
9002074c:	fb03 0302 	mla	r3, r3, r2, r0
90020750:	0d5a      	lsrs	r2, r3, #21
90020752:	095b      	lsrs	r3, r3, #5
90020754:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020758:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002075c:	4313      	orrs	r3, r2
9002075e:	f8a9 3000 	strh.w	r3, [r9]
90020762:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90020764:	f109 0902 	add.w	r9, r9, #2
90020768:	f10a 3aff 	add.w	sl, sl, #4294967295
9002076c:	441c      	add	r4, r3
9002076e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020770:	441e      	add	r6, r3
90020772:	e784      	b.n	9002067e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90020774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90020776:	3d01      	subs	r5, #1
90020778:	3702      	adds	r7, #2
9002077a:	441c      	add	r4, r3
9002077c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002077e:	441e      	add	r6, r3
90020780:	e761      	b.n	90020646 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90020782:	d01d      	beq.n	900207c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90020784:	1e6b      	subs	r3, r5, #1
90020786:	981b      	ldr	r0, [sp, #108]	; 0x6c
90020788:	fb00 4003 	mla	r0, r0, r3, r4
9002078c:	1400      	asrs	r0, r0, #16
9002078e:	f53f af74 	bmi.w	9002067a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90020792:	3901      	subs	r1, #1
90020794:	4288      	cmp	r0, r1
90020796:	f6bf af70 	bge.w	9002067a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9002079a:	991c      	ldr	r1, [sp, #112]	; 0x70
9002079c:	fb01 6303 	mla	r3, r1, r3, r6
900207a0:	141b      	asrs	r3, r3, #16
900207a2:	f53f af6a 	bmi.w	9002067a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900207a6:	3a01      	subs	r2, #1
900207a8:	4293      	cmp	r3, r2
900207aa:	f6bf af66 	bge.w	9002067a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900207ae:	46a9      	mov	r9, r5
900207b0:	46ba      	mov	sl, r7
900207b2:	f1b9 0f00 	cmp.w	r9, #0
900207b6:	dc5b      	bgt.n	90020870 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
900207b8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900207bc:	eb07 0745 	add.w	r7, r7, r5, lsl #1
900207c0:	9b07      	ldr	r3, [sp, #28]
900207c2:	2b00      	cmp	r3, #0
900207c4:	f340 80b9 	ble.w	9002093a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
900207c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900207cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
900207ce:	ee30 0a04 	vadd.f32	s0, s0, s8
900207d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
900207d6:	eef0 6a62 	vmov.f32	s13, s5
900207da:	eec7 7a00 	vdiv.f32	s15, s14, s0
900207de:	ee31 1a05 	vadd.f32	s2, s2, s10
900207e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900207e6:	ee16 4a90 	vmov	r4, s13
900207ea:	eef0 6a43 	vmov.f32	s13, s6
900207ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900207f2:	ee16 6a90 	vmov	r6, s13
900207f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900207fa:	ee61 7a27 	vmul.f32	s15, s2, s15
900207fe:	ee77 2a62 	vsub.f32	s5, s14, s5
90020802:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020806:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002080a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002080e:	ee12 2a90 	vmov	r2, s5
90020812:	eef0 2a47 	vmov.f32	s5, s14
90020816:	fb92 f3f3 	sdiv	r3, r2, r3
9002081a:	ee13 2a10 	vmov	r2, s6
9002081e:	931b      	str	r3, [sp, #108]	; 0x6c
90020820:	9b18      	ldr	r3, [sp, #96]	; 0x60
90020822:	eeb0 3a67 	vmov.f32	s6, s15
90020826:	fb92 f3f3 	sdiv	r3, r2, r3
9002082a:	931c      	str	r3, [sp, #112]	; 0x70
9002082c:	9b07      	ldr	r3, [sp, #28]
9002082e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90020830:	3b01      	subs	r3, #1
90020832:	9307      	str	r3, [sp, #28]
90020834:	bf08      	it	eq
90020836:	4615      	moveq	r5, r2
90020838:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002083a:	bf18      	it	ne
9002083c:	461d      	movne	r5, r3
9002083e:	e6f3      	b.n	90020628 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90020840:	f111 0b01 	adds.w	fp, r1, #1
90020844:	d48d      	bmi.n	90020762 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020846:	45de      	cmp	lr, fp
90020848:	db8b      	blt.n	90020762 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9002084a:	f110 0b01 	adds.w	fp, r0, #1
9002084e:	d488      	bmi.n	90020762 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020850:	455b      	cmp	r3, fp
90020852:	db86      	blt.n	90020762 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020854:	b21b      	sxth	r3, r3
90020856:	e9cd 1001 	strd	r1, r0, [sp, #4]
9002085a:	e9cd 2c03 	strd	r2, ip, [sp, #12]
9002085e:	9300      	str	r3, [sp, #0]
90020860:	4642      	mov	r2, r8
90020862:	fa0f f38e 	sxth.w	r3, lr
90020866:	4649      	mov	r1, r9
90020868:	980d      	ldr	r0, [sp, #52]	; 0x34
9002086a:	f7ff fe4c 	bl	90020506 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
9002086e:	e778      	b.n	90020762 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90020870:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020872:	1420      	asrs	r0, r4, #16
90020874:	1431      	asrs	r1, r6, #16
90020876:	f3c6 3e03 	ubfx	lr, r6, #12, #4
9002087a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9002087e:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020882:	fb03 0101 	mla	r1, r3, r1, r0
90020886:	eb08 0041 	add.w	r0, r8, r1, lsl #1
9002088a:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
9002088e:	8841      	ldrh	r1, [r0, #2]
90020890:	f1be 0f00 	cmp.w	lr, #0
90020894:	d00b      	beq.n	900208ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
90020896:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
9002089a:	3b01      	subs	r3, #1
9002089c:	005b      	lsls	r3, r3, #1
9002089e:	3302      	adds	r3, #2
900208a0:	eb00 0b03 	add.w	fp, r0, r3
900208a4:	5ac3      	ldrh	r3, [r0, r3]
900208a6:	930a      	str	r3, [sp, #40]	; 0x28
900208a8:	f8bb 3002 	ldrh.w	r3, [fp, #2]
900208ac:	930b      	str	r3, [sp, #44]	; 0x2c
900208ae:	ea4f 400c 	mov.w	r0, ip, lsl #16
900208b2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900208b6:	fb12 f30e 	smulbb	r3, r2, lr
900208ba:	ea4f 4b01 	mov.w	fp, r1, lsl #16
900208be:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900208c2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900208c6:	10db      	asrs	r3, r3, #3
900208c8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900208cc:	ea40 000c 	orr.w	r0, r0, ip
900208d0:	f1ce 0c10 	rsb	ip, lr, #16
900208d4:	ea4b 0101 	orr.w	r1, fp, r1
900208d8:	f109 39ff 	add.w	r9, r9, #4294967295
900208dc:	ebac 0c02 	sub.w	ip, ip, r2
900208e0:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
900208e4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
900208e8:	4351      	muls	r1, r2
900208ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900208ec:	fb0c 1c00 	mla	ip, ip, r0, r1
900208f0:	990a      	ldr	r1, [sp, #40]	; 0x28
900208f2:	ea4f 4b02 	mov.w	fp, r2, lsl #16
900208f6:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
900208fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900208fc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020900:	0412      	lsls	r2, r2, #16
90020902:	ea4b 0000 	orr.w	r0, fp, r0
90020906:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
9002090a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9002090e:	fb03 c000 	mla	r0, r3, r0, ip
90020912:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90020916:	ea42 0b0b 	orr.w	fp, r2, fp
9002091a:	fb03 000b 	mla	r0, r3, fp, r0
9002091e:	0d43      	lsrs	r3, r0, #21
90020920:	0940      	lsrs	r0, r0, #5
90020922:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020926:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002092a:	4318      	orrs	r0, r3
9002092c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002092e:	441c      	add	r4, r3
90020930:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020932:	f82a 0b02 	strh.w	r0, [sl], #2
90020936:	441e      	add	r6, r3
90020938:	e73b      	b.n	900207b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
9002093a:	b00f      	add	sp, #60	; 0x3c
9002093c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020940 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
90020940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020944:	b085      	sub	sp, #20
90020946:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
9002094a:	9102      	str	r1, [sp, #8]
9002094c:	2c00      	cmp	r4, #0
9002094e:	fb04 7103 	mla	r1, r4, r3, r7
90020952:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90020956:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9002095a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
9002095e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90020962:	f2c0 811b 	blt.w	90020b9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90020966:	45a6      	cmp	lr, r4
90020968:	f340 8118 	ble.w	90020b9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
9002096c:	2f00      	cmp	r7, #0
9002096e:	f2c0 8113 	blt.w	90020b98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90020972:	42bb      	cmp	r3, r7
90020974:	f340 8110 	ble.w	90020b98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90020978:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
9002097c:	1c7a      	adds	r2, r7, #1
9002097e:	f100 8110 	bmi.w	90020ba2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90020982:	4293      	cmp	r3, r2
90020984:	f340 810d 	ble.w	90020ba2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90020988:	2e00      	cmp	r6, #0
9002098a:	f000 810c 	beq.w	90020ba6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
9002098e:	f8dc 1004 	ldr.w	r1, [ip, #4]
90020992:	3401      	adds	r4, #1
90020994:	f100 810b 	bmi.w	90020bae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90020998:	45a6      	cmp	lr, r4
9002099a:	f340 8108 	ble.w	90020bae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
9002099e:	2800      	cmp	r0, #0
900209a0:	f000 8108 	beq.w	90020bb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
900209a4:	2f00      	cmp	r7, #0
900209a6:	f2c0 8100 	blt.w	90020baa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
900209aa:	42bb      	cmp	r3, r7
900209ac:	f340 80fd 	ble.w	90020baa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
900209b0:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
900209b4:	3701      	adds	r7, #1
900209b6:	f100 8100 	bmi.w	90020bba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
900209ba:	42bb      	cmp	r3, r7
900209bc:	f340 80fd 	ble.w	90020bba <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
900209c0:	2e00      	cmp	r6, #0
900209c2:	f000 80fc 	beq.w	90020bbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
900209c6:	3301      	adds	r3, #1
900209c8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
900209cc:	b2b6      	uxth	r6, r6
900209ce:	b280      	uxth	r0, r0
900209d0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
900209d4:	fb00 fe06 	mul.w	lr, r0, r6
900209d8:	0136      	lsls	r6, r6, #4
900209da:	ea4f 6b15 	mov.w	fp, r5, lsr #24
900209de:	ebce 1000 	rsb	r0, lr, r0, lsl #4
900209e2:	eba6 070e 	sub.w	r7, r6, lr
900209e6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
900209ea:	ea4f 6914 	mov.w	r9, r4, lsr #24
900209ee:	b280      	uxth	r0, r0
900209f0:	b2bf      	uxth	r7, r7
900209f2:	1a1b      	subs	r3, r3, r0
900209f4:	ea4f 6812 	mov.w	r8, r2, lsr #24
900209f8:	fb0a f607 	mul.w	r6, sl, r7
900209fc:	b29b      	uxth	r3, r3
900209fe:	fb0b 6603 	mla	r6, fp, r3, r6
90020a02:	fb00 6609 	mla	r6, r0, r9, r6
90020a06:	fb0e 6608 	mla	r6, lr, r8, r6
90020a0a:	f3c6 2607 	ubfx	r6, r6, #8, #8
90020a0e:	9600      	str	r6, [sp, #0]
90020a10:	2e00      	cmp	r6, #0
90020a12:	f000 80be 	beq.w	90020b92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
90020a16:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90020a1a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90020a1e:	9e02      	ldr	r6, [sp, #8]
90020a20:	fb0b fc0c 	mul.w	ip, fp, ip
90020a24:	fb0b f505 	mul.w	r5, fp, r5
90020a28:	8836      	ldrh	r6, [r6, #0]
90020a2a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90020a2e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020a32:	9501      	str	r5, [sp, #4]
90020a34:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90020a38:	44dc      	add	ip, fp
90020a3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020a3e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90020a42:	9503      	str	r5, [sp, #12]
90020a44:	9d01      	ldr	r5, [sp, #4]
90020a46:	f505 7c80 	add.w	ip, r5, #256	; 0x100
90020a4a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90020a4e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90020a52:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90020a56:	fb0a fc0c 	mul.w	ip, sl, ip
90020a5a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90020a5e:	fb0a fa01 	mul.w	sl, sl, r1
90020a62:	ea4f 251c 	mov.w	r5, ip, lsr #8
90020a66:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020a6a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90020a6e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90020a72:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90020a76:	4465      	add	r5, ip
90020a78:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90020a7c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90020a80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020a84:	fb09 fc0c 	mul.w	ip, r9, ip
90020a88:	0a2d      	lsrs	r5, r5, #8
90020a8a:	fb09 f904 	mul.w	r9, r9, r4
90020a8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020a92:	ea4f 211c 	mov.w	r1, ip, lsr #8
90020a96:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90020a9a:	f509 7480 	add.w	r4, r9, #256	; 0x100
90020a9e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90020aa2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90020aa6:	437d      	muls	r5, r7
90020aa8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90020aac:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90020ab0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90020ab4:	4461      	add	r1, ip
90020ab6:	fb08 f404 	mul.w	r4, r8, r4
90020aba:	ea4f 2919 	mov.w	r9, r9, lsr #8
90020abe:	fb08 f802 	mul.w	r8, r8, r2
90020ac2:	0a09      	lsrs	r1, r1, #8
90020ac4:	0a22      	lsrs	r2, r4, #8
90020ac6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
90020aca:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90020ace:	fb07 f70a 	mul.w	r7, r7, sl
90020ad2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90020ad6:	4414      	add	r4, r2
90020ad8:	f508 7280 	add.w	r2, r8, #256	; 0x100
90020adc:	0a24      	lsrs	r4, r4, #8
90020ade:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90020ae2:	9a03      	ldr	r2, [sp, #12]
90020ae4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90020ae8:	fb02 5503 	mla	r5, r2, r3, r5
90020aec:	ea4f 2818 	mov.w	r8, r8, lsr #8
90020af0:	9a00      	ldr	r2, [sp, #0]
90020af2:	fb04 540e 	mla	r4, r4, lr, r5
90020af6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90020afa:	1235      	asrs	r5, r6, #8
90020afc:	fb01 4100 	mla	r1, r1, r0, r4
90020b00:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90020b04:	0a09      	lsrs	r1, r1, #8
90020b06:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90020b0a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90020b0e:	fb03 7101 	mla	r1, r3, r1, r7
90020b12:	fb0e 1e08 	mla	lr, lr, r8, r1
90020b16:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90020b1a:	fb00 e101 	mla	r1, r0, r1, lr
90020b1e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
90020b22:	b287      	uxth	r7, r0
90020b24:	0a09      	lsrs	r1, r1, #8
90020b26:	437a      	muls	r2, r7
90020b28:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90020b2c:	1c53      	adds	r3, r2, #1
90020b2e:	4321      	orrs	r1, r4
90020b30:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020b34:	0c0a      	lsrs	r2, r1, #16
90020b36:	f3c1 2407 	ubfx	r4, r1, #8, #8
90020b3a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90020b3e:	b2c8      	uxtb	r0, r1
90020b40:	fb12 f207 	smulbb	r2, r2, r7
90020b44:	fb14 f407 	smulbb	r4, r4, r7
90020b48:	b2db      	uxtb	r3, r3
90020b4a:	fb10 f007 	smulbb	r0, r0, r7
90020b4e:	fb05 2503 	mla	r5, r5, r3, r2
90020b52:	10f2      	asrs	r2, r6, #3
90020b54:	00f6      	lsls	r6, r6, #3
90020b56:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90020b5a:	b2ad      	uxth	r5, r5
90020b5c:	b2f6      	uxtb	r6, r6
90020b5e:	fb02 4203 	mla	r2, r2, r3, r4
90020b62:	fb06 0303 	mla	r3, r6, r3, r0
90020b66:	b294      	uxth	r4, r2
90020b68:	b299      	uxth	r1, r3
90020b6a:	1c6b      	adds	r3, r5, #1
90020b6c:	1c62      	adds	r2, r4, #1
90020b6e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90020b72:	1c4b      	adds	r3, r1, #1
90020b74:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90020b78:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90020b7c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90020b80:	0952      	lsrs	r2, r2, #5
90020b82:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020b86:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020b8a:	432b      	orrs	r3, r5
90020b8c:	4313      	orrs	r3, r2
90020b8e:	9a02      	ldr	r2, [sp, #8]
90020b90:	8013      	strh	r3, [r2, #0]
90020b92:	b005      	add	sp, #20
90020b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020b98:	2500      	movs	r5, #0
90020b9a:	e6ef      	b.n	9002097c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
90020b9c:	2100      	movs	r1, #0
90020b9e:	460d      	mov	r5, r1
90020ba0:	e6f7      	b.n	90020992 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020ba2:	2100      	movs	r1, #0
90020ba4:	e6f5      	b.n	90020992 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020ba6:	4631      	mov	r1, r6
90020ba8:	e6f3      	b.n	90020992 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90020baa:	2400      	movs	r4, #0
90020bac:	e702      	b.n	900209b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
90020bae:	2200      	movs	r2, #0
90020bb0:	4614      	mov	r4, r2
90020bb2:	e70b      	b.n	900209cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020bb4:	4602      	mov	r2, r0
90020bb6:	4604      	mov	r4, r0
90020bb8:	e708      	b.n	900209cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020bba:	2200      	movs	r2, #0
90020bbc:	e706      	b.n	900209cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90020bbe:	4632      	mov	r2, r6
90020bc0:	e704      	b.n	900209cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

90020bc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020bc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020bc6:	b09d      	sub	sp, #116	; 0x74
90020bc8:	9219      	str	r2, [sp, #100]	; 0x64
90020bca:	9307      	str	r3, [sp, #28]
90020bcc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
90020bce:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
90020bd2:	901b      	str	r0, [sp, #108]	; 0x6c
90020bd4:	931a      	str	r3, [sp, #104]	; 0x68
90020bd6:	6850      	ldr	r0, [r2, #4]
90020bd8:	9117      	str	r1, [sp, #92]	; 0x5c
90020bda:	6812      	ldr	r2, [r2, #0]
90020bdc:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
90020be0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
90020be4:	fb00 1303 	mla	r3, r0, r3, r1
90020be8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90020bec:	930a      	str	r3, [sp, #40]	; 0x28
90020bee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90020bf0:	681b      	ldr	r3, [r3, #0]
90020bf2:	9310      	str	r3, [sp, #64]	; 0x40
90020bf4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
90020bf8:	930b      	str	r3, [sp, #44]	; 0x2c
90020bfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90020bfc:	2b00      	cmp	r3, #0
90020bfe:	dc03      	bgt.n	90020c08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90020c00:	9b19      	ldr	r3, [sp, #100]	; 0x64
90020c02:	2b00      	cmp	r3, #0
90020c04:	f340 8375 	ble.w	900212f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90020c08:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90020c0a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020c0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020c12:	1e48      	subs	r0, r1, #1
90020c14:	1e57      	subs	r7, r2, #1
90020c16:	9b07      	ldr	r3, [sp, #28]
90020c18:	2b00      	cmp	r3, #0
90020c1a:	f340 818e 	ble.w	90020f3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90020c1e:	ea5f 4c24 	movs.w	ip, r4, asr #16
90020c22:	ea4f 4326 	mov.w	r3, r6, asr #16
90020c26:	d406      	bmi.n	90020c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020c28:	4584      	cmp	ip, r0
90020c2a:	da04      	bge.n	90020c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020c2c:	2b00      	cmp	r3, #0
90020c2e:	db02      	blt.n	90020c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90020c30:	42bb      	cmp	r3, r7
90020c32:	f2c0 8183 	blt.w	90020f3c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
90020c36:	f11c 0c01 	adds.w	ip, ip, #1
90020c3a:	f100 8173 	bmi.w	90020f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020c3e:	4561      	cmp	r1, ip
90020c40:	f2c0 8170 	blt.w	90020f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020c44:	3301      	adds	r3, #1
90020c46:	f100 816d 	bmi.w	90020f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020c4a:	429a      	cmp	r2, r3
90020c4c:	f2c0 816a 	blt.w	90020f24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020c50:	9b07      	ldr	r3, [sp, #28]
90020c52:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90020c54:	9318      	str	r3, [sp, #96]	; 0x60
90020c56:	9b18      	ldr	r3, [sp, #96]	; 0x60
90020c58:	2b00      	cmp	r3, #0
90020c5a:	f340 818c 	ble.w	90020f76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
90020c5e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
90020c60:	ea4f 4c26 	mov.w	ip, r6, asr #16
90020c64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90020c66:	f3c4 3003 	ubfx	r0, r4, #12, #4
90020c6a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90020c6e:	1422      	asrs	r2, r4, #16
90020c70:	f3c6 3103 	ubfx	r1, r6, #12, #4
90020c74:	689b      	ldr	r3, [r3, #8]
90020c76:	f100 81cd 	bmi.w	90021014 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020c7a:	f103 38ff 	add.w	r8, r3, #4294967295
90020c7e:	4542      	cmp	r2, r8
90020c80:	f280 81c8 	bge.w	90021014 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020c84:	f1bc 0f00 	cmp.w	ip, #0
90020c88:	f2c0 81c4 	blt.w	90021014 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020c8c:	f10e 38ff 	add.w	r8, lr, #4294967295
90020c90:	45c4      	cmp	ip, r8
90020c92:	f280 81bf 	bge.w	90021014 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020c96:	b21b      	sxth	r3, r3
90020c98:	9d10      	ldr	r5, [sp, #64]	; 0x40
90020c9a:	fb0c 2203 	mla	r2, ip, r3, r2
90020c9e:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90020ca2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90020ca6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90020caa:	2800      	cmp	r0, #0
90020cac:	f000 81a9 	beq.w	90021002 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
90020cb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
90020cb4:	950c      	str	r5, [sp, #48]	; 0x30
90020cb6:	0e2d      	lsrs	r5, r5, #24
90020cb8:	9513      	str	r5, [sp, #76]	; 0x4c
90020cba:	b181      	cbz	r1, 90020cde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90020cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90020cc0:	3b01      	subs	r3, #1
90020cc2:	009b      	lsls	r3, r3, #2
90020cc4:	3304      	adds	r3, #4
90020cc6:	eb08 0c03 	add.w	ip, r8, r3
90020cca:	f858 3003 	ldr.w	r3, [r8, r3]
90020cce:	9308      	str	r3, [sp, #32]
90020cd0:	0e1b      	lsrs	r3, r3, #24
90020cd2:	9311      	str	r3, [sp, #68]	; 0x44
90020cd4:	f8dc 3004 	ldr.w	r3, [ip, #4]
90020cd8:	930d      	str	r3, [sp, #52]	; 0x34
90020cda:	0e1b      	lsrs	r3, r3, #24
90020cdc:	9314      	str	r3, [sp, #80]	; 0x50
90020cde:	b280      	uxth	r0, r0
90020ce0:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020ce2:	b289      	uxth	r1, r1
90020ce4:	fb00 f901 	mul.w	r9, r0, r1
90020ce8:	0100      	lsls	r0, r0, #4
90020cea:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90020cee:	eba0 0809 	sub.w	r8, r0, r9
90020cf2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90020cf6:	9813      	ldr	r0, [sp, #76]	; 0x4c
90020cf8:	b289      	uxth	r1, r1
90020cfa:	fa1f f888 	uxth.w	r8, r8
90020cfe:	1a5b      	subs	r3, r3, r1
90020d00:	fb08 f000 	mul.w	r0, r8, r0
90020d04:	b29b      	uxth	r3, r3
90020d06:	fb03 000e 	mla	r0, r3, lr, r0
90020d0a:	fb01 0005 	mla	r0, r1, r5, r0
90020d0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020d10:	fb09 0005 	mla	r0, r9, r5, r0
90020d14:	f3c0 2007 	ubfx	r0, r0, #8, #8
90020d18:	2800      	cmp	r0, #0
90020d1a:	f000 80fa 	beq.w	90020f12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90020d1e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90020d22:	d01b      	beq.n	90020d5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90020d24:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90020d28:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90020d2c:	fb0e fa0a 	mul.w	sl, lr, sl
90020d30:	fb0e fe02 	mul.w	lr, lr, r2
90020d34:	ea4f 221a 	mov.w	r2, sl, lsr #8
90020d38:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90020d3c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90020d40:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90020d44:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90020d48:	4452      	add	r2, sl
90020d4a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020d4e:	0a12      	lsrs	r2, r2, #8
90020d50:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90020d54:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90020d58:	ea42 020c 	orr.w	r2, r2, ip
90020d5c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90020d5e:	2dff      	cmp	r5, #255	; 0xff
90020d60:	d021      	beq.n	90020da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
90020d62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020d64:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90020d68:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90020d6a:	fb05 fb0b 	mul.w	fp, r5, fp
90020d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020d70:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90020d74:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90020d76:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020d7a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90020d7e:	fb05 fa0a 	mul.w	sl, r5, sl
90020d82:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020d86:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90020d8a:	44de      	add	lr, fp
90020d8c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020d90:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020d94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020d98:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020d9c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020da0:	ea4e 050a 	orr.w	r5, lr, sl
90020da4:	950c      	str	r5, [sp, #48]	; 0x30
90020da6:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020da8:	2dff      	cmp	r5, #255	; 0xff
90020daa:	d021      	beq.n	90020df0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
90020dac:	9d08      	ldr	r5, [sp, #32]
90020dae:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90020db2:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020db4:	fb05 fb0b 	mul.w	fp, r5, fp
90020db8:	9d08      	ldr	r5, [sp, #32]
90020dba:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90020dbe:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020dc0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020dc4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90020dc8:	fb05 fa0a 	mul.w	sl, r5, sl
90020dcc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020dd0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90020dd4:	44de      	add	lr, fp
90020dd6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020dda:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020dde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020de2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020de6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020dea:	ea4e 050a 	orr.w	r5, lr, sl
90020dee:	9508      	str	r5, [sp, #32]
90020df0:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020df2:	2dff      	cmp	r5, #255	; 0xff
90020df4:	d021      	beq.n	90020e3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
90020df6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020df8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90020dfc:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020dfe:	fb05 fb0b 	mul.w	fp, r5, fp
90020e02:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020e04:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90020e08:	9d14      	ldr	r5, [sp, #80]	; 0x50
90020e0a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90020e0e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90020e12:	fb05 fa0a 	mul.w	sl, r5, sl
90020e16:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020e1a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90020e1e:	44de      	add	lr, fp
90020e20:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90020e24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90020e28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90020e2c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90020e30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90020e34:	ea4e 050a 	orr.w	r5, lr, sl
90020e38:	950d      	str	r5, [sp, #52]	; 0x34
90020e3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020e3c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90020e40:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90020e44:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90020e48:	9d08      	ldr	r5, [sp, #32]
90020e4a:	fb08 fc0c 	mul.w	ip, r8, ip
90020e4e:	fb03 cc0e 	mla	ip, r3, lr, ip
90020e52:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90020e56:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020e58:	fb01 cc0e 	mla	ip, r1, lr, ip
90020e5c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90020e60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020e62:	fb09 cc0e 	mla	ip, r9, lr, ip
90020e66:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90020e6a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90020e6c:	fb08 f80e 	mul.w	r8, r8, lr
90020e70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90020e74:	fb03 8202 	mla	r2, r3, r2, r8
90020e78:	9b08      	ldr	r3, [sp, #32]
90020e7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90020e7e:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
90020e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90020e84:	fb01 220a 	mla	r2, r1, sl, r2
90020e88:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
90020e8c:	883b      	ldrh	r3, [r7, #0]
90020e8e:	fb09 2901 	mla	r9, r9, r1, r2
90020e92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90020e94:	1219      	asrs	r1, r3, #8
90020e96:	4342      	muls	r2, r0
90020e98:	ea4f 2919 	mov.w	r9, r9, lsr #8
90020e9c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020ea0:	1c50      	adds	r0, r2, #1
90020ea2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90020ea6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
90020eaa:	ea4c 0c09 	orr.w	ip, ip, r9
90020eae:	ea6f 2010 	mvn.w	r0, r0, lsr #8
90020eb2:	ea4f 421c 	mov.w	r2, ip, lsr #16
90020eb6:	f3cc 2e07 	ubfx	lr, ip, #8, #8
90020eba:	fa5f fc8c 	uxtb.w	ip, ip
90020ebe:	fb12 f205 	smulbb	r2, r2, r5
90020ec2:	b2c0      	uxtb	r0, r0
90020ec4:	fb1c fc05 	smulbb	ip, ip, r5
90020ec8:	fb01 2100 	mla	r1, r1, r0, r2
90020ecc:	10da      	asrs	r2, r3, #3
90020ece:	fb1e fe05 	smulbb	lr, lr, r5
90020ed2:	00db      	lsls	r3, r3, #3
90020ed4:	b289      	uxth	r1, r1
90020ed6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90020eda:	b2db      	uxtb	r3, r3
90020edc:	fb02 e200 	mla	r2, r2, r0, lr
90020ee0:	fb03 c300 	mla	r3, r3, r0, ip
90020ee4:	b292      	uxth	r2, r2
90020ee6:	fa1f fc83 	uxth.w	ip, r3
90020eea:	1c4b      	adds	r3, r1, #1
90020eec:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90020ef0:	f10c 0301 	add.w	r3, ip, #1
90020ef4:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90020ef8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90020efc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020f00:	430b      	orrs	r3, r1
90020f02:	1c51      	adds	r1, r2, #1
90020f04:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90020f08:	0952      	lsrs	r2, r2, #5
90020f0a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020f0e:	4313      	orrs	r3, r2
90020f10:	803b      	strh	r3, [r7, #0]
90020f12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90020f14:	3702      	adds	r7, #2
90020f16:	441c      	add	r4, r3
90020f18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90020f1a:	441e      	add	r6, r3
90020f1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
90020f1e:	3b01      	subs	r3, #1
90020f20:	9318      	str	r3, [sp, #96]	; 0x60
90020f22:	e698      	b.n	90020c56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90020f24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90020f26:	441c      	add	r4, r3
90020f28:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90020f2a:	441e      	add	r6, r3
90020f2c:	9b07      	ldr	r3, [sp, #28]
90020f2e:	3b01      	subs	r3, #1
90020f30:	9307      	str	r3, [sp, #28]
90020f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020f34:	3302      	adds	r3, #2
90020f36:	930a      	str	r3, [sp, #40]	; 0x28
90020f38:	e66d      	b.n	90020c16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90020f3a:	d023      	beq.n	90020f84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
90020f3c:	9b07      	ldr	r3, [sp, #28]
90020f3e:	9829      	ldr	r0, [sp, #164]	; 0xa4
90020f40:	3b01      	subs	r3, #1
90020f42:	fb00 4003 	mla	r0, r0, r3, r4
90020f46:	1400      	asrs	r0, r0, #16
90020f48:	f53f ae82 	bmi.w	90020c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90020f4c:	3901      	subs	r1, #1
90020f4e:	4288      	cmp	r0, r1
90020f50:	f6bf ae7e 	bge.w	90020c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90020f54:	992a      	ldr	r1, [sp, #168]	; 0xa8
90020f56:	fb01 6303 	mla	r3, r1, r3, r6
90020f5a:	141b      	asrs	r3, r3, #16
90020f5c:	f53f ae78 	bmi.w	90020c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90020f60:	3a01      	subs	r2, #1
90020f62:	4293      	cmp	r3, r2
90020f64:	f6bf ae74 	bge.w	90020c50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90020f68:	f8dd b01c 	ldr.w	fp, [sp, #28]
90020f6c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
90020f70:	f1bb 0f00 	cmp.w	fp, #0
90020f74:	dc6c      	bgt.n	90021050 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
90020f76:	9b07      	ldr	r3, [sp, #28]
90020f78:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90020f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020f7e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90020f82:	930a      	str	r3, [sp, #40]	; 0x28
90020f84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90020f86:	2b00      	cmp	r3, #0
90020f88:	f340 81b3 	ble.w	900212f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90020f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020f90:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020f92:	ee30 0a04 	vadd.f32	s0, s0, s8
90020f96:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020f9a:	eef0 6a62 	vmov.f32	s13, s5
90020f9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020fa2:	ee31 1a05 	vadd.f32	s2, s2, s10
90020fa6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020faa:	ee16 4a90 	vmov	r4, s13
90020fae:	eef0 6a43 	vmov.f32	s13, s6
90020fb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020fb6:	ee16 6a90 	vmov	r6, s13
90020fba:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020fbe:	ee61 7a27 	vmul.f32	s15, s2, s15
90020fc2:	ee77 2a62 	vsub.f32	s5, s14, s5
90020fc6:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020fca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020fce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020fd2:	ee12 2a90 	vmov	r2, s5
90020fd6:	eef0 2a47 	vmov.f32	s5, s14
90020fda:	fb92 f3f3 	sdiv	r3, r2, r3
90020fde:	ee13 2a10 	vmov	r2, s6
90020fe2:	9329      	str	r3, [sp, #164]	; 0xa4
90020fe4:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020fe6:	eeb0 3a67 	vmov.f32	s6, s15
90020fea:	fb92 f3f3 	sdiv	r3, r2, r3
90020fee:	932a      	str	r3, [sp, #168]	; 0xa8
90020ff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90020ff2:	9a19      	ldr	r2, [sp, #100]	; 0x64
90020ff4:	3b01      	subs	r3, #1
90020ff6:	9317      	str	r3, [sp, #92]	; 0x5c
90020ff8:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020ffa:	bf08      	it	eq
90020ffc:	4613      	moveq	r3, r2
90020ffe:	9307      	str	r3, [sp, #28]
90021000:	e5fb      	b.n	90020bfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90021002:	2900      	cmp	r1, #0
90021004:	f43f ae6b 	beq.w	90020cde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90021008:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
9002100c:	9308      	str	r3, [sp, #32]
9002100e:	0e1b      	lsrs	r3, r3, #24
90021010:	9311      	str	r3, [sp, #68]	; 0x44
90021012:	e664      	b.n	90020cde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90021014:	f112 0801 	adds.w	r8, r2, #1
90021018:	f53f af7b 	bmi.w	90020f12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9002101c:	4543      	cmp	r3, r8
9002101e:	f6ff af78 	blt.w	90020f12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021022:	f11c 0801 	adds.w	r8, ip, #1
90021026:	f53f af74 	bmi.w	90020f12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9002102a:	45c6      	cmp	lr, r8
9002102c:	f6ff af71 	blt.w	90020f12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021030:	9d1a      	ldr	r5, [sp, #104]	; 0x68
90021032:	b21b      	sxth	r3, r3
90021034:	9201      	str	r2, [sp, #4]
90021036:	fa0f f28e 	sxth.w	r2, lr
9002103a:	e9cd 1504 	strd	r1, r5, [sp, #16]
9002103e:	e9cd c002 	strd	ip, r0, [sp, #8]
90021042:	9200      	str	r2, [sp, #0]
90021044:	4639      	mov	r1, r7
90021046:	9a10      	ldr	r2, [sp, #64]	; 0x40
90021048:	981b      	ldr	r0, [sp, #108]	; 0x6c
9002104a:	f7ff fc79 	bl	90020940 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
9002104e:	e760      	b.n	90020f12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021050:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90021052:	1427      	asrs	r7, r4, #16
90021054:	9d10      	ldr	r5, [sp, #64]	; 0x40
90021056:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002105a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002105e:	1433      	asrs	r3, r6, #16
90021060:	f3c6 3003 	ubfx	r0, r6, #12, #4
90021064:	fb01 7303 	mla	r3, r1, r3, r7
90021068:	eb05 0783 	add.w	r7, r5, r3, lsl #2
9002106c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90021070:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90021074:	2a00      	cmp	r2, #0
90021076:	f000 8133 	beq.w	900212e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
9002107a:	687d      	ldr	r5, [r7, #4]
9002107c:	950e      	str	r5, [sp, #56]	; 0x38
9002107e:	0e2d      	lsrs	r5, r5, #24
90021080:	9515      	str	r5, [sp, #84]	; 0x54
90021082:	b178      	cbz	r0, 900210a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
90021084:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
90021088:	3901      	subs	r1, #1
9002108a:	0089      	lsls	r1, r1, #2
9002108c:	3104      	adds	r1, #4
9002108e:	eb07 0e01 	add.w	lr, r7, r1
90021092:	5879      	ldr	r1, [r7, r1]
90021094:	9109      	str	r1, [sp, #36]	; 0x24
90021096:	0e09      	lsrs	r1, r1, #24
90021098:	9112      	str	r1, [sp, #72]	; 0x48
9002109a:	f8de 1004 	ldr.w	r1, [lr, #4]
9002109e:	910f      	str	r1, [sp, #60]	; 0x3c
900210a0:	0e09      	lsrs	r1, r1, #24
900210a2:	9116      	str	r1, [sp, #88]	; 0x58
900210a4:	b292      	uxth	r2, r2
900210a6:	9915      	ldr	r1, [sp, #84]	; 0x54
900210a8:	b280      	uxth	r0, r0
900210aa:	9d12      	ldr	r5, [sp, #72]	; 0x48
900210ac:	fb02 f800 	mul.w	r8, r2, r0
900210b0:	0112      	lsls	r2, r2, #4
900210b2:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
900210b6:	eba2 0e08 	sub.w	lr, r2, r8
900210ba:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
900210be:	b280      	uxth	r0, r0
900210c0:	fa1f fe8e 	uxth.w	lr, lr
900210c4:	1a12      	subs	r2, r2, r0
900210c6:	fb0e f101 	mul.w	r1, lr, r1
900210ca:	b292      	uxth	r2, r2
900210cc:	fb02 110c 	mla	r1, r2, ip, r1
900210d0:	fb00 1105 	mla	r1, r0, r5, r1
900210d4:	9d16      	ldr	r5, [sp, #88]	; 0x58
900210d6:	fb08 1105 	mla	r1, r8, r5, r1
900210da:	f3c1 2107 	ubfx	r1, r1, #8, #8
900210de:	2900      	cmp	r1, #0
900210e0:	f000 80f5 	beq.w	900212ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
900210e4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
900210e8:	d019      	beq.n	9002111e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
900210ea:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
900210ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900210f2:	fb0c fa0a 	mul.w	sl, ip, sl
900210f6:	fb0c fc03 	mul.w	ip, ip, r3
900210fa:	ea4f 231a 	mov.w	r3, sl, lsr #8
900210fe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021102:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90021106:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002110a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9002110e:	4453      	add	r3, sl
90021110:	0a3f      	lsrs	r7, r7, #8
90021112:	0a1b      	lsrs	r3, r3, #8
90021114:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021118:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002111c:	433b      	orrs	r3, r7
9002111e:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021120:	2dff      	cmp	r5, #255	; 0xff
90021122:	d020      	beq.n	90021166 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
90021124:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021126:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002112a:	9d15      	ldr	r5, [sp, #84]	; 0x54
9002112c:	436f      	muls	r7, r5
9002112e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021130:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021134:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021138:	9d15      	ldr	r5, [sp, #84]	; 0x54
9002113a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002113e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021142:	fb05 fa0a 	mul.w	sl, r5, sl
90021146:	44bc      	add	ip, r7
90021148:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9002114c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021150:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021154:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021158:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002115c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021160:	ea4c 050a 	orr.w	r5, ip, sl
90021164:	950e      	str	r5, [sp, #56]	; 0x38
90021166:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021168:	2dff      	cmp	r5, #255	; 0xff
9002116a:	d020      	beq.n	900211ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
9002116c:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002116e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021172:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021174:	436f      	muls	r7, r5
90021176:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021178:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9002117c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021180:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021182:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021186:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002118a:	fb05 fa0a 	mul.w	sl, r5, sl
9002118e:	44bc      	add	ip, r7
90021190:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021194:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021198:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9002119c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900211a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900211a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900211a8:	ea4c 050a 	orr.w	r5, ip, sl
900211ac:	9509      	str	r5, [sp, #36]	; 0x24
900211ae:	9d16      	ldr	r5, [sp, #88]	; 0x58
900211b0:	2dff      	cmp	r5, #255	; 0xff
900211b2:	d020      	beq.n	900211f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
900211b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900211b6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900211ba:	9d16      	ldr	r5, [sp, #88]	; 0x58
900211bc:	436f      	muls	r7, r5
900211be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900211c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900211c4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900211c8:	9d16      	ldr	r5, [sp, #88]	; 0x58
900211ca:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900211ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900211d2:	fb05 fa0a 	mul.w	sl, r5, sl
900211d6:	44bc      	add	ip, r7
900211d8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900211dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900211e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900211e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900211e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900211ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900211f0:	ea4c 050a 	orr.w	r5, ip, sl
900211f4:	950f      	str	r5, [sp, #60]	; 0x3c
900211f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900211f8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
900211fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021200:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021204:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021206:	fb0e f707 	mul.w	r7, lr, r7
9002120a:	fb02 770c 	mla	r7, r2, ip, r7
9002120e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021212:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021214:	fb00 770c 	mla	r7, r0, ip, r7
90021218:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002121c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002121e:	fb08 770c 	mla	r7, r8, ip, r7
90021222:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90021226:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90021228:	fb0e fe0c 	mul.w	lr, lr, ip
9002122c:	0a3f      	lsrs	r7, r7, #8
9002122e:	fb02 e303 	mla	r3, r2, r3, lr
90021232:	9a09      	ldr	r2, [sp, #36]	; 0x24
90021234:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90021238:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9002123c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9002123e:	fb00 330a 	mla	r3, r0, sl, r3
90021242:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
90021246:	f8b9 0000 	ldrh.w	r0, [r9]
9002124a:	fb08 3c0c 	mla	ip, r8, ip, r3
9002124e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021250:	1202      	asrs	r2, r0, #8
90021252:	4359      	muls	r1, r3
90021254:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021258:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9002125c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021260:	1c4b      	adds	r3, r1, #1
90021262:	ea47 070c 	orr.w	r7, r7, ip
90021266:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9002126a:	0c3b      	lsrs	r3, r7, #16
9002126c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90021270:	f3c7 2c07 	ubfx	ip, r7, #8, #8
90021274:	b2ff      	uxtb	r7, r7
90021276:	fb13 f305 	smulbb	r3, r3, r5
9002127a:	b2c9      	uxtb	r1, r1
9002127c:	fb17 f705 	smulbb	r7, r7, r5
90021280:	fb02 3201 	mla	r2, r2, r1, r3
90021284:	10c3      	asrs	r3, r0, #3
90021286:	fb1c fc05 	smulbb	ip, ip, r5
9002128a:	00c0      	lsls	r0, r0, #3
9002128c:	b292      	uxth	r2, r2
9002128e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90021292:	b2c0      	uxtb	r0, r0
90021294:	fb03 c301 	mla	r3, r3, r1, ip
90021298:	fb00 7001 	mla	r0, r0, r1, r7
9002129c:	1c51      	adds	r1, r2, #1
9002129e:	b29b      	uxth	r3, r3
900212a0:	b280      	uxth	r0, r0
900212a2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
900212a6:	f100 0c01 	add.w	ip, r0, #1
900212aa:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
900212ae:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
900212b2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900212b6:	ea4c 0202 	orr.w	r2, ip, r2
900212ba:	f103 0c01 	add.w	ip, r3, #1
900212be:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
900212c2:	095b      	lsrs	r3, r3, #5
900212c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900212c8:	431a      	orrs	r2, r3
900212ca:	f8a9 2000 	strh.w	r2, [r9]
900212ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900212d0:	f109 0902 	add.w	r9, r9, #2
900212d4:	f10b 3bff 	add.w	fp, fp, #4294967295
900212d8:	441c      	add	r4, r3
900212da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900212dc:	441e      	add	r6, r3
900212de:	e647      	b.n	90020f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
900212e0:	2800      	cmp	r0, #0
900212e2:	f43f aedf 	beq.w	900210a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900212e6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
900212ea:	9109      	str	r1, [sp, #36]	; 0x24
900212ec:	0e09      	lsrs	r1, r1, #24
900212ee:	9112      	str	r1, [sp, #72]	; 0x48
900212f0:	e6d8      	b.n	900210a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900212f2:	b01d      	add	sp, #116	; 0x74
900212f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900212f8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
900212f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900212fc:	b085      	sub	sp, #20
900212fe:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
90021302:	9102      	str	r1, [sp, #8]
90021304:	2c00      	cmp	r4, #0
90021306:	fb04 7103 	mla	r1, r4, r3, r7
9002130a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
9002130e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
90021312:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
90021316:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
9002131a:	f2c0 810c 	blt.w	90021536 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9002131e:	45a6      	cmp	lr, r4
90021320:	f340 8109 	ble.w	90021536 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
90021324:	2f00      	cmp	r7, #0
90021326:	f2c0 8104 	blt.w	90021532 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
9002132a:	42bb      	cmp	r3, r7
9002132c:	f340 8101 	ble.w	90021532 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90021330:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
90021334:	1c7a      	adds	r2, r7, #1
90021336:	f100 8101 	bmi.w	9002153c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
9002133a:	4293      	cmp	r3, r2
9002133c:	f340 80fe 	ble.w	9002153c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90021340:	2e00      	cmp	r6, #0
90021342:	f000 80fd 	beq.w	90021540 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
90021346:	f8dc 1004 	ldr.w	r1, [ip, #4]
9002134a:	3401      	adds	r4, #1
9002134c:	f100 80fc 	bmi.w	90021548 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
90021350:	45a6      	cmp	lr, r4
90021352:	f340 80f9 	ble.w	90021548 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
90021356:	2800      	cmp	r0, #0
90021358:	f000 80f9 	beq.w	9002154e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
9002135c:	2f00      	cmp	r7, #0
9002135e:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
90021362:	f2c0 80ef 	blt.w	90021544 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
90021366:	42bb      	cmp	r3, r7
90021368:	f340 80ec 	ble.w	90021544 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
9002136c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90021370:	3701      	adds	r7, #1
90021372:	f100 80ef 	bmi.w	90021554 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
90021376:	42bb      	cmp	r3, r7
90021378:	f340 80ec 	ble.w	90021554 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
9002137c:	2e00      	cmp	r6, #0
9002137e:	f000 80eb 	beq.w	90021558 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
90021382:	6852      	ldr	r2, [r2, #4]
90021384:	b2b6      	uxth	r6, r6
90021386:	b280      	uxth	r0, r0
90021388:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9002138c:	fb00 fe06 	mul.w	lr, r0, r6
90021390:	0136      	lsls	r6, r6, #4
90021392:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90021396:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9002139a:	eba6 070e 	sub.w	r7, r6, lr
9002139e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
900213a2:	ea4f 6914 	mov.w	r9, r4, lsr #24
900213a6:	b280      	uxth	r0, r0
900213a8:	b2bf      	uxth	r7, r7
900213aa:	1a1b      	subs	r3, r3, r0
900213ac:	ea4f 6812 	mov.w	r8, r2, lsr #24
900213b0:	fb07 f60a 	mul.w	r6, r7, sl
900213b4:	b29b      	uxth	r3, r3
900213b6:	fb0b 6603 	mla	r6, fp, r3, r6
900213ba:	fb00 6609 	mla	r6, r0, r9, r6
900213be:	fb0e 6608 	mla	r6, lr, r8, r6
900213c2:	f3c6 2607 	ubfx	r6, r6, #8, #8
900213c6:	9600      	str	r6, [sp, #0]
900213c8:	2e00      	cmp	r6, #0
900213ca:	f000 80af 	beq.w	9002152c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
900213ce:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900213d2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
900213d6:	9e02      	ldr	r6, [sp, #8]
900213d8:	fb0b fc0c 	mul.w	ip, fp, ip
900213dc:	fb0b f505 	mul.w	r5, fp, r5
900213e0:	8836      	ldrh	r6, [r6, #0]
900213e2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
900213e6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900213ea:	9501      	str	r5, [sp, #4]
900213ec:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
900213f0:	44dc      	add	ip, fp
900213f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900213f6:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
900213fa:	9503      	str	r5, [sp, #12]
900213fc:	9d01      	ldr	r5, [sp, #4]
900213fe:	f505 7c80 	add.w	ip, r5, #256	; 0x100
90021402:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90021406:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9002140a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9002140e:	fb0a fc0c 	mul.w	ip, sl, ip
90021412:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90021416:	fb0a fa01 	mul.w	sl, sl, r1
9002141a:	ea4f 251c 	mov.w	r5, ip, lsr #8
9002141e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021422:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90021426:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9002142a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9002142e:	4465      	add	r5, ip
90021430:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021434:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90021438:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002143c:	fb09 fc0c 	mul.w	ip, r9, ip
90021440:	0a2d      	lsrs	r5, r5, #8
90021442:	fb09 f904 	mul.w	r9, r9, r4
90021446:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002144a:	ea4f 211c 	mov.w	r1, ip, lsr #8
9002144e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021452:	f509 7480 	add.w	r4, r9, #256	; 0x100
90021456:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002145a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9002145e:	437d      	muls	r5, r7
90021460:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90021464:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90021468:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9002146c:	4461      	add	r1, ip
9002146e:	fb08 f404 	mul.w	r4, r8, r4
90021472:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021476:	fb08 f802 	mul.w	r8, r8, r2
9002147a:	0a09      	lsrs	r1, r1, #8
9002147c:	0a22      	lsrs	r2, r4, #8
9002147e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
90021482:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90021486:	fb07 f70a 	mul.w	r7, r7, sl
9002148a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002148e:	4414      	add	r4, r2
90021490:	f508 7280 	add.w	r2, r8, #256	; 0x100
90021494:	0a24      	lsrs	r4, r4, #8
90021496:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9002149a:	9a03      	ldr	r2, [sp, #12]
9002149c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
900214a0:	fb02 5503 	mla	r5, r2, r3, r5
900214a4:	ea4f 2818 	mov.w	r8, r8, lsr #8
900214a8:	fb04 540e 	mla	r4, r4, lr, r5
900214ac:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
900214b0:	fb01 4100 	mla	r1, r1, r0, r4
900214b4:	0a09      	lsrs	r1, r1, #8
900214b6:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
900214ba:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
900214be:	fb03 7101 	mla	r1, r3, r1, r7
900214c2:	9b00      	ldr	r3, [sp, #0]
900214c4:	fb0e 1e08 	mla	lr, lr, r8, r1
900214c8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
900214cc:	43da      	mvns	r2, r3
900214ce:	1233      	asrs	r3, r6, #8
900214d0:	fb00 e101 	mla	r1, r0, r1, lr
900214d4:	10f0      	asrs	r0, r6, #3
900214d6:	b2d2      	uxtb	r2, r2
900214d8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
900214dc:	0a09      	lsrs	r1, r1, #8
900214de:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900214e2:	00f6      	lsls	r6, r6, #3
900214e4:	4353      	muls	r3, r2
900214e6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
900214ea:	4350      	muls	r0, r2
900214ec:	b2f6      	uxtb	r6, r6
900214ee:	4321      	orrs	r1, r4
900214f0:	4356      	muls	r6, r2
900214f2:	1c5a      	adds	r2, r3, #1
900214f4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
900214f8:	0c0b      	lsrs	r3, r1, #16
900214fa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900214fe:	1c42      	adds	r2, r0, #1
90021500:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90021504:	0a0a      	lsrs	r2, r1, #8
90021506:	021b      	lsls	r3, r3, #8
90021508:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9002150c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90021510:	00d2      	lsls	r2, r2, #3
90021512:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021516:	4313      	orrs	r3, r2
90021518:	1c72      	adds	r2, r6, #1
9002151a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
9002151e:	eb01 2116 	add.w	r1, r1, r6, lsr #8
90021522:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90021526:	4319      	orrs	r1, r3
90021528:	9b02      	ldr	r3, [sp, #8]
9002152a:	8019      	strh	r1, [r3, #0]
9002152c:	b005      	add	sp, #20
9002152e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021532:	2500      	movs	r5, #0
90021534:	e6fe      	b.n	90021334 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
90021536:	2100      	movs	r1, #0
90021538:	460d      	mov	r5, r1
9002153a:	e706      	b.n	9002134a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
9002153c:	2100      	movs	r1, #0
9002153e:	e704      	b.n	9002134a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90021540:	4631      	mov	r1, r6
90021542:	e702      	b.n	9002134a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90021544:	2400      	movs	r4, #0
90021546:	e713      	b.n	90021370 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
90021548:	2200      	movs	r2, #0
9002154a:	4614      	mov	r4, r2
9002154c:	e71a      	b.n	90021384 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
9002154e:	4602      	mov	r2, r0
90021550:	4604      	mov	r4, r0
90021552:	e717      	b.n	90021384 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90021554:	2200      	movs	r2, #0
90021556:	e715      	b.n	90021384 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90021558:	4632      	mov	r2, r6
9002155a:	e713      	b.n	90021384 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

9002155c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9002155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021560:	b09b      	sub	sp, #108	; 0x6c
90021562:	9218      	str	r2, [sp, #96]	; 0x60
90021564:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90021566:	9019      	str	r0, [sp, #100]	; 0x64
90021568:	9116      	str	r1, [sp, #88]	; 0x58
9002156a:	6850      	ldr	r0, [r2, #4]
9002156c:	9307      	str	r3, [sp, #28]
9002156e:	6812      	ldr	r2, [r2, #0]
90021570:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
90021574:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
90021578:	fb00 1303 	mla	r3, r0, r3, r1
9002157c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021580:	930a      	str	r3, [sp, #40]	; 0x28
90021582:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021584:	681b      	ldr	r3, [r3, #0]
90021586:	930f      	str	r3, [sp, #60]	; 0x3c
90021588:	9b16      	ldr	r3, [sp, #88]	; 0x58
9002158a:	2b00      	cmp	r3, #0
9002158c:	dc03      	bgt.n	90021596 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9002158e:	9b18      	ldr	r3, [sp, #96]	; 0x60
90021590:	2b00      	cmp	r3, #0
90021592:	f340 8387 	ble.w	90021ca4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
90021596:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021598:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002159c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900215a0:	1e48      	subs	r0, r1, #1
900215a2:	1e57      	subs	r7, r2, #1
900215a4:	9b07      	ldr	r3, [sp, #28]
900215a6:	2b00      	cmp	r3, #0
900215a8:	f340 8166 	ble.w	90021878 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
900215ac:	ea5f 4c24 	movs.w	ip, r4, asr #16
900215b0:	ea4f 4326 	mov.w	r3, r6, asr #16
900215b4:	d406      	bmi.n	900215c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900215b6:	4584      	cmp	ip, r0
900215b8:	da04      	bge.n	900215c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900215ba:	2b00      	cmp	r3, #0
900215bc:	db02      	blt.n	900215c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900215be:	42bb      	cmp	r3, r7
900215c0:	f2c0 815b 	blt.w	9002187a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900215c4:	f11c 0c01 	adds.w	ip, ip, #1
900215c8:	f100 814b 	bmi.w	90021862 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900215cc:	4561      	cmp	r1, ip
900215ce:	f2c0 8148 	blt.w	90021862 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900215d2:	3301      	adds	r3, #1
900215d4:	f100 8145 	bmi.w	90021862 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900215d8:	429a      	cmp	r2, r3
900215da:	f2c0 8142 	blt.w	90021862 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
900215de:	9b07      	ldr	r3, [sp, #28]
900215e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
900215e2:	9317      	str	r3, [sp, #92]	; 0x5c
900215e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900215e6:	2b00      	cmp	r3, #0
900215e8:	f340 8165 	ble.w	900218b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
900215ec:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
900215ee:	ea4f 4c26 	mov.w	ip, r6, asr #16
900215f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900215f4:	f3c4 3103 	ubfx	r1, r4, #12, #4
900215f8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
900215fc:	1422      	asrs	r2, r4, #16
900215fe:	f3c6 3003 	ubfx	r0, r6, #12, #4
90021602:	689b      	ldr	r3, [r3, #8]
90021604:	f100 81d5 	bmi.w	900219b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021608:	f103 38ff 	add.w	r8, r3, #4294967295
9002160c:	4542      	cmp	r2, r8
9002160e:	f280 81d0 	bge.w	900219b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021612:	f1bc 0f00 	cmp.w	ip, #0
90021616:	f2c0 81cc 	blt.w	900219b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002161a:	f10e 38ff 	add.w	r8, lr, #4294967295
9002161e:	45c4      	cmp	ip, r8
90021620:	f280 81c7 	bge.w	900219b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021624:	b21b      	sxth	r3, r3
90021626:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021628:	fb0c 2203 	mla	r2, ip, r3, r2
9002162c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90021630:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90021634:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90021638:	2900      	cmp	r1, #0
9002163a:	f000 8182 	beq.w	90021942 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
9002163e:	f8d8 5004 	ldr.w	r5, [r8, #4]
90021642:	950b      	str	r5, [sp, #44]	; 0x2c
90021644:	0e2d      	lsrs	r5, r5, #24
90021646:	9512      	str	r5, [sp, #72]	; 0x48
90021648:	b180      	cbz	r0, 9002166c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
9002164a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
9002164e:	3b01      	subs	r3, #1
90021650:	009b      	lsls	r3, r3, #2
90021652:	3304      	adds	r3, #4
90021654:	eb08 0c03 	add.w	ip, r8, r3
90021658:	f858 3003 	ldr.w	r3, [r8, r3]
9002165c:	9308      	str	r3, [sp, #32]
9002165e:	0e1b      	lsrs	r3, r3, #24
90021660:	9310      	str	r3, [sp, #64]	; 0x40
90021662:	f8dc 3004 	ldr.w	r3, [ip, #4]
90021666:	930c      	str	r3, [sp, #48]	; 0x30
90021668:	0e1b      	lsrs	r3, r3, #24
9002166a:	9313      	str	r3, [sp, #76]	; 0x4c
9002166c:	b289      	uxth	r1, r1
9002166e:	9b12      	ldr	r3, [sp, #72]	; 0x48
90021670:	b280      	uxth	r0, r0
90021672:	9d10      	ldr	r5, [sp, #64]	; 0x40
90021674:	fb01 f900 	mul.w	r9, r1, r0
90021678:	0109      	lsls	r1, r1, #4
9002167a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9002167e:	eba1 0809 	sub.w	r8, r1, r9
90021682:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
90021686:	b280      	uxth	r0, r0
90021688:	fa1f f888 	uxth.w	r8, r8
9002168c:	1a09      	subs	r1, r1, r0
9002168e:	fb08 f303 	mul.w	r3, r8, r3
90021692:	b289      	uxth	r1, r1
90021694:	fb01 330e 	mla	r3, r1, lr, r3
90021698:	fb00 3305 	mla	r3, r0, r5, r3
9002169c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9002169e:	fb09 3305 	mla	r3, r9, r5, r3
900216a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
900216a6:	2b00      	cmp	r3, #0
900216a8:	f000 80d2 	beq.w	90021850 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900216ac:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900216b0:	d01b      	beq.n	900216ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
900216b2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
900216b6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900216ba:	fb0e fa0a 	mul.w	sl, lr, sl
900216be:	fb0e fe02 	mul.w	lr, lr, r2
900216c2:	ea4f 221a 	mov.w	r2, sl, lsr #8
900216c6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900216ca:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
900216ce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900216d2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
900216d6:	4452      	add	r2, sl
900216d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900216dc:	0a12      	lsrs	r2, r2, #8
900216de:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900216e2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900216e6:	ea42 020c 	orr.w	r2, r2, ip
900216ea:	9d12      	ldr	r5, [sp, #72]	; 0x48
900216ec:	2dff      	cmp	r5, #255	; 0xff
900216ee:	d021      	beq.n	90021734 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
900216f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900216f2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900216f6:	9d12      	ldr	r5, [sp, #72]	; 0x48
900216f8:	fb05 fb0b 	mul.w	fp, r5, fp
900216fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900216fe:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021702:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021704:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021708:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002170c:	fb05 fa0a 	mul.w	sl, r5, sl
90021710:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021714:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021718:	44de      	add	lr, fp
9002171a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002171e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021722:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021726:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002172a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002172e:	ea4e 050a 	orr.w	r5, lr, sl
90021732:	950b      	str	r5, [sp, #44]	; 0x2c
90021734:	9d10      	ldr	r5, [sp, #64]	; 0x40
90021736:	2dff      	cmp	r5, #255	; 0xff
90021738:	d021      	beq.n	9002177e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
9002173a:	9d08      	ldr	r5, [sp, #32]
9002173c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90021740:	9d10      	ldr	r5, [sp, #64]	; 0x40
90021742:	fb05 fb0b 	mul.w	fp, r5, fp
90021746:	9d08      	ldr	r5, [sp, #32]
90021748:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
9002174c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002174e:	fb05 fa0e 	mul.w	sl, r5, lr
90021752:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021756:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002175a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002175e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021762:	44de      	add	lr, fp
90021764:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021768:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002176c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021770:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021774:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021778:	ea4e 050a 	orr.w	r5, lr, sl
9002177c:	9508      	str	r5, [sp, #32]
9002177e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90021780:	2dff      	cmp	r5, #255	; 0xff
90021782:	d021      	beq.n	900217c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
90021784:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90021786:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9002178a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9002178c:	fb05 fb0b 	mul.w	fp, r5, fp
90021790:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90021792:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021796:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90021798:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002179c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900217a0:	fb05 fa0a 	mul.w	sl, r5, sl
900217a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900217a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900217ac:	44de      	add	lr, fp
900217ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900217b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900217b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900217ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900217be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900217c2:	ea4e 050a 	orr.w	r5, lr, sl
900217c6:	950c      	str	r5, [sp, #48]	; 0x30
900217c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900217ca:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
900217ce:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900217d2:	2bff      	cmp	r3, #255	; 0xff
900217d4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
900217d8:	9d08      	ldr	r5, [sp, #32]
900217da:	fb08 fc0c 	mul.w	ip, r8, ip
900217de:	fb01 cc0e 	mla	ip, r1, lr, ip
900217e2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
900217e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900217e8:	fb00 cc0e 	mla	ip, r0, lr, ip
900217ec:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
900217f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900217f2:	fb09 cc0e 	mla	ip, r9, lr, ip
900217f6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
900217fa:	fb08 f80e 	mul.w	r8, r8, lr
900217fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021802:	fb01 8202 	mla	r2, r1, r2, r8
90021806:	9908      	ldr	r1, [sp, #32]
90021808:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002180c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90021810:	990c      	ldr	r1, [sp, #48]	; 0x30
90021812:	fb00 220a 	mla	r2, r0, sl, r2
90021816:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
9002181a:	fb09 2900 	mla	r9, r9, r0, r2
9002181e:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021822:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90021826:	ea4c 0c09 	orr.w	ip, ip, r9
9002182a:	ea4f 221c 	mov.w	r2, ip, lsr #8
9002182e:	f040 8091 	bne.w	90021954 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
90021832:	ea4f 135c 	mov.w	r3, ip, lsr #5
90021836:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
9002183a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002183e:	f022 0207 	bic.w	r2, r2, #7
90021842:	431a      	orrs	r2, r3
90021844:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
90021848:	ea4c 0c02 	orr.w	ip, ip, r2
9002184c:	f8a7 c000 	strh.w	ip, [r7]
90021850:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90021852:	3702      	adds	r7, #2
90021854:	441c      	add	r4, r3
90021856:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021858:	441e      	add	r6, r3
9002185a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002185c:	3b01      	subs	r3, #1
9002185e:	9317      	str	r3, [sp, #92]	; 0x5c
90021860:	e6c0      	b.n	900215e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
90021862:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90021864:	441c      	add	r4, r3
90021866:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021868:	441e      	add	r6, r3
9002186a:	9b07      	ldr	r3, [sp, #28]
9002186c:	3b01      	subs	r3, #1
9002186e:	9307      	str	r3, [sp, #28]
90021870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021872:	3302      	adds	r3, #2
90021874:	930a      	str	r3, [sp, #40]	; 0x28
90021876:	e695      	b.n	900215a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90021878:	d024      	beq.n	900218c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
9002187a:	9b07      	ldr	r3, [sp, #28]
9002187c:	9827      	ldr	r0, [sp, #156]	; 0x9c
9002187e:	3b01      	subs	r3, #1
90021880:	fb00 4003 	mla	r0, r0, r3, r4
90021884:	1400      	asrs	r0, r0, #16
90021886:	f53f aeaa 	bmi.w	900215de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9002188a:	3901      	subs	r1, #1
9002188c:	4288      	cmp	r0, r1
9002188e:	f6bf aea6 	bge.w	900215de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90021892:	9928      	ldr	r1, [sp, #160]	; 0xa0
90021894:	fb01 6303 	mla	r3, r1, r3, r6
90021898:	141b      	asrs	r3, r3, #16
9002189a:	f53f aea0 	bmi.w	900215de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9002189e:	3a01      	subs	r2, #1
900218a0:	4293      	cmp	r3, r2
900218a2:	f6bf ae9c 	bge.w	900215de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900218a6:	f8dd b01c 	ldr.w	fp, [sp, #28]
900218aa:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
900218ae:	f1bb 0f00 	cmp.w	fp, #0
900218b2:	f300 809a 	bgt.w	900219ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
900218b6:	9b07      	ldr	r3, [sp, #28]
900218b8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900218bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900218be:	eb03 0345 	add.w	r3, r3, r5, lsl #1
900218c2:	930a      	str	r3, [sp, #40]	; 0x28
900218c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
900218c6:	2b00      	cmp	r3, #0
900218c8:	f340 81ec 	ble.w	90021ca4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
900218cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900218d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
900218d2:	ee30 0a04 	vadd.f32	s0, s0, s8
900218d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
900218da:	eef0 6a62 	vmov.f32	s13, s5
900218de:	eec7 7a00 	vdiv.f32	s15, s14, s0
900218e2:	ee31 1a05 	vadd.f32	s2, s2, s10
900218e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900218ea:	ee16 4a90 	vmov	r4, s13
900218ee:	eef0 6a43 	vmov.f32	s13, s6
900218f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900218f6:	ee16 6a90 	vmov	r6, s13
900218fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
900218fe:	ee61 7a27 	vmul.f32	s15, s2, s15
90021902:	ee77 2a62 	vsub.f32	s5, s14, s5
90021906:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002190a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002190e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90021912:	ee12 2a90 	vmov	r2, s5
90021916:	eef0 2a47 	vmov.f32	s5, s14
9002191a:	fb92 f3f3 	sdiv	r3, r2, r3
9002191e:	ee13 2a10 	vmov	r2, s6
90021922:	9327      	str	r3, [sp, #156]	; 0x9c
90021924:	9b24      	ldr	r3, [sp, #144]	; 0x90
90021926:	eeb0 3a67 	vmov.f32	s6, s15
9002192a:	fb92 f3f3 	sdiv	r3, r2, r3
9002192e:	9328      	str	r3, [sp, #160]	; 0xa0
90021930:	9b16      	ldr	r3, [sp, #88]	; 0x58
90021932:	9a18      	ldr	r2, [sp, #96]	; 0x60
90021934:	3b01      	subs	r3, #1
90021936:	9316      	str	r3, [sp, #88]	; 0x58
90021938:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002193a:	bf08      	it	eq
9002193c:	4613      	moveq	r3, r2
9002193e:	9307      	str	r3, [sp, #28]
90021940:	e622      	b.n	90021588 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
90021942:	2800      	cmp	r0, #0
90021944:	f43f ae92 	beq.w	9002166c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021948:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
9002194c:	9308      	str	r3, [sp, #32]
9002194e:	0e1b      	lsrs	r3, r3, #24
90021950:	9310      	str	r3, [sp, #64]	; 0x40
90021952:	e68b      	b.n	9002166c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021954:	8839      	ldrh	r1, [r7, #0]
90021956:	43db      	mvns	r3, r3
90021958:	4dd4      	ldr	r5, [pc, #848]	; (90021cac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
9002195a:	ea4f 2e21 	mov.w	lr, r1, asr #8
9002195e:	fa5f f883 	uxtb.w	r8, r3
90021962:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90021966:	10c8      	asrs	r0, r1, #3
90021968:	00cb      	lsls	r3, r1, #3
9002196a:	fb0e fe08 	mul.w	lr, lr, r8
9002196e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021972:	b2db      	uxtb	r3, r3
90021974:	f10e 0101 	add.w	r1, lr, #1
90021978:	fb00 f008 	mul.w	r0, r0, r8
9002197c:	fb03 f308 	mul.w	r3, r3, r8
90021980:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
90021984:	ea4f 411c 	mov.w	r1, ip, lsr #16
90021988:	eb01 211e 	add.w	r1, r1, lr, lsr #8
9002198c:	f100 0e01 	add.w	lr, r0, #1
90021990:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
90021994:	b2c9      	uxtb	r1, r1
90021996:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9002199a:	ea05 2101 	and.w	r1, r5, r1, lsl #8
9002199e:	00d2      	lsls	r2, r2, #3
900219a0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900219a4:	430a      	orrs	r2, r1
900219a6:	1c59      	adds	r1, r3, #1
900219a8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
900219ac:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
900219b0:	e748      	b.n	90021844 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
900219b2:	f112 0801 	adds.w	r8, r2, #1
900219b6:	f53f af4b 	bmi.w	90021850 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900219ba:	4543      	cmp	r3, r8
900219bc:	f6ff af48 	blt.w	90021850 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900219c0:	f11c 0801 	adds.w	r8, ip, #1
900219c4:	f53f af44 	bmi.w	90021850 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900219c8:	45c6      	cmp	lr, r8
900219ca:	f6ff af41 	blt.w	90021850 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900219ce:	b21b      	sxth	r3, r3
900219d0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
900219d4:	fa0f f28e 	sxth.w	r2, lr
900219d8:	e9cd 1003 	strd	r1, r0, [sp, #12]
900219dc:	9200      	str	r2, [sp, #0]
900219de:	4639      	mov	r1, r7
900219e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900219e2:	9819      	ldr	r0, [sp, #100]	; 0x64
900219e4:	f7ff fc88 	bl	900212f8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
900219e8:	e732      	b.n	90021850 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900219ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900219ec:	1421      	asrs	r1, r4, #16
900219ee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900219f0:	f3c4 3203 	ubfx	r2, r4, #12, #4
900219f4:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
900219f8:	1433      	asrs	r3, r6, #16
900219fa:	f3c6 3003 	ubfx	r0, r6, #12, #4
900219fe:	fb07 1303 	mla	r3, r7, r3, r1
90021a02:	990f      	ldr	r1, [sp, #60]	; 0x3c
90021a04:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90021a08:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90021a0c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90021a10:	2a00      	cmp	r2, #0
90021a12:	f000 8108 	beq.w	90021c26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
90021a16:	684d      	ldr	r5, [r1, #4]
90021a18:	950d      	str	r5, [sp, #52]	; 0x34
90021a1a:	0e2d      	lsrs	r5, r5, #24
90021a1c:	9514      	str	r5, [sp, #80]	; 0x50
90021a1e:	b178      	cbz	r0, 90021a40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021a20:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
90021a24:	3f01      	subs	r7, #1
90021a26:	00bf      	lsls	r7, r7, #2
90021a28:	3704      	adds	r7, #4
90021a2a:	eb01 0e07 	add.w	lr, r1, r7
90021a2e:	59c9      	ldr	r1, [r1, r7]
90021a30:	9109      	str	r1, [sp, #36]	; 0x24
90021a32:	0e09      	lsrs	r1, r1, #24
90021a34:	9111      	str	r1, [sp, #68]	; 0x44
90021a36:	f8de 1004 	ldr.w	r1, [lr, #4]
90021a3a:	910e      	str	r1, [sp, #56]	; 0x38
90021a3c:	0e09      	lsrs	r1, r1, #24
90021a3e:	9115      	str	r1, [sp, #84]	; 0x54
90021a40:	b292      	uxth	r2, r2
90021a42:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021a44:	b280      	uxth	r0, r0
90021a46:	fb02 f900 	mul.w	r9, r2, r0
90021a4a:	0112      	lsls	r2, r2, #4
90021a4c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90021a50:	eba2 0e09 	sub.w	lr, r2, r9
90021a54:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90021a58:	9a14      	ldr	r2, [sp, #80]	; 0x50
90021a5a:	b280      	uxth	r0, r0
90021a5c:	fa1f fe8e 	uxth.w	lr, lr
90021a60:	1a09      	subs	r1, r1, r0
90021a62:	fb0e f202 	mul.w	r2, lr, r2
90021a66:	b289      	uxth	r1, r1
90021a68:	fb01 220c 	mla	r2, r1, ip, r2
90021a6c:	fb00 2205 	mla	r2, r0, r5, r2
90021a70:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021a72:	fb09 2205 	mla	r2, r9, r5, r2
90021a76:	f3c2 2207 	ubfx	r2, r2, #8, #8
90021a7a:	2a00      	cmp	r2, #0
90021a7c:	f000 80ca 	beq.w	90021c14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90021a80:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90021a84:	d019      	beq.n	90021aba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
90021a86:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021a8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021a8e:	fb0c fa0a 	mul.w	sl, ip, sl
90021a92:	fb0c fc03 	mul.w	ip, ip, r3
90021a96:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021a9a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021a9e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90021aa2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021aa6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90021aaa:	4453      	add	r3, sl
90021aac:	0a3f      	lsrs	r7, r7, #8
90021aae:	0a1b      	lsrs	r3, r3, #8
90021ab0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021ab4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021ab8:	433b      	orrs	r3, r7
90021aba:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021abc:	2dff      	cmp	r5, #255	; 0xff
90021abe:	d020      	beq.n	90021b02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
90021ac0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021ac2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021ac6:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021ac8:	436f      	muls	r7, r5
90021aca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021acc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021ad0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021ad4:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021ad6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021ada:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021ade:	fb05 fa0a 	mul.w	sl, r5, sl
90021ae2:	44bc      	add	ip, r7
90021ae4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021ae8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021aec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021af0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021af4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021af8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021afc:	ea4c 050a 	orr.w	r5, ip, sl
90021b00:	950d      	str	r5, [sp, #52]	; 0x34
90021b02:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021b04:	2dff      	cmp	r5, #255	; 0xff
90021b06:	d020      	beq.n	90021b4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90021b08:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021b0a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021b0e:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021b10:	436f      	muls	r7, r5
90021b12:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021b14:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90021b18:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021b1a:	fb05 fa0c 	mul.w	sl, r5, ip
90021b1e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021b22:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021b26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021b2a:	44bc      	add	ip, r7
90021b2c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021b30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021b34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021b38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021b3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021b40:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021b44:	ea4c 050a 	orr.w	r5, ip, sl
90021b48:	9509      	str	r5, [sp, #36]	; 0x24
90021b4a:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021b4c:	2dff      	cmp	r5, #255	; 0xff
90021b4e:	d020      	beq.n	90021b92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
90021b50:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021b52:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021b56:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021b58:	436f      	muls	r7, r5
90021b5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021b5c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021b60:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021b64:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021b66:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021b6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021b6e:	fb05 fa0a 	mul.w	sl, r5, sl
90021b72:	44bc      	add	ip, r7
90021b74:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021b78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021b7c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021b80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021b84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021b88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021b8c:	ea4c 050a 	orr.w	r5, ip, sl
90021b90:	950e      	str	r5, [sp, #56]	; 0x38
90021b92:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021b94:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90021b98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021b9c:	2aff      	cmp	r2, #255	; 0xff
90021b9e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021ba2:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021ba4:	fb0e f707 	mul.w	r7, lr, r7
90021ba8:	fb01 770c 	mla	r7, r1, ip, r7
90021bac:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021bb0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021bb2:	fb00 770c 	mla	r7, r0, ip, r7
90021bb6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021bba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021bbc:	fb09 770c 	mla	r7, r9, ip, r7
90021bc0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90021bc4:	fb0e fe0c 	mul.w	lr, lr, ip
90021bc8:	ea4f 2717 	mov.w	r7, r7, lsr #8
90021bcc:	fb01 e303 	mla	r3, r1, r3, lr
90021bd0:	9909      	ldr	r1, [sp, #36]	; 0x24
90021bd2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90021bd6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90021bda:	990e      	ldr	r1, [sp, #56]	; 0x38
90021bdc:	fb00 330a 	mla	r3, r0, sl, r3
90021be0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90021be4:	fb09 3c0c 	mla	ip, r9, ip, r3
90021be8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021bec:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021bf0:	ea47 070c 	orr.w	r7, r7, ip
90021bf4:	ea4f 2317 	mov.w	r3, r7, lsr #8
90021bf8:	d11e      	bne.n	90021c38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
90021bfa:	097a      	lsrs	r2, r7, #5
90021bfc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
90021c00:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90021c04:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021c08:	f023 0307 	bic.w	r3, r3, #7
90021c0c:	4313      	orrs	r3, r2
90021c0e:	431f      	orrs	r7, r3
90021c10:	f8a8 7000 	strh.w	r7, [r8]
90021c14:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90021c16:	f108 0802 	add.w	r8, r8, #2
90021c1a:	f10b 3bff 	add.w	fp, fp, #4294967295
90021c1e:	441c      	add	r4, r3
90021c20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021c22:	441e      	add	r6, r3
90021c24:	e643      	b.n	900218ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90021c26:	2800      	cmp	r0, #0
90021c28:	f43f af0a 	beq.w	90021a40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021c2c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90021c30:	9109      	str	r1, [sp, #36]	; 0x24
90021c32:	0e09      	lsrs	r1, r1, #24
90021c34:	9111      	str	r1, [sp, #68]	; 0x44
90021c36:	e703      	b.n	90021a40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90021c38:	f8b8 1000 	ldrh.w	r1, [r8]
90021c3c:	43d2      	mvns	r2, r2
90021c3e:	ea4f 2c21 	mov.w	ip, r1, asr #8
90021c42:	fa5f fe82 	uxtb.w	lr, r2
90021c46:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90021c4a:	10c8      	asrs	r0, r1, #3
90021c4c:	00ca      	lsls	r2, r1, #3
90021c4e:	fb0c fc0e 	mul.w	ip, ip, lr
90021c52:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021c56:	b2d2      	uxtb	r2, r2
90021c58:	f10c 0101 	add.w	r1, ip, #1
90021c5c:	fb00 f00e 	mul.w	r0, r0, lr
90021c60:	fb02 f20e 	mul.w	r2, r2, lr
90021c64:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90021c68:	0c39      	lsrs	r1, r7, #16
90021c6a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90021c6e:	490f      	ldr	r1, [pc, #60]	; (90021cac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90021c70:	fa5f fc8c 	uxtb.w	ip, ip
90021c74:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
90021c78:	1c41      	adds	r1, r0, #1
90021c7a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90021c7e:	1c51      	adds	r1, r2, #1
90021c80:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90021c84:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021c88:	00c0      	lsls	r0, r0, #3
90021c8a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90021c8e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90021c92:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90021c96:	ea4c 0c00 	orr.w	ip, ip, r0
90021c9a:	ea47 0c0c 	orr.w	ip, r7, ip
90021c9e:	f8a8 c000 	strh.w	ip, [r8]
90021ca2:	e7b7      	b.n	90021c14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90021ca4:	b01b      	add	sp, #108	; 0x6c
90021ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021caa:	bf00      	nop
90021cac:	fffff800 	.word	0xfffff800

90021cb0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
90021cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90021cb4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90021cb8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90021cbc:	2d00      	cmp	r5, #0
90021cbe:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
90021cc2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90021cc6:	fb05 0e03 	mla	lr, r5, r3, r0
90021cca:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90021cce:	f2c0 808c 	blt.w	90021dea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90021cd2:	45a9      	cmp	r9, r5
90021cd4:	f340 8089 	ble.w	90021dea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90021cd8:	2800      	cmp	r0, #0
90021cda:	f2c0 8084 	blt.w	90021de6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90021cde:	4580      	cmp	r8, r0
90021ce0:	f340 8081 	ble.w	90021de6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90021ce4:	ea4f 045e 	mov.w	r4, lr, lsr #1
90021ce8:	f01e 0f01 	tst.w	lr, #1
90021cec:	5d16      	ldrb	r6, [r2, r4]
90021cee:	bf0c      	ite	eq
90021cf0:	f006 060f 	andeq.w	r6, r6, #15
90021cf4:	1136      	asrne	r6, r6, #4
90021cf6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90021cfa:	b2f6      	uxtb	r6, r6
90021cfc:	1c44      	adds	r4, r0, #1
90021cfe:	d477      	bmi.n	90021df0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90021d00:	45a0      	cmp	r8, r4
90021d02:	dd75      	ble.n	90021df0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90021d04:	2f00      	cmp	r7, #0
90021d06:	d075      	beq.n	90021df4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
90021d08:	f10e 0a01 	add.w	sl, lr, #1
90021d0c:	ea4f 045a 	mov.w	r4, sl, lsr #1
90021d10:	f01a 0f01 	tst.w	sl, #1
90021d14:	5d14      	ldrb	r4, [r2, r4]
90021d16:	bf0c      	ite	eq
90021d18:	f004 040f 	andeq.w	r4, r4, #15
90021d1c:	1124      	asrne	r4, r4, #4
90021d1e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90021d22:	b2e4      	uxtb	r4, r4
90021d24:	3501      	adds	r5, #1
90021d26:	d469      	bmi.n	90021dfc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90021d28:	45a9      	cmp	r9, r5
90021d2a:	dd67      	ble.n	90021dfc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90021d2c:	f1bc 0f00 	cmp.w	ip, #0
90021d30:	d067      	beq.n	90021e02 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
90021d32:	2800      	cmp	r0, #0
90021d34:	db60      	blt.n	90021df8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90021d36:	4580      	cmp	r8, r0
90021d38:	dd5e      	ble.n	90021df8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90021d3a:	eb03 090e 	add.w	r9, r3, lr
90021d3e:	ea4f 0559 	mov.w	r5, r9, lsr #1
90021d42:	f019 0f01 	tst.w	r9, #1
90021d46:	5d55      	ldrb	r5, [r2, r5]
90021d48:	bf0c      	ite	eq
90021d4a:	f005 050f 	andeq.w	r5, r5, #15
90021d4e:	112d      	asrne	r5, r5, #4
90021d50:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90021d54:	b2ed      	uxtb	r5, r5
90021d56:	3001      	adds	r0, #1
90021d58:	d456      	bmi.n	90021e08 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90021d5a:	4580      	cmp	r8, r0
90021d5c:	dd54      	ble.n	90021e08 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90021d5e:	2f00      	cmp	r7, #0
90021d60:	d054      	beq.n	90021e0c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
90021d62:	3301      	adds	r3, #1
90021d64:	449e      	add	lr, r3
90021d66:	ea4f 035e 	mov.w	r3, lr, lsr #1
90021d6a:	f01e 0f01 	tst.w	lr, #1
90021d6e:	5cd0      	ldrb	r0, [r2, r3]
90021d70:	bf0c      	ite	eq
90021d72:	f000 000f 	andeq.w	r0, r0, #15
90021d76:	1100      	asrne	r0, r0, #4
90021d78:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90021d7c:	b2c3      	uxtb	r3, r0
90021d7e:	b2ba      	uxth	r2, r7
90021d80:	fa1f fc8c 	uxth.w	ip, ip
90021d84:	fb02 f00c 	mul.w	r0, r2, ip
90021d88:	0112      	lsls	r2, r2, #4
90021d8a:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90021d8e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90021d92:	1a12      	subs	r2, r2, r0
90021d94:	fa1f fc8c 	uxth.w	ip, ip
90021d98:	b292      	uxth	r2, r2
90021d9a:	eba7 070c 	sub.w	r7, r7, ip
90021d9e:	4362      	muls	r2, r4
90021da0:	b2bf      	uxth	r7, r7
90021da2:	fb06 2207 	mla	r2, r6, r7, r2
90021da6:	fb0c 2505 	mla	r5, ip, r5, r2
90021daa:	fb00 5303 	mla	r3, r0, r3, r5
90021dae:	f3c3 2307 	ubfx	r3, r3, #8, #8
90021db2:	b1b3      	cbz	r3, 90021de2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90021db4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
90021db8:	435a      	muls	r2, r3
90021dba:	1c53      	adds	r3, r2, #1
90021dbc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021dc0:	4a2d      	ldr	r2, [pc, #180]	; (90021e78 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
90021dc2:	121b      	asrs	r3, r3, #8
90021dc4:	6812      	ldr	r2, [r2, #0]
90021dc6:	2bff      	cmp	r3, #255	; 0xff
90021dc8:	ea4f 2612 	mov.w	r6, r2, lsr #8
90021dcc:	d120      	bne.n	90021e10 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
90021dce:	0950      	lsrs	r0, r2, #5
90021dd0:	4b2a      	ldr	r3, [pc, #168]	; (90021e7c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
90021dd2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90021dd6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90021dda:	4033      	ands	r3, r6
90021ddc:	4318      	orrs	r0, r3
90021dde:	4302      	orrs	r2, r0
90021de0:	800a      	strh	r2, [r1, #0]
90021de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90021de6:	2600      	movs	r6, #0
90021de8:	e788      	b.n	90021cfc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
90021dea:	2400      	movs	r4, #0
90021dec:	4626      	mov	r6, r4
90021dee:	e799      	b.n	90021d24 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90021df0:	2400      	movs	r4, #0
90021df2:	e797      	b.n	90021d24 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90021df4:	463c      	mov	r4, r7
90021df6:	e795      	b.n	90021d24 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90021df8:	2500      	movs	r5, #0
90021dfa:	e7ac      	b.n	90021d56 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
90021dfc:	2300      	movs	r3, #0
90021dfe:	461d      	mov	r5, r3
90021e00:	e7bd      	b.n	90021d7e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021e02:	4663      	mov	r3, ip
90021e04:	4665      	mov	r5, ip
90021e06:	e7ba      	b.n	90021d7e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021e08:	2300      	movs	r3, #0
90021e0a:	e7b8      	b.n	90021d7e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021e0c:	463b      	mov	r3, r7
90021e0e:	e7b6      	b.n	90021d7e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90021e10:	880d      	ldrh	r5, [r1, #0]
90021e12:	b29f      	uxth	r7, r3
90021e14:	f3c2 4007 	ubfx	r0, r2, #16, #8
90021e18:	43db      	mvns	r3, r3
90021e1a:	122c      	asrs	r4, r5, #8
90021e1c:	fb10 f007 	smulbb	r0, r0, r7
90021e20:	b2db      	uxtb	r3, r3
90021e22:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90021e26:	b2f6      	uxtb	r6, r6
90021e28:	b2d2      	uxtb	r2, r2
90021e2a:	fb04 0403 	mla	r4, r4, r3, r0
90021e2e:	10e8      	asrs	r0, r5, #3
90021e30:	fb12 f207 	smulbb	r2, r2, r7
90021e34:	00ed      	lsls	r5, r5, #3
90021e36:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021e3a:	b2a4      	uxth	r4, r4
90021e3c:	fb16 f607 	smulbb	r6, r6, r7
90021e40:	b2ed      	uxtb	r5, r5
90021e42:	fb00 6603 	mla	r6, r0, r3, r6
90021e46:	fb05 2303 	mla	r3, r5, r3, r2
90021e4a:	b2b0      	uxth	r0, r6
90021e4c:	b29a      	uxth	r2, r3
90021e4e:	1c63      	adds	r3, r4, #1
90021e50:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90021e54:	1c53      	adds	r3, r2, #1
90021e56:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021e5a:	1c42      	adds	r2, r0, #1
90021e5c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90021e60:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90021e64:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021e68:	0940      	lsrs	r0, r0, #5
90021e6a:	4323      	orrs	r3, r4
90021e6c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90021e70:	4303      	orrs	r3, r0
90021e72:	800b      	strh	r3, [r1, #0]
90021e74:	e7b5      	b.n	90021de2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90021e76:	bf00      	nop
90021e78:	24026274 	.word	0x24026274
90021e7c:	00fff800 	.word	0x00fff800

90021e80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021e84:	b097      	sub	sp, #92	; 0x5c
90021e86:	9214      	str	r2, [sp, #80]	; 0x50
90021e88:	9309      	str	r3, [sp, #36]	; 0x24
90021e8a:	9a25      	ldr	r2, [sp, #148]	; 0x94
90021e8c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90021e90:	9015      	str	r0, [sp, #84]	; 0x54
90021e92:	910d      	str	r1, [sp, #52]	; 0x34
90021e94:	6850      	ldr	r0, [r2, #4]
90021e96:	930f      	str	r3, [sp, #60]	; 0x3c
90021e98:	6812      	ldr	r2, [r2, #0]
90021e9a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
90021e9e:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
90021ea2:	fb00 1303 	mla	r3, r0, r3, r1
90021ea6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90021eaa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021eac:	689b      	ldr	r3, [r3, #8]
90021eae:	3301      	adds	r3, #1
90021eb0:	f023 0301 	bic.w	r3, r3, #1
90021eb4:	930a      	str	r3, [sp, #40]	; 0x28
90021eb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021eb8:	681f      	ldr	r7, [r3, #0]
90021eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90021ebc:	2b00      	cmp	r3, #0
90021ebe:	dc03      	bgt.n	90021ec8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90021ec0:	9b14      	ldr	r3, [sp, #80]	; 0x50
90021ec2:	2b00      	cmp	r3, #0
90021ec4:	f340 8289 	ble.w	900223da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90021ec8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021eca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021ece:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021ed2:	1e48      	subs	r0, r1, #1
90021ed4:	f102 3cff 	add.w	ip, r2, #4294967295
90021ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021eda:	2b00      	cmp	r3, #0
90021edc:	f340 80c5 	ble.w	9002206a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
90021ee0:	ea5f 4e24 	movs.w	lr, r4, asr #16
90021ee4:	ea4f 4326 	mov.w	r3, r6, asr #16
90021ee8:	d406      	bmi.n	90021ef8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021eea:	4586      	cmp	lr, r0
90021eec:	da04      	bge.n	90021ef8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021eee:	2b00      	cmp	r3, #0
90021ef0:	db02      	blt.n	90021ef8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021ef2:	4563      	cmp	r3, ip
90021ef4:	f2c0 80ba 	blt.w	9002206c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90021ef8:	f11e 0e01 	adds.w	lr, lr, #1
90021efc:	f100 80ab 	bmi.w	90022056 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90021f00:	4571      	cmp	r1, lr
90021f02:	f2c0 80a8 	blt.w	90022056 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90021f06:	3301      	adds	r3, #1
90021f08:	f100 80a5 	bmi.w	90022056 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90021f0c:	429a      	cmp	r2, r3
90021f0e:	f2c0 80a2 	blt.w	90022056 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90021f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021f14:	46c8      	mov	r8, r9
90021f16:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
90021f1a:	930e      	str	r3, [sp, #56]	; 0x38
90021f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90021f1e:	2b00      	cmp	r3, #0
90021f20:	f340 80c4 	ble.w	900220ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
90021f24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021f26:	1430      	asrs	r0, r6, #16
90021f28:	f3c4 3203 	ubfx	r2, r4, #12, #4
90021f2c:	f3c6 3103 	ubfx	r1, r6, #12, #4
90021f30:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90021f34:	1423      	asrs	r3, r4, #16
90021f36:	f100 814f 	bmi.w	900221d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021f3a:	f10c 3bff 	add.w	fp, ip, #4294967295
90021f3e:	455b      	cmp	r3, fp
90021f40:	f280 814a 	bge.w	900221d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021f44:	2800      	cmp	r0, #0
90021f46:	f2c0 8147 	blt.w	900221d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021f4a:	f10e 3bff 	add.w	fp, lr, #4294967295
90021f4e:	4558      	cmp	r0, fp
90021f50:	f280 8142 	bge.w	900221d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021f54:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90021f56:	fb00 3305 	mla	r3, r0, r5, r3
90021f5a:	0858      	lsrs	r0, r3, #1
90021f5c:	07dd      	lsls	r5, r3, #31
90021f5e:	f817 c000 	ldrb.w	ip, [r7, r0]
90021f62:	bf54      	ite	pl
90021f64:	f00c 0c0f 	andpl.w	ip, ip, #15
90021f68:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90021f6c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90021f70:	fa5f fc8c 	uxtb.w	ip, ip
90021f74:	2a00      	cmp	r2, #0
90021f76:	f000 80dd 	beq.w	90022134 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
90021f7a:	1c58      	adds	r0, r3, #1
90021f7c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90021f80:	07c0      	lsls	r0, r0, #31
90021f82:	f817 e00e 	ldrb.w	lr, [r7, lr]
90021f86:	bf54      	ite	pl
90021f88:	f00e 0e0f 	andpl.w	lr, lr, #15
90021f8c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90021f90:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90021f94:	fa5f f08e 	uxtb.w	r0, lr
90021f98:	9010      	str	r0, [sp, #64]	; 0x40
90021f9a:	b1d9      	cbz	r1, 90021fd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90021f9c:	4453      	add	r3, sl
90021f9e:	0858      	lsrs	r0, r3, #1
90021fa0:	07dd      	lsls	r5, r3, #31
90021fa2:	f103 0301 	add.w	r3, r3, #1
90021fa6:	5c38      	ldrb	r0, [r7, r0]
90021fa8:	bf54      	ite	pl
90021faa:	f000 000f 	andpl.w	r0, r0, #15
90021fae:	1100      	asrmi	r0, r0, #4
90021fb0:	07dd      	lsls	r5, r3, #31
90021fb2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90021fb6:	b2c0      	uxtb	r0, r0
90021fb8:	900b      	str	r0, [sp, #44]	; 0x2c
90021fba:	ea4f 0053 	mov.w	r0, r3, lsr #1
90021fbe:	f817 e000 	ldrb.w	lr, [r7, r0]
90021fc2:	bf54      	ite	pl
90021fc4:	f00e 030f 	andpl.w	r3, lr, #15
90021fc8:	ea4f 132e 	movmi.w	r3, lr, asr #4
90021fcc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90021fd0:	b2db      	uxtb	r3, r3
90021fd2:	9311      	str	r3, [sp, #68]	; 0x44
90021fd4:	b292      	uxth	r2, r2
90021fd6:	9d10      	ldr	r5, [sp, #64]	; 0x40
90021fd8:	b289      	uxth	r1, r1
90021fda:	fb02 f301 	mul.w	r3, r2, r1
90021fde:	0112      	lsls	r2, r2, #4
90021fe0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
90021fe4:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90021fe8:	1ad2      	subs	r2, r2, r3
90021fea:	b289      	uxth	r1, r1
90021fec:	b292      	uxth	r2, r2
90021fee:	1a40      	subs	r0, r0, r1
90021ff0:	436a      	muls	r2, r5
90021ff2:	b280      	uxth	r0, r0
90021ff4:	fb0c 2c00 	mla	ip, ip, r0, r2
90021ff8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90021ffa:	fb01 c102 	mla	r1, r1, r2, ip
90021ffe:	9a11      	ldr	r2, [sp, #68]	; 0x44
90022000:	fb03 1302 	mla	r3, r3, r2, r1
90022004:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022008:	b1db      	cbz	r3, 90022042 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002200a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9002200c:	4353      	muls	r3, r2
9002200e:	1c5a      	adds	r2, r3, #1
90022010:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90022014:	4ac6      	ldr	r2, [pc, #792]	; (90022330 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
90022016:	121b      	asrs	r3, r3, #8
90022018:	6812      	ldr	r2, [r2, #0]
9002201a:	2bff      	cmp	r3, #255	; 0xff
9002201c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90022020:	f040 8099 	bne.w	90022156 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90022024:	0953      	lsrs	r3, r2, #5
90022026:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9002202a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002202e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022032:	f02c 0c07 	bic.w	ip, ip, #7
90022036:	ea43 0c0c 	orr.w	ip, r3, ip
9002203a:	ea4c 0202 	orr.w	r2, ip, r2
9002203e:	f8a8 2000 	strh.w	r2, [r8]
90022042:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90022044:	f108 0802 	add.w	r8, r8, #2
90022048:	441c      	add	r4, r3
9002204a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002204c:	441e      	add	r6, r3
9002204e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90022050:	3b01      	subs	r3, #1
90022052:	930e      	str	r3, [sp, #56]	; 0x38
90022054:	e762      	b.n	90021f1c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90022056:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90022058:	f109 0902 	add.w	r9, r9, #2
9002205c:	441c      	add	r4, r3
9002205e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022060:	441e      	add	r6, r3
90022062:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022064:	3b01      	subs	r3, #1
90022066:	9309      	str	r3, [sp, #36]	; 0x24
90022068:	e736      	b.n	90021ed8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9002206a:	d024      	beq.n	900220b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9002206c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002206e:	9823      	ldr	r0, [sp, #140]	; 0x8c
90022070:	3b01      	subs	r3, #1
90022072:	fb00 4003 	mla	r0, r0, r3, r4
90022076:	1400      	asrs	r0, r0, #16
90022078:	f53f af4b 	bmi.w	90021f12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9002207c:	3901      	subs	r1, #1
9002207e:	4288      	cmp	r0, r1
90022080:	f6bf af47 	bge.w	90021f12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90022084:	9924      	ldr	r1, [sp, #144]	; 0x90
90022086:	fb01 6303 	mla	r3, r1, r3, r6
9002208a:	141b      	asrs	r3, r3, #16
9002208c:	f53f af41 	bmi.w	90021f12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90022090:	3a01      	subs	r2, #1
90022092:	4293      	cmp	r3, r2
90022094:	f6bf af3d 	bge.w	90021f12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90022098:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9002209c:	46c8      	mov	r8, r9
9002209e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
900220a2:	930e      	str	r3, [sp, #56]	; 0x38
900220a4:	f1bb 0f00 	cmp.w	fp, #0
900220a8:	f300 80b7 	bgt.w	9002221a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
900220ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
900220ae:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900220b2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
900220b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900220b8:	2b00      	cmp	r3, #0
900220ba:	f340 818e 	ble.w	900223da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
900220be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900220c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
900220c4:	ee30 0a04 	vadd.f32	s0, s0, s8
900220c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
900220cc:	eef0 6a62 	vmov.f32	s13, s5
900220d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
900220d4:	ee31 1a05 	vadd.f32	s2, s2, s10
900220d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900220dc:	ee16 4a90 	vmov	r4, s13
900220e0:	eef0 6a43 	vmov.f32	s13, s6
900220e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900220e8:	ee16 6a90 	vmov	r6, s13
900220ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
900220f0:	ee61 7a27 	vmul.f32	s15, s2, s15
900220f4:	ee77 2a62 	vsub.f32	s5, s14, s5
900220f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
900220fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90022100:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90022104:	ee12 2a90 	vmov	r2, s5
90022108:	eef0 2a47 	vmov.f32	s5, s14
9002210c:	fb92 f3f3 	sdiv	r3, r2, r3
90022110:	ee13 2a10 	vmov	r2, s6
90022114:	9323      	str	r3, [sp, #140]	; 0x8c
90022116:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022118:	eeb0 3a67 	vmov.f32	s6, s15
9002211c:	fb92 f3f3 	sdiv	r3, r2, r3
90022120:	9324      	str	r3, [sp, #144]	; 0x90
90022122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90022124:	9a14      	ldr	r2, [sp, #80]	; 0x50
90022126:	3b01      	subs	r3, #1
90022128:	930d      	str	r3, [sp, #52]	; 0x34
9002212a:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002212c:	bf08      	it	eq
9002212e:	4613      	moveq	r3, r2
90022130:	9309      	str	r3, [sp, #36]	; 0x24
90022132:	e6c2      	b.n	90021eba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90022134:	2900      	cmp	r1, #0
90022136:	f43f af4d 	beq.w	90021fd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9002213a:	eb0a 0003 	add.w	r0, sl, r3
9002213e:	0843      	lsrs	r3, r0, #1
90022140:	07c0      	lsls	r0, r0, #31
90022142:	5cfb      	ldrb	r3, [r7, r3]
90022144:	bf54      	ite	pl
90022146:	f003 030f 	andpl.w	r3, r3, #15
9002214a:	111b      	asrmi	r3, r3, #4
9002214c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90022150:	b2db      	uxtb	r3, r3
90022152:	930b      	str	r3, [sp, #44]	; 0x2c
90022154:	e73e      	b.n	90021fd4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90022156:	f8b8 e000 	ldrh.w	lr, [r8]
9002215a:	fa1f fb83 	uxth.w	fp, r3
9002215e:	f3c2 4107 	ubfx	r1, r2, #16, #8
90022162:	43db      	mvns	r3, r3
90022164:	ea4f 202e 	mov.w	r0, lr, asr #8
90022168:	fb11 f10b 	smulbb	r1, r1, fp
9002216c:	b2db      	uxtb	r3, r3
9002216e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90022172:	fa5f fc8c 	uxtb.w	ip, ip
90022176:	b2d2      	uxtb	r2, r2
90022178:	fb00 1003 	mla	r0, r0, r3, r1
9002217c:	ea4f 01ee 	mov.w	r1, lr, asr #3
90022180:	fb1c fc0b 	smulbb	ip, ip, fp
90022184:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90022188:	b280      	uxth	r0, r0
9002218a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002218e:	fb12 fb0b 	smulbb	fp, r2, fp
90022192:	fa5f fe8e 	uxtb.w	lr, lr
90022196:	fb01 cc03 	mla	ip, r1, r3, ip
9002219a:	fb0e bb03 	mla	fp, lr, r3, fp
9002219e:	1c43      	adds	r3, r0, #1
900221a0:	fa1f fc8c 	uxth.w	ip, ip
900221a4:	fa1f fb8b 	uxth.w	fp, fp
900221a8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900221ac:	f10c 0101 	add.w	r1, ip, #1
900221b0:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
900221b4:	f10b 0001 	add.w	r0, fp, #1
900221b8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900221bc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
900221c0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900221c4:	f3c0 20c4 	ubfx	r0, r0, #11, #5
900221c8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900221cc:	4318      	orrs	r0, r3
900221ce:	ea40 000c 	orr.w	r0, r0, ip
900221d2:	f8a8 0000 	strh.w	r0, [r8]
900221d6:	e734      	b.n	90022042 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900221d8:	f113 0b01 	adds.w	fp, r3, #1
900221dc:	f53f af31 	bmi.w	90022042 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900221e0:	45dc      	cmp	ip, fp
900221e2:	f6ff af2e 	blt.w	90022042 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900221e6:	f110 0b01 	adds.w	fp, r0, #1
900221ea:	f53f af2a 	bmi.w	90022042 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900221ee:	45de      	cmp	lr, fp
900221f0:	f6ff af27 	blt.w	90022042 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900221f4:	9302      	str	r3, [sp, #8]
900221f6:	fa0f f38e 	sxth.w	r3, lr
900221fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900221fc:	9301      	str	r3, [sp, #4]
900221fe:	fa0f f38c 	sxth.w	r3, ip
90022202:	e9cd 0203 	strd	r0, r2, [sp, #12]
90022206:	e9cd 1505 	strd	r1, r5, [sp, #20]
9002220a:	9300      	str	r3, [sp, #0]
9002220c:	463a      	mov	r2, r7
9002220e:	4653      	mov	r3, sl
90022210:	4641      	mov	r1, r8
90022212:	9815      	ldr	r0, [sp, #84]	; 0x54
90022214:	f7ff fd4c 	bl	90021cb0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90022218:	e713      	b.n	90022042 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002221a:	1422      	asrs	r2, r4, #16
9002221c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
9002221e:	1433      	asrs	r3, r6, #16
90022220:	f3c4 3103 	ubfx	r1, r4, #12, #4
90022224:	f3c6 3003 	ubfx	r0, r6, #12, #4
90022228:	fb05 2303 	mla	r3, r5, r3, r2
9002222c:	085a      	lsrs	r2, r3, #1
9002222e:	07dd      	lsls	r5, r3, #31
90022230:	5cba      	ldrb	r2, [r7, r2]
90022232:	bf54      	ite	pl
90022234:	f002 020f 	andpl.w	r2, r2, #15
90022238:	1112      	asrmi	r2, r2, #4
9002223a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9002223e:	b2d2      	uxtb	r2, r2
90022240:	2900      	cmp	r1, #0
90022242:	d077      	beq.n	90022334 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022244:	f103 0e01 	add.w	lr, r3, #1
90022248:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
9002224c:	f01e 0f01 	tst.w	lr, #1
90022250:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022254:	bf0c      	ite	eq
90022256:	f00c 0c0f 	andeq.w	ip, ip, #15
9002225a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
9002225e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022262:	fa5f f58c 	uxtb.w	r5, ip
90022266:	9512      	str	r5, [sp, #72]	; 0x48
90022268:	b308      	cbz	r0, 900222ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
9002226a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002226c:	442b      	add	r3, r5
9002226e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90022272:	07dd      	lsls	r5, r3, #31
90022274:	f103 0301 	add.w	r3, r3, #1
90022278:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002227c:	bf54      	ite	pl
9002227e:	f00c 0c0f 	andpl.w	ip, ip, #15
90022282:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90022286:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002228a:	fa5f f58c 	uxtb.w	r5, ip
9002228e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90022292:	950c      	str	r5, [sp, #48]	; 0x30
90022294:	07dd      	lsls	r5, r3, #31
90022296:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002229a:	bf54      	ite	pl
9002229c:	f00c 0c0f 	andpl.w	ip, ip, #15
900222a0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900222a4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900222a8:	fa5f f38c 	uxtb.w	r3, ip
900222ac:	9313      	str	r3, [sp, #76]	; 0x4c
900222ae:	b289      	uxth	r1, r1
900222b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
900222b2:	b280      	uxth	r0, r0
900222b4:	fb01 f300 	mul.w	r3, r1, r0
900222b8:	0109      	lsls	r1, r1, #4
900222ba:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
900222be:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
900222c2:	1ac9      	subs	r1, r1, r3
900222c4:	b280      	uxth	r0, r0
900222c6:	b289      	uxth	r1, r1
900222c8:	ebac 0c00 	sub.w	ip, ip, r0
900222cc:	4369      	muls	r1, r5
900222ce:	fa1f fc8c 	uxth.w	ip, ip
900222d2:	fb02 120c 	mla	r2, r2, ip, r1
900222d6:	990c      	ldr	r1, [sp, #48]	; 0x30
900222d8:	fb00 2001 	mla	r0, r0, r1, r2
900222dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
900222de:	fb03 0302 	mla	r3, r3, r2, r0
900222e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
900222e6:	b1d3      	cbz	r3, 9002231e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
900222e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900222ea:	4353      	muls	r3, r2
900222ec:	1c5a      	adds	r2, r3, #1
900222ee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
900222f2:	4a0f      	ldr	r2, [pc, #60]	; (90022330 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
900222f4:	121b      	asrs	r3, r3, #8
900222f6:	6812      	ldr	r2, [r2, #0]
900222f8:	2bff      	cmp	r3, #255	; 0xff
900222fa:	ea4f 2c12 	mov.w	ip, r2, lsr #8
900222fe:	d12d      	bne.n	9002235c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
90022300:	0953      	lsrs	r3, r2, #5
90022302:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90022306:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002230a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002230e:	f02c 0c07 	bic.w	ip, ip, #7
90022312:	ea43 0c0c 	orr.w	ip, r3, ip
90022316:	ea4c 0202 	orr.w	r2, ip, r2
9002231a:	f8a8 2000 	strh.w	r2, [r8]
9002231e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90022320:	f108 0802 	add.w	r8, r8, #2
90022324:	f10b 3bff 	add.w	fp, fp, #4294967295
90022328:	441c      	add	r4, r3
9002232a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002232c:	441e      	add	r6, r3
9002232e:	e6b9      	b.n	900220a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
90022330:	24026274 	.word	0x24026274
90022334:	2800      	cmp	r0, #0
90022336:	d0ba      	beq.n	900222ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90022338:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002233a:	442b      	add	r3, r5
9002233c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90022340:	07db      	lsls	r3, r3, #31
90022342:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022346:	bf54      	ite	pl
90022348:	f00c 0c0f 	andpl.w	ip, ip, #15
9002234c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90022350:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022354:	fa5f f38c 	uxtb.w	r3, ip
90022358:	930c      	str	r3, [sp, #48]	; 0x30
9002235a:	e7a8      	b.n	900222ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
9002235c:	f8b8 e000 	ldrh.w	lr, [r8]
90022360:	fa1f fa83 	uxth.w	sl, r3
90022364:	f3c2 4107 	ubfx	r1, r2, #16, #8
90022368:	43db      	mvns	r3, r3
9002236a:	ea4f 202e 	mov.w	r0, lr, asr #8
9002236e:	fb11 f10a 	smulbb	r1, r1, sl
90022372:	b2db      	uxtb	r3, r3
90022374:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90022378:	b2d2      	uxtb	r2, r2
9002237a:	fa5f fc8c 	uxtb.w	ip, ip
9002237e:	fb00 1003 	mla	r0, r0, r3, r1
90022382:	ea4f 01ee 	mov.w	r1, lr, asr #3
90022386:	fb12 f20a 	smulbb	r2, r2, sl
9002238a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9002238e:	b280      	uxth	r0, r0
90022390:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90022394:	fb1c fc0a 	smulbb	ip, ip, sl
90022398:	fa5f fe8e 	uxtb.w	lr, lr
9002239c:	fb0e 2203 	mla	r2, lr, r3, r2
900223a0:	fb01 cc03 	mla	ip, r1, r3, ip
900223a4:	1c43      	adds	r3, r0, #1
900223a6:	b292      	uxth	r2, r2
900223a8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900223ac:	1c51      	adds	r1, r2, #1
900223ae:	fa1f fc8c 	uxth.w	ip, ip
900223b2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900223b6:	eb01 2112 	add.w	r1, r1, r2, lsr #8
900223ba:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900223be:	4308      	orrs	r0, r1
900223c0:	f10c 0101 	add.w	r1, ip, #1
900223c4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900223c8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900223cc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
900223d0:	ea40 000c 	orr.w	r0, r0, ip
900223d4:	f8a8 0000 	strh.w	r0, [r8]
900223d8:	e7a1      	b.n	9002231e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
900223da:	b017      	add	sp, #92	; 0x5c
900223dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900223e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
900223e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900223e4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
900223e8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
900223ec:	2d00      	cmp	r5, #0
900223ee:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
900223f2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
900223f6:	fb05 0e03 	mla	lr, r5, r3, r0
900223fa:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
900223fe:	f2c0 80b0 	blt.w	90022562 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90022402:	45a9      	cmp	r9, r5
90022404:	f340 80ad 	ble.w	90022562 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90022408:	2800      	cmp	r0, #0
9002240a:	f2c0 80a8 	blt.w	9002255e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
9002240e:	4580      	cmp	r8, r0
90022410:	f340 80a5 	ble.w	9002255e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90022414:	ea4f 045e 	mov.w	r4, lr, lsr #1
90022418:	f01e 0f01 	tst.w	lr, #1
9002241c:	5d16      	ldrb	r6, [r2, r4]
9002241e:	bf0c      	ite	eq
90022420:	f006 060f 	andeq.w	r6, r6, #15
90022424:	1136      	asrne	r6, r6, #4
90022426:	eb06 1606 	add.w	r6, r6, r6, lsl #4
9002242a:	b2f6      	uxtb	r6, r6
9002242c:	1c44      	adds	r4, r0, #1
9002242e:	f100 809b 	bmi.w	90022568 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90022432:	45a0      	cmp	r8, r4
90022434:	f340 8098 	ble.w	90022568 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90022438:	2f00      	cmp	r7, #0
9002243a:	f000 8097 	beq.w	9002256c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
9002243e:	f10e 0a01 	add.w	sl, lr, #1
90022442:	ea4f 045a 	mov.w	r4, sl, lsr #1
90022446:	f01a 0f01 	tst.w	sl, #1
9002244a:	5d14      	ldrb	r4, [r2, r4]
9002244c:	bf0c      	ite	eq
9002244e:	f004 040f 	andeq.w	r4, r4, #15
90022452:	1124      	asrne	r4, r4, #4
90022454:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90022458:	b2e4      	uxtb	r4, r4
9002245a:	3501      	adds	r5, #1
9002245c:	f100 808a 	bmi.w	90022574 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
90022460:	45a9      	cmp	r9, r5
90022462:	f340 8087 	ble.w	90022574 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
90022466:	f1bc 0f00 	cmp.w	ip, #0
9002246a:	f000 8086 	beq.w	9002257a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
9002246e:	2800      	cmp	r0, #0
90022470:	db7e      	blt.n	90022570 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
90022472:	4580      	cmp	r8, r0
90022474:	dd7c      	ble.n	90022570 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
90022476:	eb03 090e 	add.w	r9, r3, lr
9002247a:	ea4f 0559 	mov.w	r5, r9, lsr #1
9002247e:	f019 0f01 	tst.w	r9, #1
90022482:	5d55      	ldrb	r5, [r2, r5]
90022484:	bf0c      	ite	eq
90022486:	f005 050f 	andeq.w	r5, r5, #15
9002248a:	112d      	asrne	r5, r5, #4
9002248c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90022490:	b2ed      	uxtb	r5, r5
90022492:	3001      	adds	r0, #1
90022494:	d474      	bmi.n	90022580 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
90022496:	4580      	cmp	r8, r0
90022498:	dd72      	ble.n	90022580 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
9002249a:	2f00      	cmp	r7, #0
9002249c:	d072      	beq.n	90022584 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
9002249e:	3301      	adds	r3, #1
900224a0:	449e      	add	lr, r3
900224a2:	ea4f 035e 	mov.w	r3, lr, lsr #1
900224a6:	f01e 0f01 	tst.w	lr, #1
900224aa:	5cd0      	ldrb	r0, [r2, r3]
900224ac:	bf0c      	ite	eq
900224ae:	f000 000f 	andeq.w	r0, r0, #15
900224b2:	1100      	asrne	r0, r0, #4
900224b4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900224b8:	b2c3      	uxtb	r3, r0
900224ba:	b2ba      	uxth	r2, r7
900224bc:	fa1f fc8c 	uxth.w	ip, ip
900224c0:	fb02 f00c 	mul.w	r0, r2, ip
900224c4:	0112      	lsls	r2, r2, #4
900224c6:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
900224ca:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
900224ce:	1a12      	subs	r2, r2, r0
900224d0:	fa1f fc8c 	uxth.w	ip, ip
900224d4:	b292      	uxth	r2, r2
900224d6:	eba7 070c 	sub.w	r7, r7, ip
900224da:	4362      	muls	r2, r4
900224dc:	b2bf      	uxth	r7, r7
900224de:	fb06 2207 	mla	r2, r6, r7, r2
900224e2:	fb0c 2505 	mla	r5, ip, r5, r2
900224e6:	fb00 5303 	mla	r3, r0, r3, r5
900224ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
900224ee:	b3a3      	cbz	r3, 9002255a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
900224f0:	4a25      	ldr	r2, [pc, #148]	; (90022588 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
900224f2:	880e      	ldrh	r6, [r1, #0]
900224f4:	6815      	ldr	r5, [r2, #0]
900224f6:	b29a      	uxth	r2, r3
900224f8:	1234      	asrs	r4, r6, #8
900224fa:	43db      	mvns	r3, r3
900224fc:	f3c5 4007 	ubfx	r0, r5, #16, #8
90022500:	f3c5 2707 	ubfx	r7, r5, #8, #8
90022504:	b2db      	uxtb	r3, r3
90022506:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9002250a:	fb10 f002 	smulbb	r0, r0, r2
9002250e:	b2ed      	uxtb	r5, r5
90022510:	fb17 f702 	smulbb	r7, r7, r2
90022514:	fb04 0403 	mla	r4, r4, r3, r0
90022518:	10f0      	asrs	r0, r6, #3
9002251a:	fb15 f202 	smulbb	r2, r5, r2
9002251e:	00f6      	lsls	r6, r6, #3
90022520:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90022524:	b2a4      	uxth	r4, r4
90022526:	b2f6      	uxtb	r6, r6
90022528:	fb00 7003 	mla	r0, r0, r3, r7
9002252c:	fb06 2303 	mla	r3, r6, r3, r2
90022530:	b280      	uxth	r0, r0
90022532:	b29a      	uxth	r2, r3
90022534:	1c63      	adds	r3, r4, #1
90022536:	eb03 2414 	add.w	r4, r3, r4, lsr #8
9002253a:	1c53      	adds	r3, r2, #1
9002253c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90022540:	1c42      	adds	r2, r0, #1
90022542:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90022546:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002254a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002254e:	0940      	lsrs	r0, r0, #5
90022550:	4323      	orrs	r3, r4
90022552:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022556:	4303      	orrs	r3, r0
90022558:	800b      	strh	r3, [r1, #0]
9002255a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002255e:	2600      	movs	r6, #0
90022560:	e764      	b.n	9002242c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
90022562:	2400      	movs	r4, #0
90022564:	4626      	mov	r6, r4
90022566:	e778      	b.n	9002245a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90022568:	2400      	movs	r4, #0
9002256a:	e776      	b.n	9002245a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
9002256c:	463c      	mov	r4, r7
9002256e:	e774      	b.n	9002245a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90022570:	2500      	movs	r5, #0
90022572:	e78e      	b.n	90022492 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
90022574:	2300      	movs	r3, #0
90022576:	461d      	mov	r5, r3
90022578:	e79f      	b.n	900224ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
9002257a:	4663      	mov	r3, ip
9002257c:	4665      	mov	r5, ip
9002257e:	e79c      	b.n	900224ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90022580:	2300      	movs	r3, #0
90022582:	e79a      	b.n	900224ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90022584:	463b      	mov	r3, r7
90022586:	e798      	b.n	900224ba <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90022588:	24026274 	.word	0x24026274

9002258c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9002258c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022590:	b093      	sub	sp, #76	; 0x4c
90022592:	461d      	mov	r5, r3
90022594:	920c      	str	r2, [sp, #48]	; 0x30
90022596:	9a21      	ldr	r2, [sp, #132]	; 0x84
90022598:	9011      	str	r0, [sp, #68]	; 0x44
9002259a:	9107      	str	r1, [sp, #28]
9002259c:	6850      	ldr	r0, [r2, #4]
9002259e:	6812      	ldr	r2, [r2, #0]
900225a0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
900225a4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
900225a8:	fb00 1303 	mla	r3, r0, r3, r1
900225ac:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900225b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
900225b2:	689b      	ldr	r3, [r3, #8]
900225b4:	3301      	adds	r3, #1
900225b6:	f023 0301 	bic.w	r3, r3, #1
900225ba:	9306      	str	r3, [sp, #24]
900225bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
900225be:	681f      	ldr	r7, [r3, #0]
900225c0:	9b07      	ldr	r3, [sp, #28]
900225c2:	2b00      	cmp	r3, #0
900225c4:	dc03      	bgt.n	900225ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
900225c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900225c8:	2b00      	cmp	r3, #0
900225ca:	f340 8267 	ble.w	90022a9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
900225ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
900225d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900225d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900225d8:	1e48      	subs	r0, r1, #1
900225da:	f102 3cff 	add.w	ip, r2, #4294967295
900225de:	2d00      	cmp	r5, #0
900225e0:	f340 80b7 	ble.w	90022752 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
900225e4:	ea5f 4e24 	movs.w	lr, r4, asr #16
900225e8:	ea4f 4326 	mov.w	r3, r6, asr #16
900225ec:	d406      	bmi.n	900225fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900225ee:	4586      	cmp	lr, r0
900225f0:	da04      	bge.n	900225fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900225f2:	2b00      	cmp	r3, #0
900225f4:	db02      	blt.n	900225fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900225f6:	4563      	cmp	r3, ip
900225f8:	f2c0 80ac 	blt.w	90022754 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
900225fc:	f11e 0e01 	adds.w	lr, lr, #1
90022600:	f100 809f 	bmi.w	90022742 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022604:	4571      	cmp	r1, lr
90022606:	f2c0 809c 	blt.w	90022742 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002260a:	3301      	adds	r3, #1
9002260c:	f100 8099 	bmi.w	90022742 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022610:	429a      	cmp	r2, r3
90022612:	f2c0 8096 	blt.w	90022742 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022616:	46c8      	mov	r8, r9
90022618:	f9bd a018 	ldrsh.w	sl, [sp, #24]
9002261c:	9509      	str	r5, [sp, #36]	; 0x24
9002261e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022620:	2b00      	cmp	r3, #0
90022622:	f340 80b5 	ble.w	90022790 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90022626:	f3c4 3303 	ubfx	r3, r4, #12, #4
9002262a:	1430      	asrs	r0, r6, #16
9002262c:	f3c6 3103 	ubfx	r1, r6, #12, #4
90022630:	9308      	str	r3, [sp, #32]
90022632:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022634:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90022638:	1423      	asrs	r3, r4, #16
9002263a:	f100 813f 	bmi.w	900228bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
9002263e:	f10c 3bff 	add.w	fp, ip, #4294967295
90022642:	455b      	cmp	r3, fp
90022644:	f280 813a 	bge.w	900228bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022648:	2800      	cmp	r0, #0
9002264a:	f2c0 8137 	blt.w	900228bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
9002264e:	f10e 3bff 	add.w	fp, lr, #4294967295
90022652:	4558      	cmp	r0, fp
90022654:	f280 8132 	bge.w	900228bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022658:	9a06      	ldr	r2, [sp, #24]
9002265a:	fb00 3302 	mla	r3, r0, r2, r3
9002265e:	0858      	lsrs	r0, r3, #1
90022660:	07da      	lsls	r2, r3, #31
90022662:	9a08      	ldr	r2, [sp, #32]
90022664:	f817 c000 	ldrb.w	ip, [r7, r0]
90022668:	bf54      	ite	pl
9002266a:	f00c 0c0f 	andpl.w	ip, ip, #15
9002266e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90022672:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022676:	fa5f fc8c 	uxtb.w	ip, ip
9002267a:	2a00      	cmp	r2, #0
9002267c:	f000 80cc 	beq.w	90022818 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90022680:	1c58      	adds	r0, r3, #1
90022682:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90022686:	07c0      	lsls	r0, r0, #31
90022688:	f817 e00e 	ldrb.w	lr, [r7, lr]
9002268c:	bf54      	ite	pl
9002268e:	f00e 0e0f 	andpl.w	lr, lr, #15
90022692:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90022696:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
9002269a:	fa5f fe8e 	uxtb.w	lr, lr
9002269e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
900226a2:	b1b9      	cbz	r1, 900226d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
900226a4:	4453      	add	r3, sl
900226a6:	0858      	lsrs	r0, r3, #1
900226a8:	07da      	lsls	r2, r3, #31
900226aa:	5c38      	ldrb	r0, [r7, r0]
900226ac:	bf54      	ite	pl
900226ae:	f000 000f 	andpl.w	r0, r0, #15
900226b2:	1100      	asrmi	r0, r0, #4
900226b4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900226b8:	b2c0      	uxtb	r0, r0
900226ba:	900a      	str	r0, [sp, #40]	; 0x28
900226bc:	1c58      	adds	r0, r3, #1
900226be:	0843      	lsrs	r3, r0, #1
900226c0:	07c2      	lsls	r2, r0, #31
900226c2:	5cfb      	ldrb	r3, [r7, r3]
900226c4:	bf54      	ite	pl
900226c6:	f003 030f 	andpl.w	r3, r3, #15
900226ca:	111b      	asrmi	r3, r3, #4
900226cc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
900226d0:	b2db      	uxtb	r3, r3
900226d2:	930e      	str	r3, [sp, #56]	; 0x38
900226d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
900226d8:	b289      	uxth	r1, r1
900226da:	fb02 f301 	mul.w	r3, r2, r1
900226de:	0112      	lsls	r2, r2, #4
900226e0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
900226e4:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
900226e8:	1ad2      	subs	r2, r2, r3
900226ea:	b289      	uxth	r1, r1
900226ec:	b292      	uxth	r2, r2
900226ee:	1a40      	subs	r0, r0, r1
900226f0:	fa1f fe80 	uxth.w	lr, r0
900226f4:	980d      	ldr	r0, [sp, #52]	; 0x34
900226f6:	4342      	muls	r2, r0
900226f8:	fb0c 2c0e 	mla	ip, ip, lr, r2
900226fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900226fe:	fb01 c102 	mla	r1, r1, r2, ip
90022702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90022704:	fb03 1302 	mla	r3, r3, r2, r1
90022708:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002270c:	2bff      	cmp	r3, #255	; 0xff
9002270e:	f040 8094 	bne.w	9002283a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
90022712:	4bbf      	ldr	r3, [pc, #764]	; (90022a10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90022714:	681a      	ldr	r2, [r3, #0]
90022716:	4bbf      	ldr	r3, [pc, #764]	; (90022a14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90022718:	0951      	lsrs	r1, r2, #5
9002271a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
9002271e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90022722:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90022726:	430b      	orrs	r3, r1
90022728:	4313      	orrs	r3, r2
9002272a:	f8a8 3000 	strh.w	r3, [r8]
9002272e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90022730:	f108 0802 	add.w	r8, r8, #2
90022734:	441c      	add	r4, r3
90022736:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022738:	441e      	add	r6, r3
9002273a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002273c:	3b01      	subs	r3, #1
9002273e:	9309      	str	r3, [sp, #36]	; 0x24
90022740:	e76d      	b.n	9002261e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90022742:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90022744:	3d01      	subs	r5, #1
90022746:	f109 0902 	add.w	r9, r9, #2
9002274a:	441c      	add	r4, r3
9002274c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002274e:	441e      	add	r6, r3
90022750:	e745      	b.n	900225de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90022752:	d021      	beq.n	90022798 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
90022754:	1e6b      	subs	r3, r5, #1
90022756:	981f      	ldr	r0, [sp, #124]	; 0x7c
90022758:	fb00 4003 	mla	r0, r0, r3, r4
9002275c:	1400      	asrs	r0, r0, #16
9002275e:	f53f af5a 	bmi.w	90022616 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90022762:	3901      	subs	r1, #1
90022764:	4288      	cmp	r0, r1
90022766:	f6bf af56 	bge.w	90022616 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9002276a:	9920      	ldr	r1, [sp, #128]	; 0x80
9002276c:	fb01 6303 	mla	r3, r1, r3, r6
90022770:	141b      	asrs	r3, r3, #16
90022772:	f53f af50 	bmi.w	90022616 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
90022776:	3a01      	subs	r2, #1
90022778:	4293      	cmp	r3, r2
9002277a:	f6bf af4c 	bge.w	90022616 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9002277e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90022782:	46a8      	mov	r8, r5
90022784:	46ce      	mov	lr, r9
90022786:	9308      	str	r3, [sp, #32]
90022788:	f1b8 0f00 	cmp.w	r8, #0
9002278c:	f300 80b6 	bgt.w	900228fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90022790:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90022794:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90022798:	9b07      	ldr	r3, [sp, #28]
9002279a:	2b00      	cmp	r3, #0
9002279c:	f340 817e 	ble.w	90022a9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
900227a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900227a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900227a6:	ee30 0a04 	vadd.f32	s0, s0, s8
900227aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
900227ae:	eef0 6a62 	vmov.f32	s13, s5
900227b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
900227b6:	ee31 1a05 	vadd.f32	s2, s2, s10
900227ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900227be:	ee16 4a90 	vmov	r4, s13
900227c2:	eef0 6a43 	vmov.f32	s13, s6
900227c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900227ca:	ee16 6a90 	vmov	r6, s13
900227ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
900227d2:	ee61 7a27 	vmul.f32	s15, s2, s15
900227d6:	ee77 2a62 	vsub.f32	s5, s14, s5
900227da:	ee37 3ac3 	vsub.f32	s6, s15, s6
900227de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900227e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900227e6:	ee12 2a90 	vmov	r2, s5
900227ea:	eef0 2a47 	vmov.f32	s5, s14
900227ee:	fb92 f3f3 	sdiv	r3, r2, r3
900227f2:	ee13 2a10 	vmov	r2, s6
900227f6:	931f      	str	r3, [sp, #124]	; 0x7c
900227f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900227fa:	eeb0 3a67 	vmov.f32	s6, s15
900227fe:	fb92 f3f3 	sdiv	r3, r2, r3
90022802:	9320      	str	r3, [sp, #128]	; 0x80
90022804:	9b07      	ldr	r3, [sp, #28]
90022806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90022808:	3b01      	subs	r3, #1
9002280a:	9307      	str	r3, [sp, #28]
9002280c:	bf08      	it	eq
9002280e:	4615      	moveq	r5, r2
90022810:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90022812:	bf18      	it	ne
90022814:	461d      	movne	r5, r3
90022816:	e6d3      	b.n	900225c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90022818:	2900      	cmp	r1, #0
9002281a:	f43f af5b 	beq.w	900226d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
9002281e:	eb0a 0003 	add.w	r0, sl, r3
90022822:	0843      	lsrs	r3, r0, #1
90022824:	07c0      	lsls	r0, r0, #31
90022826:	5cfb      	ldrb	r3, [r7, r3]
90022828:	bf54      	ite	pl
9002282a:	f003 030f 	andpl.w	r3, r3, #15
9002282e:	111b      	asrmi	r3, r3, #4
90022830:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90022834:	b2db      	uxtb	r3, r3
90022836:	930a      	str	r3, [sp, #40]	; 0x28
90022838:	e74c      	b.n	900226d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
9002283a:	2b00      	cmp	r3, #0
9002283c:	f43f af77 	beq.w	9002272e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90022840:	4a73      	ldr	r2, [pc, #460]	; (90022a10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90022842:	fa1f fe83 	uxth.w	lr, r3
90022846:	f8b8 c000 	ldrh.w	ip, [r8]
9002284a:	43db      	mvns	r3, r3
9002284c:	6810      	ldr	r0, [r2, #0]
9002284e:	ea4f 212c 	mov.w	r1, ip, asr #8
90022852:	f3c0 4207 	ubfx	r2, r0, #16, #8
90022856:	b2db      	uxtb	r3, r3
90022858:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9002285c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90022860:	fb12 f20e 	smulbb	r2, r2, lr
90022864:	b2c0      	uxtb	r0, r0
90022866:	fb1b fb0e 	smulbb	fp, fp, lr
9002286a:	fb01 2103 	mla	r1, r1, r3, r2
9002286e:	ea4f 02ec 	mov.w	r2, ip, asr #3
90022872:	fb10 fe0e 	smulbb	lr, r0, lr
90022876:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9002287a:	b289      	uxth	r1, r1
9002287c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90022880:	fa5f fc8c 	uxtb.w	ip, ip
90022884:	fb02 b203 	mla	r2, r2, r3, fp
90022888:	1c48      	adds	r0, r1, #1
9002288a:	fb0c e303 	mla	r3, ip, r3, lr
9002288e:	b292      	uxth	r2, r2
90022890:	b29b      	uxth	r3, r3
90022892:	eb00 2111 	add.w	r1, r0, r1, lsr #8
90022896:	f102 0b01 	add.w	fp, r2, #1
9002289a:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
9002289e:	1c59      	adds	r1, r3, #1
900228a0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
900228a4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
900228a8:	0952      	lsrs	r2, r2, #5
900228aa:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900228ae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900228b2:	4301      	orrs	r1, r0
900228b4:	4311      	orrs	r1, r2
900228b6:	f8a8 1000 	strh.w	r1, [r8]
900228ba:	e738      	b.n	9002272e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900228bc:	f113 0b01 	adds.w	fp, r3, #1
900228c0:	f53f af35 	bmi.w	9002272e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900228c4:	45dc      	cmp	ip, fp
900228c6:	f6ff af32 	blt.w	9002272e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900228ca:	f110 0b01 	adds.w	fp, r0, #1
900228ce:	f53f af2e 	bmi.w	9002272e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900228d2:	45de      	cmp	lr, fp
900228d4:	f6ff af2b 	blt.w	9002272e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900228d8:	9302      	str	r3, [sp, #8]
900228da:	fa0f f38e 	sxth.w	r3, lr
900228de:	9a08      	ldr	r2, [sp, #32]
900228e0:	9301      	str	r3, [sp, #4]
900228e2:	fa0f f38c 	sxth.w	r3, ip
900228e6:	9105      	str	r1, [sp, #20]
900228e8:	4641      	mov	r1, r8
900228ea:	9300      	str	r3, [sp, #0]
900228ec:	4653      	mov	r3, sl
900228ee:	e9cd 0203 	strd	r0, r2, [sp, #12]
900228f2:	463a      	mov	r2, r7
900228f4:	9811      	ldr	r0, [sp, #68]	; 0x44
900228f6:	f7ff fd73 	bl	900223e0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
900228fa:	e718      	b.n	9002272e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
900228fc:	1422      	asrs	r2, r4, #16
900228fe:	9906      	ldr	r1, [sp, #24]
90022900:	1433      	asrs	r3, r6, #16
90022902:	f3c4 3003 	ubfx	r0, r4, #12, #4
90022906:	f3c6 3c03 	ubfx	ip, r6, #12, #4
9002290a:	fb01 2303 	mla	r3, r1, r3, r2
9002290e:	085a      	lsrs	r2, r3, #1
90022910:	07d9      	lsls	r1, r3, #31
90022912:	5cba      	ldrb	r2, [r7, r2]
90022914:	bf54      	ite	pl
90022916:	f002 020f 	andpl.w	r2, r2, #15
9002291a:	1112      	asrmi	r2, r2, #4
9002291c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90022920:	b2d2      	uxtb	r2, r2
90022922:	2800      	cmp	r0, #0
90022924:	d063      	beq.n	900229ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
90022926:	f103 0a01 	add.w	sl, r3, #1
9002292a:	ea4f 015a 	mov.w	r1, sl, lsr #1
9002292e:	f01a 0f01 	tst.w	sl, #1
90022932:	5c79      	ldrb	r1, [r7, r1]
90022934:	bf0c      	ite	eq
90022936:	f001 010f 	andeq.w	r1, r1, #15
9002293a:	1109      	asrne	r1, r1, #4
9002293c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022940:	b2c9      	uxtb	r1, r1
90022942:	910f      	str	r1, [sp, #60]	; 0x3c
90022944:	f1bc 0f00 	cmp.w	ip, #0
90022948:	d01a      	beq.n	90022980 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
9002294a:	9908      	ldr	r1, [sp, #32]
9002294c:	440b      	add	r3, r1
9002294e:	0859      	lsrs	r1, r3, #1
90022950:	f013 0f01 	tst.w	r3, #1
90022954:	f103 0301 	add.w	r3, r3, #1
90022958:	5c79      	ldrb	r1, [r7, r1]
9002295a:	bf0c      	ite	eq
9002295c:	f001 010f 	andeq.w	r1, r1, #15
90022960:	1109      	asrne	r1, r1, #4
90022962:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022966:	b2c9      	uxtb	r1, r1
90022968:	910b      	str	r1, [sp, #44]	; 0x2c
9002296a:	0859      	lsrs	r1, r3, #1
9002296c:	07db      	lsls	r3, r3, #31
9002296e:	5c79      	ldrb	r1, [r7, r1]
90022970:	bf54      	ite	pl
90022972:	f001 010f 	andpl.w	r1, r1, #15
90022976:	1109      	asrmi	r1, r1, #4
90022978:	eb01 1101 	add.w	r1, r1, r1, lsl #4
9002297c:	b2c9      	uxtb	r1, r1
9002297e:	9110      	str	r1, [sp, #64]	; 0x40
90022980:	b280      	uxth	r0, r0
90022982:	fa1f fc8c 	uxth.w	ip, ip
90022986:	fb00 f30c 	mul.w	r3, r0, ip
9002298a:	0100      	lsls	r0, r0, #4
9002298c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
90022990:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
90022994:	1ac0      	subs	r0, r0, r3
90022996:	fa1f fc8c 	uxth.w	ip, ip
9002299a:	b280      	uxth	r0, r0
9002299c:	eba1 010c 	sub.w	r1, r1, ip
900229a0:	fa1f fa81 	uxth.w	sl, r1
900229a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
900229a6:	4348      	muls	r0, r1
900229a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
900229aa:	fb02 020a 	mla	r2, r2, sl, r0
900229ae:	fb0c 2c01 	mla	ip, ip, r1, r2
900229b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
900229b4:	fb03 c302 	mla	r3, r3, r2, ip
900229b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
900229bc:	2bff      	cmp	r3, #255	; 0xff
900229be:	d12b      	bne.n	90022a18 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
900229c0:	4b13      	ldr	r3, [pc, #76]	; (90022a10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
900229c2:	681a      	ldr	r2, [r3, #0]
900229c4:	4b13      	ldr	r3, [pc, #76]	; (90022a14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
900229c6:	0951      	lsrs	r1, r2, #5
900229c8:	ea03 2312 	and.w	r3, r3, r2, lsr #8
900229cc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
900229d0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900229d4:	430b      	orrs	r3, r1
900229d6:	4313      	orrs	r3, r2
900229d8:	f8ae 3000 	strh.w	r3, [lr]
900229dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900229de:	f10e 0e02 	add.w	lr, lr, #2
900229e2:	f108 38ff 	add.w	r8, r8, #4294967295
900229e6:	441c      	add	r4, r3
900229e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
900229ea:	441e      	add	r6, r3
900229ec:	e6cc      	b.n	90022788 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
900229ee:	f1bc 0f00 	cmp.w	ip, #0
900229f2:	d0c5      	beq.n	90022980 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
900229f4:	9908      	ldr	r1, [sp, #32]
900229f6:	440b      	add	r3, r1
900229f8:	0859      	lsrs	r1, r3, #1
900229fa:	07db      	lsls	r3, r3, #31
900229fc:	5c79      	ldrb	r1, [r7, r1]
900229fe:	bf54      	ite	pl
90022a00:	f001 010f 	andpl.w	r1, r1, #15
90022a04:	1109      	asrmi	r1, r1, #4
90022a06:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90022a0a:	b2c9      	uxtb	r1, r1
90022a0c:	910b      	str	r1, [sp, #44]	; 0x2c
90022a0e:	e7b7      	b.n	90022980 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90022a10:	24026274 	.word	0x24026274
90022a14:	fffff800 	.word	0xfffff800
90022a18:	2b00      	cmp	r3, #0
90022a1a:	d0df      	beq.n	900229dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90022a1c:	4a21      	ldr	r2, [pc, #132]	; (90022aa4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
90022a1e:	fa1f fa83 	uxth.w	sl, r3
90022a22:	f8be c000 	ldrh.w	ip, [lr]
90022a26:	43db      	mvns	r3, r3
90022a28:	6810      	ldr	r0, [r2, #0]
90022a2a:	ea4f 212c 	mov.w	r1, ip, asr #8
90022a2e:	f3c0 4207 	ubfx	r2, r0, #16, #8
90022a32:	b2db      	uxtb	r3, r3
90022a34:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90022a38:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90022a3c:	fb12 f20a 	smulbb	r2, r2, sl
90022a40:	b2c0      	uxtb	r0, r0
90022a42:	fb1b fb0a 	smulbb	fp, fp, sl
90022a46:	fb01 2103 	mla	r1, r1, r3, r2
90022a4a:	ea4f 02ec 	mov.w	r2, ip, asr #3
90022a4e:	fb10 f00a 	smulbb	r0, r0, sl
90022a52:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90022a56:	b289      	uxth	r1, r1
90022a58:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90022a5c:	fa5f fc8c 	uxtb.w	ip, ip
90022a60:	fb02 b203 	mla	r2, r2, r3, fp
90022a64:	fb0c 0003 	mla	r0, ip, r3, r0
90022a68:	1c4b      	adds	r3, r1, #1
90022a6a:	b292      	uxth	r2, r2
90022a6c:	b280      	uxth	r0, r0
90022a6e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90022a72:	f100 0b01 	add.w	fp, r0, #1
90022a76:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90022a7a:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
90022a7e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
90022a82:	ea4b 0101 	orr.w	r1, fp, r1
90022a86:	f102 0b01 	add.w	fp, r2, #1
90022a8a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90022a8e:	0952      	lsrs	r2, r2, #5
90022a90:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022a94:	4311      	orrs	r1, r2
90022a96:	f8ae 1000 	strh.w	r1, [lr]
90022a9a:	e79f      	b.n	900229dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90022a9c:	b013      	add	sp, #76	; 0x4c
90022a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022aa2:	bf00      	nop
90022aa4:	24026274 	.word	0x24026274

90022aa8 <CRC_Lock>:
90022aa8:	4a20      	ldr	r2, [pc, #128]	; (90022b2c <CRC_Lock+0x84>)
90022aaa:	b530      	push	{r4, r5, lr}
90022aac:	6813      	ldr	r3, [r2, #0]
90022aae:	f64f 74f0 	movw	r4, #65520	; 0xfff0
90022ab2:	f24c 2540 	movw	r5, #49728	; 0xc240
90022ab6:	f023 0301 	bic.w	r3, r3, #1
90022aba:	6013      	str	r3, [r2, #0]
90022abc:	4b1c      	ldr	r3, [pc, #112]	; (90022b30 <CRC_Lock+0x88>)
90022abe:	681a      	ldr	r2, [r3, #0]
90022ac0:	4022      	ands	r2, r4
90022ac2:	42aa      	cmp	r2, r5
90022ac4:	d005      	beq.n	90022ad2 <CRC_Lock+0x2a>
90022ac6:	681b      	ldr	r3, [r3, #0]
90022ac8:	f24c 2270 	movw	r2, #49776	; 0xc270
90022acc:	4023      	ands	r3, r4
90022ace:	4293      	cmp	r3, r2
90022ad0:	d124      	bne.n	90022b1c <CRC_Lock+0x74>
90022ad2:	4b18      	ldr	r3, [pc, #96]	; (90022b34 <CRC_Lock+0x8c>)
90022ad4:	681b      	ldr	r3, [r3, #0]
90022ad6:	bb0b      	cbnz	r3, 90022b1c <CRC_Lock+0x74>
90022ad8:	4b17      	ldr	r3, [pc, #92]	; (90022b38 <CRC_Lock+0x90>)
90022ada:	681a      	ldr	r2, [r3, #0]
90022adc:	f3c2 020b 	ubfx	r2, r2, #0, #12
90022ae0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
90022ae4:	d00d      	beq.n	90022b02 <CRC_Lock+0x5a>
90022ae6:	681a      	ldr	r2, [r3, #0]
90022ae8:	f240 4483 	movw	r4, #1155	; 0x483
90022aec:	f3c2 020b 	ubfx	r2, r2, #0, #12
90022af0:	42a2      	cmp	r2, r4
90022af2:	d006      	beq.n	90022b02 <CRC_Lock+0x5a>
90022af4:	681b      	ldr	r3, [r3, #0]
90022af6:	f240 4285 	movw	r2, #1157	; 0x485
90022afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
90022afe:	4293      	cmp	r3, r2
90022b00:	d10c      	bne.n	90022b1c <CRC_Lock+0x74>
90022b02:	4b0e      	ldr	r3, [pc, #56]	; (90022b3c <CRC_Lock+0x94>)
90022b04:	2201      	movs	r2, #1
90022b06:	601a      	str	r2, [r3, #0]
90022b08:	681a      	ldr	r2, [r3, #0]
90022b0a:	2a00      	cmp	r2, #0
90022b0c:	d1fc      	bne.n	90022b08 <CRC_Lock+0x60>
90022b0e:	4b0c      	ldr	r3, [pc, #48]	; (90022b40 <CRC_Lock+0x98>)
90022b10:	6018      	str	r0, [r3, #0]
90022b12:	6818      	ldr	r0, [r3, #0]
90022b14:	1a43      	subs	r3, r0, r1
90022b16:	4258      	negs	r0, r3
90022b18:	4158      	adcs	r0, r3
90022b1a:	bd30      	pop	{r4, r5, pc}
90022b1c:	4b09      	ldr	r3, [pc, #36]	; (90022b44 <CRC_Lock+0x9c>)
90022b1e:	2201      	movs	r2, #1
90022b20:	601a      	str	r2, [r3, #0]
90022b22:	681a      	ldr	r2, [r3, #0]
90022b24:	2a00      	cmp	r2, #0
90022b26:	d1fc      	bne.n	90022b22 <CRC_Lock+0x7a>
90022b28:	4b07      	ldr	r3, [pc, #28]	; (90022b48 <CRC_Lock+0xa0>)
90022b2a:	e7f1      	b.n	90022b10 <CRC_Lock+0x68>
90022b2c:	e0002000 	.word	0xe0002000
90022b30:	e000ed00 	.word	0xe000ed00
90022b34:	e0042000 	.word	0xe0042000
90022b38:	5c001000 	.word	0x5c001000
90022b3c:	58024c08 	.word	0x58024c08
90022b40:	58024c00 	.word	0x58024c00
90022b44:	40023008 	.word	0x40023008
90022b48:	40023000 	.word	0x40023000

90022b4c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
90022b4c:	6101      	str	r1, [r0, #16]
90022b4e:	4770      	bx	lr

90022b50 <_ZN8touchgfx8Gestures4tickEv>:
90022b50:	7b83      	ldrb	r3, [r0, #14]
90022b52:	b14b      	cbz	r3, 90022b68 <_ZN8touchgfx8Gestures4tickEv+0x18>
90022b54:	8903      	ldrh	r3, [r0, #8]
90022b56:	3301      	adds	r3, #1
90022b58:	b29b      	uxth	r3, r3
90022b5a:	2b07      	cmp	r3, #7
90022b5c:	8103      	strh	r3, [r0, #8]
90022b5e:	bf81      	itttt	hi
90022b60:	2300      	movhi	r3, #0
90022b62:	8143      	strhhi	r3, [r0, #10]
90022b64:	8183      	strhhi	r3, [r0, #12]
90022b66:	7383      	strbhi	r3, [r0, #14]
90022b68:	4770      	bx	lr
	...

90022b6c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
90022b6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90022b70:	4698      	mov	r8, r3
90022b72:	8883      	ldrh	r3, [r0, #4]
90022b74:	4604      	mov	r4, r0
90022b76:	4617      	mov	r7, r2
90022b78:	f8ad 3006 	strh.w	r3, [sp, #6]
90022b7c:	eba8 0303 	sub.w	r3, r8, r3
90022b80:	4a19      	ldr	r2, [pc, #100]	; (90022be8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
90022b82:	460e      	mov	r6, r1
90022b84:	b21b      	sxth	r3, r3
90022b86:	88c1      	ldrh	r1, [r0, #6]
90022b88:	9200      	str	r2, [sp, #0]
90022b8a:	2000      	movs	r0, #0
90022b8c:	2b00      	cmp	r3, #0
90022b8e:	8aa2      	ldrh	r2, [r4, #20]
90022b90:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
90022b94:	bfb8      	it	lt
90022b96:	425b      	neglt	r3, r3
90022b98:	f88d 0004 	strb.w	r0, [sp, #4]
90022b9c:	f8ad 1008 	strh.w	r1, [sp, #8]
90022ba0:	b21b      	sxth	r3, r3
90022ba2:	f8ad 800a 	strh.w	r8, [sp, #10]
90022ba6:	f8ad 500c 	strh.w	r5, [sp, #12]
90022baa:	4293      	cmp	r3, r2
90022bac:	dc07      	bgt.n	90022bbe <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
90022bae:	1a69      	subs	r1, r5, r1
90022bb0:	b209      	sxth	r1, r1
90022bb2:	2900      	cmp	r1, #0
90022bb4:	bfb8      	it	lt
90022bb6:	4249      	neglt	r1, r1
90022bb8:	b209      	sxth	r1, r1
90022bba:	428a      	cmp	r2, r1
90022bbc:	da10      	bge.n	90022be0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
90022bbe:	6920      	ldr	r0, [r4, #16]
90022bc0:	4669      	mov	r1, sp
90022bc2:	eba8 0606 	sub.w	r6, r8, r6
90022bc6:	1bef      	subs	r7, r5, r7
90022bc8:	6803      	ldr	r3, [r0, #0]
90022bca:	685b      	ldr	r3, [r3, #4]
90022bcc:	4798      	blx	r3
90022bce:	2300      	movs	r3, #0
90022bd0:	2001      	movs	r0, #1
90022bd2:	8166      	strh	r6, [r4, #10]
90022bd4:	8123      	strh	r3, [r4, #8]
90022bd6:	81a7      	strh	r7, [r4, #12]
90022bd8:	f8a4 8004 	strh.w	r8, [r4, #4]
90022bdc:	80e5      	strh	r5, [r4, #6]
90022bde:	73a0      	strb	r0, [r4, #14]
90022be0:	b004      	add	sp, #16
90022be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90022be6:	bf00      	nop
90022be8:	90026cd0 	.word	0x90026cd0

90022bec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
90022bec:	b5f0      	push	{r4, r5, r6, r7, lr}
90022bee:	461e      	mov	r6, r3
90022bf0:	1e4b      	subs	r3, r1, #1
90022bf2:	b085      	sub	sp, #20
90022bf4:	4604      	mov	r4, r0
90022bf6:	2b01      	cmp	r3, #1
90022bf8:	460d      	mov	r5, r1
90022bfa:	4617      	mov	r7, r2
90022bfc:	d84b      	bhi.n	90022c96 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
90022bfe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90022c02:	1cd3      	adds	r3, r2, #3
90022c04:	b29b      	uxth	r3, r3
90022c06:	2b06      	cmp	r3, #6
90022c08:	d916      	bls.n	90022c38 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90022c0a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 90022cac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90022c0e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90022c12:	f8cd c004 	str.w	ip, [sp, #4]
90022c16:	f04f 0c00 	mov.w	ip, #0
90022c1a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90022c1e:	6900      	ldr	r0, [r0, #16]
90022c20:	f8ad 100c 	strh.w	r1, [sp, #12]
90022c24:	a901      	add	r1, sp, #4
90022c26:	f88d c008 	strb.w	ip, [sp, #8]
90022c2a:	f8ad 200a 	strh.w	r2, [sp, #10]
90022c2e:	f8ad 300e 	strh.w	r3, [sp, #14]
90022c32:	6803      	ldr	r3, [r0, #0]
90022c34:	689b      	ldr	r3, [r3, #8]
90022c36:	4798      	blx	r3
90022c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90022c3c:	1cd3      	adds	r3, r2, #3
90022c3e:	b29b      	uxth	r3, r3
90022c40:	2b06      	cmp	r3, #6
90022c42:	d916      	bls.n	90022c72 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90022c44:	f8df c064 	ldr.w	ip, [pc, #100]	; 90022cac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90022c48:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90022c4c:	f8cd c004 	str.w	ip, [sp, #4]
90022c50:	f04f 0c01 	mov.w	ip, #1
90022c54:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90022c58:	6920      	ldr	r0, [r4, #16]
90022c5a:	f8ad 100c 	strh.w	r1, [sp, #12]
90022c5e:	a901      	add	r1, sp, #4
90022c60:	f88d c008 	strb.w	ip, [sp, #8]
90022c64:	f8ad 200a 	strh.w	r2, [sp, #10]
90022c68:	f8ad 300e 	strh.w	r3, [sp, #14]
90022c6c:	6803      	ldr	r3, [r0, #0]
90022c6e:	689b      	ldr	r3, [r3, #8]
90022c70:	4798      	blx	r3
90022c72:	4b0d      	ldr	r3, [pc, #52]	; (90022ca8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
90022c74:	a901      	add	r1, sp, #4
90022c76:	6920      	ldr	r0, [r4, #16]
90022c78:	9301      	str	r3, [sp, #4]
90022c7a:	2300      	movs	r3, #0
90022c7c:	f88d 5008 	strb.w	r5, [sp, #8]
90022c80:	f8ad 700a 	strh.w	r7, [sp, #10]
90022c84:	f8ad 600c 	strh.w	r6, [sp, #12]
90022c88:	f8ad 300e 	strh.w	r3, [sp, #14]
90022c8c:	6803      	ldr	r3, [r0, #0]
90022c8e:	681b      	ldr	r3, [r3, #0]
90022c90:	4798      	blx	r3
90022c92:	b005      	add	sp, #20
90022c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
90022c96:	2900      	cmp	r1, #0
90022c98:	d1eb      	bne.n	90022c72 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90022c9a:	80a2      	strh	r2, [r4, #4]
90022c9c:	80c6      	strh	r6, [r0, #6]
90022c9e:	60a1      	str	r1, [r4, #8]
90022ca0:	81a1      	strh	r1, [r4, #12]
90022ca2:	73a1      	strb	r1, [r4, #14]
90022ca4:	e7e5      	b.n	90022c72 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90022ca6:	bf00      	nop
90022ca8:	90026cbc 	.word	0x90026cbc
90022cac:	90026ce4 	.word	0x90026ce4

90022cb0 <__aeabi_atexit>:
90022cb0:	460b      	mov	r3, r1
90022cb2:	4601      	mov	r1, r0
90022cb4:	4618      	mov	r0, r3
90022cb6:	f000 b853 	b.w	90022d60 <__cxa_atexit>

90022cba <_ZdlPvj>:
90022cba:	f000 b812 	b.w	90022ce2 <_ZdlPv>

90022cbe <__cxa_guard_acquire>:
90022cbe:	6803      	ldr	r3, [r0, #0]
90022cc0:	07db      	lsls	r3, r3, #31
90022cc2:	d406      	bmi.n	90022cd2 <__cxa_guard_acquire+0x14>
90022cc4:	7843      	ldrb	r3, [r0, #1]
90022cc6:	b103      	cbz	r3, 90022cca <__cxa_guard_acquire+0xc>
90022cc8:	deff      	udf	#255	; 0xff
90022cca:	2301      	movs	r3, #1
90022ccc:	7043      	strb	r3, [r0, #1]
90022cce:	4618      	mov	r0, r3
90022cd0:	4770      	bx	lr
90022cd2:	2000      	movs	r0, #0
90022cd4:	4770      	bx	lr

90022cd6 <__cxa_guard_release>:
90022cd6:	2301      	movs	r3, #1
90022cd8:	6003      	str	r3, [r0, #0]
90022cda:	4770      	bx	lr

90022cdc <__cxa_pure_virtual>:
90022cdc:	b508      	push	{r3, lr}
90022cde:	f000 f80f 	bl	90022d00 <_ZSt9terminatev>

90022ce2 <_ZdlPv>:
90022ce2:	f000 b893 	b.w	90022e0c <free>

90022ce6 <_ZN10__cxxabiv111__terminateEPFvvE>:
90022ce6:	b508      	push	{r3, lr}
90022ce8:	4780      	blx	r0
90022cea:	f000 f80e 	bl	90022d0a <abort>
	...

90022cf0 <_ZSt13get_terminatev>:
90022cf0:	4b02      	ldr	r3, [pc, #8]	; (90022cfc <_ZSt13get_terminatev+0xc>)
90022cf2:	6818      	ldr	r0, [r3, #0]
90022cf4:	f3bf 8f5b 	dmb	ish
90022cf8:	4770      	bx	lr
90022cfa:	bf00      	nop
90022cfc:	240000dc 	.word	0x240000dc

90022d00 <_ZSt9terminatev>:
90022d00:	b508      	push	{r3, lr}
90022d02:	f7ff fff5 	bl	90022cf0 <_ZSt13get_terminatev>
90022d06:	f7ff ffee 	bl	90022ce6 <_ZN10__cxxabiv111__terminateEPFvvE>

90022d0a <abort>:
90022d0a:	b508      	push	{r3, lr}
90022d0c:	2006      	movs	r0, #6
90022d0e:	f000 fca1 	bl	90023654 <raise>
90022d12:	2001      	movs	r0, #1
90022d14:	f7e1 feea 	bl	90004aec <_exit>

90022d18 <__assert_func>:
90022d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
90022d1a:	4614      	mov	r4, r2
90022d1c:	461a      	mov	r2, r3
90022d1e:	4b09      	ldr	r3, [pc, #36]	; (90022d44 <__assert_func+0x2c>)
90022d20:	681b      	ldr	r3, [r3, #0]
90022d22:	4605      	mov	r5, r0
90022d24:	68d8      	ldr	r0, [r3, #12]
90022d26:	b14c      	cbz	r4, 90022d3c <__assert_func+0x24>
90022d28:	4b07      	ldr	r3, [pc, #28]	; (90022d48 <__assert_func+0x30>)
90022d2a:	9100      	str	r1, [sp, #0]
90022d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
90022d30:	4906      	ldr	r1, [pc, #24]	; (90022d4c <__assert_func+0x34>)
90022d32:	462b      	mov	r3, r5
90022d34:	f000 f828 	bl	90022d88 <fiprintf>
90022d38:	f7ff ffe7 	bl	90022d0a <abort>
90022d3c:	4b04      	ldr	r3, [pc, #16]	; (90022d50 <__assert_func+0x38>)
90022d3e:	461c      	mov	r4, r3
90022d40:	e7f3      	b.n	90022d2a <__assert_func+0x12>
90022d42:	bf00      	nop
90022d44:	240000e0 	.word	0x240000e0
90022d48:	90026fac 	.word	0x90026fac
90022d4c:	90026fb9 	.word	0x90026fb9
90022d50:	90026fe7 	.word	0x90026fe7

90022d54 <atexit>:
90022d54:	2300      	movs	r3, #0
90022d56:	4601      	mov	r1, r0
90022d58:	461a      	mov	r2, r3
90022d5a:	4618      	mov	r0, r3
90022d5c:	f000 bd6a 	b.w	90023834 <__register_exitproc>

90022d60 <__cxa_atexit>:
90022d60:	b510      	push	{r4, lr}
90022d62:	4c05      	ldr	r4, [pc, #20]	; (90022d78 <__cxa_atexit+0x18>)
90022d64:	4613      	mov	r3, r2
90022d66:	b12c      	cbz	r4, 90022d74 <__cxa_atexit+0x14>
90022d68:	460a      	mov	r2, r1
90022d6a:	4601      	mov	r1, r0
90022d6c:	2002      	movs	r0, #2
90022d6e:	f000 fd61 	bl	90023834 <__register_exitproc>
90022d72:	bd10      	pop	{r4, pc}
90022d74:	4620      	mov	r0, r4
90022d76:	e7fc      	b.n	90022d72 <__cxa_atexit+0x12>
90022d78:	90023835 	.word	0x90023835

90022d7c <__errno>:
90022d7c:	4b01      	ldr	r3, [pc, #4]	; (90022d84 <__errno+0x8>)
90022d7e:	6818      	ldr	r0, [r3, #0]
90022d80:	4770      	bx	lr
90022d82:	bf00      	nop
90022d84:	240000e0 	.word	0x240000e0

90022d88 <fiprintf>:
90022d88:	b40e      	push	{r1, r2, r3}
90022d8a:	b503      	push	{r0, r1, lr}
90022d8c:	4601      	mov	r1, r0
90022d8e:	ab03      	add	r3, sp, #12
90022d90:	4805      	ldr	r0, [pc, #20]	; (90022da8 <fiprintf+0x20>)
90022d92:	f853 2b04 	ldr.w	r2, [r3], #4
90022d96:	6800      	ldr	r0, [r0, #0]
90022d98:	9301      	str	r3, [sp, #4]
90022d9a:	f000 f95f 	bl	9002305c <_vfiprintf_r>
90022d9e:	b002      	add	sp, #8
90022da0:	f85d eb04 	ldr.w	lr, [sp], #4
90022da4:	b003      	add	sp, #12
90022da6:	4770      	bx	lr
90022da8:	240000e0 	.word	0x240000e0

90022dac <__libc_init_array>:
90022dac:	b570      	push	{r4, r5, r6, lr}
90022dae:	4d0d      	ldr	r5, [pc, #52]	; (90022de4 <__libc_init_array+0x38>)
90022db0:	4c0d      	ldr	r4, [pc, #52]	; (90022de8 <__libc_init_array+0x3c>)
90022db2:	1b64      	subs	r4, r4, r5
90022db4:	10a4      	asrs	r4, r4, #2
90022db6:	2600      	movs	r6, #0
90022db8:	42a6      	cmp	r6, r4
90022dba:	d109      	bne.n	90022dd0 <__libc_init_array+0x24>
90022dbc:	4d0b      	ldr	r5, [pc, #44]	; (90022dec <__libc_init_array+0x40>)
90022dbe:	4c0c      	ldr	r4, [pc, #48]	; (90022df0 <__libc_init_array+0x44>)
90022dc0:	f001 f86e 	bl	90023ea0 <_init>
90022dc4:	1b64      	subs	r4, r4, r5
90022dc6:	10a4      	asrs	r4, r4, #2
90022dc8:	2600      	movs	r6, #0
90022dca:	42a6      	cmp	r6, r4
90022dcc:	d105      	bne.n	90022dda <__libc_init_array+0x2e>
90022dce:	bd70      	pop	{r4, r5, r6, pc}
90022dd0:	f855 3b04 	ldr.w	r3, [r5], #4
90022dd4:	4798      	blx	r3
90022dd6:	3601      	adds	r6, #1
90022dd8:	e7ee      	b.n	90022db8 <__libc_init_array+0xc>
90022dda:	f855 3b04 	ldr.w	r3, [r5], #4
90022dde:	4798      	blx	r3
90022de0:	3601      	adds	r6, #1
90022de2:	e7f2      	b.n	90022dca <__libc_init_array+0x1e>
90022de4:	9002723c 	.word	0x9002723c
90022de8:	9002723c 	.word	0x9002723c
90022dec:	9002723c 	.word	0x9002723c
90022df0:	90027258 	.word	0x90027258

90022df4 <__retarget_lock_init_recursive>:
90022df4:	4770      	bx	lr

90022df6 <__retarget_lock_acquire_recursive>:
90022df6:	4770      	bx	lr

90022df8 <__retarget_lock_release>:
90022df8:	4770      	bx	lr

90022dfa <__retarget_lock_release_recursive>:
90022dfa:	4770      	bx	lr

90022dfc <malloc>:
90022dfc:	4b02      	ldr	r3, [pc, #8]	; (90022e08 <malloc+0xc>)
90022dfe:	4601      	mov	r1, r0
90022e00:	6818      	ldr	r0, [r3, #0]
90022e02:	f000 b88d 	b.w	90022f20 <_malloc_r>
90022e06:	bf00      	nop
90022e08:	240000e0 	.word	0x240000e0

90022e0c <free>:
90022e0c:	4b02      	ldr	r3, [pc, #8]	; (90022e18 <free+0xc>)
90022e0e:	4601      	mov	r1, r0
90022e10:	6818      	ldr	r0, [r3, #0]
90022e12:	f000 b819 	b.w	90022e48 <_free_r>
90022e16:	bf00      	nop
90022e18:	240000e0 	.word	0x240000e0

90022e1c <memcpy>:
90022e1c:	440a      	add	r2, r1
90022e1e:	4291      	cmp	r1, r2
90022e20:	f100 33ff 	add.w	r3, r0, #4294967295
90022e24:	d100      	bne.n	90022e28 <memcpy+0xc>
90022e26:	4770      	bx	lr
90022e28:	b510      	push	{r4, lr}
90022e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
90022e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
90022e32:	4291      	cmp	r1, r2
90022e34:	d1f9      	bne.n	90022e2a <memcpy+0xe>
90022e36:	bd10      	pop	{r4, pc}

90022e38 <memset>:
90022e38:	4402      	add	r2, r0
90022e3a:	4603      	mov	r3, r0
90022e3c:	4293      	cmp	r3, r2
90022e3e:	d100      	bne.n	90022e42 <memset+0xa>
90022e40:	4770      	bx	lr
90022e42:	f803 1b01 	strb.w	r1, [r3], #1
90022e46:	e7f9      	b.n	90022e3c <memset+0x4>

90022e48 <_free_r>:
90022e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
90022e4a:	2900      	cmp	r1, #0
90022e4c:	d044      	beq.n	90022ed8 <_free_r+0x90>
90022e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
90022e52:	9001      	str	r0, [sp, #4]
90022e54:	2b00      	cmp	r3, #0
90022e56:	f1a1 0404 	sub.w	r4, r1, #4
90022e5a:	bfb8      	it	lt
90022e5c:	18e4      	addlt	r4, r4, r3
90022e5e:	f000 ff67 	bl	90023d30 <__malloc_lock>
90022e62:	4a1e      	ldr	r2, [pc, #120]	; (90022edc <_free_r+0x94>)
90022e64:	9801      	ldr	r0, [sp, #4]
90022e66:	6813      	ldr	r3, [r2, #0]
90022e68:	b933      	cbnz	r3, 90022e78 <_free_r+0x30>
90022e6a:	6063      	str	r3, [r4, #4]
90022e6c:	6014      	str	r4, [r2, #0]
90022e6e:	b003      	add	sp, #12
90022e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90022e74:	f000 bf62 	b.w	90023d3c <__malloc_unlock>
90022e78:	42a3      	cmp	r3, r4
90022e7a:	d908      	bls.n	90022e8e <_free_r+0x46>
90022e7c:	6825      	ldr	r5, [r4, #0]
90022e7e:	1961      	adds	r1, r4, r5
90022e80:	428b      	cmp	r3, r1
90022e82:	bf01      	itttt	eq
90022e84:	6819      	ldreq	r1, [r3, #0]
90022e86:	685b      	ldreq	r3, [r3, #4]
90022e88:	1949      	addeq	r1, r1, r5
90022e8a:	6021      	streq	r1, [r4, #0]
90022e8c:	e7ed      	b.n	90022e6a <_free_r+0x22>
90022e8e:	461a      	mov	r2, r3
90022e90:	685b      	ldr	r3, [r3, #4]
90022e92:	b10b      	cbz	r3, 90022e98 <_free_r+0x50>
90022e94:	42a3      	cmp	r3, r4
90022e96:	d9fa      	bls.n	90022e8e <_free_r+0x46>
90022e98:	6811      	ldr	r1, [r2, #0]
90022e9a:	1855      	adds	r5, r2, r1
90022e9c:	42a5      	cmp	r5, r4
90022e9e:	d10b      	bne.n	90022eb8 <_free_r+0x70>
90022ea0:	6824      	ldr	r4, [r4, #0]
90022ea2:	4421      	add	r1, r4
90022ea4:	1854      	adds	r4, r2, r1
90022ea6:	42a3      	cmp	r3, r4
90022ea8:	6011      	str	r1, [r2, #0]
90022eaa:	d1e0      	bne.n	90022e6e <_free_r+0x26>
90022eac:	681c      	ldr	r4, [r3, #0]
90022eae:	685b      	ldr	r3, [r3, #4]
90022eb0:	6053      	str	r3, [r2, #4]
90022eb2:	4421      	add	r1, r4
90022eb4:	6011      	str	r1, [r2, #0]
90022eb6:	e7da      	b.n	90022e6e <_free_r+0x26>
90022eb8:	d902      	bls.n	90022ec0 <_free_r+0x78>
90022eba:	230c      	movs	r3, #12
90022ebc:	6003      	str	r3, [r0, #0]
90022ebe:	e7d6      	b.n	90022e6e <_free_r+0x26>
90022ec0:	6825      	ldr	r5, [r4, #0]
90022ec2:	1961      	adds	r1, r4, r5
90022ec4:	428b      	cmp	r3, r1
90022ec6:	bf04      	itt	eq
90022ec8:	6819      	ldreq	r1, [r3, #0]
90022eca:	685b      	ldreq	r3, [r3, #4]
90022ecc:	6063      	str	r3, [r4, #4]
90022ece:	bf04      	itt	eq
90022ed0:	1949      	addeq	r1, r1, r5
90022ed2:	6021      	streq	r1, [r4, #0]
90022ed4:	6054      	str	r4, [r2, #4]
90022ed6:	e7ca      	b.n	90022e6e <_free_r+0x26>
90022ed8:	b003      	add	sp, #12
90022eda:	bd30      	pop	{r4, r5, pc}
90022edc:	2402636c 	.word	0x2402636c

90022ee0 <sbrk_aligned>:
90022ee0:	b570      	push	{r4, r5, r6, lr}
90022ee2:	4e0e      	ldr	r6, [pc, #56]	; (90022f1c <sbrk_aligned+0x3c>)
90022ee4:	460c      	mov	r4, r1
90022ee6:	6831      	ldr	r1, [r6, #0]
90022ee8:	4605      	mov	r5, r0
90022eea:	b911      	cbnz	r1, 90022ef2 <sbrk_aligned+0x12>
90022eec:	f000 fb7a 	bl	900235e4 <_sbrk_r>
90022ef0:	6030      	str	r0, [r6, #0]
90022ef2:	4621      	mov	r1, r4
90022ef4:	4628      	mov	r0, r5
90022ef6:	f000 fb75 	bl	900235e4 <_sbrk_r>
90022efa:	1c43      	adds	r3, r0, #1
90022efc:	d00a      	beq.n	90022f14 <sbrk_aligned+0x34>
90022efe:	1cc4      	adds	r4, r0, #3
90022f00:	f024 0403 	bic.w	r4, r4, #3
90022f04:	42a0      	cmp	r0, r4
90022f06:	d007      	beq.n	90022f18 <sbrk_aligned+0x38>
90022f08:	1a21      	subs	r1, r4, r0
90022f0a:	4628      	mov	r0, r5
90022f0c:	f000 fb6a 	bl	900235e4 <_sbrk_r>
90022f10:	3001      	adds	r0, #1
90022f12:	d101      	bne.n	90022f18 <sbrk_aligned+0x38>
90022f14:	f04f 34ff 	mov.w	r4, #4294967295
90022f18:	4620      	mov	r0, r4
90022f1a:	bd70      	pop	{r4, r5, r6, pc}
90022f1c:	24026370 	.word	0x24026370

90022f20 <_malloc_r>:
90022f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90022f24:	1ccd      	adds	r5, r1, #3
90022f26:	f025 0503 	bic.w	r5, r5, #3
90022f2a:	3508      	adds	r5, #8
90022f2c:	2d0c      	cmp	r5, #12
90022f2e:	bf38      	it	cc
90022f30:	250c      	movcc	r5, #12
90022f32:	2d00      	cmp	r5, #0
90022f34:	4607      	mov	r7, r0
90022f36:	db01      	blt.n	90022f3c <_malloc_r+0x1c>
90022f38:	42a9      	cmp	r1, r5
90022f3a:	d905      	bls.n	90022f48 <_malloc_r+0x28>
90022f3c:	230c      	movs	r3, #12
90022f3e:	603b      	str	r3, [r7, #0]
90022f40:	2600      	movs	r6, #0
90022f42:	4630      	mov	r0, r6
90022f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90022f48:	4e2e      	ldr	r6, [pc, #184]	; (90023004 <_malloc_r+0xe4>)
90022f4a:	f000 fef1 	bl	90023d30 <__malloc_lock>
90022f4e:	6833      	ldr	r3, [r6, #0]
90022f50:	461c      	mov	r4, r3
90022f52:	bb34      	cbnz	r4, 90022fa2 <_malloc_r+0x82>
90022f54:	4629      	mov	r1, r5
90022f56:	4638      	mov	r0, r7
90022f58:	f7ff ffc2 	bl	90022ee0 <sbrk_aligned>
90022f5c:	1c43      	adds	r3, r0, #1
90022f5e:	4604      	mov	r4, r0
90022f60:	d14d      	bne.n	90022ffe <_malloc_r+0xde>
90022f62:	6834      	ldr	r4, [r6, #0]
90022f64:	4626      	mov	r6, r4
90022f66:	2e00      	cmp	r6, #0
90022f68:	d140      	bne.n	90022fec <_malloc_r+0xcc>
90022f6a:	6823      	ldr	r3, [r4, #0]
90022f6c:	4631      	mov	r1, r6
90022f6e:	4638      	mov	r0, r7
90022f70:	eb04 0803 	add.w	r8, r4, r3
90022f74:	f000 fb36 	bl	900235e4 <_sbrk_r>
90022f78:	4580      	cmp	r8, r0
90022f7a:	d13a      	bne.n	90022ff2 <_malloc_r+0xd2>
90022f7c:	6821      	ldr	r1, [r4, #0]
90022f7e:	3503      	adds	r5, #3
90022f80:	1a6d      	subs	r5, r5, r1
90022f82:	f025 0503 	bic.w	r5, r5, #3
90022f86:	3508      	adds	r5, #8
90022f88:	2d0c      	cmp	r5, #12
90022f8a:	bf38      	it	cc
90022f8c:	250c      	movcc	r5, #12
90022f8e:	4629      	mov	r1, r5
90022f90:	4638      	mov	r0, r7
90022f92:	f7ff ffa5 	bl	90022ee0 <sbrk_aligned>
90022f96:	3001      	adds	r0, #1
90022f98:	d02b      	beq.n	90022ff2 <_malloc_r+0xd2>
90022f9a:	6823      	ldr	r3, [r4, #0]
90022f9c:	442b      	add	r3, r5
90022f9e:	6023      	str	r3, [r4, #0]
90022fa0:	e00e      	b.n	90022fc0 <_malloc_r+0xa0>
90022fa2:	6822      	ldr	r2, [r4, #0]
90022fa4:	1b52      	subs	r2, r2, r5
90022fa6:	d41e      	bmi.n	90022fe6 <_malloc_r+0xc6>
90022fa8:	2a0b      	cmp	r2, #11
90022faa:	d916      	bls.n	90022fda <_malloc_r+0xba>
90022fac:	1961      	adds	r1, r4, r5
90022fae:	42a3      	cmp	r3, r4
90022fb0:	6025      	str	r5, [r4, #0]
90022fb2:	bf18      	it	ne
90022fb4:	6059      	strne	r1, [r3, #4]
90022fb6:	6863      	ldr	r3, [r4, #4]
90022fb8:	bf08      	it	eq
90022fba:	6031      	streq	r1, [r6, #0]
90022fbc:	5162      	str	r2, [r4, r5]
90022fbe:	604b      	str	r3, [r1, #4]
90022fc0:	4638      	mov	r0, r7
90022fc2:	f104 060b 	add.w	r6, r4, #11
90022fc6:	f000 feb9 	bl	90023d3c <__malloc_unlock>
90022fca:	f026 0607 	bic.w	r6, r6, #7
90022fce:	1d23      	adds	r3, r4, #4
90022fd0:	1af2      	subs	r2, r6, r3
90022fd2:	d0b6      	beq.n	90022f42 <_malloc_r+0x22>
90022fd4:	1b9b      	subs	r3, r3, r6
90022fd6:	50a3      	str	r3, [r4, r2]
90022fd8:	e7b3      	b.n	90022f42 <_malloc_r+0x22>
90022fda:	6862      	ldr	r2, [r4, #4]
90022fdc:	42a3      	cmp	r3, r4
90022fde:	bf0c      	ite	eq
90022fe0:	6032      	streq	r2, [r6, #0]
90022fe2:	605a      	strne	r2, [r3, #4]
90022fe4:	e7ec      	b.n	90022fc0 <_malloc_r+0xa0>
90022fe6:	4623      	mov	r3, r4
90022fe8:	6864      	ldr	r4, [r4, #4]
90022fea:	e7b2      	b.n	90022f52 <_malloc_r+0x32>
90022fec:	4634      	mov	r4, r6
90022fee:	6876      	ldr	r6, [r6, #4]
90022ff0:	e7b9      	b.n	90022f66 <_malloc_r+0x46>
90022ff2:	230c      	movs	r3, #12
90022ff4:	603b      	str	r3, [r7, #0]
90022ff6:	4638      	mov	r0, r7
90022ff8:	f000 fea0 	bl	90023d3c <__malloc_unlock>
90022ffc:	e7a1      	b.n	90022f42 <_malloc_r+0x22>
90022ffe:	6025      	str	r5, [r4, #0]
90023000:	e7de      	b.n	90022fc0 <_malloc_r+0xa0>
90023002:	bf00      	nop
90023004:	2402636c 	.word	0x2402636c

90023008 <__sfputc_r>:
90023008:	6893      	ldr	r3, [r2, #8]
9002300a:	3b01      	subs	r3, #1
9002300c:	2b00      	cmp	r3, #0
9002300e:	b410      	push	{r4}
90023010:	6093      	str	r3, [r2, #8]
90023012:	da08      	bge.n	90023026 <__sfputc_r+0x1e>
90023014:	6994      	ldr	r4, [r2, #24]
90023016:	42a3      	cmp	r3, r4
90023018:	db01      	blt.n	9002301e <__sfputc_r+0x16>
9002301a:	290a      	cmp	r1, #10
9002301c:	d103      	bne.n	90023026 <__sfputc_r+0x1e>
9002301e:	f85d 4b04 	ldr.w	r4, [sp], #4
90023022:	f000 bb47 	b.w	900236b4 <__swbuf_r>
90023026:	6813      	ldr	r3, [r2, #0]
90023028:	1c58      	adds	r0, r3, #1
9002302a:	6010      	str	r0, [r2, #0]
9002302c:	7019      	strb	r1, [r3, #0]
9002302e:	4608      	mov	r0, r1
90023030:	f85d 4b04 	ldr.w	r4, [sp], #4
90023034:	4770      	bx	lr

90023036 <__sfputs_r>:
90023036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023038:	4606      	mov	r6, r0
9002303a:	460f      	mov	r7, r1
9002303c:	4614      	mov	r4, r2
9002303e:	18d5      	adds	r5, r2, r3
90023040:	42ac      	cmp	r4, r5
90023042:	d101      	bne.n	90023048 <__sfputs_r+0x12>
90023044:	2000      	movs	r0, #0
90023046:	e007      	b.n	90023058 <__sfputs_r+0x22>
90023048:	f814 1b01 	ldrb.w	r1, [r4], #1
9002304c:	463a      	mov	r2, r7
9002304e:	4630      	mov	r0, r6
90023050:	f7ff ffda 	bl	90023008 <__sfputc_r>
90023054:	1c43      	adds	r3, r0, #1
90023056:	d1f3      	bne.n	90023040 <__sfputs_r+0xa>
90023058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

9002305c <_vfiprintf_r>:
9002305c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023060:	460d      	mov	r5, r1
90023062:	b09d      	sub	sp, #116	; 0x74
90023064:	4614      	mov	r4, r2
90023066:	4698      	mov	r8, r3
90023068:	4606      	mov	r6, r0
9002306a:	b118      	cbz	r0, 90023074 <_vfiprintf_r+0x18>
9002306c:	6983      	ldr	r3, [r0, #24]
9002306e:	b90b      	cbnz	r3, 90023074 <_vfiprintf_r+0x18>
90023070:	f000 fd5c 	bl	90023b2c <__sinit>
90023074:	4b89      	ldr	r3, [pc, #548]	; (9002329c <_vfiprintf_r+0x240>)
90023076:	429d      	cmp	r5, r3
90023078:	d11b      	bne.n	900230b2 <_vfiprintf_r+0x56>
9002307a:	6875      	ldr	r5, [r6, #4]
9002307c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9002307e:	07d9      	lsls	r1, r3, #31
90023080:	d405      	bmi.n	9002308e <_vfiprintf_r+0x32>
90023082:	89ab      	ldrh	r3, [r5, #12]
90023084:	059a      	lsls	r2, r3, #22
90023086:	d402      	bmi.n	9002308e <_vfiprintf_r+0x32>
90023088:	6da8      	ldr	r0, [r5, #88]	; 0x58
9002308a:	f7ff feb4 	bl	90022df6 <__retarget_lock_acquire_recursive>
9002308e:	89ab      	ldrh	r3, [r5, #12]
90023090:	071b      	lsls	r3, r3, #28
90023092:	d501      	bpl.n	90023098 <_vfiprintf_r+0x3c>
90023094:	692b      	ldr	r3, [r5, #16]
90023096:	b9eb      	cbnz	r3, 900230d4 <_vfiprintf_r+0x78>
90023098:	4629      	mov	r1, r5
9002309a:	4630      	mov	r0, r6
9002309c:	f000 fb5c 	bl	90023758 <__swsetup_r>
900230a0:	b1c0      	cbz	r0, 900230d4 <_vfiprintf_r+0x78>
900230a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
900230a4:	07dc      	lsls	r4, r3, #31
900230a6:	d50e      	bpl.n	900230c6 <_vfiprintf_r+0x6a>
900230a8:	f04f 30ff 	mov.w	r0, #4294967295
900230ac:	b01d      	add	sp, #116	; 0x74
900230ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900230b2:	4b7b      	ldr	r3, [pc, #492]	; (900232a0 <_vfiprintf_r+0x244>)
900230b4:	429d      	cmp	r5, r3
900230b6:	d101      	bne.n	900230bc <_vfiprintf_r+0x60>
900230b8:	68b5      	ldr	r5, [r6, #8]
900230ba:	e7df      	b.n	9002307c <_vfiprintf_r+0x20>
900230bc:	4b79      	ldr	r3, [pc, #484]	; (900232a4 <_vfiprintf_r+0x248>)
900230be:	429d      	cmp	r5, r3
900230c0:	bf08      	it	eq
900230c2:	68f5      	ldreq	r5, [r6, #12]
900230c4:	e7da      	b.n	9002307c <_vfiprintf_r+0x20>
900230c6:	89ab      	ldrh	r3, [r5, #12]
900230c8:	0598      	lsls	r0, r3, #22
900230ca:	d4ed      	bmi.n	900230a8 <_vfiprintf_r+0x4c>
900230cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
900230ce:	f7ff fe94 	bl	90022dfa <__retarget_lock_release_recursive>
900230d2:	e7e9      	b.n	900230a8 <_vfiprintf_r+0x4c>
900230d4:	2300      	movs	r3, #0
900230d6:	9309      	str	r3, [sp, #36]	; 0x24
900230d8:	2320      	movs	r3, #32
900230da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
900230de:	f8cd 800c 	str.w	r8, [sp, #12]
900230e2:	2330      	movs	r3, #48	; 0x30
900230e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 900232a8 <_vfiprintf_r+0x24c>
900230e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
900230ec:	f04f 0901 	mov.w	r9, #1
900230f0:	4623      	mov	r3, r4
900230f2:	469a      	mov	sl, r3
900230f4:	f813 2b01 	ldrb.w	r2, [r3], #1
900230f8:	b10a      	cbz	r2, 900230fe <_vfiprintf_r+0xa2>
900230fa:	2a25      	cmp	r2, #37	; 0x25
900230fc:	d1f9      	bne.n	900230f2 <_vfiprintf_r+0x96>
900230fe:	ebba 0b04 	subs.w	fp, sl, r4
90023102:	d00b      	beq.n	9002311c <_vfiprintf_r+0xc0>
90023104:	465b      	mov	r3, fp
90023106:	4622      	mov	r2, r4
90023108:	4629      	mov	r1, r5
9002310a:	4630      	mov	r0, r6
9002310c:	f7ff ff93 	bl	90023036 <__sfputs_r>
90023110:	3001      	adds	r0, #1
90023112:	f000 80aa 	beq.w	9002326a <_vfiprintf_r+0x20e>
90023116:	9a09      	ldr	r2, [sp, #36]	; 0x24
90023118:	445a      	add	r2, fp
9002311a:	9209      	str	r2, [sp, #36]	; 0x24
9002311c:	f89a 3000 	ldrb.w	r3, [sl]
90023120:	2b00      	cmp	r3, #0
90023122:	f000 80a2 	beq.w	9002326a <_vfiprintf_r+0x20e>
90023126:	2300      	movs	r3, #0
90023128:	f04f 32ff 	mov.w	r2, #4294967295
9002312c:	e9cd 2305 	strd	r2, r3, [sp, #20]
90023130:	f10a 0a01 	add.w	sl, sl, #1
90023134:	9304      	str	r3, [sp, #16]
90023136:	9307      	str	r3, [sp, #28]
90023138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9002313c:	931a      	str	r3, [sp, #104]	; 0x68
9002313e:	4654      	mov	r4, sl
90023140:	2205      	movs	r2, #5
90023142:	f814 1b01 	ldrb.w	r1, [r4], #1
90023146:	4858      	ldr	r0, [pc, #352]	; (900232a8 <_vfiprintf_r+0x24c>)
90023148:	f7dd f8ca 	bl	900002e0 <memchr>
9002314c:	9a04      	ldr	r2, [sp, #16]
9002314e:	b9d8      	cbnz	r0, 90023188 <_vfiprintf_r+0x12c>
90023150:	06d1      	lsls	r1, r2, #27
90023152:	bf44      	itt	mi
90023154:	2320      	movmi	r3, #32
90023156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9002315a:	0713      	lsls	r3, r2, #28
9002315c:	bf44      	itt	mi
9002315e:	232b      	movmi	r3, #43	; 0x2b
90023160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90023164:	f89a 3000 	ldrb.w	r3, [sl]
90023168:	2b2a      	cmp	r3, #42	; 0x2a
9002316a:	d015      	beq.n	90023198 <_vfiprintf_r+0x13c>
9002316c:	9a07      	ldr	r2, [sp, #28]
9002316e:	4654      	mov	r4, sl
90023170:	2000      	movs	r0, #0
90023172:	f04f 0c0a 	mov.w	ip, #10
90023176:	4621      	mov	r1, r4
90023178:	f811 3b01 	ldrb.w	r3, [r1], #1
9002317c:	3b30      	subs	r3, #48	; 0x30
9002317e:	2b09      	cmp	r3, #9
90023180:	d94e      	bls.n	90023220 <_vfiprintf_r+0x1c4>
90023182:	b1b0      	cbz	r0, 900231b2 <_vfiprintf_r+0x156>
90023184:	9207      	str	r2, [sp, #28]
90023186:	e014      	b.n	900231b2 <_vfiprintf_r+0x156>
90023188:	eba0 0308 	sub.w	r3, r0, r8
9002318c:	fa09 f303 	lsl.w	r3, r9, r3
90023190:	4313      	orrs	r3, r2
90023192:	9304      	str	r3, [sp, #16]
90023194:	46a2      	mov	sl, r4
90023196:	e7d2      	b.n	9002313e <_vfiprintf_r+0xe2>
90023198:	9b03      	ldr	r3, [sp, #12]
9002319a:	1d19      	adds	r1, r3, #4
9002319c:	681b      	ldr	r3, [r3, #0]
9002319e:	9103      	str	r1, [sp, #12]
900231a0:	2b00      	cmp	r3, #0
900231a2:	bfbb      	ittet	lt
900231a4:	425b      	neglt	r3, r3
900231a6:	f042 0202 	orrlt.w	r2, r2, #2
900231aa:	9307      	strge	r3, [sp, #28]
900231ac:	9307      	strlt	r3, [sp, #28]
900231ae:	bfb8      	it	lt
900231b0:	9204      	strlt	r2, [sp, #16]
900231b2:	7823      	ldrb	r3, [r4, #0]
900231b4:	2b2e      	cmp	r3, #46	; 0x2e
900231b6:	d10c      	bne.n	900231d2 <_vfiprintf_r+0x176>
900231b8:	7863      	ldrb	r3, [r4, #1]
900231ba:	2b2a      	cmp	r3, #42	; 0x2a
900231bc:	d135      	bne.n	9002322a <_vfiprintf_r+0x1ce>
900231be:	9b03      	ldr	r3, [sp, #12]
900231c0:	1d1a      	adds	r2, r3, #4
900231c2:	681b      	ldr	r3, [r3, #0]
900231c4:	9203      	str	r2, [sp, #12]
900231c6:	2b00      	cmp	r3, #0
900231c8:	bfb8      	it	lt
900231ca:	f04f 33ff 	movlt.w	r3, #4294967295
900231ce:	3402      	adds	r4, #2
900231d0:	9305      	str	r3, [sp, #20]
900231d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 900232b8 <_vfiprintf_r+0x25c>
900231d6:	7821      	ldrb	r1, [r4, #0]
900231d8:	2203      	movs	r2, #3
900231da:	4650      	mov	r0, sl
900231dc:	f7dd f880 	bl	900002e0 <memchr>
900231e0:	b140      	cbz	r0, 900231f4 <_vfiprintf_r+0x198>
900231e2:	2340      	movs	r3, #64	; 0x40
900231e4:	eba0 000a 	sub.w	r0, r0, sl
900231e8:	fa03 f000 	lsl.w	r0, r3, r0
900231ec:	9b04      	ldr	r3, [sp, #16]
900231ee:	4303      	orrs	r3, r0
900231f0:	3401      	adds	r4, #1
900231f2:	9304      	str	r3, [sp, #16]
900231f4:	f814 1b01 	ldrb.w	r1, [r4], #1
900231f8:	482c      	ldr	r0, [pc, #176]	; (900232ac <_vfiprintf_r+0x250>)
900231fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
900231fe:	2206      	movs	r2, #6
90023200:	f7dd f86e 	bl	900002e0 <memchr>
90023204:	2800      	cmp	r0, #0
90023206:	d03f      	beq.n	90023288 <_vfiprintf_r+0x22c>
90023208:	4b29      	ldr	r3, [pc, #164]	; (900232b0 <_vfiprintf_r+0x254>)
9002320a:	bb1b      	cbnz	r3, 90023254 <_vfiprintf_r+0x1f8>
9002320c:	9b03      	ldr	r3, [sp, #12]
9002320e:	3307      	adds	r3, #7
90023210:	f023 0307 	bic.w	r3, r3, #7
90023214:	3308      	adds	r3, #8
90023216:	9303      	str	r3, [sp, #12]
90023218:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002321a:	443b      	add	r3, r7
9002321c:	9309      	str	r3, [sp, #36]	; 0x24
9002321e:	e767      	b.n	900230f0 <_vfiprintf_r+0x94>
90023220:	fb0c 3202 	mla	r2, ip, r2, r3
90023224:	460c      	mov	r4, r1
90023226:	2001      	movs	r0, #1
90023228:	e7a5      	b.n	90023176 <_vfiprintf_r+0x11a>
9002322a:	2300      	movs	r3, #0
9002322c:	3401      	adds	r4, #1
9002322e:	9305      	str	r3, [sp, #20]
90023230:	4619      	mov	r1, r3
90023232:	f04f 0c0a 	mov.w	ip, #10
90023236:	4620      	mov	r0, r4
90023238:	f810 2b01 	ldrb.w	r2, [r0], #1
9002323c:	3a30      	subs	r2, #48	; 0x30
9002323e:	2a09      	cmp	r2, #9
90023240:	d903      	bls.n	9002324a <_vfiprintf_r+0x1ee>
90023242:	2b00      	cmp	r3, #0
90023244:	d0c5      	beq.n	900231d2 <_vfiprintf_r+0x176>
90023246:	9105      	str	r1, [sp, #20]
90023248:	e7c3      	b.n	900231d2 <_vfiprintf_r+0x176>
9002324a:	fb0c 2101 	mla	r1, ip, r1, r2
9002324e:	4604      	mov	r4, r0
90023250:	2301      	movs	r3, #1
90023252:	e7f0      	b.n	90023236 <_vfiprintf_r+0x1da>
90023254:	ab03      	add	r3, sp, #12
90023256:	9300      	str	r3, [sp, #0]
90023258:	462a      	mov	r2, r5
9002325a:	4b16      	ldr	r3, [pc, #88]	; (900232b4 <_vfiprintf_r+0x258>)
9002325c:	a904      	add	r1, sp, #16
9002325e:	4630      	mov	r0, r6
90023260:	f3af 8000 	nop.w
90023264:	4607      	mov	r7, r0
90023266:	1c78      	adds	r0, r7, #1
90023268:	d1d6      	bne.n	90023218 <_vfiprintf_r+0x1bc>
9002326a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
9002326c:	07d9      	lsls	r1, r3, #31
9002326e:	d405      	bmi.n	9002327c <_vfiprintf_r+0x220>
90023270:	89ab      	ldrh	r3, [r5, #12]
90023272:	059a      	lsls	r2, r3, #22
90023274:	d402      	bmi.n	9002327c <_vfiprintf_r+0x220>
90023276:	6da8      	ldr	r0, [r5, #88]	; 0x58
90023278:	f7ff fdbf 	bl	90022dfa <__retarget_lock_release_recursive>
9002327c:	89ab      	ldrh	r3, [r5, #12]
9002327e:	065b      	lsls	r3, r3, #25
90023280:	f53f af12 	bmi.w	900230a8 <_vfiprintf_r+0x4c>
90023284:	9809      	ldr	r0, [sp, #36]	; 0x24
90023286:	e711      	b.n	900230ac <_vfiprintf_r+0x50>
90023288:	ab03      	add	r3, sp, #12
9002328a:	9300      	str	r3, [sp, #0]
9002328c:	462a      	mov	r2, r5
9002328e:	4b09      	ldr	r3, [pc, #36]	; (900232b4 <_vfiprintf_r+0x258>)
90023290:	a904      	add	r1, sp, #16
90023292:	4630      	mov	r0, r6
90023294:	f000 f880 	bl	90023398 <_printf_i>
90023298:	e7e4      	b.n	90023264 <_vfiprintf_r+0x208>
9002329a:	bf00      	nop
9002329c:	90027044 	.word	0x90027044
900232a0:	90027064 	.word	0x90027064
900232a4:	90027024 	.word	0x90027024
900232a8:	90026fec 	.word	0x90026fec
900232ac:	90026ff6 	.word	0x90026ff6
900232b0:	00000000 	.word	0x00000000
900232b4:	90023037 	.word	0x90023037
900232b8:	90026ff2 	.word	0x90026ff2

900232bc <_printf_common>:
900232bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900232c0:	4616      	mov	r6, r2
900232c2:	4699      	mov	r9, r3
900232c4:	688a      	ldr	r2, [r1, #8]
900232c6:	690b      	ldr	r3, [r1, #16]
900232c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
900232cc:	4293      	cmp	r3, r2
900232ce:	bfb8      	it	lt
900232d0:	4613      	movlt	r3, r2
900232d2:	6033      	str	r3, [r6, #0]
900232d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
900232d8:	4607      	mov	r7, r0
900232da:	460c      	mov	r4, r1
900232dc:	b10a      	cbz	r2, 900232e2 <_printf_common+0x26>
900232de:	3301      	adds	r3, #1
900232e0:	6033      	str	r3, [r6, #0]
900232e2:	6823      	ldr	r3, [r4, #0]
900232e4:	0699      	lsls	r1, r3, #26
900232e6:	bf42      	ittt	mi
900232e8:	6833      	ldrmi	r3, [r6, #0]
900232ea:	3302      	addmi	r3, #2
900232ec:	6033      	strmi	r3, [r6, #0]
900232ee:	6825      	ldr	r5, [r4, #0]
900232f0:	f015 0506 	ands.w	r5, r5, #6
900232f4:	d106      	bne.n	90023304 <_printf_common+0x48>
900232f6:	f104 0a19 	add.w	sl, r4, #25
900232fa:	68e3      	ldr	r3, [r4, #12]
900232fc:	6832      	ldr	r2, [r6, #0]
900232fe:	1a9b      	subs	r3, r3, r2
90023300:	42ab      	cmp	r3, r5
90023302:	dc26      	bgt.n	90023352 <_printf_common+0x96>
90023304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90023308:	1e13      	subs	r3, r2, #0
9002330a:	6822      	ldr	r2, [r4, #0]
9002330c:	bf18      	it	ne
9002330e:	2301      	movne	r3, #1
90023310:	0692      	lsls	r2, r2, #26
90023312:	d42b      	bmi.n	9002336c <_printf_common+0xb0>
90023314:	f104 0243 	add.w	r2, r4, #67	; 0x43
90023318:	4649      	mov	r1, r9
9002331a:	4638      	mov	r0, r7
9002331c:	47c0      	blx	r8
9002331e:	3001      	adds	r0, #1
90023320:	d01e      	beq.n	90023360 <_printf_common+0xa4>
90023322:	6823      	ldr	r3, [r4, #0]
90023324:	68e5      	ldr	r5, [r4, #12]
90023326:	6832      	ldr	r2, [r6, #0]
90023328:	f003 0306 	and.w	r3, r3, #6
9002332c:	2b04      	cmp	r3, #4
9002332e:	bf08      	it	eq
90023330:	1aad      	subeq	r5, r5, r2
90023332:	68a3      	ldr	r3, [r4, #8]
90023334:	6922      	ldr	r2, [r4, #16]
90023336:	bf0c      	ite	eq
90023338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
9002333c:	2500      	movne	r5, #0
9002333e:	4293      	cmp	r3, r2
90023340:	bfc4      	itt	gt
90023342:	1a9b      	subgt	r3, r3, r2
90023344:	18ed      	addgt	r5, r5, r3
90023346:	2600      	movs	r6, #0
90023348:	341a      	adds	r4, #26
9002334a:	42b5      	cmp	r5, r6
9002334c:	d11a      	bne.n	90023384 <_printf_common+0xc8>
9002334e:	2000      	movs	r0, #0
90023350:	e008      	b.n	90023364 <_printf_common+0xa8>
90023352:	2301      	movs	r3, #1
90023354:	4652      	mov	r2, sl
90023356:	4649      	mov	r1, r9
90023358:	4638      	mov	r0, r7
9002335a:	47c0      	blx	r8
9002335c:	3001      	adds	r0, #1
9002335e:	d103      	bne.n	90023368 <_printf_common+0xac>
90023360:	f04f 30ff 	mov.w	r0, #4294967295
90023364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90023368:	3501      	adds	r5, #1
9002336a:	e7c6      	b.n	900232fa <_printf_common+0x3e>
9002336c:	18e1      	adds	r1, r4, r3
9002336e:	1c5a      	adds	r2, r3, #1
90023370:	2030      	movs	r0, #48	; 0x30
90023372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
90023376:	4422      	add	r2, r4
90023378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
9002337c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
90023380:	3302      	adds	r3, #2
90023382:	e7c7      	b.n	90023314 <_printf_common+0x58>
90023384:	2301      	movs	r3, #1
90023386:	4622      	mov	r2, r4
90023388:	4649      	mov	r1, r9
9002338a:	4638      	mov	r0, r7
9002338c:	47c0      	blx	r8
9002338e:	3001      	adds	r0, #1
90023390:	d0e6      	beq.n	90023360 <_printf_common+0xa4>
90023392:	3601      	adds	r6, #1
90023394:	e7d9      	b.n	9002334a <_printf_common+0x8e>
	...

90023398 <_printf_i>:
90023398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9002339c:	7e0f      	ldrb	r7, [r1, #24]
9002339e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900233a0:	2f78      	cmp	r7, #120	; 0x78
900233a2:	4691      	mov	r9, r2
900233a4:	4680      	mov	r8, r0
900233a6:	460c      	mov	r4, r1
900233a8:	469a      	mov	sl, r3
900233aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
900233ae:	d807      	bhi.n	900233c0 <_printf_i+0x28>
900233b0:	2f62      	cmp	r7, #98	; 0x62
900233b2:	d80a      	bhi.n	900233ca <_printf_i+0x32>
900233b4:	2f00      	cmp	r7, #0
900233b6:	f000 80d8 	beq.w	9002356a <_printf_i+0x1d2>
900233ba:	2f58      	cmp	r7, #88	; 0x58
900233bc:	f000 80a3 	beq.w	90023506 <_printf_i+0x16e>
900233c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
900233c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
900233c8:	e03a      	b.n	90023440 <_printf_i+0xa8>
900233ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
900233ce:	2b15      	cmp	r3, #21
900233d0:	d8f6      	bhi.n	900233c0 <_printf_i+0x28>
900233d2:	a101      	add	r1, pc, #4	; (adr r1, 900233d8 <_printf_i+0x40>)
900233d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
900233d8:	90023431 	.word	0x90023431
900233dc:	90023445 	.word	0x90023445
900233e0:	900233c1 	.word	0x900233c1
900233e4:	900233c1 	.word	0x900233c1
900233e8:	900233c1 	.word	0x900233c1
900233ec:	900233c1 	.word	0x900233c1
900233f0:	90023445 	.word	0x90023445
900233f4:	900233c1 	.word	0x900233c1
900233f8:	900233c1 	.word	0x900233c1
900233fc:	900233c1 	.word	0x900233c1
90023400:	900233c1 	.word	0x900233c1
90023404:	90023551 	.word	0x90023551
90023408:	90023475 	.word	0x90023475
9002340c:	90023533 	.word	0x90023533
90023410:	900233c1 	.word	0x900233c1
90023414:	900233c1 	.word	0x900233c1
90023418:	90023573 	.word	0x90023573
9002341c:	900233c1 	.word	0x900233c1
90023420:	90023475 	.word	0x90023475
90023424:	900233c1 	.word	0x900233c1
90023428:	900233c1 	.word	0x900233c1
9002342c:	9002353b 	.word	0x9002353b
90023430:	682b      	ldr	r3, [r5, #0]
90023432:	1d1a      	adds	r2, r3, #4
90023434:	681b      	ldr	r3, [r3, #0]
90023436:	602a      	str	r2, [r5, #0]
90023438:	f104 0542 	add.w	r5, r4, #66	; 0x42
9002343c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90023440:	2301      	movs	r3, #1
90023442:	e0a3      	b.n	9002358c <_printf_i+0x1f4>
90023444:	6820      	ldr	r0, [r4, #0]
90023446:	6829      	ldr	r1, [r5, #0]
90023448:	0606      	lsls	r6, r0, #24
9002344a:	f101 0304 	add.w	r3, r1, #4
9002344e:	d50a      	bpl.n	90023466 <_printf_i+0xce>
90023450:	680e      	ldr	r6, [r1, #0]
90023452:	602b      	str	r3, [r5, #0]
90023454:	2e00      	cmp	r6, #0
90023456:	da03      	bge.n	90023460 <_printf_i+0xc8>
90023458:	232d      	movs	r3, #45	; 0x2d
9002345a:	4276      	negs	r6, r6
9002345c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90023460:	485e      	ldr	r0, [pc, #376]	; (900235dc <_printf_i+0x244>)
90023462:	230a      	movs	r3, #10
90023464:	e019      	b.n	9002349a <_printf_i+0x102>
90023466:	680e      	ldr	r6, [r1, #0]
90023468:	602b      	str	r3, [r5, #0]
9002346a:	f010 0f40 	tst.w	r0, #64	; 0x40
9002346e:	bf18      	it	ne
90023470:	b236      	sxthne	r6, r6
90023472:	e7ef      	b.n	90023454 <_printf_i+0xbc>
90023474:	682b      	ldr	r3, [r5, #0]
90023476:	6820      	ldr	r0, [r4, #0]
90023478:	1d19      	adds	r1, r3, #4
9002347a:	6029      	str	r1, [r5, #0]
9002347c:	0601      	lsls	r1, r0, #24
9002347e:	d501      	bpl.n	90023484 <_printf_i+0xec>
90023480:	681e      	ldr	r6, [r3, #0]
90023482:	e002      	b.n	9002348a <_printf_i+0xf2>
90023484:	0646      	lsls	r6, r0, #25
90023486:	d5fb      	bpl.n	90023480 <_printf_i+0xe8>
90023488:	881e      	ldrh	r6, [r3, #0]
9002348a:	4854      	ldr	r0, [pc, #336]	; (900235dc <_printf_i+0x244>)
9002348c:	2f6f      	cmp	r7, #111	; 0x6f
9002348e:	bf0c      	ite	eq
90023490:	2308      	moveq	r3, #8
90023492:	230a      	movne	r3, #10
90023494:	2100      	movs	r1, #0
90023496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
9002349a:	6865      	ldr	r5, [r4, #4]
9002349c:	60a5      	str	r5, [r4, #8]
9002349e:	2d00      	cmp	r5, #0
900234a0:	bfa2      	ittt	ge
900234a2:	6821      	ldrge	r1, [r4, #0]
900234a4:	f021 0104 	bicge.w	r1, r1, #4
900234a8:	6021      	strge	r1, [r4, #0]
900234aa:	b90e      	cbnz	r6, 900234b0 <_printf_i+0x118>
900234ac:	2d00      	cmp	r5, #0
900234ae:	d04d      	beq.n	9002354c <_printf_i+0x1b4>
900234b0:	4615      	mov	r5, r2
900234b2:	fbb6 f1f3 	udiv	r1, r6, r3
900234b6:	fb03 6711 	mls	r7, r3, r1, r6
900234ba:	5dc7      	ldrb	r7, [r0, r7]
900234bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
900234c0:	4637      	mov	r7, r6
900234c2:	42bb      	cmp	r3, r7
900234c4:	460e      	mov	r6, r1
900234c6:	d9f4      	bls.n	900234b2 <_printf_i+0x11a>
900234c8:	2b08      	cmp	r3, #8
900234ca:	d10b      	bne.n	900234e4 <_printf_i+0x14c>
900234cc:	6823      	ldr	r3, [r4, #0]
900234ce:	07de      	lsls	r6, r3, #31
900234d0:	d508      	bpl.n	900234e4 <_printf_i+0x14c>
900234d2:	6923      	ldr	r3, [r4, #16]
900234d4:	6861      	ldr	r1, [r4, #4]
900234d6:	4299      	cmp	r1, r3
900234d8:	bfde      	ittt	le
900234da:	2330      	movle	r3, #48	; 0x30
900234dc:	f805 3c01 	strble.w	r3, [r5, #-1]
900234e0:	f105 35ff 	addle.w	r5, r5, #4294967295
900234e4:	1b52      	subs	r2, r2, r5
900234e6:	6122      	str	r2, [r4, #16]
900234e8:	f8cd a000 	str.w	sl, [sp]
900234ec:	464b      	mov	r3, r9
900234ee:	aa03      	add	r2, sp, #12
900234f0:	4621      	mov	r1, r4
900234f2:	4640      	mov	r0, r8
900234f4:	f7ff fee2 	bl	900232bc <_printf_common>
900234f8:	3001      	adds	r0, #1
900234fa:	d14c      	bne.n	90023596 <_printf_i+0x1fe>
900234fc:	f04f 30ff 	mov.w	r0, #4294967295
90023500:	b004      	add	sp, #16
90023502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90023506:	4835      	ldr	r0, [pc, #212]	; (900235dc <_printf_i+0x244>)
90023508:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
9002350c:	6829      	ldr	r1, [r5, #0]
9002350e:	6823      	ldr	r3, [r4, #0]
90023510:	f851 6b04 	ldr.w	r6, [r1], #4
90023514:	6029      	str	r1, [r5, #0]
90023516:	061d      	lsls	r5, r3, #24
90023518:	d514      	bpl.n	90023544 <_printf_i+0x1ac>
9002351a:	07df      	lsls	r7, r3, #31
9002351c:	bf44      	itt	mi
9002351e:	f043 0320 	orrmi.w	r3, r3, #32
90023522:	6023      	strmi	r3, [r4, #0]
90023524:	b91e      	cbnz	r6, 9002352e <_printf_i+0x196>
90023526:	6823      	ldr	r3, [r4, #0]
90023528:	f023 0320 	bic.w	r3, r3, #32
9002352c:	6023      	str	r3, [r4, #0]
9002352e:	2310      	movs	r3, #16
90023530:	e7b0      	b.n	90023494 <_printf_i+0xfc>
90023532:	6823      	ldr	r3, [r4, #0]
90023534:	f043 0320 	orr.w	r3, r3, #32
90023538:	6023      	str	r3, [r4, #0]
9002353a:	2378      	movs	r3, #120	; 0x78
9002353c:	4828      	ldr	r0, [pc, #160]	; (900235e0 <_printf_i+0x248>)
9002353e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
90023542:	e7e3      	b.n	9002350c <_printf_i+0x174>
90023544:	0659      	lsls	r1, r3, #25
90023546:	bf48      	it	mi
90023548:	b2b6      	uxthmi	r6, r6
9002354a:	e7e6      	b.n	9002351a <_printf_i+0x182>
9002354c:	4615      	mov	r5, r2
9002354e:	e7bb      	b.n	900234c8 <_printf_i+0x130>
90023550:	682b      	ldr	r3, [r5, #0]
90023552:	6826      	ldr	r6, [r4, #0]
90023554:	6961      	ldr	r1, [r4, #20]
90023556:	1d18      	adds	r0, r3, #4
90023558:	6028      	str	r0, [r5, #0]
9002355a:	0635      	lsls	r5, r6, #24
9002355c:	681b      	ldr	r3, [r3, #0]
9002355e:	d501      	bpl.n	90023564 <_printf_i+0x1cc>
90023560:	6019      	str	r1, [r3, #0]
90023562:	e002      	b.n	9002356a <_printf_i+0x1d2>
90023564:	0670      	lsls	r0, r6, #25
90023566:	d5fb      	bpl.n	90023560 <_printf_i+0x1c8>
90023568:	8019      	strh	r1, [r3, #0]
9002356a:	2300      	movs	r3, #0
9002356c:	6123      	str	r3, [r4, #16]
9002356e:	4615      	mov	r5, r2
90023570:	e7ba      	b.n	900234e8 <_printf_i+0x150>
90023572:	682b      	ldr	r3, [r5, #0]
90023574:	1d1a      	adds	r2, r3, #4
90023576:	602a      	str	r2, [r5, #0]
90023578:	681d      	ldr	r5, [r3, #0]
9002357a:	6862      	ldr	r2, [r4, #4]
9002357c:	2100      	movs	r1, #0
9002357e:	4628      	mov	r0, r5
90023580:	f7dc feae 	bl	900002e0 <memchr>
90023584:	b108      	cbz	r0, 9002358a <_printf_i+0x1f2>
90023586:	1b40      	subs	r0, r0, r5
90023588:	6060      	str	r0, [r4, #4]
9002358a:	6863      	ldr	r3, [r4, #4]
9002358c:	6123      	str	r3, [r4, #16]
9002358e:	2300      	movs	r3, #0
90023590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90023594:	e7a8      	b.n	900234e8 <_printf_i+0x150>
90023596:	6923      	ldr	r3, [r4, #16]
90023598:	462a      	mov	r2, r5
9002359a:	4649      	mov	r1, r9
9002359c:	4640      	mov	r0, r8
9002359e:	47d0      	blx	sl
900235a0:	3001      	adds	r0, #1
900235a2:	d0ab      	beq.n	900234fc <_printf_i+0x164>
900235a4:	6823      	ldr	r3, [r4, #0]
900235a6:	079b      	lsls	r3, r3, #30
900235a8:	d413      	bmi.n	900235d2 <_printf_i+0x23a>
900235aa:	68e0      	ldr	r0, [r4, #12]
900235ac:	9b03      	ldr	r3, [sp, #12]
900235ae:	4298      	cmp	r0, r3
900235b0:	bfb8      	it	lt
900235b2:	4618      	movlt	r0, r3
900235b4:	e7a4      	b.n	90023500 <_printf_i+0x168>
900235b6:	2301      	movs	r3, #1
900235b8:	4632      	mov	r2, r6
900235ba:	4649      	mov	r1, r9
900235bc:	4640      	mov	r0, r8
900235be:	47d0      	blx	sl
900235c0:	3001      	adds	r0, #1
900235c2:	d09b      	beq.n	900234fc <_printf_i+0x164>
900235c4:	3501      	adds	r5, #1
900235c6:	68e3      	ldr	r3, [r4, #12]
900235c8:	9903      	ldr	r1, [sp, #12]
900235ca:	1a5b      	subs	r3, r3, r1
900235cc:	42ab      	cmp	r3, r5
900235ce:	dcf2      	bgt.n	900235b6 <_printf_i+0x21e>
900235d0:	e7eb      	b.n	900235aa <_printf_i+0x212>
900235d2:	2500      	movs	r5, #0
900235d4:	f104 0619 	add.w	r6, r4, #25
900235d8:	e7f5      	b.n	900235c6 <_printf_i+0x22e>
900235da:	bf00      	nop
900235dc:	90026ffd 	.word	0x90026ffd
900235e0:	9002700e 	.word	0x9002700e

900235e4 <_sbrk_r>:
900235e4:	b538      	push	{r3, r4, r5, lr}
900235e6:	4d06      	ldr	r5, [pc, #24]	; (90023600 <_sbrk_r+0x1c>)
900235e8:	2300      	movs	r3, #0
900235ea:	4604      	mov	r4, r0
900235ec:	4608      	mov	r0, r1
900235ee:	602b      	str	r3, [r5, #0]
900235f0:	f7e1 faac 	bl	90004b4c <_sbrk>
900235f4:	1c43      	adds	r3, r0, #1
900235f6:	d102      	bne.n	900235fe <_sbrk_r+0x1a>
900235f8:	682b      	ldr	r3, [r5, #0]
900235fa:	b103      	cbz	r3, 900235fe <_sbrk_r+0x1a>
900235fc:	6023      	str	r3, [r4, #0]
900235fe:	bd38      	pop	{r3, r4, r5, pc}
90023600:	2402650c 	.word	0x2402650c

90023604 <_raise_r>:
90023604:	291f      	cmp	r1, #31
90023606:	b538      	push	{r3, r4, r5, lr}
90023608:	4604      	mov	r4, r0
9002360a:	460d      	mov	r5, r1
9002360c:	d904      	bls.n	90023618 <_raise_r+0x14>
9002360e:	2316      	movs	r3, #22
90023610:	6003      	str	r3, [r0, #0]
90023612:	f04f 30ff 	mov.w	r0, #4294967295
90023616:	bd38      	pop	{r3, r4, r5, pc}
90023618:	6c42      	ldr	r2, [r0, #68]	; 0x44
9002361a:	b112      	cbz	r2, 90023622 <_raise_r+0x1e>
9002361c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
90023620:	b94b      	cbnz	r3, 90023636 <_raise_r+0x32>
90023622:	4620      	mov	r0, r4
90023624:	f000 f830 	bl	90023688 <_getpid_r>
90023628:	462a      	mov	r2, r5
9002362a:	4601      	mov	r1, r0
9002362c:	4620      	mov	r0, r4
9002362e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90023632:	f000 b817 	b.w	90023664 <_kill_r>
90023636:	2b01      	cmp	r3, #1
90023638:	d00a      	beq.n	90023650 <_raise_r+0x4c>
9002363a:	1c59      	adds	r1, r3, #1
9002363c:	d103      	bne.n	90023646 <_raise_r+0x42>
9002363e:	2316      	movs	r3, #22
90023640:	6003      	str	r3, [r0, #0]
90023642:	2001      	movs	r0, #1
90023644:	e7e7      	b.n	90023616 <_raise_r+0x12>
90023646:	2400      	movs	r4, #0
90023648:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
9002364c:	4628      	mov	r0, r5
9002364e:	4798      	blx	r3
90023650:	2000      	movs	r0, #0
90023652:	e7e0      	b.n	90023616 <_raise_r+0x12>

90023654 <raise>:
90023654:	4b02      	ldr	r3, [pc, #8]	; (90023660 <raise+0xc>)
90023656:	4601      	mov	r1, r0
90023658:	6818      	ldr	r0, [r3, #0]
9002365a:	f7ff bfd3 	b.w	90023604 <_raise_r>
9002365e:	bf00      	nop
90023660:	240000e0 	.word	0x240000e0

90023664 <_kill_r>:
90023664:	b538      	push	{r3, r4, r5, lr}
90023666:	4d07      	ldr	r5, [pc, #28]	; (90023684 <_kill_r+0x20>)
90023668:	2300      	movs	r3, #0
9002366a:	4604      	mov	r4, r0
9002366c:	4608      	mov	r0, r1
9002366e:	4611      	mov	r1, r2
90023670:	602b      	str	r3, [r5, #0]
90023672:	f7e1 fa31 	bl	90004ad8 <_kill>
90023676:	1c43      	adds	r3, r0, #1
90023678:	d102      	bne.n	90023680 <_kill_r+0x1c>
9002367a:	682b      	ldr	r3, [r5, #0]
9002367c:	b103      	cbz	r3, 90023680 <_kill_r+0x1c>
9002367e:	6023      	str	r3, [r4, #0]
90023680:	bd38      	pop	{r3, r4, r5, pc}
90023682:	bf00      	nop
90023684:	2402650c 	.word	0x2402650c

90023688 <_getpid_r>:
90023688:	f7e1 ba24 	b.w	90004ad4 <_getpid>

9002368c <strncmp>:
9002368c:	b510      	push	{r4, lr}
9002368e:	b17a      	cbz	r2, 900236b0 <strncmp+0x24>
90023690:	4603      	mov	r3, r0
90023692:	3901      	subs	r1, #1
90023694:	1884      	adds	r4, r0, r2
90023696:	f813 0b01 	ldrb.w	r0, [r3], #1
9002369a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
9002369e:	4290      	cmp	r0, r2
900236a0:	d101      	bne.n	900236a6 <strncmp+0x1a>
900236a2:	42a3      	cmp	r3, r4
900236a4:	d101      	bne.n	900236aa <strncmp+0x1e>
900236a6:	1a80      	subs	r0, r0, r2
900236a8:	bd10      	pop	{r4, pc}
900236aa:	2800      	cmp	r0, #0
900236ac:	d1f3      	bne.n	90023696 <strncmp+0xa>
900236ae:	e7fa      	b.n	900236a6 <strncmp+0x1a>
900236b0:	4610      	mov	r0, r2
900236b2:	e7f9      	b.n	900236a8 <strncmp+0x1c>

900236b4 <__swbuf_r>:
900236b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900236b6:	460e      	mov	r6, r1
900236b8:	4614      	mov	r4, r2
900236ba:	4605      	mov	r5, r0
900236bc:	b118      	cbz	r0, 900236c6 <__swbuf_r+0x12>
900236be:	6983      	ldr	r3, [r0, #24]
900236c0:	b90b      	cbnz	r3, 900236c6 <__swbuf_r+0x12>
900236c2:	f000 fa33 	bl	90023b2c <__sinit>
900236c6:	4b21      	ldr	r3, [pc, #132]	; (9002374c <__swbuf_r+0x98>)
900236c8:	429c      	cmp	r4, r3
900236ca:	d12b      	bne.n	90023724 <__swbuf_r+0x70>
900236cc:	686c      	ldr	r4, [r5, #4]
900236ce:	69a3      	ldr	r3, [r4, #24]
900236d0:	60a3      	str	r3, [r4, #8]
900236d2:	89a3      	ldrh	r3, [r4, #12]
900236d4:	071a      	lsls	r2, r3, #28
900236d6:	d52f      	bpl.n	90023738 <__swbuf_r+0x84>
900236d8:	6923      	ldr	r3, [r4, #16]
900236da:	b36b      	cbz	r3, 90023738 <__swbuf_r+0x84>
900236dc:	6923      	ldr	r3, [r4, #16]
900236de:	6820      	ldr	r0, [r4, #0]
900236e0:	1ac0      	subs	r0, r0, r3
900236e2:	6963      	ldr	r3, [r4, #20]
900236e4:	b2f6      	uxtb	r6, r6
900236e6:	4283      	cmp	r3, r0
900236e8:	4637      	mov	r7, r6
900236ea:	dc04      	bgt.n	900236f6 <__swbuf_r+0x42>
900236ec:	4621      	mov	r1, r4
900236ee:	4628      	mov	r0, r5
900236f0:	f000 f988 	bl	90023a04 <_fflush_r>
900236f4:	bb30      	cbnz	r0, 90023744 <__swbuf_r+0x90>
900236f6:	68a3      	ldr	r3, [r4, #8]
900236f8:	3b01      	subs	r3, #1
900236fa:	60a3      	str	r3, [r4, #8]
900236fc:	6823      	ldr	r3, [r4, #0]
900236fe:	1c5a      	adds	r2, r3, #1
90023700:	6022      	str	r2, [r4, #0]
90023702:	701e      	strb	r6, [r3, #0]
90023704:	6963      	ldr	r3, [r4, #20]
90023706:	3001      	adds	r0, #1
90023708:	4283      	cmp	r3, r0
9002370a:	d004      	beq.n	90023716 <__swbuf_r+0x62>
9002370c:	89a3      	ldrh	r3, [r4, #12]
9002370e:	07db      	lsls	r3, r3, #31
90023710:	d506      	bpl.n	90023720 <__swbuf_r+0x6c>
90023712:	2e0a      	cmp	r6, #10
90023714:	d104      	bne.n	90023720 <__swbuf_r+0x6c>
90023716:	4621      	mov	r1, r4
90023718:	4628      	mov	r0, r5
9002371a:	f000 f973 	bl	90023a04 <_fflush_r>
9002371e:	b988      	cbnz	r0, 90023744 <__swbuf_r+0x90>
90023720:	4638      	mov	r0, r7
90023722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90023724:	4b0a      	ldr	r3, [pc, #40]	; (90023750 <__swbuf_r+0x9c>)
90023726:	429c      	cmp	r4, r3
90023728:	d101      	bne.n	9002372e <__swbuf_r+0x7a>
9002372a:	68ac      	ldr	r4, [r5, #8]
9002372c:	e7cf      	b.n	900236ce <__swbuf_r+0x1a>
9002372e:	4b09      	ldr	r3, [pc, #36]	; (90023754 <__swbuf_r+0xa0>)
90023730:	429c      	cmp	r4, r3
90023732:	bf08      	it	eq
90023734:	68ec      	ldreq	r4, [r5, #12]
90023736:	e7ca      	b.n	900236ce <__swbuf_r+0x1a>
90023738:	4621      	mov	r1, r4
9002373a:	4628      	mov	r0, r5
9002373c:	f000 f80c 	bl	90023758 <__swsetup_r>
90023740:	2800      	cmp	r0, #0
90023742:	d0cb      	beq.n	900236dc <__swbuf_r+0x28>
90023744:	f04f 37ff 	mov.w	r7, #4294967295
90023748:	e7ea      	b.n	90023720 <__swbuf_r+0x6c>
9002374a:	bf00      	nop
9002374c:	90027044 	.word	0x90027044
90023750:	90027064 	.word	0x90027064
90023754:	90027024 	.word	0x90027024

90023758 <__swsetup_r>:
90023758:	4b32      	ldr	r3, [pc, #200]	; (90023824 <__swsetup_r+0xcc>)
9002375a:	b570      	push	{r4, r5, r6, lr}
9002375c:	681d      	ldr	r5, [r3, #0]
9002375e:	4606      	mov	r6, r0
90023760:	460c      	mov	r4, r1
90023762:	b125      	cbz	r5, 9002376e <__swsetup_r+0x16>
90023764:	69ab      	ldr	r3, [r5, #24]
90023766:	b913      	cbnz	r3, 9002376e <__swsetup_r+0x16>
90023768:	4628      	mov	r0, r5
9002376a:	f000 f9df 	bl	90023b2c <__sinit>
9002376e:	4b2e      	ldr	r3, [pc, #184]	; (90023828 <__swsetup_r+0xd0>)
90023770:	429c      	cmp	r4, r3
90023772:	d10f      	bne.n	90023794 <__swsetup_r+0x3c>
90023774:	686c      	ldr	r4, [r5, #4]
90023776:	89a3      	ldrh	r3, [r4, #12]
90023778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9002377c:	0719      	lsls	r1, r3, #28
9002377e:	d42c      	bmi.n	900237da <__swsetup_r+0x82>
90023780:	06dd      	lsls	r5, r3, #27
90023782:	d411      	bmi.n	900237a8 <__swsetup_r+0x50>
90023784:	2309      	movs	r3, #9
90023786:	6033      	str	r3, [r6, #0]
90023788:	f042 0340 	orr.w	r3, r2, #64	; 0x40
9002378c:	81a3      	strh	r3, [r4, #12]
9002378e:	f04f 30ff 	mov.w	r0, #4294967295
90023792:	e03e      	b.n	90023812 <__swsetup_r+0xba>
90023794:	4b25      	ldr	r3, [pc, #148]	; (9002382c <__swsetup_r+0xd4>)
90023796:	429c      	cmp	r4, r3
90023798:	d101      	bne.n	9002379e <__swsetup_r+0x46>
9002379a:	68ac      	ldr	r4, [r5, #8]
9002379c:	e7eb      	b.n	90023776 <__swsetup_r+0x1e>
9002379e:	4b24      	ldr	r3, [pc, #144]	; (90023830 <__swsetup_r+0xd8>)
900237a0:	429c      	cmp	r4, r3
900237a2:	bf08      	it	eq
900237a4:	68ec      	ldreq	r4, [r5, #12]
900237a6:	e7e6      	b.n	90023776 <__swsetup_r+0x1e>
900237a8:	0758      	lsls	r0, r3, #29
900237aa:	d512      	bpl.n	900237d2 <__swsetup_r+0x7a>
900237ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
900237ae:	b141      	cbz	r1, 900237c2 <__swsetup_r+0x6a>
900237b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
900237b4:	4299      	cmp	r1, r3
900237b6:	d002      	beq.n	900237be <__swsetup_r+0x66>
900237b8:	4630      	mov	r0, r6
900237ba:	f7ff fb45 	bl	90022e48 <_free_r>
900237be:	2300      	movs	r3, #0
900237c0:	6363      	str	r3, [r4, #52]	; 0x34
900237c2:	89a3      	ldrh	r3, [r4, #12]
900237c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
900237c8:	81a3      	strh	r3, [r4, #12]
900237ca:	2300      	movs	r3, #0
900237cc:	6063      	str	r3, [r4, #4]
900237ce:	6923      	ldr	r3, [r4, #16]
900237d0:	6023      	str	r3, [r4, #0]
900237d2:	89a3      	ldrh	r3, [r4, #12]
900237d4:	f043 0308 	orr.w	r3, r3, #8
900237d8:	81a3      	strh	r3, [r4, #12]
900237da:	6923      	ldr	r3, [r4, #16]
900237dc:	b94b      	cbnz	r3, 900237f2 <__swsetup_r+0x9a>
900237de:	89a3      	ldrh	r3, [r4, #12]
900237e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
900237e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
900237e8:	d003      	beq.n	900237f2 <__swsetup_r+0x9a>
900237ea:	4621      	mov	r1, r4
900237ec:	4630      	mov	r0, r6
900237ee:	f000 fa5f 	bl	90023cb0 <__smakebuf_r>
900237f2:	89a0      	ldrh	r0, [r4, #12]
900237f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
900237f8:	f010 0301 	ands.w	r3, r0, #1
900237fc:	d00a      	beq.n	90023814 <__swsetup_r+0xbc>
900237fe:	2300      	movs	r3, #0
90023800:	60a3      	str	r3, [r4, #8]
90023802:	6963      	ldr	r3, [r4, #20]
90023804:	425b      	negs	r3, r3
90023806:	61a3      	str	r3, [r4, #24]
90023808:	6923      	ldr	r3, [r4, #16]
9002380a:	b943      	cbnz	r3, 9002381e <__swsetup_r+0xc6>
9002380c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90023810:	d1ba      	bne.n	90023788 <__swsetup_r+0x30>
90023812:	bd70      	pop	{r4, r5, r6, pc}
90023814:	0781      	lsls	r1, r0, #30
90023816:	bf58      	it	pl
90023818:	6963      	ldrpl	r3, [r4, #20]
9002381a:	60a3      	str	r3, [r4, #8]
9002381c:	e7f4      	b.n	90023808 <__swsetup_r+0xb0>
9002381e:	2000      	movs	r0, #0
90023820:	e7f7      	b.n	90023812 <__swsetup_r+0xba>
90023822:	bf00      	nop
90023824:	240000e0 	.word	0x240000e0
90023828:	90027044 	.word	0x90027044
9002382c:	90027064 	.word	0x90027064
90023830:	90027024 	.word	0x90027024

90023834 <__register_exitproc>:
90023834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90023838:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 900238f4 <__register_exitproc+0xc0>
9002383c:	4606      	mov	r6, r0
9002383e:	f8d8 0000 	ldr.w	r0, [r8]
90023842:	461f      	mov	r7, r3
90023844:	460d      	mov	r5, r1
90023846:	4691      	mov	r9, r2
90023848:	f7ff fad5 	bl	90022df6 <__retarget_lock_acquire_recursive>
9002384c:	4b25      	ldr	r3, [pc, #148]	; (900238e4 <__register_exitproc+0xb0>)
9002384e:	681c      	ldr	r4, [r3, #0]
90023850:	b934      	cbnz	r4, 90023860 <__register_exitproc+0x2c>
90023852:	4c25      	ldr	r4, [pc, #148]	; (900238e8 <__register_exitproc+0xb4>)
90023854:	601c      	str	r4, [r3, #0]
90023856:	4b25      	ldr	r3, [pc, #148]	; (900238ec <__register_exitproc+0xb8>)
90023858:	b113      	cbz	r3, 90023860 <__register_exitproc+0x2c>
9002385a:	681b      	ldr	r3, [r3, #0]
9002385c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
90023860:	6863      	ldr	r3, [r4, #4]
90023862:	2b1f      	cmp	r3, #31
90023864:	dd07      	ble.n	90023876 <__register_exitproc+0x42>
90023866:	f8d8 0000 	ldr.w	r0, [r8]
9002386a:	f7ff fac6 	bl	90022dfa <__retarget_lock_release_recursive>
9002386e:	f04f 30ff 	mov.w	r0, #4294967295
90023872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90023876:	b34e      	cbz	r6, 900238cc <__register_exitproc+0x98>
90023878:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9002387c:	b988      	cbnz	r0, 900238a2 <__register_exitproc+0x6e>
9002387e:	4b1c      	ldr	r3, [pc, #112]	; (900238f0 <__register_exitproc+0xbc>)
90023880:	b923      	cbnz	r3, 9002388c <__register_exitproc+0x58>
90023882:	f8d8 0000 	ldr.w	r0, [r8]
90023886:	f7ff fab7 	bl	90022df8 <__retarget_lock_release>
9002388a:	e7f0      	b.n	9002386e <__register_exitproc+0x3a>
9002388c:	f44f 7084 	mov.w	r0, #264	; 0x108
90023890:	f7ff fab4 	bl	90022dfc <malloc>
90023894:	2800      	cmp	r0, #0
90023896:	d0f4      	beq.n	90023882 <__register_exitproc+0x4e>
90023898:	2300      	movs	r3, #0
9002389a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
9002389e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
900238a2:	6863      	ldr	r3, [r4, #4]
900238a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
900238a8:	2201      	movs	r2, #1
900238aa:	409a      	lsls	r2, r3
900238ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
900238b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
900238b4:	4313      	orrs	r3, r2
900238b6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
900238ba:	2e02      	cmp	r6, #2
900238bc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
900238c0:	bf02      	ittt	eq
900238c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
900238c6:	4313      	orreq	r3, r2
900238c8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
900238cc:	6863      	ldr	r3, [r4, #4]
900238ce:	f8d8 0000 	ldr.w	r0, [r8]
900238d2:	1c5a      	adds	r2, r3, #1
900238d4:	3302      	adds	r3, #2
900238d6:	6062      	str	r2, [r4, #4]
900238d8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
900238dc:	f7ff fa8d 	bl	90022dfa <__retarget_lock_release_recursive>
900238e0:	2000      	movs	r0, #0
900238e2:	e7c6      	b.n	90023872 <__register_exitproc+0x3e>
900238e4:	24026508 	.word	0x24026508
900238e8:	2402647c 	.word	0x2402647c
900238ec:	90027020 	.word	0x90027020
900238f0:	90022dfd 	.word	0x90022dfd
900238f4:	24000144 	.word	0x24000144

900238f8 <__sflush_r>:
900238f8:	898a      	ldrh	r2, [r1, #12]
900238fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900238fe:	4605      	mov	r5, r0
90023900:	0710      	lsls	r0, r2, #28
90023902:	460c      	mov	r4, r1
90023904:	d458      	bmi.n	900239b8 <__sflush_r+0xc0>
90023906:	684b      	ldr	r3, [r1, #4]
90023908:	2b00      	cmp	r3, #0
9002390a:	dc05      	bgt.n	90023918 <__sflush_r+0x20>
9002390c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9002390e:	2b00      	cmp	r3, #0
90023910:	dc02      	bgt.n	90023918 <__sflush_r+0x20>
90023912:	2000      	movs	r0, #0
90023914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90023918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9002391a:	2e00      	cmp	r6, #0
9002391c:	d0f9      	beq.n	90023912 <__sflush_r+0x1a>
9002391e:	2300      	movs	r3, #0
90023920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90023924:	682f      	ldr	r7, [r5, #0]
90023926:	602b      	str	r3, [r5, #0]
90023928:	d032      	beq.n	90023990 <__sflush_r+0x98>
9002392a:	6d60      	ldr	r0, [r4, #84]	; 0x54
9002392c:	89a3      	ldrh	r3, [r4, #12]
9002392e:	075a      	lsls	r2, r3, #29
90023930:	d505      	bpl.n	9002393e <__sflush_r+0x46>
90023932:	6863      	ldr	r3, [r4, #4]
90023934:	1ac0      	subs	r0, r0, r3
90023936:	6b63      	ldr	r3, [r4, #52]	; 0x34
90023938:	b10b      	cbz	r3, 9002393e <__sflush_r+0x46>
9002393a:	6c23      	ldr	r3, [r4, #64]	; 0x40
9002393c:	1ac0      	subs	r0, r0, r3
9002393e:	2300      	movs	r3, #0
90023940:	4602      	mov	r2, r0
90023942:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90023944:	6a21      	ldr	r1, [r4, #32]
90023946:	4628      	mov	r0, r5
90023948:	47b0      	blx	r6
9002394a:	1c43      	adds	r3, r0, #1
9002394c:	89a3      	ldrh	r3, [r4, #12]
9002394e:	d106      	bne.n	9002395e <__sflush_r+0x66>
90023950:	6829      	ldr	r1, [r5, #0]
90023952:	291d      	cmp	r1, #29
90023954:	d82c      	bhi.n	900239b0 <__sflush_r+0xb8>
90023956:	4a2a      	ldr	r2, [pc, #168]	; (90023a00 <__sflush_r+0x108>)
90023958:	40ca      	lsrs	r2, r1
9002395a:	07d6      	lsls	r6, r2, #31
9002395c:	d528      	bpl.n	900239b0 <__sflush_r+0xb8>
9002395e:	2200      	movs	r2, #0
90023960:	6062      	str	r2, [r4, #4]
90023962:	04d9      	lsls	r1, r3, #19
90023964:	6922      	ldr	r2, [r4, #16]
90023966:	6022      	str	r2, [r4, #0]
90023968:	d504      	bpl.n	90023974 <__sflush_r+0x7c>
9002396a:	1c42      	adds	r2, r0, #1
9002396c:	d101      	bne.n	90023972 <__sflush_r+0x7a>
9002396e:	682b      	ldr	r3, [r5, #0]
90023970:	b903      	cbnz	r3, 90023974 <__sflush_r+0x7c>
90023972:	6560      	str	r0, [r4, #84]	; 0x54
90023974:	6b61      	ldr	r1, [r4, #52]	; 0x34
90023976:	602f      	str	r7, [r5, #0]
90023978:	2900      	cmp	r1, #0
9002397a:	d0ca      	beq.n	90023912 <__sflush_r+0x1a>
9002397c:	f104 0344 	add.w	r3, r4, #68	; 0x44
90023980:	4299      	cmp	r1, r3
90023982:	d002      	beq.n	9002398a <__sflush_r+0x92>
90023984:	4628      	mov	r0, r5
90023986:	f7ff fa5f 	bl	90022e48 <_free_r>
9002398a:	2000      	movs	r0, #0
9002398c:	6360      	str	r0, [r4, #52]	; 0x34
9002398e:	e7c1      	b.n	90023914 <__sflush_r+0x1c>
90023990:	6a21      	ldr	r1, [r4, #32]
90023992:	2301      	movs	r3, #1
90023994:	4628      	mov	r0, r5
90023996:	47b0      	blx	r6
90023998:	1c41      	adds	r1, r0, #1
9002399a:	d1c7      	bne.n	9002392c <__sflush_r+0x34>
9002399c:	682b      	ldr	r3, [r5, #0]
9002399e:	2b00      	cmp	r3, #0
900239a0:	d0c4      	beq.n	9002392c <__sflush_r+0x34>
900239a2:	2b1d      	cmp	r3, #29
900239a4:	d001      	beq.n	900239aa <__sflush_r+0xb2>
900239a6:	2b16      	cmp	r3, #22
900239a8:	d101      	bne.n	900239ae <__sflush_r+0xb6>
900239aa:	602f      	str	r7, [r5, #0]
900239ac:	e7b1      	b.n	90023912 <__sflush_r+0x1a>
900239ae:	89a3      	ldrh	r3, [r4, #12]
900239b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900239b4:	81a3      	strh	r3, [r4, #12]
900239b6:	e7ad      	b.n	90023914 <__sflush_r+0x1c>
900239b8:	690f      	ldr	r7, [r1, #16]
900239ba:	2f00      	cmp	r7, #0
900239bc:	d0a9      	beq.n	90023912 <__sflush_r+0x1a>
900239be:	0793      	lsls	r3, r2, #30
900239c0:	680e      	ldr	r6, [r1, #0]
900239c2:	bf08      	it	eq
900239c4:	694b      	ldreq	r3, [r1, #20]
900239c6:	600f      	str	r7, [r1, #0]
900239c8:	bf18      	it	ne
900239ca:	2300      	movne	r3, #0
900239cc:	eba6 0807 	sub.w	r8, r6, r7
900239d0:	608b      	str	r3, [r1, #8]
900239d2:	f1b8 0f00 	cmp.w	r8, #0
900239d6:	dd9c      	ble.n	90023912 <__sflush_r+0x1a>
900239d8:	6a21      	ldr	r1, [r4, #32]
900239da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
900239dc:	4643      	mov	r3, r8
900239de:	463a      	mov	r2, r7
900239e0:	4628      	mov	r0, r5
900239e2:	47b0      	blx	r6
900239e4:	2800      	cmp	r0, #0
900239e6:	dc06      	bgt.n	900239f6 <__sflush_r+0xfe>
900239e8:	89a3      	ldrh	r3, [r4, #12]
900239ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900239ee:	81a3      	strh	r3, [r4, #12]
900239f0:	f04f 30ff 	mov.w	r0, #4294967295
900239f4:	e78e      	b.n	90023914 <__sflush_r+0x1c>
900239f6:	4407      	add	r7, r0
900239f8:	eba8 0800 	sub.w	r8, r8, r0
900239fc:	e7e9      	b.n	900239d2 <__sflush_r+0xda>
900239fe:	bf00      	nop
90023a00:	20400001 	.word	0x20400001

90023a04 <_fflush_r>:
90023a04:	b538      	push	{r3, r4, r5, lr}
90023a06:	690b      	ldr	r3, [r1, #16]
90023a08:	4605      	mov	r5, r0
90023a0a:	460c      	mov	r4, r1
90023a0c:	b913      	cbnz	r3, 90023a14 <_fflush_r+0x10>
90023a0e:	2500      	movs	r5, #0
90023a10:	4628      	mov	r0, r5
90023a12:	bd38      	pop	{r3, r4, r5, pc}
90023a14:	b118      	cbz	r0, 90023a1e <_fflush_r+0x1a>
90023a16:	6983      	ldr	r3, [r0, #24]
90023a18:	b90b      	cbnz	r3, 90023a1e <_fflush_r+0x1a>
90023a1a:	f000 f887 	bl	90023b2c <__sinit>
90023a1e:	4b14      	ldr	r3, [pc, #80]	; (90023a70 <_fflush_r+0x6c>)
90023a20:	429c      	cmp	r4, r3
90023a22:	d11b      	bne.n	90023a5c <_fflush_r+0x58>
90023a24:	686c      	ldr	r4, [r5, #4]
90023a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90023a2a:	2b00      	cmp	r3, #0
90023a2c:	d0ef      	beq.n	90023a0e <_fflush_r+0xa>
90023a2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
90023a30:	07d0      	lsls	r0, r2, #31
90023a32:	d404      	bmi.n	90023a3e <_fflush_r+0x3a>
90023a34:	0599      	lsls	r1, r3, #22
90023a36:	d402      	bmi.n	90023a3e <_fflush_r+0x3a>
90023a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
90023a3a:	f7ff f9dc 	bl	90022df6 <__retarget_lock_acquire_recursive>
90023a3e:	4628      	mov	r0, r5
90023a40:	4621      	mov	r1, r4
90023a42:	f7ff ff59 	bl	900238f8 <__sflush_r>
90023a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
90023a48:	07da      	lsls	r2, r3, #31
90023a4a:	4605      	mov	r5, r0
90023a4c:	d4e0      	bmi.n	90023a10 <_fflush_r+0xc>
90023a4e:	89a3      	ldrh	r3, [r4, #12]
90023a50:	059b      	lsls	r3, r3, #22
90023a52:	d4dd      	bmi.n	90023a10 <_fflush_r+0xc>
90023a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
90023a56:	f7ff f9d0 	bl	90022dfa <__retarget_lock_release_recursive>
90023a5a:	e7d9      	b.n	90023a10 <_fflush_r+0xc>
90023a5c:	4b05      	ldr	r3, [pc, #20]	; (90023a74 <_fflush_r+0x70>)
90023a5e:	429c      	cmp	r4, r3
90023a60:	d101      	bne.n	90023a66 <_fflush_r+0x62>
90023a62:	68ac      	ldr	r4, [r5, #8]
90023a64:	e7df      	b.n	90023a26 <_fflush_r+0x22>
90023a66:	4b04      	ldr	r3, [pc, #16]	; (90023a78 <_fflush_r+0x74>)
90023a68:	429c      	cmp	r4, r3
90023a6a:	bf08      	it	eq
90023a6c:	68ec      	ldreq	r4, [r5, #12]
90023a6e:	e7da      	b.n	90023a26 <_fflush_r+0x22>
90023a70:	90027044 	.word	0x90027044
90023a74:	90027064 	.word	0x90027064
90023a78:	90027024 	.word	0x90027024

90023a7c <std>:
90023a7c:	2300      	movs	r3, #0
90023a7e:	b510      	push	{r4, lr}
90023a80:	4604      	mov	r4, r0
90023a82:	e9c0 3300 	strd	r3, r3, [r0]
90023a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
90023a8a:	6083      	str	r3, [r0, #8]
90023a8c:	8181      	strh	r1, [r0, #12]
90023a8e:	6643      	str	r3, [r0, #100]	; 0x64
90023a90:	81c2      	strh	r2, [r0, #14]
90023a92:	6183      	str	r3, [r0, #24]
90023a94:	4619      	mov	r1, r3
90023a96:	2208      	movs	r2, #8
90023a98:	305c      	adds	r0, #92	; 0x5c
90023a9a:	f7ff f9cd 	bl	90022e38 <memset>
90023a9e:	4b05      	ldr	r3, [pc, #20]	; (90023ab4 <std+0x38>)
90023aa0:	6263      	str	r3, [r4, #36]	; 0x24
90023aa2:	4b05      	ldr	r3, [pc, #20]	; (90023ab8 <std+0x3c>)
90023aa4:	62a3      	str	r3, [r4, #40]	; 0x28
90023aa6:	4b05      	ldr	r3, [pc, #20]	; (90023abc <std+0x40>)
90023aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
90023aaa:	4b05      	ldr	r3, [pc, #20]	; (90023ac0 <std+0x44>)
90023aac:	6224      	str	r4, [r4, #32]
90023aae:	6323      	str	r3, [r4, #48]	; 0x30
90023ab0:	bd10      	pop	{r4, pc}
90023ab2:	bf00      	nop
90023ab4:	90023d49 	.word	0x90023d49
90023ab8:	90023d6b 	.word	0x90023d6b
90023abc:	90023da3 	.word	0x90023da3
90023ac0:	90023dc7 	.word	0x90023dc7

90023ac4 <_cleanup_r>:
90023ac4:	4901      	ldr	r1, [pc, #4]	; (90023acc <_cleanup_r+0x8>)
90023ac6:	f000 b8af 	b.w	90023c28 <_fwalk_reent>
90023aca:	bf00      	nop
90023acc:	90023a05 	.word	0x90023a05

90023ad0 <__sfmoreglue>:
90023ad0:	b570      	push	{r4, r5, r6, lr}
90023ad2:	2268      	movs	r2, #104	; 0x68
90023ad4:	1e4d      	subs	r5, r1, #1
90023ad6:	4355      	muls	r5, r2
90023ad8:	460e      	mov	r6, r1
90023ada:	f105 0174 	add.w	r1, r5, #116	; 0x74
90023ade:	f7ff fa1f 	bl	90022f20 <_malloc_r>
90023ae2:	4604      	mov	r4, r0
90023ae4:	b140      	cbz	r0, 90023af8 <__sfmoreglue+0x28>
90023ae6:	2100      	movs	r1, #0
90023ae8:	e9c0 1600 	strd	r1, r6, [r0]
90023aec:	300c      	adds	r0, #12
90023aee:	60a0      	str	r0, [r4, #8]
90023af0:	f105 0268 	add.w	r2, r5, #104	; 0x68
90023af4:	f7ff f9a0 	bl	90022e38 <memset>
90023af8:	4620      	mov	r0, r4
90023afa:	bd70      	pop	{r4, r5, r6, pc}

90023afc <__sfp_lock_acquire>:
90023afc:	4801      	ldr	r0, [pc, #4]	; (90023b04 <__sfp_lock_acquire+0x8>)
90023afe:	f7ff b97a 	b.w	90022df6 <__retarget_lock_acquire_recursive>
90023b02:	bf00      	nop
90023b04:	2402636a 	.word	0x2402636a

90023b08 <__sfp_lock_release>:
90023b08:	4801      	ldr	r0, [pc, #4]	; (90023b10 <__sfp_lock_release+0x8>)
90023b0a:	f7ff b976 	b.w	90022dfa <__retarget_lock_release_recursive>
90023b0e:	bf00      	nop
90023b10:	2402636a 	.word	0x2402636a

90023b14 <__sinit_lock_acquire>:
90023b14:	4801      	ldr	r0, [pc, #4]	; (90023b1c <__sinit_lock_acquire+0x8>)
90023b16:	f7ff b96e 	b.w	90022df6 <__retarget_lock_acquire_recursive>
90023b1a:	bf00      	nop
90023b1c:	2402636b 	.word	0x2402636b

90023b20 <__sinit_lock_release>:
90023b20:	4801      	ldr	r0, [pc, #4]	; (90023b28 <__sinit_lock_release+0x8>)
90023b22:	f7ff b96a 	b.w	90022dfa <__retarget_lock_release_recursive>
90023b26:	bf00      	nop
90023b28:	2402636b 	.word	0x2402636b

90023b2c <__sinit>:
90023b2c:	b510      	push	{r4, lr}
90023b2e:	4604      	mov	r4, r0
90023b30:	f7ff fff0 	bl	90023b14 <__sinit_lock_acquire>
90023b34:	69a3      	ldr	r3, [r4, #24]
90023b36:	b11b      	cbz	r3, 90023b40 <__sinit+0x14>
90023b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90023b3c:	f7ff bff0 	b.w	90023b20 <__sinit_lock_release>
90023b40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
90023b44:	6523      	str	r3, [r4, #80]	; 0x50
90023b46:	4b13      	ldr	r3, [pc, #76]	; (90023b94 <__sinit+0x68>)
90023b48:	4a13      	ldr	r2, [pc, #76]	; (90023b98 <__sinit+0x6c>)
90023b4a:	681b      	ldr	r3, [r3, #0]
90023b4c:	62a2      	str	r2, [r4, #40]	; 0x28
90023b4e:	42a3      	cmp	r3, r4
90023b50:	bf04      	itt	eq
90023b52:	2301      	moveq	r3, #1
90023b54:	61a3      	streq	r3, [r4, #24]
90023b56:	4620      	mov	r0, r4
90023b58:	f000 f820 	bl	90023b9c <__sfp>
90023b5c:	6060      	str	r0, [r4, #4]
90023b5e:	4620      	mov	r0, r4
90023b60:	f000 f81c 	bl	90023b9c <__sfp>
90023b64:	60a0      	str	r0, [r4, #8]
90023b66:	4620      	mov	r0, r4
90023b68:	f000 f818 	bl	90023b9c <__sfp>
90023b6c:	2200      	movs	r2, #0
90023b6e:	60e0      	str	r0, [r4, #12]
90023b70:	2104      	movs	r1, #4
90023b72:	6860      	ldr	r0, [r4, #4]
90023b74:	f7ff ff82 	bl	90023a7c <std>
90023b78:	68a0      	ldr	r0, [r4, #8]
90023b7a:	2201      	movs	r2, #1
90023b7c:	2109      	movs	r1, #9
90023b7e:	f7ff ff7d 	bl	90023a7c <std>
90023b82:	68e0      	ldr	r0, [r4, #12]
90023b84:	2202      	movs	r2, #2
90023b86:	2112      	movs	r1, #18
90023b88:	f7ff ff78 	bl	90023a7c <std>
90023b8c:	2301      	movs	r3, #1
90023b8e:	61a3      	str	r3, [r4, #24]
90023b90:	e7d2      	b.n	90023b38 <__sinit+0xc>
90023b92:	bf00      	nop
90023b94:	90026fe8 	.word	0x90026fe8
90023b98:	90023ac5 	.word	0x90023ac5

90023b9c <__sfp>:
90023b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023b9e:	4607      	mov	r7, r0
90023ba0:	f7ff ffac 	bl	90023afc <__sfp_lock_acquire>
90023ba4:	4b1e      	ldr	r3, [pc, #120]	; (90023c20 <__sfp+0x84>)
90023ba6:	681e      	ldr	r6, [r3, #0]
90023ba8:	69b3      	ldr	r3, [r6, #24]
90023baa:	b913      	cbnz	r3, 90023bb2 <__sfp+0x16>
90023bac:	4630      	mov	r0, r6
90023bae:	f7ff ffbd 	bl	90023b2c <__sinit>
90023bb2:	3648      	adds	r6, #72	; 0x48
90023bb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
90023bb8:	3b01      	subs	r3, #1
90023bba:	d503      	bpl.n	90023bc4 <__sfp+0x28>
90023bbc:	6833      	ldr	r3, [r6, #0]
90023bbe:	b30b      	cbz	r3, 90023c04 <__sfp+0x68>
90023bc0:	6836      	ldr	r6, [r6, #0]
90023bc2:	e7f7      	b.n	90023bb4 <__sfp+0x18>
90023bc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
90023bc8:	b9d5      	cbnz	r5, 90023c00 <__sfp+0x64>
90023bca:	4b16      	ldr	r3, [pc, #88]	; (90023c24 <__sfp+0x88>)
90023bcc:	60e3      	str	r3, [r4, #12]
90023bce:	f104 0058 	add.w	r0, r4, #88	; 0x58
90023bd2:	6665      	str	r5, [r4, #100]	; 0x64
90023bd4:	f7ff f90e 	bl	90022df4 <__retarget_lock_init_recursive>
90023bd8:	f7ff ff96 	bl	90023b08 <__sfp_lock_release>
90023bdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
90023be0:	e9c4 5504 	strd	r5, r5, [r4, #16]
90023be4:	6025      	str	r5, [r4, #0]
90023be6:	61a5      	str	r5, [r4, #24]
90023be8:	2208      	movs	r2, #8
90023bea:	4629      	mov	r1, r5
90023bec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
90023bf0:	f7ff f922 	bl	90022e38 <memset>
90023bf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90023bf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90023bfc:	4620      	mov	r0, r4
90023bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90023c00:	3468      	adds	r4, #104	; 0x68
90023c02:	e7d9      	b.n	90023bb8 <__sfp+0x1c>
90023c04:	2104      	movs	r1, #4
90023c06:	4638      	mov	r0, r7
90023c08:	f7ff ff62 	bl	90023ad0 <__sfmoreglue>
90023c0c:	4604      	mov	r4, r0
90023c0e:	6030      	str	r0, [r6, #0]
90023c10:	2800      	cmp	r0, #0
90023c12:	d1d5      	bne.n	90023bc0 <__sfp+0x24>
90023c14:	f7ff ff78 	bl	90023b08 <__sfp_lock_release>
90023c18:	230c      	movs	r3, #12
90023c1a:	603b      	str	r3, [r7, #0]
90023c1c:	e7ee      	b.n	90023bfc <__sfp+0x60>
90023c1e:	bf00      	nop
90023c20:	90026fe8 	.word	0x90026fe8
90023c24:	ffff0001 	.word	0xffff0001

90023c28 <_fwalk_reent>:
90023c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90023c2c:	4606      	mov	r6, r0
90023c2e:	4688      	mov	r8, r1
90023c30:	f100 0448 	add.w	r4, r0, #72	; 0x48
90023c34:	2700      	movs	r7, #0
90023c36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90023c3a:	f1b9 0901 	subs.w	r9, r9, #1
90023c3e:	d505      	bpl.n	90023c4c <_fwalk_reent+0x24>
90023c40:	6824      	ldr	r4, [r4, #0]
90023c42:	2c00      	cmp	r4, #0
90023c44:	d1f7      	bne.n	90023c36 <_fwalk_reent+0xe>
90023c46:	4638      	mov	r0, r7
90023c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90023c4c:	89ab      	ldrh	r3, [r5, #12]
90023c4e:	2b01      	cmp	r3, #1
90023c50:	d907      	bls.n	90023c62 <_fwalk_reent+0x3a>
90023c52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90023c56:	3301      	adds	r3, #1
90023c58:	d003      	beq.n	90023c62 <_fwalk_reent+0x3a>
90023c5a:	4629      	mov	r1, r5
90023c5c:	4630      	mov	r0, r6
90023c5e:	47c0      	blx	r8
90023c60:	4307      	orrs	r7, r0
90023c62:	3568      	adds	r5, #104	; 0x68
90023c64:	e7e9      	b.n	90023c3a <_fwalk_reent+0x12>

90023c66 <__swhatbuf_r>:
90023c66:	b570      	push	{r4, r5, r6, lr}
90023c68:	460e      	mov	r6, r1
90023c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023c6e:	2900      	cmp	r1, #0
90023c70:	b096      	sub	sp, #88	; 0x58
90023c72:	4614      	mov	r4, r2
90023c74:	461d      	mov	r5, r3
90023c76:	da08      	bge.n	90023c8a <__swhatbuf_r+0x24>
90023c78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
90023c7c:	2200      	movs	r2, #0
90023c7e:	602a      	str	r2, [r5, #0]
90023c80:	061a      	lsls	r2, r3, #24
90023c82:	d410      	bmi.n	90023ca6 <__swhatbuf_r+0x40>
90023c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
90023c88:	e00e      	b.n	90023ca8 <__swhatbuf_r+0x42>
90023c8a:	466a      	mov	r2, sp
90023c8c:	f000 f8c2 	bl	90023e14 <_fstat_r>
90023c90:	2800      	cmp	r0, #0
90023c92:	dbf1      	blt.n	90023c78 <__swhatbuf_r+0x12>
90023c94:	9a01      	ldr	r2, [sp, #4]
90023c96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
90023c9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
90023c9e:	425a      	negs	r2, r3
90023ca0:	415a      	adcs	r2, r3
90023ca2:	602a      	str	r2, [r5, #0]
90023ca4:	e7ee      	b.n	90023c84 <__swhatbuf_r+0x1e>
90023ca6:	2340      	movs	r3, #64	; 0x40
90023ca8:	2000      	movs	r0, #0
90023caa:	6023      	str	r3, [r4, #0]
90023cac:	b016      	add	sp, #88	; 0x58
90023cae:	bd70      	pop	{r4, r5, r6, pc}

90023cb0 <__smakebuf_r>:
90023cb0:	898b      	ldrh	r3, [r1, #12]
90023cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
90023cb4:	079d      	lsls	r5, r3, #30
90023cb6:	4606      	mov	r6, r0
90023cb8:	460c      	mov	r4, r1
90023cba:	d507      	bpl.n	90023ccc <__smakebuf_r+0x1c>
90023cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
90023cc0:	6023      	str	r3, [r4, #0]
90023cc2:	6123      	str	r3, [r4, #16]
90023cc4:	2301      	movs	r3, #1
90023cc6:	6163      	str	r3, [r4, #20]
90023cc8:	b002      	add	sp, #8
90023cca:	bd70      	pop	{r4, r5, r6, pc}
90023ccc:	ab01      	add	r3, sp, #4
90023cce:	466a      	mov	r2, sp
90023cd0:	f7ff ffc9 	bl	90023c66 <__swhatbuf_r>
90023cd4:	9900      	ldr	r1, [sp, #0]
90023cd6:	4605      	mov	r5, r0
90023cd8:	4630      	mov	r0, r6
90023cda:	f7ff f921 	bl	90022f20 <_malloc_r>
90023cde:	b948      	cbnz	r0, 90023cf4 <__smakebuf_r+0x44>
90023ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90023ce4:	059a      	lsls	r2, r3, #22
90023ce6:	d4ef      	bmi.n	90023cc8 <__smakebuf_r+0x18>
90023ce8:	f023 0303 	bic.w	r3, r3, #3
90023cec:	f043 0302 	orr.w	r3, r3, #2
90023cf0:	81a3      	strh	r3, [r4, #12]
90023cf2:	e7e3      	b.n	90023cbc <__smakebuf_r+0xc>
90023cf4:	4b0d      	ldr	r3, [pc, #52]	; (90023d2c <__smakebuf_r+0x7c>)
90023cf6:	62b3      	str	r3, [r6, #40]	; 0x28
90023cf8:	89a3      	ldrh	r3, [r4, #12]
90023cfa:	6020      	str	r0, [r4, #0]
90023cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90023d00:	81a3      	strh	r3, [r4, #12]
90023d02:	9b00      	ldr	r3, [sp, #0]
90023d04:	6163      	str	r3, [r4, #20]
90023d06:	9b01      	ldr	r3, [sp, #4]
90023d08:	6120      	str	r0, [r4, #16]
90023d0a:	b15b      	cbz	r3, 90023d24 <__smakebuf_r+0x74>
90023d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90023d10:	4630      	mov	r0, r6
90023d12:	f000 f891 	bl	90023e38 <_isatty_r>
90023d16:	b128      	cbz	r0, 90023d24 <__smakebuf_r+0x74>
90023d18:	89a3      	ldrh	r3, [r4, #12]
90023d1a:	f023 0303 	bic.w	r3, r3, #3
90023d1e:	f043 0301 	orr.w	r3, r3, #1
90023d22:	81a3      	strh	r3, [r4, #12]
90023d24:	89a0      	ldrh	r0, [r4, #12]
90023d26:	4305      	orrs	r5, r0
90023d28:	81a5      	strh	r5, [r4, #12]
90023d2a:	e7cd      	b.n	90023cc8 <__smakebuf_r+0x18>
90023d2c:	90023ac5 	.word	0x90023ac5

90023d30 <__malloc_lock>:
90023d30:	4801      	ldr	r0, [pc, #4]	; (90023d38 <__malloc_lock+0x8>)
90023d32:	f7ff b860 	b.w	90022df6 <__retarget_lock_acquire_recursive>
90023d36:	bf00      	nop
90023d38:	24026369 	.word	0x24026369

90023d3c <__malloc_unlock>:
90023d3c:	4801      	ldr	r0, [pc, #4]	; (90023d44 <__malloc_unlock+0x8>)
90023d3e:	f7ff b85c 	b.w	90022dfa <__retarget_lock_release_recursive>
90023d42:	bf00      	nop
90023d44:	24026369 	.word	0x24026369

90023d48 <__sread>:
90023d48:	b510      	push	{r4, lr}
90023d4a:	460c      	mov	r4, r1
90023d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023d50:	f000 f894 	bl	90023e7c <_read_r>
90023d54:	2800      	cmp	r0, #0
90023d56:	bfab      	itete	ge
90023d58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90023d5a:	89a3      	ldrhlt	r3, [r4, #12]
90023d5c:	181b      	addge	r3, r3, r0
90023d5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
90023d62:	bfac      	ite	ge
90023d64:	6563      	strge	r3, [r4, #84]	; 0x54
90023d66:	81a3      	strhlt	r3, [r4, #12]
90023d68:	bd10      	pop	{r4, pc}

90023d6a <__swrite>:
90023d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90023d6e:	461f      	mov	r7, r3
90023d70:	898b      	ldrh	r3, [r1, #12]
90023d72:	05db      	lsls	r3, r3, #23
90023d74:	4605      	mov	r5, r0
90023d76:	460c      	mov	r4, r1
90023d78:	4616      	mov	r6, r2
90023d7a:	d505      	bpl.n	90023d88 <__swrite+0x1e>
90023d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023d80:	2302      	movs	r3, #2
90023d82:	2200      	movs	r2, #0
90023d84:	f000 f868 	bl	90023e58 <_lseek_r>
90023d88:	89a3      	ldrh	r3, [r4, #12]
90023d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90023d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90023d92:	81a3      	strh	r3, [r4, #12]
90023d94:	4632      	mov	r2, r6
90023d96:	463b      	mov	r3, r7
90023d98:	4628      	mov	r0, r5
90023d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90023d9e:	f000 b817 	b.w	90023dd0 <_write_r>

90023da2 <__sseek>:
90023da2:	b510      	push	{r4, lr}
90023da4:	460c      	mov	r4, r1
90023da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023daa:	f000 f855 	bl	90023e58 <_lseek_r>
90023dae:	1c43      	adds	r3, r0, #1
90023db0:	89a3      	ldrh	r3, [r4, #12]
90023db2:	bf15      	itete	ne
90023db4:	6560      	strne	r0, [r4, #84]	; 0x54
90023db6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90023dba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
90023dbe:	81a3      	strheq	r3, [r4, #12]
90023dc0:	bf18      	it	ne
90023dc2:	81a3      	strhne	r3, [r4, #12]
90023dc4:	bd10      	pop	{r4, pc}

90023dc6 <__sclose>:
90023dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023dca:	f000 b813 	b.w	90023df4 <_close_r>
	...

90023dd0 <_write_r>:
90023dd0:	b538      	push	{r3, r4, r5, lr}
90023dd2:	4d07      	ldr	r5, [pc, #28]	; (90023df0 <_write_r+0x20>)
90023dd4:	4604      	mov	r4, r0
90023dd6:	4608      	mov	r0, r1
90023dd8:	4611      	mov	r1, r2
90023dda:	2200      	movs	r2, #0
90023ddc:	602a      	str	r2, [r5, #0]
90023dde:	461a      	mov	r2, r3
90023de0:	f7e0 fe98 	bl	90004b14 <_write>
90023de4:	1c43      	adds	r3, r0, #1
90023de6:	d102      	bne.n	90023dee <_write_r+0x1e>
90023de8:	682b      	ldr	r3, [r5, #0]
90023dea:	b103      	cbz	r3, 90023dee <_write_r+0x1e>
90023dec:	6023      	str	r3, [r4, #0]
90023dee:	bd38      	pop	{r3, r4, r5, pc}
90023df0:	2402650c 	.word	0x2402650c

90023df4 <_close_r>:
90023df4:	b538      	push	{r3, r4, r5, lr}
90023df6:	4d06      	ldr	r5, [pc, #24]	; (90023e10 <_close_r+0x1c>)
90023df8:	2300      	movs	r3, #0
90023dfa:	4604      	mov	r4, r0
90023dfc:	4608      	mov	r0, r1
90023dfe:	602b      	str	r3, [r5, #0]
90023e00:	f7e0 fe96 	bl	90004b30 <_close>
90023e04:	1c43      	adds	r3, r0, #1
90023e06:	d102      	bne.n	90023e0e <_close_r+0x1a>
90023e08:	682b      	ldr	r3, [r5, #0]
90023e0a:	b103      	cbz	r3, 90023e0e <_close_r+0x1a>
90023e0c:	6023      	str	r3, [r4, #0]
90023e0e:	bd38      	pop	{r3, r4, r5, pc}
90023e10:	2402650c 	.word	0x2402650c

90023e14 <_fstat_r>:
90023e14:	b538      	push	{r3, r4, r5, lr}
90023e16:	4d07      	ldr	r5, [pc, #28]	; (90023e34 <_fstat_r+0x20>)
90023e18:	2300      	movs	r3, #0
90023e1a:	4604      	mov	r4, r0
90023e1c:	4608      	mov	r0, r1
90023e1e:	4611      	mov	r1, r2
90023e20:	602b      	str	r3, [r5, #0]
90023e22:	f7e0 fe89 	bl	90004b38 <_fstat>
90023e26:	1c43      	adds	r3, r0, #1
90023e28:	d102      	bne.n	90023e30 <_fstat_r+0x1c>
90023e2a:	682b      	ldr	r3, [r5, #0]
90023e2c:	b103      	cbz	r3, 90023e30 <_fstat_r+0x1c>
90023e2e:	6023      	str	r3, [r4, #0]
90023e30:	bd38      	pop	{r3, r4, r5, pc}
90023e32:	bf00      	nop
90023e34:	2402650c 	.word	0x2402650c

90023e38 <_isatty_r>:
90023e38:	b538      	push	{r3, r4, r5, lr}
90023e3a:	4d06      	ldr	r5, [pc, #24]	; (90023e54 <_isatty_r+0x1c>)
90023e3c:	2300      	movs	r3, #0
90023e3e:	4604      	mov	r4, r0
90023e40:	4608      	mov	r0, r1
90023e42:	602b      	str	r3, [r5, #0]
90023e44:	f7e0 fe7e 	bl	90004b44 <_isatty>
90023e48:	1c43      	adds	r3, r0, #1
90023e4a:	d102      	bne.n	90023e52 <_isatty_r+0x1a>
90023e4c:	682b      	ldr	r3, [r5, #0]
90023e4e:	b103      	cbz	r3, 90023e52 <_isatty_r+0x1a>
90023e50:	6023      	str	r3, [r4, #0]
90023e52:	bd38      	pop	{r3, r4, r5, pc}
90023e54:	2402650c 	.word	0x2402650c

90023e58 <_lseek_r>:
90023e58:	b538      	push	{r3, r4, r5, lr}
90023e5a:	4d07      	ldr	r5, [pc, #28]	; (90023e78 <_lseek_r+0x20>)
90023e5c:	4604      	mov	r4, r0
90023e5e:	4608      	mov	r0, r1
90023e60:	4611      	mov	r1, r2
90023e62:	2200      	movs	r2, #0
90023e64:	602a      	str	r2, [r5, #0]
90023e66:	461a      	mov	r2, r3
90023e68:	f7e0 fe6e 	bl	90004b48 <_lseek>
90023e6c:	1c43      	adds	r3, r0, #1
90023e6e:	d102      	bne.n	90023e76 <_lseek_r+0x1e>
90023e70:	682b      	ldr	r3, [r5, #0]
90023e72:	b103      	cbz	r3, 90023e76 <_lseek_r+0x1e>
90023e74:	6023      	str	r3, [r4, #0]
90023e76:	bd38      	pop	{r3, r4, r5, pc}
90023e78:	2402650c 	.word	0x2402650c

90023e7c <_read_r>:
90023e7c:	b538      	push	{r3, r4, r5, lr}
90023e7e:	4d07      	ldr	r5, [pc, #28]	; (90023e9c <_read_r+0x20>)
90023e80:	4604      	mov	r4, r0
90023e82:	4608      	mov	r0, r1
90023e84:	4611      	mov	r1, r2
90023e86:	2200      	movs	r2, #0
90023e88:	602a      	str	r2, [r5, #0]
90023e8a:	461a      	mov	r2, r3
90023e8c:	f7e0 fe34 	bl	90004af8 <_read>
90023e90:	1c43      	adds	r3, r0, #1
90023e92:	d102      	bne.n	90023e9a <_read_r+0x1e>
90023e94:	682b      	ldr	r3, [r5, #0]
90023e96:	b103      	cbz	r3, 90023e9a <_read_r+0x1e>
90023e98:	6023      	str	r3, [r4, #0]
90023e9a:	bd38      	pop	{r3, r4, r5, pc}
90023e9c:	2402650c 	.word	0x2402650c

90023ea0 <_init>:
90023ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023ea2:	bf00      	nop
90023ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
90023ea6:	bc08      	pop	{r3}
90023ea8:	469e      	mov	lr, r3
90023eaa:	4770      	bx	lr

90023eac <_fini>:
90023eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023eae:	bf00      	nop
90023eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
90023eb2:	bc08      	pop	{r3}
90023eb4:	469e      	mov	lr, r3
90023eb6:	4770      	bx	lr
